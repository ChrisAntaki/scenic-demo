{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/css/components/dialog.css.js","build/css/ui/ui.css.js","node_modules/promise-pjs/promise.js","node_modules/web-activities/activity-ports.js","src/api/client-event-manager-api.js","src/api/deferred-account-creation.js","src/api/entitlements.js","src/api/logger-api.js","src/api/offer.js","src/api/propensity-api.js","src/api/subscribe-response.js","src/api/subscriptions.js","src/api/user-data.js","src/components/activities.js","src/components/dialog-manager.js","src/components/dialog.js","src/components/friendly-iframe.js","src/components/graypane.js","src/components/view.js","src/main-babel.js","src/main.js","src/model/doc.js","src/model/page-config-resolver.js","src/model/page-config.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/object-values.js","src/polyfills/promise.js","src/proto/api_messages.js","src/runtime/analytics-service.js","src/runtime/button-api.js","src/runtime/callbacks.js","src/runtime/client-event-manager.js","src/runtime/contributions-flow.js","src/runtime/deferred-account-flow.js","src/runtime/deps.js","src/runtime/entitlements-manager.js","src/runtime/event-type-mapping.js","src/runtime/experiment-flags.js","src/runtime/experiments.js","src/runtime/fetcher.js","src/runtime/jserror.js","src/runtime/link-accounts-flow.js","src/runtime/logger.js","src/runtime/login-notification-api.js","src/runtime/login-prompt-api.js","src/runtime/offers-api.js","src/runtime/offers-flow.js","src/runtime/pay-client.js","src/runtime/pay-flow.js","src/runtime/propensity-server.js","src/runtime/propensity.js","src/runtime/runtime.js","src/runtime/services.js","src/runtime/smart-button-api.js","src/runtime/storage.js","src/runtime/wait-for-subscription-lookup-api.js","src/ui/activity-iframe-view.js","src/ui/loading-view.js","src/ui/toast.js","src/utils/activity-utils.js","src/utils/animation.js","src/utils/bytes.js","src/utils/document-ready.js","src/utils/dom.js","src/utils/errors.js","src/utils/i18n.js","src/utils/json.js","src/utils/jwt.js","src/utils/log.js","src/utils/object.js","src/utils/preconnect.js","src/utils/random.js","src/utils/string.js","src/utils/style.js","src/utils/types.js","src/utils/url.js","src/utils/xhr.js","third_party/babel/custom-babel-helpers.js","third_party/gpay/src/constants.js","third_party/gpay/src/element_injector.js","third_party/gpay/src/graypane.js","third_party/gpay/src/pay_frame_helper.js","third_party/gpay/src/payjs_async.js","third_party/gpay/src/payments_client_delegate_interface.js","third_party/gpay/src/payments_request_delegate.js","third_party/gpay/src/payments_web_activity_delegate.js","third_party/gpay/src/post_message_service.js","third_party/gpay/src/upi_handler.js","third_party/gpay/src/utils.js","third_party/gpay/src/validator.js","third_party/gpay/third_party/random_uuid/Random.uuid.js"],"names":[],"mappings":"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","file":"subscriptions.max.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const CSS = \".swg-dialog,.swg-toast{box-sizing:border-box;background-color:#fff!important}.swg-toast{position:fixed!important;bottom:0!important;max-height:46px!important;z-index:2147483647!important;border:none!important}@media (max-height:640px), (max-width:640px){.swg-dialog,.swg-toast{width:480px!important;left:-240px!important;margin-left:50vw!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}@media (min-width:640px) and (min-height:640px){.swg-dialog{width:630px!important;left:-315px!important;margin-left:50vw!important;background-color:transparent!important;border:none!important}.swg-toast{left:0!important}}@media (max-width:480px){.swg-dialog,.swg-toast{width:100%!important;left:0!important;right:0!important;margin-left:0!important}}\\n/*# sourceURL=/./src/components/dialog.css*/\";","export const CSS = \"body{padding:0;margin:0}swg-container,swg-loading,swg-loading-animate,swg-loading-image{display:block}swg-loading-container{width:100%!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-align:center!important;align-items:center!important;-ms-flex-pack:center!important;justify-content:center!important;min-height:148px!important;height:100%!important;bottom:0!important;margin-top:5px!important;z-index:2147483647!important}@media (min-height:630px), (min-width:630px){swg-loading-container{width:560px!important;margin-left:35px!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;background-color:#fff!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}swg-loading{z-index:2147483647!important;width:36px;height:36px;overflow:hidden;animation:mspin-rotate 1568.63ms linear infinite}swg-loading-animate{animation:mspin-revrot 5332ms steps(4) infinite}swg-loading-image{background-image:url($assets$/loader.svg);background-size:100%;width:11664px;height:36px;animation:swg-loading-film 5332ms steps(324) infinite}@keyframes swg-loading-film{0%{transform:translateX(0)}to{transform:translateX(-11664px)}}@keyframes mspin-rotate{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes mspin-revrot{0%{transform:rotate(0deg)}to{transform:rotate(-1turn)}}\\n/*# sourceURL=/./src/ui/ui.css*/\";","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * @license\n * Copyright 2017 The Web Activities Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n /** Version: 1.24 */\n'use strict';\n\n/*eslint no-unused-vars: 0*/\n\n\n/**\n * @enum {string}\n */\nconst ActivityMode = {\n  IFRAME: 'iframe',\n  POPUP: 'popup',\n  REDIRECT: 'redirect',\n};\n\n\n/**\n * The result code used for `ActivityResult`.\n * @enum {string}\n */\nconst ActivityResultCode = {\n  OK: 'ok',\n  CANCELED: 'canceled',\n  FAILED: 'failed',\n};\n\n\n/**\n * The result of an activity. The activity implementation returns this object\n * for a successful result, a cancelation or a failure.\n * @struct\n */\nclass ActivityResult {\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {!ActivityMode} mode\n   * @param {string} origin\n   * @param {boolean} originVerified\n   * @param {boolean} secureChannel\n   */\n  constructor(code, data, mode, origin, originVerified, secureChannel) {\n    /** @const {!ActivityResultCode} */\n    this.code = code;\n    /** @const {*} */\n    this.data = code == ActivityResultCode.OK ? data : null;\n    /** @const {!ActivityMode} */\n    this.mode = mode;\n    /** @const {string} */\n    this.origin = origin;\n    /** @const {boolean} */\n    this.originVerified = originVerified;\n    /** @const {boolean} */\n    this.secureChannel = secureChannel;\n    /** @const {boolean} */\n    this.ok = code == ActivityResultCode.OK;\n    /** @const {?Error} */\n    this.error = code == ActivityResultCode.FAILED ?\n        new Error(String(data) || '') :\n        null;\n  }\n}\n\n\n/**\n * The activity request that different types of hosts can be started with.\n * @typedef {{\n *   requestId: string,\n *   returnUrl: string,\n *   args: ?Object,\n *   origin: (string|undefined),\n *   originVerified: (boolean|undefined),\n * }}\n */\nlet ActivityRequest;\n\n\n/**\n * The activity \"open\" options used for popups and redirects.\n *\n * - returnUrl: override the return URL. By default, the current URL will be\n *   used.\n * - skipRequestInUrl: removes the activity request from the URL, in case\n *   redirect is used. By default, the activity request is appended to the\n *   activity URL. This option can be used if the activity request is passed\n *   to the activity by some alternative means.\n * - disableRedirectFallback: disallows popup fallback to redirect. By default\n *   the redirect fallback is allowed. This option has to be used very carefully\n *   because there are many user agents that may fail to open a popup and it\n *   won't be always possible for the opener window to even be aware of such\n *   failures.\n *\n * @typedef {{\n *   returnUrl: (string|undefined),\n *   skipRequestInUrl: (boolean|undefined),\n *   disableRedirectFallback: (boolean|undefined),\n *   width: (number|undefined),\n *   height: (number|undefined),\n * }}\n */\nlet ActivityOpenOptions;\n\n\n/**\n * Activity client-side binding. The port provides limited ways to communicate\n * with the activity and receive signals and results from it. Not every type\n * of activity exposes a port.\n *\n * @interface\n */\nclass ActivityPort {\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!ActivityResult>}\n   */\n  acceptResult() {}\n}\n\n\n/**\n * Activity client-side binding for messaging.\n *\n * Whether the host can or cannot receive a message depends on the type of\n * host and its state. Ensure that the code has an alternative path if\n * messaging is not available.\n *\n * @interface\n */\nclass ActivityMessagingPort {\n\n  /**\n   * Returns the target window where host is loaded. May be unavailable.\n   * @return {?Window}\n   */\n  getTargetWin() {}\n\n  /**\n   * Sends a message to the host.\n   * @param {!Object} payload\n   */\n  message(payload) {}\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * @param {function(!Object)} callback\n   */\n  onMessage(callback) {}\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  messageChannel(opt_name) {}\n}\n\n\n\n/** DOMException.ABORT_ERR name */\nconst ABORT_ERR_NAME = 'AbortError';\n\n/** DOMException.ABORT_ERR = 20 */\nconst ABORT_ERR_CODE = 20;\n\n/** @type {?HTMLAnchorElement} */\nlet aResolver;\n\n\n/**\n * @param {string} urlString\n * @return {!HTMLAnchorElement}\n */\nfunction parseUrl(urlString) {\n  if (!aResolver) {\n    aResolver = /** @type {!HTMLAnchorElement} */ (document.createElement('a'));\n  }\n  aResolver.href = urlString;\n  return /** @type {!HTMLAnchorElement} */ (aResolver);\n}\n\n\n/**\n * @param {!Location|!URL|!HTMLAnchorElement} loc\n * @return {string}\n */\nfunction getOrigin(loc) {\n  if (loc.origin) {\n    return loc.origin;\n  }\n  // Make sure that the origin is normalized. Specifically on IE, host sometimes\n  // includes the default port, which is not per standard.\n  const protocol = loc.protocol;\n  let host = loc.host;\n  if (protocol == 'https:' && host.indexOf(':443') == host.length - 4) {\n    host = host.replace(':443', '');\n  } else if (protocol == 'http:' && host.indexOf(':80') == host.length - 3) {\n    host = host.replace(':80', '');\n  }\n  return protocol + '//' + host;\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction getOriginFromUrl(urlString) {\n  return getOrigin(parseUrl(urlString));\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction removeFragment(urlString) {\n  const index = urlString.indexOf('#');\n  if (index == -1) {\n    return urlString;\n  }\n  return urlString.substring(0, index);\n}\n\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nfunction parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n      .split('&')\n      .reduce((params, param) => {\n        const item = param.split('=');\n        const key = decodeURIComponent(item[0] || '');\n        const value = decodeURIComponent(item[1] || '');\n        if (key) {\n          params[key] = value;\n        }\n        return params;\n      }, {});\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to get from the query string.\n * @return {?string}\n */\nfunction getQueryParam(queryString, param) {\n  return parseQueryString(queryString)[param];\n}\n\n\n/**\n * Add a query-like parameter to the fragment string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nfunction addFragmentParam(url, param, value) {\n  return url +\n      (url.indexOf('#') == -1 ? '#' : '&') +\n      encodeURIComponent(param) + '=' + encodeURIComponent(value);\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to remove from the query string.\n * @return {?string}\n */\nfunction removeQueryParam(queryString, param) {\n  if (!queryString) {\n    return queryString;\n  }\n  const search = encodeURIComponent(param) + '=';\n  let index = -1;\n  do {\n    index = queryString.indexOf(search, index);\n    if (index != -1) {\n      const prev = index > 0 ? queryString.substring(index - 1, index) : '';\n      if (prev == '' || prev == '?' || prev == '#' || prev == '&') {\n        let end = queryString.indexOf('&', index + 1);\n        if (end == -1) {\n          end = queryString.length;\n        }\n        queryString =\n            queryString.substring(0, index) +\n            queryString.substring(end + 1);\n      } else {\n        index++;\n      }\n    }\n  } while (index != -1 && index < queryString.length);\n  return queryString;\n}\n\n\n/**\n * @param {!ActivityRequest} request\n * @return {string}\n */\nfunction serializeRequest(request) {\n  const map = {\n    'requestId': request.requestId,\n    'returnUrl': request.returnUrl,\n    'args': request.args,\n  };\n  if (request.origin !== undefined) {\n    map['origin'] = request.origin;\n  }\n  if (request.originVerified !== undefined) {\n    map['originVerified'] = request.originVerified;\n  }\n  return JSON.stringify(map);\n}\n\n\n/**\n * @param {*} error\n * @return {boolean}\n */\nfunction isAbortError(error) {\n  if (!error || typeof error != 'object') {\n    return false;\n  }\n  return (error['name'] === ABORT_ERR_NAME);\n}\n\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} opt_message\n * @return {!DOMException}\n */\nfunction createAbortError(win, opt_message) {\n  const message = 'AbortError' + (opt_message ? ': ' + opt_message : '');\n  let error = null;\n  if (typeof win['DOMException'] == 'function') {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string, string)} */ (\n        win['DOMException']);\n    try {\n      error = new constr(message, ABORT_ERR_NAME);\n    } catch (e) {\n      // Ignore. In particular, `new DOMException()` fails in Edge.\n    }\n  }\n  if (!error) {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string)} */ (\n        Error);\n    error = new constr(message);\n    error.name = ABORT_ERR_NAME;\n    error.code = ABORT_ERR_CODE;\n  }\n  return error;\n}\n\n\n/**\n * Resolves the activity result as a promise:\n *  - `OK` result is yielded as the promise's payload;\n *  - `CANCEL` result is rejected with the `AbortError`;\n *  - `FAILED` result is rejected with the embedded error.\n *\n * @param {!Window} win\n * @param {!ActivityResult} result\n * @param {function((!ActivityResult|!Promise))} resolver\n */\nfunction resolveResult(win, result, resolver) {\n  if (result.ok) {\n    resolver(result);\n  } else {\n    const error = result.error || createAbortError(win);\n    error.activityResult = result;\n    resolver(Promise.reject(error));\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIeBrowser(win) {\n  // MSIE and Trident are typical user agents for IE browsers.\n  const nav = win.navigator;\n  return /Trident|MSIE|IEMobile/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Error} e\n */\nfunction throwAsync(e) {\n  setTimeout(() => {throw e;});\n}\n\n\n/**\n * Polyfill of the `Node.isConnected` API. See\n * https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected.\n * @param {!Node} node\n * @return {boolean}\n */\nfunction isNodeConnected(node) {\n  // Ensure that node is attached if specified. This check uses a new and\n  // fast `isConnected` API and thus only checked on platforms that have it.\n  // See https://www.chromestatus.com/feature/5676110549352448.\n  if ('isConnected' in node) {\n    return node['isConnected'];\n  }\n  // Polyfill.\n  const root = node.ownerDocument && node.ownerDocument.documentElement;\n  return (root && root.contains(node)) || false;\n}\n\n\n\nconst SENTINEL = '__ACTIVITIES__';\n\n\n/**\n * The messenger helper for activity's port and host.\n */\nclass Messenger {\n\n  /**\n   * @param {!Window} win\n   * @param {!Window|function():?Window} targetOrCallback\n   * @param {?string} targetOrigin\n   * @param {boolean} requireTarget\n   */\n  constructor(win, targetOrCallback, targetOrigin, requireTarget) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Window|function():?Window} */\n    this.targetOrCallback_ = targetOrCallback;\n\n    /**\n     * May start as unknown (`null`) until received in the first message.\n     * @private {?string}\n     */\n    this.targetOrigin_ = targetOrigin;\n\n    /** @private @const {boolean} */\n    this.requireTarget_ = requireTarget;\n\n    /** @private {?Window} */\n    this.target_ = null;\n\n    /** @private {boolean} */\n    this.acceptsChannel_ = false;\n\n    /** @private {?MessagePort} */\n    this.port_ = null;\n\n    /** @private {?function(string, ?Object)} */\n    this.onCommand_ = null;\n\n    /** @private {?function(!Object)} */\n    this.onCustomMessage_ = null;\n\n    /**\n     * @private {?Object<string, !ChannelHolder>}\n     */\n    this.channels_ = null;\n\n    /** @private @const */\n    this.boundHandleEvent_ = this.handleEvent_.bind(this);\n  }\n\n  /**\n   * Connect the port to the host or vice versa.\n   * @param {function(string, ?Object)} onCommand\n   */\n  connect(onCommand) {\n    if (this.onCommand_) {\n      throw new Error('already connected');\n    }\n    this.onCommand_ = onCommand;\n    this.win_.addEventListener('message', this.boundHandleEvent_);\n  }\n\n  /**\n   * Disconnect messenger.\n   */\n  disconnect() {\n    if (this.onCommand_) {\n      this.onCommand_ = null;\n      if (this.port_) {\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.win_.removeEventListener('message', this.boundHandleEvent_);\n      if (this.channels_) {\n        for (const k in this.channels_) {\n          const channelObj = this.channels_[k];\n          if (channelObj.port1) {\n            closePort(channelObj.port1);\n          }\n          if (channelObj.port2) {\n            closePort(channelObj.port2);\n          }\n        }\n        this.channels_ = null;\n      }\n    }\n  }\n\n  /**\n   * Returns whether the messenger has been connected already.\n   * @return {boolean}\n   */\n  isConnected() {\n    return this.targetOrigin_ != null;\n  }\n\n  /**\n   * Returns the messaging target. Only available when connection has been\n   * establihsed.\n   * @return {!Window}\n   */\n  getTarget() {\n    const target = this.getOptionalTarget_();\n    if (!target) {\n      throw new Error('not connected');\n    }\n    return target;\n  }\n\n  /**\n   * @return {?Window}\n   * @private\n   */\n  getOptionalTarget_() {\n    if (this.onCommand_ && !this.target_) {\n      if (typeof this.targetOrCallback_ == 'function') {\n        this.target_ = this.targetOrCallback_();\n      } else {\n        this.target_ = /** @type {!Window} */ (this.targetOrCallback_);\n      }\n    }\n    return this.target_;\n  }\n\n  /**\n   * Returns the messaging origin. Only available when connection has been\n   * establihsed.\n   * @return {string}\n   */\n  getTargetOrigin() {\n    if (this.targetOrigin_ == null) {\n      throw new Error('not connected');\n    }\n    return this.targetOrigin_;\n  }\n\n  /**\n   * The host sends this message to the client to indicate that it's ready to\n   * start communicating. The client is expected to respond back with the\n   * \"start\" command. See `sendStartCommand` method.\n   */\n  sendConnectCommand() {\n    // TODO(dvoytenko): MessageChannel is critically necessary for IE/Edge,\n    // since window messaging doesn't always work. It's also preferred as an API\n    // for other browsers: it's newer, cleaner and arguably more secure.\n    // Unfortunately, browsers currently do not propagate user gestures via\n    // MessageChannel, only via window messaging. This should be re-enabled\n    // once browsers fix user gesture propagation.\n    // See:\n    // Safari: https://bugs.webkit.org/show_bug.cgi?id=186593\n    // Chrome: https://bugs.chromium.org/p/chromium/issues/detail?id=851493\n    // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1469422\n    const acceptsChannel = isIeBrowser(this.win_) || isEdgeBrowser(this.win_);\n    this.sendCommand('connect', {'acceptsChannel': acceptsChannel});\n  }\n\n  /**\n   * The client sends this message to the host upon receiving the \"connect\"\n   * message to start the main communication channel. As a payload, the message\n   * will contain the provided start arguments.\n   * @param {?Object} args\n   */\n  sendStartCommand(args) {\n    let channel = null;\n    if (this.acceptsChannel_ && typeof this.win_.MessageChannel == 'function') {\n      channel = new this.win_.MessageChannel();\n    }\n    if (channel) {\n      this.sendCommand('start', args, [channel.port2]);\n      // It's critical to switch to port messaging only after \"start\" has been\n      // sent. Otherwise, it won't be delivered.\n      this.switchToChannel_(channel.port1);\n    } else {\n      this.sendCommand('start', args);\n    }\n  }\n\n  /**\n   * Sends the specified command from the port to the host or vice versa.\n   * @param {string} cmd\n   * @param {?Object=} opt_payload\n   * @param {?Array=} opt_transfer\n   */\n  sendCommand(cmd, opt_payload, opt_transfer) {\n    const data = {\n      'sentinel': SENTINEL,\n      'cmd': cmd,\n      'payload': opt_payload || null,\n    };\n    if (this.port_) {\n      this.port_.postMessage(data, opt_transfer || undefined);\n    } else {\n      const target = this.getTarget();\n      // Only \"connect\" command is allowed to use `targetOrigin == '*'`\n      const targetOrigin =\n          cmd == 'connect' ?\n          (this.targetOrigin_ != null ? this.targetOrigin_ : '*') :\n          this.getTargetOrigin();\n      target.postMessage(data, targetOrigin, opt_transfer || undefined);\n    }\n  }\n\n  /**\n   * Sends a message to the client.\n   * @param {!Object} payload\n   */\n  customMessage(payload) {\n    this.sendCommand('msg', payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the client.\n   * @param {function(!Object)} callback\n   */\n  onCustomMessage(callback) {\n    this.onCustomMessage_ = callback;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  startChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      const channel = new this.win_.MessageChannel();\n      channelObj.port1 = channel.port1;\n      channelObj.port2 = channel.port2;\n      channelObj.resolver(channelObj.port1);\n    }\n    if (channelObj.port2) {\n      // Not yet sent.\n      this.sendCommand('cnset', {'name': name}, [channelObj.port2]);\n      channelObj.port2 = null;\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  askChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      this.sendCommand('cnget', {'name': name});\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string} name\n   * @param {!MessagePort} port\n   * @private\n   */\n  receiveChannel_(name, port) {\n    const channelObj = this.getChannelObj_(name);\n    channelObj.port1 = port;\n    channelObj.resolver(port);\n  }\n\n  /**\n   * @param {string} name\n   * @return {!ChannelHolder}\n   */\n  getChannelObj_(name) {\n    if (!this.channels_) {\n      this.channels_ = {};\n    }\n    let channelObj = this.channels_[name];\n    if (!channelObj) {\n      let resolver;\n      const promise = new Promise(resolve => {\n        resolver = resolve;\n      });\n      channelObj = {\n        port1: null,\n        port2: null,\n        resolver,\n        promise,\n      };\n      this.channels_[name] = channelObj;\n    }\n    return channelObj;\n  }\n\n  /**\n   * @param {!MessagePort} port\n   * @private\n   */\n  switchToChannel_(port) {\n    if (this.port_) {\n      closePort(this.port_);\n    }\n    this.port_ = port;\n    this.port_.onmessage = event => {\n      const data = event.data;\n      const cmd = data && data['cmd'];\n      const payload = data && data['payload'] || null;\n      if (cmd) {\n        this.handleCommand_(cmd, payload, event);\n      }\n    };\n    // Even though all messaging will switch to ports, the window-based message\n    // listener will be preserved just in case the host is refreshed and needs\n    // another connection.\n  }\n\n  /**\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleEvent_(event) {\n    if (this.requireTarget_ && this.getOptionalTarget_() != event.source) {\n      // When target is required, confirm it against the event.source. This\n      // is normally only needed for ports where a single window can include\n      // multiple iframes to match the event to a specific iframe. Otherwise,\n      // the origin checks below are sufficient.\n      return;\n    }\n    const data = event.data;\n    if (!data || data['sentinel'] != SENTINEL) {\n      return;\n    }\n    const cmd = data['cmd'];\n    if (this.port_ && cmd != 'connect' && cmd != 'start') {\n      // Messaging channel has already taken over. However, the \"connect\" and\n      // \"start\" commands are allowed to proceed in case re-connection is\n      // requested.\n      return;\n    }\n    const origin = /** @type {string} */ (event.origin);\n    const payload = data['payload'] || null;\n    if (this.targetOrigin_ == null && cmd == 'start') {\n      this.targetOrigin_ = origin;\n    }\n    if (this.targetOrigin_ == null && event.source) {\n      if (this.getOptionalTarget_() == event.source) {\n        this.targetOrigin_ = origin;\n      }\n    }\n    // Notice that event.source may differ from the target because of\n    // friendly-iframe intermediaries.\n    if (origin != this.targetOrigin_) {\n      return;\n    }\n    this.handleCommand_(cmd, payload, event);\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleCommand_(cmd, payload, event) {\n    if (cmd == 'connect') {\n      if (this.port_) {\n        // In case the port has already been open - close it to reopen it\n        // again later.\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.acceptsChannel_ = payload && payload['acceptsChannel'] || false;\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'start') {\n      const port = event.ports && event.ports[0];\n      if (port) {\n        this.switchToChannel_(port);\n      }\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'msg') {\n      if (this.onCustomMessage_ != null && payload != null) {\n        this.onCustomMessage_(payload);\n      }\n    } else if (cmd == 'cnget') {\n      const name = payload['name'];\n      this.startChannel(name);\n    } else if (cmd == 'cnset') {\n      const name = payload['name'];\n      const port = event.ports[0];\n      this.receiveChannel_(name, /** @type {!MessagePort} */ (port));\n    } else {\n      this.onCommand_(cmd, payload);\n    }\n  }\n}\n\n\n/**\n * @param {!MessagePort} port\n */\nfunction closePort(port) {\n  try {\n    port.close();\n  } catch (e) {\n    // Ignore.\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the iframe case. Unlike other types\n * of activities, iframe-based activities are always connected and can react\n * to size requests.\n *\n * @implements {ActivityPort}\n * @implements {ActivityMessagingPort}\n */\nclass ActivityIframePort {\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   */\n  constructor(iframe, url, opt_args) {\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = iframe;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (this.iframe_.ownerDocument.defaultView);\n\n    /** @private @const {string} */\n    this.targetOrigin_ = getOriginFromUrl(url);\n\n    /** @private {boolean} */\n    this.connected_ = false;\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function()} */\n    this.readyResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.readyPromise_ = new Promise(resolve => {\n      this.readyResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?function(number)} */\n    this.onResizeRequest_ = null;\n\n    /** @private {?number} */\n    this.requestedHeight_ = null;\n\n    /** @private @const {!Messenger} */\n    this.messenger_ = new Messenger(\n        this.win_,\n        () => this.iframe_.contentWindow,\n        this.targetOrigin_,\n        /* requireTarget */ true);\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.IFRAME;\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    if (!isNodeConnected(this.iframe_)) {\n      throw new Error('iframe must be in DOM');\n    }\n    this.messenger_.connect(this.handleCommand_.bind(this));\n    this.iframe_.src = this.url_;\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.connected_ = false;\n    this.messenger_.disconnect();\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /** @override */\n  getTargetWin() {\n    return this.iframe_.contentWindow || null;\n  }\n\n  /** @override */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /** @override */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /** @override */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.readyPromise_;\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    this.onResizeRequest_ = callback;\n    Promise.resolve().then(() => {\n      if (this.requestedHeight_ != null) {\n        callback(this.requestedHeight_);\n      }\n    });\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    if (!this.connected_) {\n      return;\n    }\n    const height = this.iframe_.offsetHeight;\n    this.messenger_.sendCommand('resized', {'height': height});\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.connected_ = true;\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      if (this.resultResolver_) {\n        const code = /** @type {!ActivityResultCode} */ (payload['code']);\n        const data =\n            code == ActivityResultCode.FAILED ?\n            new Error(payload['data'] || '') :\n            payload['data'];\n        const result = new ActivityResult(\n            code,\n            data,\n            ActivityMode.IFRAME,\n            this.messenger_.getTargetOrigin(),\n            /* originVerified */ true,\n            /* secureChannel */ true);\n        resolveResult(this.win_, result, this.resultResolver_);\n        this.resultResolver_ = null;\n        this.messenger_.sendCommand('close');\n        this.disconnect();\n      }\n    } else if (cmd == 'ready') {\n      if (this.readyResolver_) {\n        this.readyResolver_();\n        this.readyResolver_ = null;\n      }\n    } else if (cmd == 'resize') {\n      this.requestedHeight_ = /** @type {number} */ (payload['height']);\n      if (this.onResizeRequest_) {\n        this.onResizeRequest_(this.requestedHeight_);\n      }\n    }\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n * @implements {ActivityMessagingPort}\n */\nclass ActivityWindowPort {\n\n  /**\n   * @param {!Window} win\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   */\n  constructor(win, requestId, url, target, opt_args, opt_options) {\n    const isValidTarget =\n        target &&\n        (target == '_blank' || target == '_top' || target[0] != '_');\n    if (!isValidTarget) {\n      throw new Error('The only allowed targets are \"_blank\", \"_top\"' +\n          ' and name targets');\n    }\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {string} */\n    this.requestId_ = requestId;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {string} */\n    this.openTarget_ = target;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n    /** @private @const {!ActivityOpenOptions} */\n    this.options_ = opt_options || {};\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?Window} */\n    this.targetWin_ = null;\n\n    /** @private {?number} */\n    this.heartbeatInterval_ = null;\n\n    /** @private {?Messenger} */\n    this.messenger_ = null;\n  }\n\n  /** @override */\n  getMode() {\n    return this.openTarget_ == '_top' ?\n        ActivityMode.REDIRECT :\n        ActivityMode.POPUP;\n  }\n\n  /**\n   * Opens the activity in a window, either as a popup or via redirect.\n   *\n   * Returns the promise that will yield when the window returns or closed.\n   * Notice, that this promise may never complete if \"redirect\" mode was used.\n   *\n   * @return {!Promise}\n   */\n  open() {\n    return this.openInternal_();\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  whenConnected() {\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    if (this.heartbeatInterval_) {\n      this.win_.clearInterval(this.heartbeatInterval_);\n      this.heartbeatInterval_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.disconnect();\n      this.messenger_ = null;\n    }\n    if (this.targetWin_) {\n      // Try to close the popup window. The host will also try to do the same.\n      try {\n        this.targetWin_.close();\n      } catch (e) {\n        // Ignore.\n      }\n      this.targetWin_ = null;\n    }\n    this.resultResolver_ = null;\n  }\n\n  /** @override */\n  getTargetWin() {\n    return this.targetWin_;\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /**\n   * Sends a message to the host.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * This method wraps around window's open method. It first tries to execute\n   * `open` call with the provided target and if it fails, it retries the call\n   * with the `_top` target. This is necessary given that in some embedding\n   * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n   * is blocked by default.\n   * @return {!Promise}\n   * @private\n   */\n  openInternal_() {\n    const featuresStr = this.buildFeatures_();\n\n    // Protectively, the URL will contain the request payload, unless explicitly\n    // directed not to via `skipRequestInUrl` option.\n    let url = this.url_;\n    if (!this.options_.skipRequestInUrl) {\n      const returnUrl =\n          this.options_.returnUrl ||\n          removeFragment(this.win_.location.href);\n      const requestString = serializeRequest({\n        requestId: this.requestId_,\n        returnUrl,\n        args: this.args_,\n      });\n      url = addFragmentParam(url, '__WA__', requestString);\n    }\n\n    // Open the window.\n    let targetWin;\n    let openTarget = this.openTarget_;\n    // IE does not support CORS popups - the popup has to fallback to redirect\n    // mode.\n    if (openTarget != '_top') {\n      if (isIeBrowser(this.win_)) {\n        openTarget = '_top';\n      }\n    }\n    // Try first with the specified target. If we're inside the WKWebView or\n    // a similar environments, this method is expected to fail by default for\n    // all targets except `_top`.\n    try {\n      targetWin = this.win_.open(url, openTarget, featuresStr);\n    } catch (e) {\n      // Ignore.\n    }\n    // Then try with `_top` target.\n    if (!targetWin &&\n        openTarget != '_top' &&\n        !this.options_.disableRedirectFallback) {\n      openTarget = '_top';\n      try {\n        targetWin = this.win_.open(url, openTarget);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n\n    // Setup the target window.\n    if (targetWin) {\n      this.targetWin_ = targetWin;\n      if (openTarget != '_top') {\n        this.setupPopup_();\n      }\n    } else {\n      this.disconnectWithError_(new Error('failed to open window'));\n    }\n\n    // Return result promise, even though it may never complete.\n    return this.resultPromise_.catch(() => {\n      // Ignore. Call to the `acceptResult()` should fail if needed.\n    });\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  buildFeatures_() {\n    // The max width and heights are calculated as following:\n    // MaxSize = AvailSize - ControlsSize\n    // ControlsSize = OuterSize - InnerSize\n    const screen = this.win_.screen;\n    const availWidth = screen.availWidth || screen.width;\n    const availHeight = screen.availHeight || screen.height;\n    const isTop = this.isTopWindow_();\n    const isEdge = isEdgeBrowser(this.win_);\n    // Limit controls to 100px width and height. Notice that it's only\n    // possible to calculate controls size in the top window, not in iframes.\n    // Notice that the Edge behavior is somewhat unique. If we can't find the\n    // right width/height, it will launch in the full-screen. Other browsers\n    // deal with such cases more gracefully.\n    const controlsWidth =\n        isTop && this.win_.outerWidth > this.win_.innerWidth ?\n        Math.min(100, this.win_.outerWidth - this.win_.innerWidth) :\n        (isEdge ? 100 : 0);\n    const controlsHeight =\n        isTop && this.win_.outerHeight > this.win_.innerHeight ?\n        Math.min(100, this.win_.outerHeight - this.win_.innerHeight) :\n        (isEdge ? 100 : 0);\n    // With all the adjustments, at least 50% of the available width/height\n    // should be made available to a popup.\n    const maxWidth = Math.max(availWidth - controlsWidth, availWidth * 0.5);\n    const maxHeight = Math.max(availHeight - controlsHeight, availHeight * 0.5);\n    let w = Math.floor(Math.min(600, maxWidth * 0.9));\n    let h = Math.floor(Math.min(600, maxHeight * 0.9));\n    if (this.options_.width) {\n      w = Math.min(this.options_.width, maxWidth);\n    }\n    if (this.options_.height) {\n      h = Math.min(this.options_.height, maxHeight);\n    }\n    const x = Math.floor((screen.width - w) / 2);\n    const y = Math.floor((screen.height - h) / 2);\n    const features = {\n      'height': h,\n      'width': w,\n      'resizable': 'yes',\n      'scrollbars': 'yes',\n    };\n    // Do not set left/top in Edge: it fails.\n    if (!isEdge) {\n      features['left'] = x;\n      features['top'] = y;\n    }\n    let featuresStr = '';\n    for (const f in features) {\n      if (featuresStr) {\n        featuresStr += ',';\n      }\n      featuresStr += `${f}=${features[f]}`;\n    }\n    return featuresStr;\n  }\n\n  /**\n   * This method only exists to make iframe/top emulation possible in tests.\n   * Otherwise `window.top` cannot be overridden.\n   * @return {boolean}\n   * @private\n   */\n  isTopWindow_() {\n    return this.win_ == this.win_.top;\n  }\n\n  /** @private */\n  setupPopup_() {\n    // Keep alive to catch the window closing, which would indicate\n    // \"cancel\" signal.\n    this.heartbeatInterval_ = this.win_.setInterval(() => {\n      this.check_(/* delayCancel */ true);\n    }, 500);\n\n    // Start up messaging. The messaging is explicitly allowed to proceed\n    // without origin check b/c all arguments have already been passed in\n    // the URL and special handling is enforced when result is delivered.\n    this.messenger_ = new Messenger(\n        this.win_,\n        /** @type {!Window} */ (this.targetWin_),\n        /* targetOrigin */ null,\n        /* requireTarget */ true);\n    this.messenger_.connect(this.handleCommand_.bind(this));\n  }\n\n  /**\n   * @param {boolean=} opt_delayCancel\n   * @private\n   */\n  check_(opt_delayCancel) {\n    if (!this.targetWin_ || this.targetWin_.closed) {\n      if (this.heartbeatInterval_) {\n        this.win_.clearInterval(this.heartbeatInterval_);\n        this.heartbeatInterval_ = null;\n      }\n      // Give a chance for the result to arrive, but otherwise consider the\n      // responce to be empty.\n      this.win_.setTimeout(() => {\n        try {\n          this.result_(ActivityResultCode.CANCELED, /* data */ null);\n        } catch (e) {\n          this.disconnectWithError_(e);\n        }\n      }, opt_delayCancel ? 3000 : 0);\n    }\n  }\n\n  /**\n   * @param {!Error} reason\n   * @private\n   */\n  disconnectWithError_(reason) {\n    if (this.resultResolver_) {\n      this.resultResolver_(Promise.reject(reason));\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @private\n   */\n  result_(code, data) {\n    if (this.resultResolver_) {\n      const isConnected = this.messenger_.isConnected();\n      const result = new ActivityResult(\n          code,\n          data,\n          ActivityMode.POPUP,\n          isConnected ?\n              this.messenger_.getTargetOrigin() :\n              getOriginFromUrl(this.url_),\n          /* originVerified */ isConnected,\n          /* secureChannel */ isConnected);\n      resolveResult(this.win_, result, this.resultResolver_);\n      this.resultResolver_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.sendCommand('close');\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      const code = /** @type {!ActivityResultCode} */ (payload['code']);\n      const data =\n          code == ActivityResultCode.FAILED ?\n          new Error(payload['data'] || '') :\n          payload['data'];\n      this.result_(code, data);\n    } else if (cmd == 'check') {\n      this.win_.setTimeout(() => this.check_(), 200);\n    }\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @param {string} fragment\n * @param {string} requestId\n * @return {?ActivityPort}\n */\nfunction discoverRedirectPort(win, fragment, requestId) {\n  // Try to find the result in the fragment.\n  const paramName = '__WA_RES__';\n  const fragmentParam = getQueryParam(fragment, paramName);\n  if (!fragmentParam) {\n    return null;\n  }\n  const response = /** @type {?Object} */ (JSON.parse(fragmentParam));\n  if (!response || response['requestId'] != requestId) {\n    return null;\n  }\n\n  // Remove the found param from the fragment.\n  const cleanFragment = removeQueryParam(win.location.hash, paramName) || '';\n  if (cleanFragment != win.location.hash) {\n    if (win.history && win.history.replaceState) {\n      try {\n        win.history.replaceState(win.history.state, '', cleanFragment);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n  }\n\n  const code = response['code'];\n  const data = response['data'];\n  const origin = response['origin'];\n  const referrerOrigin = win.document.referrer &&\n      getOriginFromUrl(win.document.referrer);\n  const originVerified = origin == referrerOrigin;\n  return new ActivityWindowRedirectPort(\n      win,\n      code,\n      data,\n      origin,\n      originVerified);\n}\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n */\nclass ActivityWindowRedirectPort {\n\n  /**\n   * @param {!Window} win\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {string} targetOrigin\n   * @param {boolean} targetOriginVerified\n   */\n  constructor(win, code, data, targetOrigin, targetOriginVerified) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!ActivityResultCode} */\n    this.code_ = code;\n    /** @private @const {*} */\n    this.data_ = data;\n    /** @private {string} */\n    this.targetOrigin_ = targetOrigin;\n    /** @private {boolean} */\n    this.targetOriginVerified_ = targetOriginVerified;\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.REDIRECT;\n  }\n\n  /** @override */\n  acceptResult() {\n    const result = new ActivityResult(\n        this.code_,\n        this.data_,\n        ActivityMode.REDIRECT,\n        this.targetOrigin_,\n        this.targetOriginVerified_,\n        /* secureChannel */ false);\n    return new Promise(resolve => {\n      resolveResult(this.win_, result, resolve);\n    });\n  }\n}\n\n\n\n\n/**\n * The page-level activities manager ports. This class is intended to be used\n * as a singleton. It can start activities of all modes: iframe, popup, and\n * redirect.\n */\nclass ActivityPorts {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {string} */\n    this.version = '1.24';\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {string} */\n    this.fragment_ = win.location.hash;\n\n    /**\n     * @private @const {!Object<string, !Array<function(!ActivityPort)>>}\n     */\n    this.requestHandlers_ = {};\n\n    /**\n     * The result buffer is indexed by `requestId`.\n     * @private @const {!Object<string, !ActivityPort>}\n     */\n    this.resultBuffer_ = {};\n\n    /** @private {?function(!Error)} */\n    this.redirectErrorResolver_ = null;\n\n    /** @private {!Promise<!Error>} */\n    this.redirectErrorPromise_ = new Promise(resolve => {\n      this.redirectErrorResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, opt_args) {\n    const port = new ActivityIframePort(iframe, url, opt_args);\n    return port.connect().then(() => port);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, opt_args, opt_options) {\n    const port = this.openWin_(requestId, url, target, opt_args, opt_options);\n    return {targetWin: port.getTargetWin()};\n  }\n\n  /**\n   * Start an activity in a separate window and tries to setup messaging with\n   * this window.\n   *\n   * See `open()` method for more details, including `onResult` callback.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {!Promise<!ActivityMessagingPort>}\n   */\n  openWithMessaging(requestId, url, target, opt_args, opt_options) {\n    const port = this.openWin_(requestId, url, target, opt_args, opt_options);\n    return port.whenConnected().then(() => port);\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPort)} callback\n   */\n  onResult(requestId, callback) {\n    let handlers = this.requestHandlers_[requestId];\n    if (!handlers) {\n      handlers = [];\n      this.requestHandlers_[requestId] = handlers;\n    }\n    handlers.push(callback);\n\n    // Consume available result.\n    const availableResult = this.discoverResult_(requestId);\n    if (availableResult) {\n      this.consumeResult_(availableResult, callback);\n    }\n  }\n\n  /**\n   * @param {function(!Error)} handler\n   */\n  onRedirectError(handler) {\n    this.redirectErrorPromise_.then(handler);\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {!ActivityWindowPort}\n   */\n  openWin_(requestId, url, target, opt_args, opt_options) {\n    const port = new ActivityWindowPort(\n        this.win_, requestId, url, target, opt_args, opt_options);\n    port.open().then(() => {\n      // Await result if possible. Notice that when falling back to \"redirect\",\n      // the result will never arrive through this port.\n      this.consumeResultAll_(requestId, port);\n    });\n    return port;\n  }\n\n  /**\n   * @param {string} requestId\n   * @return {?ActivityPort}\n   * @private\n   */\n  discoverResult_(requestId) {\n    let port = this.resultBuffer_[requestId];\n    if (!port && this.fragment_) {\n      try {\n        port = discoverRedirectPort(\n            this.win_, this.fragment_, requestId);\n      } catch (e) {\n        throwAsync(e);\n        this.redirectErrorResolver_(e);\n      }\n      if (port) {\n        this.resultBuffer_[requestId] = port;\n      }\n    }\n    return port;\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @param {function(!ActivityPort)} callback\n   * @private\n   */\n  consumeResult_(port, callback) {\n    Promise.resolve().then(() => {\n      callback(port);\n    });\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {!ActivityPort} port\n   * @private\n   */\n  consumeResultAll_(requestId, port) {\n    // Find and execute handlers.\n    const handlers = this.requestHandlers_[requestId];\n    if (handlers) {\n      handlers.forEach(handler => {\n        this.consumeResult_(port, handler);\n      });\n    }\n    // Buffer the result for callbacks that may arrive in the future.\n    this.resultBuffer_[requestId] = port;\n  }\n}\n\n\n\nmodule.exports = {\n  ActivityPorts,\n  ActivityIframePort,\n  ActivityMessagingPort,\n  ActivityMode,\n  ActivityOpenOptions,\n  ActivityPort,\n  ActivityRequest,\n  ActivityResult,\n  ActivityResultCode,\n  ActivityWindowPort,\n  createAbortError,\n  isAbortError,\n};\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent,EventOriginator} from '../proto/api_messages';\n\n/** @enum {number}  */\nexport const FilterResult = {\n  /** The event is allowed to proceed to the listeners. */\n  PROCESS_EVENT: 0,\n  /** The event is canceled and the listeners are not informed about it. */\n  CANCEL_EVENT: 1,\n};\n\n/**\n * Defines a client event in SwG\n * Properties:\n * - eventType: Required. The AnalyticsEvent type that occurred.\n * - eventOriginator: Required.  The codebase that initiated the event.\n * - isFromUserAction: Optional.  True if the user took an action to generate\n *   the event.\n * - additionalParameters: Optional.  A JSON object to store generic data.\n *\n *  @typedef {{\n *    eventType: !AnalyticsEvent,\n *    eventOriginator: !EventOriginator,\n *    isFromUserAction: ?boolean,\n *    additionalParameters: ?Object,\n * }}\n */\nexport let ClientEvent;\n\n/**\n * @interface\n */\nexport class ClientEventManagerApi {\n  /**\n   * Call this function to log an event. The registered listeners will be\n   * invoked unless the event is filtered.\n   * @param {!function(!ClientEvent)} listener\n   */\n  registerEventListener(listener) { }\n\n  /**\n   * Register a filterer for events if you need to potentially prevent the\n   * listeners from hearing about it.  A filterer should return\n   * FilterResult.CANCEL_EVENT to prevent listeners from hearing about the\n   * event.\n   * @param {!function(!ClientEvent):FilterResult} filterer\n   */\n  registerEventFilterer(filterer) { }\n\n  /**\n   * Call this function to log an event.  It will immediately throw an error if\n   * the event is invalid.  It will then asynchronously call the filterers and\n   * stop the event if a filterer cancels it.  After that, it will call each\n   * listener asynchronously.\n   * @param {!ClientEvent} event\n   */\n  logEvent(event) { }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {PurchaseData} from './subscribe-response';\nimport {UserData} from './user-data';\n\n\n/**\n * Properties:\n * - entitlements - the current entitlements.\n * - consent - whether to ask the user for account creation consent.\n *   Default is `true`.\n *\n * @typedef {{\n *   entitlements: (?Entitlements|undefined),\n *   consent: (boolean|undefined),\n * }}\n */\nexport let DeferredAccountCreationRequest;\n\n\n/**\n */\nexport class DeferredAccountCreationResponse {\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @param {!UserData} userData\n   * @param {!Array<!PurchaseData>} purchaseDataList\n   * @param {function():!Promise} completeHandler\n   */\n  constructor(entitlements, userData, purchaseDataList, completeHandler) {\n    /** @const {!Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {!UserData} */\n    this.userData = userData;\n    /** @const {!Array<!PurchaseData>} */\n    this.purchaseDataList = purchaseDataList;\n    // TODO(dvoytenko): deprecate.\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseDataList[0];\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n  }\n\n  /**\n   * @return {!DeferredAccountCreationResponse}\n   */\n  clone() {\n    return new DeferredAccountCreationResponse(\n        this.entitlements,\n        this.userData,\n        this.purchaseDataList,\n        this.completeHandler_);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'entitlements': this.entitlements.json(),\n      'userData': this.userData.json(),\n      'purchaseDataList': this.purchaseDataList.map(pd => pd.json()),\n      // TODO(dvoytenko): deprecate.\n      'purchaseData': this.purchaseData.json(),\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription info. The typical action would be to create an\n   * account (or match an existing one) and associated the subscription with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The holder of the entitlements for a service.\n */\nexport class Entitlements {\n\n  /**\n   * @param {string} service\n   * @param {string} raw\n   * @param {!Array<!Entitlement>} entitlements\n   * @param {?string} currentProduct\n   * @param {function(!Entitlements)} ackHandler\n   * @param {?boolean|undefined} isReadyToPay\n   * @param {?string|undefined} decryptedDocumentKey\n   */\n  constructor(service, raw, entitlements, currentProduct, ackHandler,\n    isReadyToPay, decryptedDocumentKey) {\n\n    /** @const {string} */\n    this.service = service;\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!Array<!Entitlement>} */\n    this.entitlements = entitlements;\n    /** @const {boolean} */\n    this.isReadyToPay = isReadyToPay || false;\n    /** @const {?string} */\n    this.decryptedDocumentKey = decryptedDocumentKey || null;\n\n    /** @private @const {?string} */\n    this.product_ = currentProduct;\n    /** @private @const {function(!Entitlements)} */\n    this.ackHandler_ = ackHandler;\n  }\n\n  /**\n   * @return {!Entitlements}\n   */\n  clone() {\n    return new Entitlements(\n        this.service,\n        this.raw,\n        this.entitlements.map(ent => ent.clone()),\n        this.product_,\n        this.ackHandler_,\n        this.isReadyToPay,\n        this.decryptedDocumentKey);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'service': this.service,\n      'entitlements': this.entitlements.map(item => item.json()),\n      'isReadyToPay': this.isReadyToPay,\n    };\n  }\n\n  /**\n   * @param {string=} opt_source\n   * @return {boolean}\n   */\n  enablesThis(opt_source) {\n    return this.enables(this.product_, opt_source);\n  }\n\n  /**\n   * @param {string=} opt_source\n   * @return {boolean}\n   */\n  enablesAny(opt_source) {\n    for (let i = 0; i < this.entitlements.length; i++) {\n      if (this.entitlements[i].products.length > 0 &&\n          (!opt_source || opt_source == this.entitlements[i].source)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether these entitlements enable the specified product, optionally also\n   * restricting the source.\n   * @param {?string} product\n   * @param {string=} opt_source\n   * @return {boolean}\n   */\n  enables(product, opt_source) {\n    if (!product) {\n      return false;\n    }\n    return !!this.getEntitlementFor(product, opt_source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the current product,\n   * optionally also matching the specified source.\n   * @param {string=} opt_source\n   * @return {?Entitlement}\n   */\n  getEntitlementForThis(opt_source) {\n    return this.getEntitlementFor(this.product_, opt_source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified product,\n   * optionally also matching the specified source.\n   * @param {?string} product\n   * @param {string=} opt_source\n   * @return {?Entitlement}\n   */\n  getEntitlementFor(product, opt_source) {\n    if (product && this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (this.entitlements[i].enables(product) &&\n            (!opt_source || opt_source == this.entitlements[i].source)) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified source w/o\n   * matching any specific products.\n   * @param {string} source\n   * @return {?Entitlement}\n   */\n  getEntitlementForSource(source) {\n    if (this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (this.entitlements[i].subscriptionToken &&\n            (source == this.entitlements[i].source)) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * A 3p site should call this method to acknowledge that it \"saw\" and\n   * \"understood\" entitlements.\n   */\n  ack() {\n    this.ackHandler_(this);\n  }\n}\n\n\n/**\n * The single entitlement object.\n */\nexport class Entitlement {\n\n  /**\n   * @param {string} source\n   * @param {!Array<string>} products\n   * @param {string} subscriptionToken\n   */\n  constructor(source, products, subscriptionToken) {\n    /** @const {string} */\n    this.source = source;\n    /** @const {!Array<string>} */\n    this.products = products;\n    /** @const {string} */\n    this.subscriptionToken = subscriptionToken;\n  }\n\n  /**\n   * @return {!Entitlement}\n   */\n  clone() {\n    return new Entitlement(\n        this.source,\n        this.products.slice(0),\n        this.subscriptionToken);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'source': this.source,\n      'products': this.products,\n      'subscriptionToken': this.subscriptionToken,\n    };\n  }\n\n  /**\n   * @param {?string} product\n   * @return {boolean}\n   */\n  enables(product) {\n    if (!product) {\n      return false;\n    }\n    // Wildcard allows this product.\n    const eq = product.indexOf(':');\n    if (eq != -1 &&\n        this.products.includes(product.substring(0, eq + 1) + '*')) {\n      return true;\n    }\n    return this.products.includes(product);\n  }\n\n  /**\n   * @param {?Object} json\n   * @return {!Entitlement}\n   */\n  static parseFromJson(json) {\n    if (!json) {\n      json = {};\n    }\n    const source = json['source'] || '';\n    const products = json['products'] || [];\n    const subscriptionToken = json['subscriptionToken'];\n    return new Entitlement(source, products, subscriptionToken);\n  }\n\n  /**\n   * The JSON is expected in one of the forms:\n   * - Single entitlement: `{products: [], ...}`.\n   * - A list of entitlements: `[{products: [], ...}, {...}]`.\n   * @param {!Object|!Array<!Object>} json\n   * @return {!Array<!Entitlement>}\n   */\n  static parseListFromJson(json) {\n    const jsonList = Array.isArray(json) ?\n        /** @type {!Array<Object>} */ (json) : [json];\n    return jsonList.map(json => Entitlement.parseFromJson(json));\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {string}\n */\nexport const SubscriptionState = {\n  // user's subscription state not known.\n  UNKNOWN: 'unknown',\n  // user is not a subscriber.\n  NON_SUBSCRIBER: 'non_subscriber',\n  // user is a subscriber.\n  SUBSCRIBER: 'subscriber',\n  // user's subscription has expired.\n  PAST_SUBSCRIBER: 'past_subscriber',\n};\n\n/**\n * Subscription related events. Listed below are enum strings that\n * represent events related to Subscription flow. Event parameters\n * that provide more context about the event are sent as a JSON\n * block of depth 1 in the sendEvent() API call.\n * @enum {string}\n */\nexport const Event = {\n  /**\n   * IMPRESSION_PAYWALL event.\n   * User hits a paywall.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * If the user has run out of metering, and that’s why was shown\n   * a paywall, that would be a passive impression of the paywall.\n   * For example:\n   * const propensityEvent = {\n   *  name: 'paywall',\n   *  active: false,\n   * }\n   */\n  IMPRESSION_PAYWALL: 'paywall',\n  /**\n   * IMPRESSION_AD event.\n   * User has been shown a subscription ad.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * The JSON block can provide the name of the subscription ad\n   * creative or campaign. Ad impressions are usually passive.\n   * const propensityEvent = {\n   *   name: 'ad_shown',\n   *   active: false,\n   *   data: {'ad_name': 'fall_ad'}\n   * }\n   */\n  IMPRESSION_AD: 'ad_shown',\n  /**\n   * IMPRESSION_OFFERS event.\n   * User has been shown a list of available offers for subscription.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * The JSON block can provide a list of products displayed,\n   * and the source to indicate why the user was shown the offer.\n   * Note: source is not the same as referrer.\n   * In the cases below, the user took action before seeing the offers,\n   * and therefore considered active impression.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: true,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': 'ad-click'}\n   * }\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: true,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': ‘navigate-to-offers-page’}\n   * }\n   * If the user was shown the offers as a result of paywall metering\n   * expiration, it is considered a passive impression.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: false,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': ‘paywall-metering-expired’}\n   * }\n   */\n  IMPRESSION_OFFERS: 'offers_shown',\n  /**\n   * ACTION_SUBSCRIPTIONS_LANDING_PAGE event.\n   * User has taken the action to arrive at a landing page of the\n   * subscription workflow. The landing page should satisfy one of\n   * the following conditions and hence be a part of the funnel to\n   * get the user to subscribe:\n   * - have a button to navigate the user to an offers page, (in\n   *   this case, the next event will be IMPRESSION_OFFERS, with\n   *   parameter 'source' as subscriptions-landing-page and\n   *   'is_active' set to true),\n   * - show offers the user can select, (in this case, the next\n   *   event will be IMPRESSION_OFFERS, with a parameter 'source'\n   *   as navigate-to-offers-page and 'is_active' set to true),\n   * - provide a way to start the payment flow for a specific offer.\n   *   (in this case, the next event will be ACTION_OFFER_SELECTED\n   *   or ACTION_PAYMENT_FLOW_STARTED depending on if that button\n   *   took the user to a checkout page on the publishers site or\n   *   directly started the payment flow).\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block with this event can provide additional information\n   * such as the source, indicating what caused the user to navigate\n   * to this page.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'subscriptions_landing_page',\n   *   active: true,\n   *   data: {'source': 'marketing_via_email'}\n   * }\n   */\n  ACTION_SUBSCRIPTIONS_LANDING_PAGE: 'subscriptions_landing_page',\n  /**\n   * ACTION_OFFER_SELECTED event.\n   * User has selected an offer.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product selected.\n   * For example: {\n   *   name: 'offer_selected',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   * When offer selection starts the payment flow directly,\n   * use the next event ACTION_PAYMENT_FLOW_STARTED instead.\n   */\n  ACTION_OFFER_SELECTED: 'offer_selected',\n  /**\n   * ACTION_PAYMENT_FLOW_STARTED event.\n   * User has started payment flow.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product selected.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'payment_flow_started',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   */\n  ACTION_PAYMENT_FLOW_STARTED: 'payment_flow_start',\n  /**\n   * ACTION_PAYMENT_COMPLETED.\n   * User has made the payment for a subscription.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product user paid for.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'payment_complete',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   */\n  ACTION_PAYMENT_COMPLETED: 'payment_complete',\n  /**\n   * EVENT_CUSTOM: custom publisher event.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false depending on if the event\n   * was generated as a result of a user action.\n   * The JSON block can provide the event name for the custom event.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'custom',\n   *   active: true,\n   *   data: {\n   *     'event_name': 'social_share',\n   *     'platform_used': 'whatsapp'\n   *   }\n   *  }\n   */\n  EVENT_CUSTOM: 'custom',\n};\n\n/**\n * Propensity Event\n * Properties:\n * - name: Required. Name should be valid string in the Event\n *         enum within src/api/logger-api.js.\n * - active: Required. A boolean that indicates whether the\n *         user took some action to participate in the flow\n *         that generated this event. For impression event,\n *         this is set to true if is_active field would be\n *         set to true, as described in documentation for\n *         enum Event. Otherwise, set this field to false.\n *         For action events, this field must always be set\n *         to true. The caller must always set this field.\n * - data: Optional. JSON block of depth '1' provides event\n *         parameters. The guideline to create this JSON block\n *         that describes the event is provided against each\n *         enum listed in the Event enum above.\n *\n *  @typedef {{\n  *    name: string,\n  *    active: boolean,\n  *    data: ?JsonObject,\n  * }}\n  */\nexport let PublisherEvent;\n\n/**\n * @interface\n */\nexport class LoggerApi {\n  /**\n   * Send a buy-flow event that occurred on the publisher's site to Google.  The\n   * ultimate destination is controlled by configuration settings.  Data is\n   * sent to Propensity if the Propensity module is fetched from runtime and to\n   * Google's analytics service if you activate buy-flow comparative analysis.\n   * @param {!PublisherEvent} userEvent\n   */\n  sendEvent(userEvent) { }\n\n  /**\n   * Send user subscription state upon initial discovery.\n   * A user may have active subscriptions to some products\n   * and expired subscriptions to others. Make one API call\n   * per subscription state and provide a corresponding\n   * list of products with a json object of depth 1.\n   * For example:\n   *     {'product': ['product1', 'product2']}\n   * Each call to this API should have the first argument\n   * as a valid string from the enum SubscriptionState.\n   * @param {SubscriptionState} state\n   * @param {?JsonObject} jsonProducts\n   */\n  sendSubscriptionState(state, jsonProducts) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nexport class Offer {\n\n  /**\n   * @param {string} skuId\n   * @param {string} title\n   * @param {string} description\n   * @param {string} price\n   */\n  constructor(skuId, title, description, price) {\n    /** @const {string} */\n    this.skuId = skuId;\n    /** @const {string} */\n    this.title = title;\n    /** @const {string} */\n    this.description = description;\n    /** @const {string} */\n    this.price = price;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as LoggerApi from './logger-api';\n\n/**\n * @enum {string}\n */\nexport const PropensityType = {\n  // Propensity score for a user to subscribe to a publication.\n  GENERAL: 'general',\n  // Propensity score when blocked access to content by paywall.\n  PAYWALL: 'paywall',\n};\n\n/**\n * The Propensity Score\n * - value: Required. A number that indicates the propensity to subscribe.\n * - bucketed: Required. Indicates if the score is a raw score [1-100] or bucketed[1-20].\n *\n * @typedef {{\n *   value: number,\n *   bucketed: boolean,\n * }}\n */\nexport let Score;\n\n/**\n * Propensity Score Detail\n * Properties:\n * - product: Required. Indicates the publication_id:product_id for which the score is provided.\n * - score: Optional. When score is available, this field contains the propensity score for this product.\n * - error: Optional. When no score is avaialble, a string provides the error message.\n *\n * @typedef {{\n *   product: string,\n *   score: ?Score,\n *   error: ?string,\n * }}\n */\nexport let ScoreDetail;\n\n/**\n * The Body field of the Propensity Score.\n * Properties:\n * - scores: Optional, an array of scores. When header indicates so, atleast one score is available.\n * - error: Optional, string describing why, if no scores were provided by the server.\n *\n *  @typedef {{\n *    scores: ?Array<ScoreDetail>,\n *    error: ?string,\n * }}\n */\nexport let Body;\n\n/**\n * The Header of the Propensity Score.\n * Properties:\n * - ok: Required. true, if propensity score is available, false otherwise.\n *\n *  @typedef {{\n *    ok: boolean,\n * }}\n */\nexport let Header;\n\n/**\n * The Propensity Score.\n * Properties:\n * - header: Required. Provides the header of the Score response.\n * - body: Required. Provides the body of the Score response.\n *\n *  @typedef {{\n *    header: Header,\n *    body: Body,\n * }}\n */\nexport let PropensityScore;\n\n/**\n * Propensity Event\n *   Please note that the primary defition of this object has changed to\n *   PublisherEvent and is defined in logger-api.js.  These two object\n *   definitions are identical.\n * Properties:\n * - name: Required. Name should be valid string in the Event\n *         enum within src/api/logger-api.js.\n * - active: Required. A boolean that indicates whether the\n *         user took some action to participate in the flow\n *         that generated this event. For impression event,\n *         this is set to true if is_active field would be\n *         set to true, as described in documentation for\n *         enum Event. Otherwise, set this field to false.\n *         For action events, this field must always be set\n *         to true. The caller must always set this field.\n * - data: Optional. JSON block of depth '1' provides event\n *         parameters. The guideline to create this JSON block\n *         that describes the event is provided against each\n *         enum listed in the Event enum above.\n *\n *  @typedef {{\n *    name: string,\n *    active: boolean,\n *    data: ?JsonObject,\n * }}\n */\nexport let PropensityEvent;\n\n/*\n * Please note that the definitions of Event and SubscriptionState have moved\n * to logger-api.js.  This is now the preferred interface to use for logging\n * publisher events and setting the user's current subscription state.\n * Propensity will continue to function as an event logger until we are certain\n * no publishers are actively using it to log events.\n */\nexport const Event = LoggerApi.Event;\nexport const SubscriptionState = LoggerApi.SubscriptionState;\n\n/**\n * @extends {LoggerApi.LoggerApi}\n * @interface\n */\nexport class PropensityApi extends LoggerApi.LoggerApi {\n  /**\n   * Get the propensity of a user to subscribe based on the type.\n   * The argument should be a valid string from PropensityType.\n   * If no type is provided, GENERAL score is returned.\n   * @param {PropensityType=} type\n   * @return {?Promise<!PropensityScore>}\n   */\n  getPropensity(type) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {UserData} from './user-data';\n\n\n/**\n */\nexport class SubscribeResponse {\n\n  /**\n   * @param {string} raw\n   * @param {!PurchaseData} purchaseData\n   * @param {?UserData} userData\n   * @param {?Entitlements} entitlements\n   * @param {!string} productType\n   * @param {function():!Promise} completeHandler\n   */\n  constructor(raw, purchaseData, userData, entitlements, productType,\n      completeHandler) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseData;\n    /** @const {?UserData} */\n    this.userData = userData;\n    /** @const {?Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {string} */\n    this.productType = productType;\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n  }\n\n  /**\n   * @return {!SubscribeResponse}\n   */\n  clone() {\n    return new SubscribeResponse(\n        this.raw,\n        this.purchaseData,\n        this.userData,\n        this.entitlements,\n        this.productType,\n        this.completeHandler_);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'purchaseData': this.purchaseData.json(),\n      'userData': this.userData ? this.userData.json() : null,\n      'entitlements': this.entitlements ? this.entitlements.json() : null,\n      'productType': this.productType,\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription purchase. The typical action would be to create an\n   * account (or match an existing one) and associated the purchase with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n\n\n/**\n */\nexport class PurchaseData {\n\n  /**\n   * @param {string} raw\n   * @param {string} signature\n   */\n  constructor(raw, signature) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {string} */\n    this.data = raw;\n    /** @const {string} */\n    this.signature = signature;\n  }\n\n  /**\n   * @return {!PurchaseData}\n   */\n  clone() {\n    return new PurchaseData(this.raw, this.signature);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'data': this.raw,\n      'signature': this.signature,\n    };\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {Offer} from './offer';\nimport {\n  DeferredAccountCreationRequest,\n  DeferredAccountCreationResponse,\n} from './deferred-account-creation';\nimport {SubscribeResponse} from './subscribe-response';\nimport {PropensityApi} from './propensity-api';\nimport {LoggerApi} from './logger-api';\n\n/**\n * @interface\n */\nexport class Subscriptions {\n\n  /**\n   * Optionally initializes the subscriptions runtime with publication or\n   * product ID. If not called, the runtime will look for the initialization\n   * parameters in the page's markup.\n   * @param {string} productOrPublicationId\n   */\n  init(productOrPublicationId) {}\n\n  /**\n   * Optionally configures the runtime with non-default properties. See\n   * `Config` definition for details.\n   * @param {!Config} config\n   */\n  configure(config) {}\n\n  /**\n   * Starts the entitlement flow.\n   */\n  start() {}\n\n  /**\n   * Resets the entitlements that can be fetched again.\n   */\n  reset() {}\n\n  /**\n   * Resets the entitlements and clears all of the caches.\n   */\n  clear() {}\n\n  /**\n   * @param {?string=} opt_encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements(opt_encryptedDocumentKey) {}\n\n  /**\n   * Set the subscribe callback.\n   * @param {function(!Promise<!Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {}\n\n  /**\n   * Returns a set of offers.\n   * @param {{\n   *   productId: (string|undefined),\n   * }=} opt_options\n   * @return {!Promise<!Array<!Offer>>}\n   */\n  getOffers(opt_options) {}\n\n  /**\n   * Starts the Offers flow.\n   * @param {!OffersRequest=} opt_options\n   */\n  showOffers(opt_options) {}\n\n  /**\n   * Starts the Offers flow for a subscription update.\n   * @param {!OffersRequest=} opt_options\n   */\n  showUpdateOffers(opt_options) {}\n\n  /**\n   * Show subscription option.\n   * @param {!OffersRequest=} opt_options\n   */\n  showSubscribeOption(opt_options) {}\n\n  /**\n   * Show abbreviated offers.\n   * @param {!OffersRequest=} opt_options\n   */\n  showAbbrvOffer(opt_options) {}\n\n  /**\n   * Show contribution options for the users to select from.\n   * The options are grouped together by periods (Weekly, Monthly, etc.).\n   * User can select the amount to contribute to from available options\n   * to the publisher. These options are based on the SKUs defined in the Play\n   * console for a given publication.\n   * Each SKU has Amount, Period, SKUId and other attributes.\n   * @param {!OffersRequest=} opt_options\n   */\n  showContributionOptions(opt_options) {}\n\n  /**\n   * Set the callback for the native subscribe request. Setting this callback\n   * triggers the \"native\" option in the offers flow.\n   * @param {function()} callback\n   */\n  setOnNativeSubscribeRequest(callback) {}\n\n  /**\n   * Set the subscribe complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {}\n\n  /**\n   * Starts subscription purchase flow.\n   * @param {string} sku\n   */\n  subscribe(sku) {}\n\n  /**\n   * Starts subscription purchase flow.\n   * @param {SubscriptionRequest} subscriptionRequest\n   */\n  updateSubscription(subscriptionRequest) {}\n\n  /**\n   * Set the contribution complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnContributionResponse(callback) {}\n\n   /**\n   * Starts contributions purchase flow.\n   * @param {string|SubscriptionRequest} skuOrSubscriptionRequest\n   */\n  contribute(skuOrSubscriptionRequest) {}\n\n  /**\n   * Starts the deferred account creation flow.\n   * See `DeferredAccountCreationRequest` for more details.\n   * @param {?DeferredAccountCreationRequest=} opt_options\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  completeDeferredAccountCreation(opt_options) {}\n\n  /**\n   * @param {function(!LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {}\n\n  /**\n   * Starts the login prompt flow.\n   * @return {!Promise}\n   */\n  showLoginPrompt() {}\n\n  /**\n   * Starts the login notification flow.\n   * @return {!Promise}\n   */\n  showLoginNotification() {}\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {}\n\n  /**\n   * @param {!Promise} accountPromise Publisher's promise to lookup account.\n   * @return {!Promise}\n   */\n  waitForSubscriptionLookup(accountPromise) {}\n\n  /**\n   * Starts the Account linking flow.\n   * TODO(dparikh): decide if it's only exposed for testing or PROD purposes.\n   */\n  linkAccount() {}\n\n  /**\n   * Notifies the client that a flow has been started. The name of the flow\n   * is passed as the callback argument. The flow name corresponds to the\n   * method name in this interface, such as \"showOffers\", or \"subscribe\".\n   * See `SubscriptionFlows` for the full list.\n   *\n   * Also see `setOnFlowCanceled` method.\n   *\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {}\n\n  /**\n   * Notifies the client that a flow has been canceled. The name of the flow\n   * is passed as the callback argument. The flow name corresponds to the\n   * method name in this interface, such as \"showOffers\", or \"subscribe\".\n   * See `SubscriptionFlows` for the full list.\n   *\n   * Notice that some of the flows, such as \"subscribe\", could additionally\n   * have their own \"cancel\" events.\n   *\n   * Also see `setOnFlowStarted` method.\n   *\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {}\n\n /**\n  * Starts the save subscriptions flow.\n  * @param {!SaveSubscriptionRequestCallback} requestCallback\n  * @return {!Promise} a promise indicating flow is started\n  */\n  saveSubscription(requestCallback) {}\n\n  /**\n   * Creates an element with the SwG button style and the provided callback.\n   * The default theme is \"light\".\n   *\n   * @param {!ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {!Element}\n   */\n  createButton(optionsOrCallback, opt_callback) {}\n\n  /**\n   * Attaches the SwG button style and the provided callback to an existing\n   * DOM element. The default theme is \"light\".\n   *\n   * @param {!Element} button\n   * @param {!ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   */\n  attachButton(button, optionsOrCallback, opt_callback) {}\n\n  /**\n   * Attaches smartButton element and the provided callback.\n   * The default theme is \"light\".\n   *\n   * @param {!Element} button\n   * @param {!SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   */\n  attachSmartButton(button, optionsOrCallback, opt_callback) {}\n\n  /**\n   * Retrieves the propensity module that provides APIs to\n   * get propensity scores based on user state and events\n   * @return {!Promise<PropensityApi>}\n   */\n  getPropensityModule() {}\n\n  /** @return {!Promise<LoggerApi>} */\n  getLogger() {}\n}\n\n/** @enum {string} */\nexport const SubscriptionFlows = {\n  SHOW_OFFERS: 'showOffers',\n  SHOW_SUBSCRIBE_OPTION: 'showSubscribeOption',\n  SHOW_ABBRV_OFFER: 'showAbbrvOffer',\n  SHOW_CONTRIBUTION_OPTIONS: 'showContributionOptions',\n  SUBSCRIBE: 'subscribe',\n  CONTRIBUTE: 'contribute',\n  COMPLETE_DEFERRED_ACCOUNT_CREATION: 'completeDeferredAccountCreation',\n  LINK_ACCOUNT: 'linkAccount',\n  SHOW_LOGIN_PROMPT: 'showLoginPrompt',\n  SHOW_LOGIN_NOTIFICATION: 'showLoginNotification',\n};\n\n\n/**\n * Configuration properties:\n * - windowOpenMode - either \"auto\" or \"redirect\". The \"redirect\" value will\n *   force redirect flow for any window.open operation, including payments.\n *   The \"auto\" value either uses a redirect or a popup flow depending on\n *   what's possible on a specific environment. Defaults to \"auto\".\n * - enableSwgAnalytics - if set to true then events logged by the publisher's\n *   client will be sent to Google's SwG analytics service.  This information is\n *   used to compare the effectiveness of Google's buy-flow events to those\n *   generated by the publisher's client code.  This includes events sent to\n *   both PropensityApi and LoggerApi.\n * - enablePropensity - If true events from the logger api are sent to the\n *   propensity server.  Note events from the legacy propensity endpoint are\n *   always sent. \n * @typedef {{\n *   experiments: (!Array<string>|undefined),\n *   windowOpenMode: (!WindowOpenMode|undefined),\n *   analyticsMode: (!AnalyticsMode|undefined),\n *   enableSwgAnalytics: (boolean|undefined),\n *   enablePropensity: (boolean|undefined),\n * }}\n */\nexport let Config;\n\n/**\n * @enum {number}\n */\nexport const AnalyticsMode = {\n  DEFAULT: 0,\n  IMPRESSIONS: 1,\n};\n\n/**\n * @enum {string}\n */\nexport const WindowOpenMode = {\n  AUTO: 'auto',\n  REDIRECT: 'redirect',\n};\n\n/**\n * @enum {string}\n */\nexport const ReplaceSkuProrationMode = {\n  // The replacement takes effect immediately, and the remaining time will\n  // be prorated and credited to the user. This is the current default\n  // behavior.\n  IMMEDIATE_WITH_TIME_PRORATION: 'IMMEDIATE_WITH_TIME_PRORATION',\n};\n\n/**\n * The Offers/Contributions UI is rendered differently based on the\n * ProductType. The ProductType parameter is passed to the Payments flow, and\n * then passed back to the Payments confirmation page to render messages/text\n * based on the ProductType.\n * @enum {string}\n */\nexport const ProductType = {\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  UI_CONTRIBUTION: 'UI_CONTRIBUTION',\n};\n\n/**\n * @return {!Config}\n */\nexport function defaultConfig() {\n  return {\n    windowOpenMode: WindowOpenMode.AUTO,\n    analyticsMode: AnalyticsMode.DEFAULT,\n    enableSwgAnalytics: false,\n    enablePropensity: false,\n  };\n}\n\n/**\n * Properties:\n * - skus - a list of SKUs to return from the defined or default list. The\n *   order is preserved.\n * - list - a predefined list of SKUs. Use of this property is uncommon.\n *   Possible values are \"default\" and \"amp\". Default is \"default\".\n * - isClosable - a boolean value to determine whether the view is closable.\n *\n * @typedef {{\n *   skus: (!Array<string>|undefined),\n *   list: (string|undefined),\n *   isClosable: (boolean|undefined),\n * }}\n */\nexport let OffersRequest;\n\n\n/**\n * @typedef {{\n *   linkRequested: boolean,\n * }}\n */\nexport let LoginRequest;\n\n\n/**\n * Properties:\n * - one and only one of \"token\" or \"authCode\"\n * AuthCode reference: https://developers.google.com/actions/identity/oauth2-code-flow\n * Token reference: https://developers.google.com/actions/identity/oauth2-implicit-flow\n * @typedef {{\n *   token: (string|undefined),\n *   authCode: (string|undefined),\n * }}\n */\nexport let SaveSubscriptionRequest;\n\n/**\n * Callback for retrieving subscription request\n *\n * @callback SaveSubscriptionRequestCallback\n * @return {!Promise<SaveSubscriptionRequest> | !SaveSubscriptionRequest} request\n */\nexport let SaveSubscriptionRequestCallback;\n\n/**\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n *\n * @typedef {{\n *   theme: (string|undefined),\n *   lang: (string|undefined),\n * }}\n */\nexport let ButtonOptions;\n\n/**\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n * - messageTextColor: Overrides theme color for message text. (ex: \"#09f\")\n *\n * @typedef {{\n *   theme: (string|undefined),\n *   lang: (string|undefined),\n *   messageTextColor: (string|undefined),\n * }}\n */\nexport let SmartButtonOptions;\n\n/**\n * Properties:\n * - sku: Required. Sku to add to the user's subscriptions.\n * - oldSku: Optional. This is if you want to replace one sku with another. For\n *  example, if a user wants to upgrade or downgrade their current subscription.\n * - prorationMode: Optional. When replacing a subscription you can decide on a\n *  specific proration mode to charge the user.\n *  The default is IMMEDIATE_WITH_TIME_PRORATION.\n *\n *  @typedef {{\n *    skuId: string,\n *    oldSku: (string|undefined),\n *    replaceSkuProrationMode: (ReplaceSkuProrationMode|undefined),\n * }}\n */\nexport let SubscriptionRequest;\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nexport class UserData {\n\n  /**\n   * @param {string} idToken\n   * @param {!Object} data\n   */\n  constructor(idToken, data) {\n    /** @const {string} */\n    this.idToken = idToken;\n    /** @const {!Object} */\n    this.data = data;\n\n    /** @const {string} */\n    this.id = data['sub'];\n    /** @const {string} */\n    this.email = data['email'];\n    /** @const {boolean} */\n    this.emailVerified = data['email_verified'];\n    /** @const {string} */\n    this.name = data['name'];\n    /** @const {string} */\n    this.givenName = data['given_name'];\n    /** @const {string} */\n    this.familyName = data['family_name'];\n    /** @const {string} */\n    this.pictureUrl = data['picture'];\n  }\n\n  /**\n   * @return {!UserData}\n   */\n  clone() {\n    return new UserData(this.idToken, this.data);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'id': this.id,\n      'email': this.email,\n      'emailVerified': this.emailVerified,\n      'name': this.name,\n      'givenName': this.givenName,\n      'familyName': this.familyName,\n      'pictureUrl': this.pictureUrl,\n    };\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {deserialize, getLabel} from '../proto/api_messages';\nimport {\n  ActivityPorts as WebActivityPorts,\n  ActivityIframePort as WebActivityIframePort,\n} from 'web-activities/activity-ports';\nimport {debugLog} from '../utils/log';\n\n/**\n * @interface\n */\nexport class ActivityPortDef {\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {}\n}\n/**\n * @interface\n */\nexport class ActivityPort extends ActivityPortDef {\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!web-activities/activity-ports.ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   * @override\n   */\n  acceptResult() {}\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {}\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {}\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {}\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} unusedCallback\n   */\n  onResizeRequest(unusedCallback) {}\n\n  /**\n   * Sends a message to the host.\n   * @param {!Object} unusedPayload\n   */\n  messageDeprecated(unusedPayload) {}\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * @param {function(!Object)} unusedCallback\n   */\n  onMessageDeprecated(unusedCallback) {}\n\n  /**\n   * @param {!../proto/api_messages.Message} unusedRequest\n   */\n  execute(unusedRequest) {}\n\n  /**\n   * @param {!function(new: T)} unusedMessage\n   * @param {function(Object)} unusedCallback\n   * @template T\n   */\n  on(unusedMessage, unusedCallback) {}\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {}\n}\n/**\n * @implements {ActivityPortDef}\n */\nclass ActivityPortDeprecated {\n  /**\n   * @param {!web-activities/activity-ports.ActivityPort} port\n   */\n  constructor(port) {\n    /** @private @const {!web-activities/activity-ports.ActivityPort} */\n    this.port_ = port;\n  }\n\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.port_.acceptResult();\n  }\n}\n\n/**\n * @implements {ActivityPortDef}\n */\nexport class ActivityIframePort {\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   */\n  constructor(iframe, url, opt_args) {\n    /** @private @const {!web-activities/activity-ports.ActivityIframePort} */\n    this.iframePort_ = new WebActivityIframePort(iframe, url, opt_args);\n    /** @private @const {!Object<string, function(!Object)>} */\n    this.callbackMap_ = {};\n    /** @private {?function(!../proto/api_messages.Message)} */\n    this.callbackOriginal_ = null;\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.iframePort_.whenReady();\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    return this.iframePort_.connect().then(() => {\n      // Attach a callback to receive messages after connection complete\n      this.iframePort_.onMessage(data => {\n        if (this.callbackOriginal_) {\n          this.callbackOriginal_(data);\n        }\n        const response = data && data['RESPONSE'];\n        if (!response) {\n          return;\n        }\n        const cb = this.callbackMap_[response[0]];\n        if (cb) {\n          cb(deserialize(response));\n        }\n      });\n    });\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.iframePort_.disconnect();\n  }\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!web-activities/activity-ports.ActivityMode}\n   */\n  getMode() {\n    return this.iframePort_.getMode();\n  }\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   * @override\n   */\n  acceptResult() {\n    return this.iframePort_.acceptResult();\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    return this.iframePort_.onResizeRequest(callback);\n  }\n\n  /**\n   * Sends a message to the host.\n   * @param {!Object} payload\n   */\n  messageDeprecated(payload) {\n    this.iframePort_.message(payload);\n    debugLog('WARNING: messageDeprecated() is deprecated');\n  }\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * @param {function(!Object)} callback\n   */\n  onMessageDeprecated(callback) {\n    this.callbackOriginal_ = callback;\n    debugLog('WARNING: use of deprecated API onMessageDeprecated()');\n  }\n\n  /**\n   * @param {!../proto/api_messages.Message} request\n   */\n  execute(request) {\n    this.iframePort_.message({'REQUEST': request.toArray()});\n  }\n\n  /**\n   * @param {!function(new: T)} message\n   * @param {function(!../proto/api_messages.Message)} callback\n   * @template T\n   */\n  on(message, callback) {\n    const label = getLabel(message);\n    if (!label) {\n      throw new Error('Invalid data type');\n    } else if (this.callbackMap_[label]) {\n      throw new Error('Invalid type or duplicate callback for ', label);\n    }\n    this.callbackMap_[label] = callback;\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    this.iframePort_.resized();\n  }\n}\n\nexport class ActivityPorts {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = new WebActivityPorts(win);\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, opt_args) {\n    const activityPort = new ActivityIframePort(iframe, url, opt_args);\n    return activityPort.connect().then(() => activityPort);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?web-activities/activity-ports.ActivityOpenOptions=} opt_options\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, opt_args, opt_options) {\n    return this.activityPorts_.open(\n      requestId,\n      url,\n      target,\n      opt_args,\n      opt_options\n    );\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPortDef)} callback\n   */\n  onResult(requestId, callback) {\n    this.activityPorts_.onResult(requestId, port => {\n      callback(new ActivityPortDeprecated(port));\n    });\n  }\n\n  /**\n   * @param {function(!Error)} handler\n   */\n  onRedirectError(handler) {\n    this.activityPorts_.onRedirectError(handler);\n  }\n\n  /**\n   * @return {!web-activities/activity-ports.ActivityPorts}\n   */\n  getOriginalWebActivityPorts() {\n    return this.activityPorts_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Dialog} from './dialog';\nimport {Graypane} from './graypane';\nimport {isCancelError} from '../utils/errors';\n\nconst POPUP_Z_INDEX = 2147483647;\n\n/**\n * The class for the top level dialog.\n * @final\n */\nexport class DialogManager {\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private {?Dialog} */\n    this.dialog_ = null;\n\n    /** @private {?Promise<!Dialog>} */\n    this.openPromise_ = null;\n\n    /** @private @const {!Graypane} */\n    this.popupGraypane_ = new Graypane(doc, POPUP_Z_INDEX);\n\n    /** @private {?Window} */\n    this.popupWin_ = null;\n\n    this.popupGraypane_.getElement().addEventListener('click', () => {\n      if (this.popupWin_) {\n        try {\n          this.popupWin_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  openDialog(hidden = false) {\n    if (!this.openPromise_) {\n      this.dialog_ = new Dialog(this.doc_);\n      this.openPromise_ = this.dialog_.open(hidden);\n    }\n    return this.openPromise_;\n  }\n\n  /**\n   * @param {!./view.View} view\n   * @param {boolean=} hidden\n   * @return {!Promise}\n   */\n  openView(view, hidden = false) {\n    view.whenComplete().catch(reason => {\n      if (isCancelError(reason)) {\n        this.completeView(view);\n      }\n      throw reason;\n    });\n    return this.openDialog(hidden).then(dialog => {\n      return dialog.openView(view);\n    });\n  }\n\n  /**\n   * @param {?./view.View} view\n   */\n  completeView(view) {\n    // Give a small amount of time for another view to take over the dialog.\n    setTimeout(() => {\n      if (this.dialog_ && this.dialog_.getCurrentView() == view) {\n        this.close_();\n      }\n    }, 100);\n  }\n\n  /**\n   */\n  completeAll() {\n    if (this.dialog_) {\n      this.close_();\n    }\n    if (this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.destroy();\n    }\n  }\n\n  /** @private */\n  close_() {\n    this.dialog_.close();\n    this.dialog_ = null;\n    this.openPromise_ = null;\n  }\n\n  /**\n   * @param {?Window|undefined} targetWin\n   */\n  popupOpened(targetWin) {\n    this.popupWin_ = targetWin || null;\n    if (!this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.attach();\n    }\n    this.popupGraypane_.show();\n  }\n\n  /**\n   */\n  popupClosed() {\n    this.popupWin_ = null;\n    try {\n      this.popupGraypane_.hide();\n    } catch (e) {\n      // Ignore.\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CSS as DIALOG_CSS} from '../../build/css/ui/ui.css';\nimport {resolveDoc} from '../model/doc';\nimport {Graypane} from './graypane';\nimport {LoadingView} from '../ui/loading-view';\nimport {\n  createElement,\n  injectStyleSheet,\n  removeChildren,\n  removeElement,\n} from '../utils/dom';\nimport {setStyles, setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\nimport {FriendlyIframe} from './friendly-iframe';\n\nconst Z_INDEX = 2147483647;\n\n/**\n * Default iframe important styles.\n * Note: The iframe responsiveness media query style is injected in the\n * publisher's page since style attribute can not include media query.\n * @const {!Object<string, string|number>}\n */\nconst rootElementImportantStyles = {\n  'min-height': '50px',\n  'border': 'none',\n  'display': 'block',\n  'position': 'fixed',\n  'z-index': Z_INDEX,\n  'box-sizing': 'border-box',\n};\n\n/**\n * Reset view styles.\n * @const {!Object<string, string|number>}\n */\nconst resetViewStyles = {\n  'position': 'absolute',\n  'top': '0',\n  'left': '0',\n  'right': '0',\n  'bottom': '0',\n  'opacity': 0,\n  /* These lines are a work around to this issue in iOS:     */\n  /* https://bugs.webkit.org/show_bug.cgi?id=155198          */\n  'height': 0,\n  'max-height': '100%',\n  'max-width': '100%',\n  'min-height': '100%',\n  'min-width': '100%',\n  'width': 0,\n};\n\n/**\n * Position of the dialog.\n * @const @enum {string}\n */\nconst PositionAt = {\n  BOTTOM: 'BOTTOM',\n  TOP: 'TOP',\n  FLOAT: 'FLOAT',\n  FULL: 'FULL',\n};\n\n/**\n * The class for the top level dialog.\n * @final\n */\nexport class Dialog {\n  /**\n   * Create a dialog for the provided doc.\n   * @param {!../model/doc.Doc} doc\n   * @param {!Object<string, string|number>=} importantStyles\n   * @param {!Object<string, string|number>=} styles\n   */\n  constructor(doc, importantStyles = {}, styles = {}) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!FriendlyIframe} */\n    this.iframe_ = new FriendlyIframe(doc.getWin().document, {\n      'class': 'swg-dialog',\n    });\n\n    /** @private @const {!Graypane} */\n    this.graypane_ = new Graypane(doc, Z_INDEX - 1);\n\n    const modifiedImportantStyles = Object.assign(\n      {},\n      rootElementImportantStyles,\n      importantStyles\n    );\n    setImportantStyles(this.iframe_.getElement(), modifiedImportantStyles);\n\n    setStyles(this.iframe_.getElement(), styles);\n\n    /** @private {LoadingView} */\n    this.loadingView_ = null;\n\n    /** @private {?Element} */\n    this.container_ = null; // Depends on constructed document inside iframe.\n\n    /** @private {?./view.View} */\n    this.view_ = null;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private {boolean} */\n    this.hidden_ = false;\n\n    /** @private {?./view.View} */\n    this.previousProgressView_ = null;\n\n    /** @private {boolean} */\n    this.useFixedLayer_ = false;\n  }\n\n  /**\n   * Opens the dialog and builds the iframe container.\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  open(hidden = false) {\n    const iframe = this.iframe_;\n    if (iframe.isConnected()) {\n      throw new Error('already opened');\n    }\n\n    // Attach.\n    this.doc_.getBody().appendChild(iframe.getElement()); // Fires onload.\n\n    this.graypane_.attach();\n\n    if (hidden) {\n      setImportantStyles(iframe.getElement(), {\n        'visibility': 'hidden',\n        'opacity': 0,\n      });\n      this.hidden_ = hidden;\n    } else {\n      this.show_();\n    }\n\n    if (this.useFixedLayer_) {\n      return this.doc_\n        .addToFixedLayer(iframe.getElement())\n        .then(() => iframe.whenReady())\n        .then(() => {\n          this.buildIframe_();\n          return this;\n        });\n    } else {\n      return iframe.whenReady().then(() => {\n        this.buildIframe_();\n        return this;\n      });\n    }\n  }\n\n  /**\n   * Build the iframe with the styling after iframe is loaded.\n   * @private\n   */\n  buildIframe_() {\n    const iframe = this.iframe_;\n    const iframeBody = iframe.getBody();\n    const iframeDoc = /** @type {!HTMLDocument} */ (this.iframe_.getDocument());\n\n    // Inject Google fonts in <HEAD> section of the iframe.\n    injectStyleSheet(resolveDoc(iframeDoc), DIALOG_CSS);\n\n    // Add Loading indicator.\n    this.loadingView_ = new LoadingView(iframeDoc);\n    iframeBody.appendChild(this.loadingView_.getElement());\n\n    // Container for all dynamic content, including 3P iframe.\n    this.container_ = createElement(iframeDoc, 'swg-container', {});\n    iframeBody.appendChild(this.container_);\n    this.setPosition_();\n  }\n\n  /**\n   * Closes the dialog.\n   * @param {boolean=} animated\n   * @return {!Promise}\n   */\n  close(animated = true) {\n    let animating;\n    if (animated) {\n      animating = this.animate_(() => {\n        this.graypane_.hide(/* animate */ true);\n        return transition(\n          this.getElement(),\n          {\n            'transform': 'translateY(100%)',\n          },\n          300,\n          'ease-out'\n        );\n      });\n    } else {\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      const iframeEl = this.iframe_.getElement();\n      iframeEl.parentNode.removeChild(iframeEl);\n\n      this.removePaddingToHtml_();\n      this.graypane_.destroy();\n    });\n  }\n\n  /**\n   * Gets the container within the dialog.\n   * @return {!Element}\n   */\n  getContainer() {\n    if (!this.container_) {\n      throw new Error('not opened yet');\n    }\n    return this.container_;\n  }\n\n  /**\n   * Gets the attached iframe instance.\n   * @return {!FriendlyIframe}\n   */\n  getIframe() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the Iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_.getElement();\n  }\n\n  /**\n   * Transitions to the next view.\n   * @private\n   */\n  entryTransitionToNextView_() {\n    if (this.view_ && this.view_.hasLoadingIndicator()) {\n      // Temporarily cache the old view.\n      this.previousProgressView_ = this.view_;\n    } else {\n      // Since loading indicator will be shown, remove contents of old view.\n      removeChildren(this.getContainer());\n      // When loading indicator was not displayed in the previous view,\n      // loading indicator must be displayed while transitioning to new view.\n      this.loadingView_.show();\n    }\n  }\n\n  /**\n   * Transition out of an old view.\n   * @private\n   */\n  exitTransitionFromOldView_() {\n    // If previous view is still around, remove it.\n    if (this.previousProgressView_) {\n      removeElement(this.previousProgressView_.getElement());\n      this.previousProgressView_ = null;\n    } else {\n      this.loadingView_.hide();\n    }\n  }\n\n  /** @return {?./view.View} */\n  getCurrentView() {\n    return this.view_;\n  }\n\n  /**\n   * Opens the given view and removes existing view from the DOM if any.\n   * @param {!./view.View} view\n   * @return {!Promise}\n   */\n  openView(view) {\n    setImportantStyles(view.getElement(), resetViewStyles);\n    this.entryTransitionToNextView_();\n\n    this.view_ = view;\n    this.getContainer().appendChild(view.getElement());\n\n    // If the current view should fade the parent document.\n    if (view.shouldFadeBody() && !this.hidden_) {\n      this.graypane_.show(/* animate */ true);\n    }\n\n    return view.init(this).then(() => {\n      setImportantStyles(view.getElement(), {\n        'opacity': 1,\n      });\n      if (this.hidden_) {\n        if (view.shouldFadeBody()) {\n          this.graypane_.show(/* animated */ true);\n        }\n        this.show_();\n      }\n      this.exitTransitionFromOldView_();\n    });\n  }\n\n  /**\n   * Show the iframe.\n   * @private\n   */\n  show_() {\n    this.animate_(() => {\n      setImportantStyles(this.getElement(), {\n        'transform': 'translateY(100%)',\n        'opactiy': 1,\n        'visibility': 'visible',\n      });\n      return transition(\n        this.getElement(),\n        {\n          'transform': 'translateY(0)',\n          'opacity': 1,\n          'visibility': 'visible',\n        },\n        300,\n        'ease-out'\n      );\n    });\n    this.hidden_ = false;\n  }\n\n  /**\n   * Resizes the dialog container.\n   * @param {!./view.View} view\n   * @param {number} height\n   * @param {boolean=} animated\n   * @return {?Promise}\n   */\n  resizeView(view, height, animated = true) {\n    if (this.view_ != view) {\n      return null;\n    }\n    const newHeight = this.getMaxAllowedHeight_(height);\n\n    let animating;\n    if (animated) {\n      const oldHeight = this.getElement().offsetHeight;\n      if (newHeight >= oldHeight) {\n        // Expand.\n        animating = this.animate_(() => {\n          setImportantStyles(this.getElement(), {\n            'height': `${newHeight}px`,\n            'transform': `translateY(${newHeight - oldHeight}px)`,\n          });\n          return transition(\n            this.getElement(),\n            {\n              'transform': 'translateY(0)',\n            },\n            300,\n            'ease-out'\n          );\n        });\n      } else {\n        // Collapse.\n        animating = this.animate_(() => {\n          return transition(\n            this.getElement(),\n            {\n              'transform': `translateY(${oldHeight - newHeight}px)`,\n            },\n            300,\n            'ease-out'\n          ).then(() => {\n            setImportantStyles(this.getElement(), {\n              'height': `${newHeight}px`,\n              'transform': 'translateY(0)',\n            });\n          });\n        });\n      }\n    } else {\n      setImportantStyles(this.getElement(), {\n        'height': `${newHeight}px`,\n      });\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      this.updatePaddingToHtml_(height);\n      view.resized();\n    });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return (this.animating_ = wait\n      .then(\n        () => {\n          return callback();\n        },\n        () => {\n          // Ignore errors to make sure animations don't get stuck.\n        }\n      )\n      .then(() => {\n        this.animating_ = null;\n      }));\n  }\n\n  /**\n   * Returns maximum allowed height for current viewport.\n   * @param {number} height\n   * @return {number}\n   * @private\n   */\n  getMaxAllowedHeight_(height) {\n    return Math.min(height, this.doc_.getWin()./*OK*/ innerHeight * 0.9);\n  }\n\n  /**\n   * Gets the element's height.\n   * @return {number}\n   * @private\n   */\n  getHeight_() {\n    return this.getElement().offsetHeight;\n  }\n\n  /**\n   * Sets the position of the dialog. Currently 'BOTTOM' is set by default.\n   */\n  setPosition_() {\n    setImportantStyles(this.getElement(), this.getPositionStyle_());\n  }\n\n  /**\n   * Add the padding to the containing page so as to not hide the content\n   * behind the popup, if rendered at the bottom.\n   * @param {number} newHeight\n   * @private\n   */\n  updatePaddingToHtml_(newHeight) {\n    if (this.inferPosition_() == PositionAt.BOTTOM) {\n      const bottomPadding = newHeight + 20; // Add some extra padding.\n      const htmlElement = this.doc_.getRootElement();\n      setImportantStyles(htmlElement, {\n        'padding-bottom': `${bottomPadding}px`,\n      });\n    }\n  }\n\n  /**\n   * Removes previouly added bottom padding from the document.\n   * @private\n   */\n  removePaddingToHtml_() {\n    this.doc_.getRootElement().style.removeProperty('padding-bottom');\n  }\n\n  /**\n   * Calculates the position of the dialog. Currently dialog is positioned at\n   * the bottom only. This could change in future to adjust the dialog position\n   * based on the screen size.\n   * @return {string}\n   * @private\n   */\n  inferPosition_() {\n    return PositionAt.BOTTOM;\n  }\n\n  /**\n   * Returns the styles required to postion the dialog.\n   * @return {!Object<string, string|number>}\n   * @private\n   */\n  getPositionStyle_() {\n    const dialogPosition = this.inferPosition_();\n    switch (dialogPosition) {\n      case PositionAt.BOTTOM:\n        return {'bottom': 0};\n      case PositionAt.TOP:\n        return {'top': 0};\n      case PositionAt.FLOAT:\n        return {\n          'position': 'fixed',\n          'top': '50%',\n          'left': '50%',\n          'transform': 'translate(-50%, -50%)',\n        };\n      case PositionAt.FULL:\n        return {\n          'position': 'fixed',\n          'height': '100%',\n          'top': 0,\n          'bottom': 0,\n        };\n      default:\n        return {'bottom': 0};\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement, isConnected} from '../utils/dom';\nimport {resetAllStyles} from '../utils/style';\n\n/** @const {!Object<string|number>} */\nconst friendlyIframeAttributes = {\n  'frameborder': 0,\n  'scrolling': 'no',\n  'src': 'about:blank',\n};\n\n/**\n * The class for building friendly iframe.\n */\nexport class FriendlyIframe {\n  /**\n   * @param {!Document} doc\n   * @param {!Object<string, string|number>=} attrs\n   */\n  constructor(doc, attrs = {}) {\n    const mergedAttrs = Object.assign({}, friendlyIframeAttributes, attrs);\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      doc,\n      'iframe',\n      mergedAttrs\n    ));\n\n    // Ensure that the new iframe does not inherit any CSS styles.\n    resetAllStyles(this.iframe_);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise(resolve => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * When promise is resolved.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * Gets the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the document object of the iframe element.\n   * @return {!Document}\n   */\n  getDocument() {\n    const doc =\n      this.getElement().contentDocument ||\n      (this.getElement().contentWindow &&\n        this.getElement().contentWindow.document);\n\n    if (!doc) {\n      throw new Error('not loaded');\n    }\n    return doc;\n  }\n\n  /**\n   * Gets the body of the iframe.\n   * @return {!Element}\n   */\n  getBody() {\n    return /** @type {!Element} */ (this.getDocument().body);\n  }\n\n  /**\n   * Whether the iframe is connected.\n   * @return {boolean}\n   */\n  isConnected() {\n    return isConnected(this.getElement());\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\nexport class Graypane {\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {number} zIndex\n   */\n  constructor(doc, zIndex) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.fadeBackground_ = this.doc_\n      .getWin()\n      .document.createElement('swg-popup-background');\n    setImportantStyles(this.fadeBackground_, {\n      'z-index': zIndex,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n  }\n\n  /**\n   * @return {!Element}\n   */\n  getElement() {\n    return this.fadeBackground_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isAttached() {\n    return !!this.fadeBackground_.parentNode;\n  }\n\n  /**\n   * Attaches the graypane to the document.\n   */\n  attach() {\n    this.doc_.getBody().appendChild(this.fadeBackground_);\n  }\n\n  /**\n   * Detaches the graypane to the document.\n   */\n  destroy() {\n    this.doc_.getBody().removeChild(this.fadeBackground_);\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  show(animated = true) {\n    setImportantStyles(this.fadeBackground_, {\n      'display': 'block',\n      'opacity': animated ? 0 : 1,\n    });\n    if (animated) {\n      return transition(\n        this.fadeBackground_,\n        {\n          'opacity': 1,\n        },\n        300,\n        'ease-out'\n      );\n    }\n  }\n\n  /**\n   * Hides the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  hide(animated = true) {\n    if (animated) {\n      return transition(\n        this.fadeBackground_,\n        {\n          'opacity': 0,\n        },\n        300,\n        'ease-out'\n      ).then(() => {\n        setImportantStyles(this.fadeBackground_, {'display': 'none'});\n      });\n    }\n    setImportantStyles(this.fadeBackground_, {'display': 'none'});\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * abstract View Class. Used to render the content within the Dialog. The\n * extended class has actual content.\n * @abstract\n */\nexport class View {\n  /**\n   * Empty constructor.\n   */\n  constructor() {}\n\n  /**\n   * Gets the iframe element.\n   * @return {!Element}\n   * @abstract\n   */\n  getElement() {}\n\n  /**\n   * @param {!./dialog.Dialog} unusedDialog\n   * @return {!Promise}\n   * @abstract\n   */\n  init(unusedDialog) {}\n\n  /**\n   * Resizes the content.\n   */\n  resized() {\n    // Do nothing by default. Override if needed.\n  }\n\n  /**\n   * Accept the result.\n   * @return {!Promise}\n   * @abstract\n   */\n  whenComplete() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  shouldFadeBody() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  hasLoadingIndicator() {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Entry point into library for compilation with babel. Just loads main.js\n// and Babel's helpers.\n\nimport '../third_party/babel/custom-babel-helpers';\nimport './main';\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * The entry point for runtime (swg.js).\n */\n\nimport './polyfills';\nimport {installRuntime} from './runtime/runtime';\nimport {log} from './utils/log';\n\nlog('Subscriptions Runtime: $internalRuntimeVersion$');\n\ninstallRuntime(self);\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isDocumentReady, whenDocumentReady} from '../utils/document-ready';\n\n/**\n * @interface\n */\nexport class Doc {\n  /**\n   * @return {!Window}\n   */\n  getWin() {}\n\n  /**\n   * The `Document` node or analog.\n   * @return {!Node}\n   */\n  getRootNode() {}\n\n  /**\n   * The `Document.documentElement` element or analog.\n   * @return {!Element}\n   */\n  getRootElement() {}\n\n  /**\n   * The `Document.head` element or analog. Returns `null` if not available\n   * yet.\n   * @return {!Element}\n   */\n  getHead() {}\n\n  /**\n   * The `Document.body` element or analog. Returns `null` if not available\n   * yet.\n   * @return {?Element}\n   */\n  getBody() {}\n\n  /**\n   * Whether the document has been fully constructed.\n   * @return {boolean}\n   */\n  isReady() {}\n\n  /**\n   * Resolved when document has been fully constructed.\n   * @return {!Promise}\n   */\n  whenReady() {}\n\n  /**\n   * Adds the element to the fixed layer.\n   * @param {!Element} unusedElement\n   * @return {!Promise}\n   *\n   * This is a no-op for except in AMP on iOS < 13.0.\n   */\n  addToFixedLayer(unusedElement) {}\n}\n\n/** @implements {Doc} */\nexport class GlobalDoc {\n  /**\n   * @param {!Window|!Document} winOrDoc\n   */\n  constructor(winOrDoc) {\n    const isWin = !!winOrDoc.document;\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (isWin\n      ? /** @type {!Window} */ (winOrDoc)\n      : /** @type {!Document} */ (winOrDoc).defaultView);\n    /** @private @const {!Document} */\n    this.doc_ = isWin\n      ? /** @type {!Window} */ (winOrDoc).document\n      : /** @type {!Document} */ (winOrDoc);\n  }\n\n  /** @override */\n  getWin() {\n    return this.win_;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.doc_;\n  }\n\n  /** @override */\n  getRootElement() {\n    return this.doc_.documentElement;\n  }\n\n  /** @override */\n  getHead() {\n    // `document.head` always has a chance to be parsed, at least partially.\n    return /** @type {!Element} */ (this.doc_.head);\n  }\n\n  /** @override */\n  getBody() {\n    return this.doc_.body;\n  }\n\n  /** @override */\n  isReady() {\n    return isDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  whenReady() {\n    return whenDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  addToFixedLayer(unusedElement) {\n    return Promise.resolve();\n  }\n}\n\n/**\n * @param {!Document|!Window|!Doc} input\n * @return {!Doc}\n */\nexport function resolveDoc(input) {\n  // Is it a `Document`\n  if (/** @type {!Document} */ (input).nodeType === /* DOCUMENT */ 9) {\n    return new GlobalDoc(/** @type {!Document} */ (input));\n  }\n  // Is it a `Window`?\n  if (/** @type {!Window} */ (input).document) {\n    return new GlobalDoc(/** @type {!Window} */ (input));\n  }\n  return /** @type {!Doc} */ (input);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Doc, resolveDoc} from './doc';\nimport {PageConfig} from './page-config';\nimport {debugLog} from '../utils/log';\nimport {hasNextNodeInDocumentOrder} from '../utils/dom';\nimport {isArray} from '../utils/types';\nimport {tryParseJson} from '../utils/json';\n\nconst ALREADY_SEEN = '__SWG-SEEN__';\nconst CONTROL_FLAG = 'subscriptions-control';\n\nconst ALLOWED_TYPES = [\n  'CreativeWork',\n  'Article',\n  'NewsArticle',\n  'Blog',\n  'Comment',\n  'Course',\n  'HowTo',\n  'Message',\n  'Review',\n  'WebPage',\n];\n\n// RegExp for quickly scanning LD+JSON for allowed types\nconst RE_ALLOWED_TYPES = new RegExp(ALLOWED_TYPES.join('|'));\n\n/**\n */\nexport class PageConfigResolver {\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   */\n  constructor(winOrDoc) {\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private {?function((!PageConfig|!Promise))} */\n    this.configResolver_ = null;\n\n    /** @private @const {!Promise<!PageConfig>} */\n    this.configPromise_ = new Promise(resolve => {\n      this.configResolver_ = resolve;\n    });\n\n    /** @private @const {!MetaParser} */\n    this.metaParser_ = new MetaParser(this.doc_);\n    /** @private @const {!JsonLdParser} */\n    this.ldParser_ = new JsonLdParser(this.doc_);\n    /** @private @const {!MicrodataParser} */\n    this.microdataParser_ = new MicrodataParser(this.doc_);\n  }\n\n  /**\n   * @return {!Promise<!PageConfig>}\n   */\n  resolveConfig() {\n    // Try resolve the config at different times.\n    Promise.resolve().then(this.check.bind(this));\n    this.doc_.whenReady().then(this.check.bind(this));\n    return this.configPromise_;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    // Already resolved.\n    if (!this.configResolver_) {\n      return null;\n    }\n    let config = this.metaParser_.check();\n    if (!config) {\n      config = this.ldParser_.check();\n    }\n    if (!config) {\n      config = this.microdataParser_.check();\n    }\n    if (config) {\n      // Product ID has been found: initialize the rest of the config.\n      this.configResolver_(config);\n      this.configResolver_ = null;\n    } else if (this.doc_.isReady()) {\n      this.configResolver_(\n        Promise.reject(new Error('No config could be discovered in the page'))\n      );\n      this.configResolver_ = null;\n    }\n    debugLog(config);\n    return config;\n  }\n}\n\nclass TypeChecker {\n  constructor() {}\n\n  /**\n   * Check value from json\n   * @param {?Array|string} value\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkValue(value, expectedTypes) {\n    if (!value) {\n      return false;\n    }\n    return this.checkArray(this.toArray_(value), expectedTypes);\n  }\n\n  /**\n   * Checks space delimited list of types\n   * @param {?string} itemtype\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkString(itemtype, expectedTypes) {\n    if (!itemtype) {\n      return false;\n    }\n    return this.checkArray(itemtype.split(/\\s+/), expectedTypes);\n  }\n\n  /**\n   * @param {Array<?string>} typeArray\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkArray(typeArray, expectedTypes) {\n    let found = false;\n    typeArray.forEach(candidateType => {\n      found =\n        found ||\n        expectedTypes.includes(\n          candidateType.replace(/^http:\\/\\/schema.org\\//i, '')\n        );\n    });\n    return found;\n  }\n\n  /*\n   * @param {?Array|string} value\n   * @return {Array}\n   * @private\n   */\n  toArray_(value) {\n    return isArray(value) ? value : [value];\n  }\n}\n\nclass MetaParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    // Try to find product id.\n    const productId = getMetaTag(\n      this.doc_.getRootNode(),\n      'subscriptions-product-id'\n    );\n    if (!productId) {\n      return null;\n    }\n\n    // Is locked?\n    const accessibleForFree = getMetaTag(\n      this.doc_.getRootNode(),\n      'subscriptions-accessible-for-free'\n    );\n    const locked =\n      (accessibleForFree && accessibleForFree.toLowerCase() == 'false') ||\n      false;\n\n    return new PageConfig(productId, locked);\n  }\n}\n\nclass JsonLdParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private @const @function */\n    this.checkType_ = new TypeChecker();\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    const domReady = this.doc_.isReady();\n\n    // type: 'application/ld+json'\n    const elements = this.doc_\n      .getRootNode()\n      .querySelectorAll('script[type=\"application/ld+json\"]');\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (\n        element[ALREADY_SEEN] ||\n        !element.textContent ||\n        (!domReady && !hasNextNodeInDocumentOrder(element))\n      ) {\n        continue;\n      }\n      element[ALREADY_SEEN] = true;\n      if (!RE_ALLOWED_TYPES.test(element.textContent)) {\n        continue;\n      }\n      const possibleConfig = this.tryExtractConfig_(element);\n      if (possibleConfig) {\n        return possibleConfig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?PageConfig}\n   */\n  tryExtractConfig_(element) {\n    const json = tryParseJson(element.textContent);\n    if (!json) {\n      return null;\n    }\n\n    // Must be an ALLOWED_TYPE\n    if (!this.checkType_.checkValue(json['@type'], ALLOWED_TYPES)) {\n      return null;\n    }\n\n    // Must have a isPartOf[@type=Product].\n    let productId = null;\n    const partOfArray = this.valueArray_(json, 'isPartOf');\n    if (partOfArray) {\n      for (let i = 0; i < partOfArray.length; i++) {\n        productId = this.discoverProductId_(partOfArray[i]);\n        if (productId) {\n          break;\n        }\n      }\n    }\n    if (!productId) {\n      return null;\n    }\n\n    // Found product id, just check for the access flag.\n    const isAccessibleForFree = this.bool_(\n      this.singleValue_(json, 'isAccessibleForFree'),\n      /* default */ true\n    );\n\n    return new PageConfig(productId, !isAccessibleForFree);\n  }\n\n  /**\n   * @param {*} value\n   * @param {boolean} def\n   * @return {boolean}\n   */\n  bool_(value, def) {\n    if (value == null || value === '') {\n      return def;\n    }\n    if (typeof value == 'boolean') {\n      return value;\n    }\n    if (typeof value == 'string') {\n      const lowercase = value.toLowerCase();\n      if (lowercase == 'false') {\n        return false;\n      }\n      if (lowercase == 'true') {\n        return true;\n      }\n    }\n    return def;\n  }\n\n  /**\n   * @param {!Object} json\n   * @return {?string}\n   */\n  discoverProductId_(json) {\n    // Must have type `Product`.\n    if (!this.checkType_.checkValue(json['@type'], ['Product'])) {\n      return null;\n    }\n    return /** @type {?string} */ (this.singleValue_(json, 'productID'));\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {?Array}\n   */\n  valueArray_(json, name) {\n    const value = json[name];\n    if (value == null || value === '') {\n      return null;\n    }\n    return isArray(value) ? value : [value];\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {*}\n   */\n  singleValue_(json, name) {\n    const valueArray = this.valueArray_(json, name);\n    const value = valueArray && valueArray[0];\n    return value == null || value === '' ? null : value;\n  }\n}\n\nclass MicrodataParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private {?boolean} */\n    this.access_ = null;\n    /** @private {?string} */\n    this.productId_ = null;\n    /** @private @const @function */\n    this.checkType_ = new TypeChecker();\n  }\n\n  /**\n   * Returns false if access is restricted, otherwise true\n   * @param {!Element} root An element that is an item of type in ALLOWED_TYPES list\n   * @return {?boolean} locked access\n   * @private\n   */\n  discoverAccess_(root) {\n    const ALREADY_SEEN = 'alreadySeenForAccessInfo';\n    const nodeList = root.querySelectorAll(\"[itemprop='isAccessibleForFree']\");\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      if (!content) {\n        continue;\n      }\n      if (this.isValidElement_(element, root, ALREADY_SEEN)) {\n        let accessForFree = null;\n        if (content.toLowerCase() == 'true') {\n          accessForFree = true;\n        } else if (content.toLowerCase() == 'false') {\n          accessForFree = false;\n        }\n        return accessForFree;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Verifies if an element is valid based on the following\n   * - child of an item of one the the ALLOWED_TYPES\n   * - not a child of an item of any other type\n   * - not seen before, marked using the alreadySeen tag\n   * @param {?Element} current the element to be verified\n   * @param {!Element} root the parent to track up to\n   * @param {!string} alreadySeen used to tag already visited nodes\n   * @return {!boolean} valid node\n   * @private\n   */\n  isValidElement_(current, root, alreadySeen) {\n    for (\n      let node = current;\n      node && !node[alreadySeen];\n      node = node.parentNode\n    ) {\n      node[alreadySeen] = true;\n      // document nodes don't have hasAttribute\n      if (node.hasAttribute && node.hasAttribute('itemscope')) {\n        /**{?string} */\n        const type = node.getAttribute('itemtype');\n        return this.checkType_.checkString(type, ALLOWED_TYPES);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Obtains the product ID that meets the requirements\n   * - child of an item of one of ALLOWED_TYPES\n   * - Not a child of an item of type 'Section'\n   * - child of an item of type 'productID'\n   * @param {!Element} root An element that is an item of an ALLOWED_TYPES\n   * @return {?string} product ID, if found\n   * @private\n   */\n  discoverProductId_(root) {\n    const ALREADY_SEEN = 'alreadySeenForProductInfo';\n    const nodeList = root.querySelectorAll('[itemprop=\"productID\"]');\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      const item = element.closest('[itemtype][itemscope]');\n      const type = item.getAttribute('itemtype');\n      if (type.indexOf('http://schema.org/Product') <= -1) {\n        continue;\n      }\n      if (this.isValidElement_(item.parentElement, root, ALREADY_SEEN)) {\n        return content;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns PageConfig if available\n   * @return {?PageConfig} PageConfig found so far\n   */\n  getPageConfig_() {\n    let locked = null;\n    if (this.access_ != null) {\n      locked = !this.access_;\n    } else if (this.doc_.isReady()) {\n      // Default to unlocked\n      locked = false;\n    }\n    if (this.productId_ != null && locked != null) {\n      return new PageConfig(this.productId_, locked);\n    }\n    return null;\n  }\n\n  /**\n   * Extracts page config from Microdata in the DOM\n   * @return {?PageConfig} PageConfig found\n   */\n  tryExtractConfig_() {\n    let config = this.getPageConfig_();\n    if (config) {\n      return config;\n    }\n\n    // Grab all the nodes with an itemtype and filter for our allowed types\n    const nodeList = Array.prototype.slice\n      .call(this.doc_.getRootNode().querySelectorAll('[itemscope][itemtype]'))\n      .filter(node =>\n        this.checkType_.checkString(\n          node.getAttribute('itemtype'),\n          ALLOWED_TYPES\n        )\n      );\n\n    for (let i = 0; nodeList[i] && config == null; i++) {\n      const element = nodeList[i];\n      if (this.access_ == null) {\n        this.access_ = this.discoverAccess_(element);\n      }\n      if (!this.productId_) {\n        this.productId_ = this.discoverProductId_(element);\n      }\n      config = this.getPageConfig_();\n    }\n    return config;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n    return this.tryExtractConfig_();\n  }\n}\n\n/**\n * @param {!Node} rootNode\n * @return {?string}\n */\nexport function getControlFlag(rootNode) {\n  // Look for the flag in `meta`.\n  const flag = getMetaTag(rootNode, CONTROL_FLAG);\n  if (flag) {\n    return flag;\n  }\n  // Look for the flag in `script`.\n  const el = rootNode.querySelector(`script[${CONTROL_FLAG}]`);\n  if (el) {\n    return el.getAttribute(CONTROL_FLAG);\n  }\n  return null;\n}\n\n/**\n * Returns the value from content attribute of a meta tag with given name.\n *\n * If multiple tags are found, the first value is returned.\n *\n * @param {!Node} rootNode\n * @param {string} name The tag name to look for.\n * @return {?string} attribute value or empty string.\n * @private\n */\nfunction getMetaTag(rootNode, name) {\n  const el = rootNode.querySelector(`meta[name=\"${name}\"]`);\n  if (el) {\n    return el.getAttribute('content');\n  }\n  return null;\n}\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n */\nexport class PageConfig {\n  /**\n   * @param {string} productOrPublicationId\n   * @param {boolean} locked\n   */\n  constructor(productOrPublicationId, locked) {\n    let publicationId, productId, label;\n    const div = productOrPublicationId.indexOf(':');\n    if (div != -1) {\n      // The argument is a product id.\n      productId = productOrPublicationId;\n      publicationId = productId.substring(0, div);\n      label = productId.substring(div + 1);\n      if (label == '*') {\n        throw new Error('wildcard disallowed');\n      }\n    } else {\n      // The argument is a publication id.\n      publicationId = productOrPublicationId;\n      productId = null;\n      label = null;\n    }\n\n    /** @private @const {string} */\n    this.publicationId_ = publicationId;\n    /** @private @const {?string} */\n    this.productId_ = productId;\n    /** @private @const {?string} */\n    this.label_ = label;\n    /** @private @const {boolean} */\n    this.locked_ = locked;\n  }\n\n  /**\n   * @return {string}\n   */\n  getPublicationId() {\n    return this.publicationId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getProductId() {\n    return this.productId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getLabel() {\n    return this.label_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isLocked() {\n    return this.locked_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Loads all polyfills needed by the project.\n * This list should not get longer without a very good reason.\n */\nimport {install as installDOMTokenListToggle} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installObjectValues} from './polyfills/object-values';\nimport {install as installPromise} from './polyfills/promise';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\n\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallObjectValues(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Sets the Array.contains polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.HTMLDocument.prototype.contains) {\n    win.Object.defineProperty(win.HTMLDocument.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method.\n * This is specially important because IE does not support `opt_force` attribute.\n * See https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @returns {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @returns {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Implements `Object.values` API.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values.\n *\n * @param {!Object} target\n * @returns {!Array<*>}\n */\nexport function values(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = [];\n  for (const key in target) {\n    if (hasOwnProperty.call(target, key)) {\n      output.push(target[key]);\n    }\n  }\n  return output;\n}\n\n/**\n * Sets the Object.values polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.values) {\n    win.Object.defineProperty(win.Object, 'values', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: values,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @interface\n */\nclass Message {\n  /**\n   * @return {string}\n   */\n  label() {}\n\n  /**\n   * @return {!Array}\n   */\n  toArray() {}\n}\n\n/** @enum {number} */\nconst AnalyticsEvent = {\n  UNKNOWN: 0,\n  IMPRESSION_PAYWALL: 1,\n  IMPRESSION_AD: 2,\n  IMPRESSION_OFFERS: 3,\n  IMPRESSION_SUBSCRIBE_BUTTON: 4,\n  IMPRESSION_SMARTBOX: 5,\n  IMPRESSION_SWG_BUTTON: 6,\n  IMPRESSION_CLICK_TO_SHOW_OFFERS: 7,\n  IMPRESSION_CLICK_TO_SHOW_OFFERS_OR_ALREADY_SUBSCRIBED: 8,\n  IMPRESSION_SUBSCRIPTION_COMPLETE: 9,\n  IMPRESSION_ACCOUNT_CHANGED: 10,\n  ACTION_SUBSCRIBE: 1000,\n  ACTION_PAYMENT_COMPLETE: 1001,\n  ACTION_ACCOUNT_CREATED: 1002,\n  ACTION_ACCOUNT_ACKNOWLEDGED: 1003,\n  ACTION_SUBSCRIPTIONS_LANDING_PAGE: 1004,\n  ACTION_PAYMENT_FLOW_STARTED: 1005,\n  ACTION_OFFER_SELECTED: 1006,\n  ACTION_SWG_BUTTON_CLICK: 1007,\n  ACTION_VIEW_OFFERS: 1008,\n  ACTION_ALREADY_SUBSCRIBED: 1009,\n  ACTION_NEW_DEFERRED_ACCOUNT: 1010,\n  EVENT_PAYMENT_FAILED: 2000,\n  EVENT_CUSTOM: 3000,\n  EVENT_CONFIRM_TX_ID: 3001,\n  EVENT_CHANGED_TX_ID: 3002,\n  EVENT_GPAY_NO_TX_ID: 3003,\n  EVENT_GPAY_CANNOT_CONFIRM_TX_ID: 3004,\n  EVENT_SUBSCRIPTION_STATE: 4000,\n};\n/** @enum {number} */\nconst EventOriginator = {\n  UNKNOWN_CLIENT: 0,\n  SWG_CLIENT: 1,\n  AMP_CLIENT: 2,\n  PROPENSITY_CLIENT: 3,\n  SWG_SERVER: 4,\n  PUBLISHER_CLIENT: 5,\n};\n\n/**\n * @implements {Message}\n */\nclass AccountCreationRequest {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.complete_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getComplete() {\n    return this.complete_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setComplete(value) {\n    this.complete_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.complete_,  // field 1 - complete\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AccountCreationRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AlreadySubscribedResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.subscriberOrMember_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?boolean} */\n    this.linkRequested_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getSubscriberOrMember() {\n    return this.subscriberOrMember_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setSubscriberOrMember(value) {\n    this.subscriberOrMember_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getLinkRequested() {\n    return this.linkRequested_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setLinkRequested(value) {\n    this.linkRequested_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.subscriberOrMember_,  // field 1 - subscriber_or_member\n      this.linkRequested_,  // field 2 - link_requested\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AlreadySubscribedResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsContext {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.embedderOrigin_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.transactionId_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?string} */\n    this.referringOrigin_ = (data[3] == null) ? null : data[3];\n\n    /** @private {?string} */\n    this.utmSource_ = (data[4] == null) ? null : data[4];\n\n    /** @private {?string} */\n    this.utmCampaign_ = (data[5] == null) ? null : data[5];\n\n    /** @private {?string} */\n    this.utmMedium_ = (data[6] == null) ? null : data[6];\n\n    /** @private {?string} */\n    this.sku_ = (data[7] == null) ? null : data[7];\n\n    /** @private {?boolean} */\n    this.readyToPay_ = (data[8] == null) ? null : data[8];\n\n    /** @private {!Array<string>} */\n    this.label_ = data[9] || [];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getEmbedderOrigin() {\n    return this.embedderOrigin_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setEmbedderOrigin(value) {\n    this.embedderOrigin_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getTransactionId() {\n    return this.transactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setTransactionId(value) {\n    this.transactionId_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getReferringOrigin() {\n    return this.referringOrigin_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setReferringOrigin(value) {\n    this.referringOrigin_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmSource() {\n    return this.utmSource_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmSource(value) {\n    this.utmSource_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmCampaign() {\n    return this.utmCampaign_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmCampaign(value) {\n    this.utmCampaign_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmMedium() {\n    return this.utmMedium_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmMedium(value) {\n    this.utmMedium_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getReadyToPay() {\n    return this.readyToPay_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setReadyToPay(value) {\n    this.readyToPay_ = value;\n  }\n\n  /**\n   * @return {!Array<string>}\n   */\n  getLabelList() {\n    return this.label_;\n  }\n\n  /**\n   * @param {!Array<string>} value\n   */\n  setLabelList(value) {\n    this.label_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.embedderOrigin_,  // field 1 - embedder_origin\n      this.transactionId_,  // field 2 - transaction_id\n      this.referringOrigin_,  // field 3 - referring_origin\n      this.utmSource_,  // field 4 - utm_source\n      this.utmCampaign_,  // field 5 - utm_campaign\n      this.utmMedium_,  // field 6 - utm_medium\n      this.sku_,  // field 7 - sku\n      this.readyToPay_,  // field 8 - ready_to_pay\n      this.label_,  // field 9 - label\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsContext';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsEventMeta {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?EventOriginator} */\n    this.eventOriginator_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?boolean} */\n    this.isFromUserAction_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?EventOriginator}\n   */\n  getEventOriginator() {\n    return this.eventOriginator_;\n  }\n\n  /**\n   * @param {!EventOriginator} value\n   */\n  setEventOriginator(value) {\n    this.eventOriginator_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getIsFromUserAction() {\n    return this.isFromUserAction_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setIsFromUserAction(value) {\n    this.isFromUserAction_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.eventOriginator_,  // field 1 - event_originator\n      this.isFromUserAction_,  // field 2 - is_from_user_action\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsEventMeta';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsRequest {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?AnalyticsContext} */\n    this.context_ = (data[1] == null || data[1] == undefined) ? null : new\n        AnalyticsContext(data[1]);\n\n    /** @private {?AnalyticsEvent} */\n    this.event_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?AnalyticsEventMeta} */\n    this.meta_ = (data[3] == null || data[3] == undefined) ? null : new\n        AnalyticsEventMeta(data[3]);\n\n    /** @private {?EventParams} */\n    this.params_ = (data[4] == null || data[4] == undefined) ? null : new\n        EventParams(data[4]);\n  }\n\n  /**\n   * @return {?AnalyticsContext}\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {!AnalyticsContext} value\n   */\n  setContext(value) {\n    this.context_ = value;\n  }\n\n  /**\n   * @return {?AnalyticsEvent}\n   */\n  getEvent() {\n    return this.event_;\n  }\n\n  /**\n   * @param {!AnalyticsEvent} value\n   */\n  setEvent(value) {\n    this.event_ = value;\n  }\n\n  /**\n   * @return {?AnalyticsEventMeta}\n   */\n  getMeta() {\n    return this.meta_;\n  }\n\n  /**\n   * @param {!AnalyticsEventMeta} value\n   */\n  setMeta(value) {\n    this.meta_ = value;\n  }\n\n  /**\n   * @return {?EventParams}\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {!EventParams} value\n   */\n  setParams(value) {\n    this.params_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.context_ ? this.context_.toArray() : [], // field 1 - context\n      this.event_,  // field 2 - event\n      this.meta_ ? this.meta_.toArray() : [], // field 3 - meta\n      this.params_ ? this.params_.toArray() : [], // field 4 - params\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EntitlementsResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.jwt_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getJwt() {\n    return this.jwt_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setJwt(value) {\n    this.jwt_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.jwt_,  // field 1 - jwt\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EntitlementsResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EventParams {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.smartboxMessage_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.gpayTransactionId_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?boolean} */\n    this.hadLogged_ = (data[3] == null) ? null : data[3];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSmartboxMessage() {\n    return this.smartboxMessage_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSmartboxMessage(value) {\n    this.smartboxMessage_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getGpayTransactionId() {\n    return this.gpayTransactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setGpayTransactionId(value) {\n    this.gpayTransactionId_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getHadLogged() {\n    return this.hadLogged_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setHadLogged(value) {\n    this.hadLogged_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.smartboxMessage_,  // field 1 - smartbox_message\n      this.gpayTransactionId_,  // field 2 - gpay_transaction_id\n      this.hadLogged_,  // field 3 - had_logged\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EventParams';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass LinkSaveTokenRequest {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.authCode_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.token_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getAuthCode() {\n    return this.authCode_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setAuthCode(value) {\n    this.authCode_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getToken() {\n    return this.token_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setToken(value) {\n    this.token_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.authCode_,  // field 1 - auth_code\n      this.token_,  // field 2 - token\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'LinkSaveTokenRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass LinkingInfoResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.requested_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getRequested() {\n    return this.requested_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setRequested(value) {\n    this.requested_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.requested_,  // field 1 - requested\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'LinkingInfoResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SkuSelectedResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.sku_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.oldSku_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getOldSku() {\n    return this.oldSku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setOldSku(value) {\n    this.oldSku_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.sku_,  // field 1 - sku\n      this.oldSku_,  // field 2 - old_sku\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SkuSelectedResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SmartBoxMessage {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.isClicked_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getIsClicked() {\n    return this.isClicked_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setIsClicked(value) {\n    this.isClicked_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.isClicked_,  // field 1 - is_clicked\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SmartBoxMessage';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SubscribeResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.subscribe_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getSubscribe() {\n    return this.subscribe_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setSubscribe(value) {\n    this.subscribe_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.subscribe_,  // field 1 - subscribe\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SubscribeResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass ViewSubscriptionsResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.native_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getNative() {\n    return this.native_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setNative(value) {\n    this.native_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.native_,  // field 1 - native\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'ViewSubscriptionsResponse';\n  }\n}\n\nconst PROTO_MAP = {\n  'AccountCreationRequest': AccountCreationRequest,\n  'AlreadySubscribedResponse': AlreadySubscribedResponse,\n  'AnalyticsContext': AnalyticsContext,\n  'AnalyticsEventMeta': AnalyticsEventMeta,\n  'AnalyticsRequest': AnalyticsRequest,\n  'EntitlementsResponse': EntitlementsResponse,\n  'EventParams': EventParams,\n  'LinkSaveTokenRequest': LinkSaveTokenRequest,\n  'LinkingInfoResponse': LinkingInfoResponse,\n  'SkuSelectedResponse': SkuSelectedResponse,\n  'SmartBoxMessage': SmartBoxMessage,\n  'SubscribeResponse': SubscribeResponse,\n  'ViewSubscriptionsResponse': ViewSubscriptionsResponse,\n};\n\n/**\n * Utility to deserialize a buffer\n * @param {!Array} data\n * @return {!Message}\n */\nfunction deserialize(data) {\n  /** {?string} */\n  const key = data ? data[0] : null;\n  if (key) {\n    const ctor = PROTO_MAP[key];\n    if (ctor) {\n      return new ctor(data);\n    }\n  }\n  throw new Error('Deserialization failed for ' + data);\n}\n\n/**\n * @param {function(new: T)} messageType\n * @return {string}\n * @template T\n */\nfunction getLabel(messageType) {\n  const message = /** @type {!Message} */ (new messageType());\n  return message.label();\n}\n\nexport {\n  AccountCreationRequest,\n  AlreadySubscribedResponse,\n  AnalyticsContext,\n  AnalyticsEvent,\n  AnalyticsEventMeta,\n  AnalyticsRequest,\n  EntitlementsResponse,\n  EventOriginator,\n  EventParams,\n  LinkSaveTokenRequest,\n  LinkingInfoResponse,\n  Message,\n  SkuSelectedResponse,\n  SmartBoxMessage,\n  SubscribeResponse,\n  ViewSubscriptionsResponse,\n  deserialize,\n  getLabel,\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsRequest,\n  AnalyticsContext,\n  AnalyticsEventMeta,\n  AnalyticsEvent,\n  EventParams,\n} from '../proto/api_messages';\nimport {createElement} from '../utils/dom';\nimport {feArgs, feUrl} from './services';\nimport {getOnExperiments} from './experiments';\nimport {parseQueryString, parseUrl} from '../utils/url';\nimport {setImportantStyles} from '../utils/style';\nimport {getUuid} from '../utils/string';\nimport {ClientEventManager} from './client-event-manager';\n\n/** @const {!Object<string, string>} */\nconst iframeStyles = {\n  display: 'none',\n};\n\nexport class AnalyticsService {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_.getWin().document,\n      'iframe',\n      {}\n    ));\n\n    setImportantStyles(this.iframe_, iframeStyles);\n\n    /** @private @const {string} */\n    this.src_ = feUrl('/serviceiframe');\n\n    /** @private @const {string} */\n    this.publicationId_ = deps.pageConfig().getPublicationId();\n\n    this.args_ = feArgs({\n      publicationId: this.publicationId_,\n    });\n\n    /** @private @type {!boolean} */\n    this.everLogged_ = false;\n\n    /**\n     * @private @const {!AnalyticsContext}\n     */\n    this.context_ = new AnalyticsContext();\n\n    this.context_.setTransactionId(getUuid());\n\n    /** @private {?Promise<!web-activities/activity-ports.ActivityIframePort>} */\n    this.serviceReady_ = null;\n\n    /** @private {?Promise} */\n    this.lastAction_ = null;\n\n    /** @private @const {!ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n    this.eventManager_.registerEventListener(\n      this.handleClientEvent_.bind(this)\n    );\n  }\n\n  /**\n   * @param {string} transactionId\n   */\n  setTransactionId(transactionId) {\n    this.context_.setTransactionId(transactionId);\n  }\n\n  /**\n   * @return {string}\n   */\n  getTransactionId() {\n    return /** @type {string} */ (this.context_.getTransactionId());\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.context_.getSku();\n  }\n\n  /**\n   * @param {string} sku\n   */\n  setSku(sku) {\n    this.context_.setSku(sku);\n  }\n\n  /**\n   * @param {!Array<string>} labels\n   */\n  addLabels(labels) {\n    if (labels && labels.length > 0) {\n      const newLabels = [].concat(this.context_.getLabelList());\n      labels.forEach(label => {\n        if (newLabels.indexOf(label) == -1) {\n          newLabels.push(label);\n        }\n      });\n      this.context_.setLabelList(newLabels);\n    }\n  }\n\n  /**\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getQueryString_() {\n    return this.doc_.getWin().location.search;\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getReferrer_() {\n    return this.doc_.getWin().document.referrer;\n  }\n\n  /**\n   * @private\n   */\n  setContext_() {\n    const utmParams = parseQueryString(this.getQueryString_());\n    this.context_.setReferringOrigin(parseUrl(this.getReferrer_()).origin);\n    const campaign = utmParams['utm_campaign'];\n    const medium = utmParams['utm_medium'];\n    const source = utmParams['utm_source'];\n    if (campaign) {\n      this.context_.setUtmCampaign(campaign);\n    }\n    if (medium) {\n      this.context_.setUtmMedium(medium);\n    }\n    if (source) {\n      this.context_.setUtmSource(source);\n    }\n    this.addLabels(getOnExperiments(this.doc_.getWin()));\n  }\n\n  /**\n   * @return {!Promise<!../components/activities.ActivityIframePort>}\n   * @private\n   */\n  start_() {\n    if (!this.serviceReady_) {\n      // TODO(sohanirao): Potentially do this even earlier\n      this.doc_.getBody().appendChild(this.getElement());\n      this.serviceReady_ = this.activityPorts_\n        .openIframe(this.iframe_, this.src_, this.args_)\n        .then(port => {\n          this.setContext_();\n          return port.whenReady().then(() => port);\n        });\n    }\n    return this.serviceReady_;\n  }\n\n  /**\n   * @param {boolean} isReadyToPay\n   */\n  setReadyToPay(isReadyToPay) {\n    this.context_.setReadyToPay(isReadyToPay);\n  }\n\n  /**\n   */\n  close() {\n    this.doc_.getBody().removeChild(this.getElement());\n  }\n\n  /**\n   * @return {!AnalyticsContext}\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * Returns true if any logs have already be sent to the analytics server.\n   * @return {boolean}\n   */\n  getHasLogged() {\n    return this.everLogged_;\n  }\n\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {!AnalyticsRequest}\n   */\n  createLogRequest_(event) {\n    const meta = new AnalyticsEventMeta();\n    meta.setEventOriginator(event.eventOriginator);\n    meta.setIsFromUserAction(event.isFromUserAction);\n\n    const request = new AnalyticsRequest();\n    request.setEvent(event.eventType);\n    request.setContext(this.context_);\n    request.setMeta(meta);\n    if (event.additionalParameters instanceof EventParams) {\n      request.setParams(event.additionalParameters);\n    } // Ignore event.additionalParameters.  It may have data we shouldn't log.\n    return request;\n  }\n\n  /**\n   * Handles the message received by the port.\n   * @param {function(!Object<string, string|boolean>)} callback\n   */\n  onMessage(callback) {\n    this.lastAction_ = this.start_().then(port => {\n      port.onMessageDeprecated(callback);\n    });\n  }\n\n  /**\n   * @return {boolean}\n   */\n  shouldLogPublisherEvents_() {\n    return this.deps_.config().enableSwgAnalytics === true;\n  }\n\n  /**\n   *  Listens for new events from the events manager and handles logging\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   */\n  handleClientEvent_(event) {\n    //this event is just used to communicate information internally.  It should\n    //not be reported to the SwG analytics service.\n    if (event.eventType === AnalyticsEvent.EVENT_SUBSCRIPTION_STATE) {\n      return;\n    }\n\n    if (\n      ClientEventManager.isPublisherEvent(event) &&\n      !this.shouldLogPublisherEvents_()\n    ) {\n      return;\n    }\n    this.lastAction_ = this.start_().then(port => {\n      const request = this.createLogRequest_(event);\n      this.everLogged_ = true;\n      port.execute(request);\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {createElement} from '../utils/dom';\nimport {msg} from '../utils/i18n';\nimport {SmartSubscriptionButtonApi, Theme} from './smart-button-api';\n\n/**\n * The button title should match that of button's SVG.\n */\n/** @type {!Object<string, string>} */\nconst TITLE_LANG_MAP = {\n  'en': 'Subscribe with Google',\n  'ar': 'Google اشترك مع',\n  'de': 'Abonnieren mit Google',\n  'es': 'Suscríbete con Google',\n  'es-latam': 'Suscríbete con Google',\n  'es-latn': 'Suscríbete con Google',\n  'fr': \"S'abonner avec Google\",\n  'hi': 'Google के ज़रिये सदस्यता',\n  'id': 'Berlangganan dengan Google',\n  'it': 'Abbonati con Google',\n  'jp': 'Google で購読',\n  'ko': 'Google 을 통한구독',\n  'ms': 'Langgan dengan Google',\n  'nl': 'Abonneren via Google',\n  'no': 'Abonner med Google',\n  'pl': 'Subskrybuj z Google',\n  'pt': 'Subscrever com o Google',\n  'pt-br': 'Assine com o Google',\n  'ru': 'Подпиcka через Google',\n  'se': 'Prenumerera med Google',\n  'th': 'สมัครฟาน Google',\n  'tr': 'Google ile Abone Ol',\n  'uk': 'Підписатися через Google',\n  'zh-tw': '透過 Google 訂閱',\n};\n\n/**\n * The button stylesheet can be found in the `/assets/swg-button.css`.\n * It's produced by the `gulp assets` task and deployed to\n * `https://news.google.com/swg/js/v1/swg-button.css`.\n */\nexport class ButtonApi {\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {!Promise<!./runtime.ConfiguredRuntime>} configuredRuntimePromise\n   */\n  constructor(doc, configuredRuntimePromise) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Promise<!./runtime.ConfiguredRuntime>} */\n    this.configuredRuntimePromise_ = configuredRuntimePromise;\n  }\n\n  /**\n   */\n  init() {\n    const head = this.doc_.getHead();\n    if (!head) {\n      return;\n    }\n\n    const url = '$assets$/swg-button.css';\n    const existing = head.querySelector(`link[href=\"${url}\"]`);\n    if (existing) {\n      return;\n    }\n\n    // <link rel=\"stylesheet\" href=\"...\" type=\"text/css\">\n    head.appendChild(\n      createElement(this.doc_.getWin().document, 'link', {\n        'rel': 'stylesheet',\n        'type': 'text/css',\n        'href': url,\n      })\n    );\n  }\n\n  /**\n   * @param {!../api/subscriptions.ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {!Element}\n   */\n  create(optionsOrCallback, opt_callback) {\n    const button = createElement(this.doc_.getWin().document, 'button', {});\n    return this.attach(button, optionsOrCallback, opt_callback);\n  }\n\n  /**\n   * @param {!Element} button\n   * @param {../api/subscriptions.ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {!Element}\n   */\n  attach(button, optionsOrCallback, opt_callback) {\n    const options = /** @type {!../api/subscriptions.ButtonOptions} */ (this.getOptions_(\n      optionsOrCallback\n    ));\n    const callback = this.getCallback_(optionsOrCallback, opt_callback);\n\n    const theme = options['theme'];\n    button.classList.add(`swg-button-${theme}`);\n    button.setAttribute('role', 'button');\n    if (options['lang']) {\n      button.setAttribute('lang', options['lang']);\n    }\n    button.setAttribute('title', msg(TITLE_LANG_MAP, button) || '');\n    button.addEventListener('click', callback);\n    button.addEventListener('click', () => {\n      this.configuredRuntimePromise_.then(configuredRuntime => {\n        configuredRuntime\n          .eventManager()\n          .logSwgEvent(\n            AnalyticsEvent.ACTION_SWG_BUTTON_CLICK,\n            /* isFromUserAction */ true\n          );\n      });\n    });\n    this.configuredRuntimePromise_.then(configuredRuntime => {\n      configuredRuntime\n        .eventManager()\n        .logSwgEvent(AnalyticsEvent.IMPRESSION_SWG_BUTTON);\n    });\n    return button;\n  }\n\n  /**\n   *\n   * @param {../api/subscriptions.ButtonOptions|../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @return {!../api/subscriptions.ButtonOptions|!../api/subscriptions.SmartButtonOptions}\n   * @private\n   */\n  getOptions_(optionsOrCallback) {\n    const options =\n      /** @type {!../api/subscriptions.ButtonOptions|!../api/subscriptions.SmartButtonOptions} */ (optionsOrCallback &&\n      typeof optionsOrCallback != 'function'\n        ? optionsOrCallback\n        : {'theme': Theme.LIGHT});\n\n    const theme = options['theme'];\n    if (theme !== Theme.LIGHT && theme !== Theme.DARK) {\n      options['theme'] = Theme.LIGHT;\n    }\n    return options;\n  }\n\n  /**\n   *\n   * @param {?../api/subscriptions.ButtonOptions|?../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {function()|function(Event):boolean}\n   * @private\n   */\n  getCallback_(optionsOrCallback, opt_callback) {\n    const callback =\n      /** @type {function()|function(Event):boolean} */ ((typeof optionsOrCallback ==\n      'function'\n        ? optionsOrCallback\n        : null) || opt_callback);\n    return callback;\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!Element} button\n   * @param {../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {!Element}\n   */\n  attachSmartButton(deps, button, optionsOrCallback, opt_callback) {\n    const options = /** @type {!../api/subscriptions.SmartButtonOptions} */ (this.getOptions_(\n      optionsOrCallback\n    ));\n    const callback = /** @type {function()} */ (this.getCallback_(\n      optionsOrCallback,\n      opt_callback\n    ));\n\n    // Add required CSS class, if missing.\n    button.classList.add('swg-smart-button');\n    button.addEventListener('click', () =>\n      this.configuredRuntimePromise_.then(configuredRuntime =>\n        configuredRuntime\n          .eventManager()\n          .logSwgEvent(\n            AnalyticsEvent.ACTION_SWG_BUTTON_CLICK,\n            /* isFromUserAction */ true\n          )\n      )\n    );\n\n    return new SmartSubscriptionButtonApi(\n      deps,\n      button,\n      options,\n      callback\n    ).start();\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {number} */\nconst CallbackId = {\n  ENTITLEMENTS: 1,\n  SUBSCRIBE_REQUEST: 2,\n  SUBSCRIBE_RESPONSE: 3,\n  LOGIN_REQUEST: 4,\n  LINK_PROGRESS: 5,\n  LINK_COMPLETE: 6,\n  FLOW_STARTED: 7,\n  FLOW_CANCELED: 8,\n  CONTRIBUTION_RESPONSE: 9,\n};\n\n/**\n */\nexport class Callbacks {\n  /**\n   */\n  constructor() {\n    /** @private @const {!Object<CallbackId, function(*)>} */\n    this.callbacks_ = {};\n    /** @private @const {!Object<CallbackId, *>} */\n    this.resultBuffer_ = {};\n  }\n\n  /**\n   * @param {function(!Promise<!../api/entitlements.Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {\n    this.setCallback_(CallbackId.ENTITLEMENTS, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/entitlements.Entitlements>} promise\n   */\n  triggerEntitlementsResponse(promise) {\n    return this.trigger_(\n      CallbackId.ENTITLEMENTS,\n      promise.then(res => res.clone())\n    );\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEntitlementsResponsePending() {\n    return !!this.resultBuffer_[CallbackId.ENTITLEMENTS];\n  }\n\n  /**\n   * @param {function(!../api/subscriptions.LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {\n    this.setCallback_(CallbackId.LOGIN_REQUEST, callback);\n  }\n\n  /**\n   * @param {!../api/subscriptions.LoginRequest} request\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLoginRequest(request) {\n    return this.trigger_(CallbackId.LOGIN_REQUEST, request);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkProgress(callback) {\n    this.setCallback_(CallbackId.LINK_PROGRESS, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkProgress() {\n    return this.trigger_(CallbackId.LINK_PROGRESS, true);\n  }\n\n  /**\n   */\n  resetLinkProgress() {\n    this.resetCallback_(CallbackId.LINK_PROGRESS);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {\n    this.setCallback_(CallbackId.LINK_COMPLETE, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkComplete() {\n    return this.trigger_(CallbackId.LINK_COMPLETE, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLinkCompletePending() {\n    return !!this.resultBuffer_[CallbackId.LINK_COMPLETE];\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnSubscribeRequest(callback) {\n    this.setCallback_(CallbackId.SUBSCRIBE_REQUEST, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerSubscribeRequest() {\n    return this.trigger_(CallbackId.SUBSCRIBE_REQUEST, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasSubscribeRequestCallback() {\n    return !!this.callbacks_[CallbackId.SUBSCRIBE_REQUEST];\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {\n    this.setCallback_(CallbackId.SUBSCRIBE_RESPONSE, callback);\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnContributionResponse(callback) {\n    this.setCallback_(CallbackId.CONTRIBUTION_RESPONSE, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/subscribe-response.SubscribeResponse>} responsePromise\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerSubscribeResponse(responsePromise) {\n    return this.trigger_(\n      CallbackId.SUBSCRIBE_RESPONSE,\n      responsePromise.then(res => res.clone())\n    );\n  }\n\n  /**\n   * @param {!Promise<!../api/subscribe-response.SubscribeResponse>} responsePromise\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerContributionResponse(responsePromise) {\n    return this.trigger_(\n      CallbackId.CONTRIBUTION_RESPONSE,\n      responsePromise.then(res => res.clone())\n    );\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasSubscribeResponsePending() {\n    return !!this.resultBuffer_[CallbackId.SUBSCRIBE_RESPONSE];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasContributionResponsePending() {\n    return !!this.resultBuffer_[CallbackId.CONTRIBUTION_RESPONSE];\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {\n    this.setCallback_(CallbackId.FLOW_STARTED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} opt_data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowStarted(flow, opt_data) {\n    return this.trigger_(CallbackId.FLOW_STARTED, {\n      flow,\n      data: opt_data || {},\n    });\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {\n    this.setCallback_(CallbackId.FLOW_CANCELED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} opt_data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowCanceled(flow, opt_data) {\n    return this.trigger_(CallbackId.FLOW_CANCELED, {\n      flow,\n      data: opt_data || {},\n    });\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(?)} callback\n   * @private\n   */\n  setCallback_(id, callback) {\n    this.callbacks_[id] = callback;\n    // If result already exist, execute the callback right away.\n    if (id in this.resultBuffer_) {\n      this.executeCallback_(id, callback, this.resultBuffer_[id]);\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {*} data\n   * @return {boolean}\n   * @private\n   */\n  trigger_(id, data) {\n    this.resultBuffer_[id] = data;\n    const callback = this.callbacks_[id];\n    if (callback) {\n      this.executeCallback_(id, callback, data);\n    }\n    return !!callback;\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @private\n   */\n  resetCallback_(id) {\n    if (id in this.resultBuffer_) {\n      delete this.resultBuffer_[id];\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(*)} callback\n   * @param {*} data\n   * @private\n   */\n  executeCallback_(id, callback, data) {\n    // Always execute callbacks in a microtask.\n    Promise.resolve().then(() => {\n      callback(data);\n      this.resetCallback_(id);\n    });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {FilterResult} from '../api/client-event-manager-api';\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\nimport {isObject, isFunction, isEnumValue, isBoolean} from '../utils/types';\nimport {log} from '../utils/log';\n\n/**\n * Helper function to describe an issue with an event object\n * @param {!string} valueName\n * @param {?*} value\n * @returns {!string}\n */\nfunction createEventErrorMessage(valueName, value) {\n  return 'Event has an invalid ' + valueName + '(' + value + ')';\n}\n\n/**\n * Throws an error if the event is invalid.\n * @param {!../api/client-event-manager-api.ClientEvent} event\n */\nfunction validateEvent(event) {\n  if (!isObject(event)) {\n    throw new Error('Event must be a valid object');\n  }\n\n  if (!isEnumValue(AnalyticsEvent, event.eventType)) {\n    throw new Error(createEventErrorMessage('eventType', event.eventType));\n  }\n\n  if (!isEnumValue(EventOriginator, event.eventOriginator)) {\n    throw new Error(\n      createEventErrorMessage('eventOriginator', event.eventOriginator)\n    );\n  }\n\n  if (\n    !isObject(event.additionalParameters) &&\n    event.additionalParameters != null\n  ) {\n    throw new Error(\n      createEventErrorMessage(\n        'additionalParameters',\n        event.additionalParameters\n      )\n    );\n  }\n\n  if (event.isFromUserAction != null && !isBoolean(event.isFromUserAction)) {\n    throw new Error(\n      createEventErrorMessage('isFromUserAction', event.isFromUserAction)\n    );\n  }\n}\n\n/** @implements {../api/client-event-manager-api.ClientEventManagerApi} */\nexport class ClientEventManager {\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {boolean}\n   */\n  static isPublisherEvent(event) {\n    return (\n      event.eventOriginator === EventOriginator.PROPENSITY_CLIENT ||\n      event.eventOriginator === EventOriginator.PUBLISHER_CLIENT ||\n      event.eventOriginator === EventOriginator.AMP_CLIENT\n    );\n  }\n\n  /**\n   *\n   * @param {!Promise} configuredPromise\n   */\n  constructor(configuredPromise) {\n    /** @private {!Array<function(!../api/client-event-manager-api.ClientEvent)>} */\n    this.listeners_ = [];\n\n    /** @private {!Array<function(!../api/client-event-manager-api.ClientEvent):!FilterResult>} */\n    this.filterers_ = [];\n\n    /** @private {?Promise} */\n    this.lastAction_ = null;\n\n    /** @private @const {!Promise} */\n    this.isReadyPromise_ = configuredPromise;\n  }\n\n  /**\n   * @overrides\n   */\n  registerEventListener(listener) {\n    if (!isFunction(listener)) {\n      throw new Error('Event manager listeners must be a function');\n    }\n    this.listeners_.push(listener);\n  }\n\n  /**\n   * @overrides\n   */\n  registerEventFilterer(filterer) {\n    if (!isFunction(filterer)) {\n      throw new Error('Event manager filterers must be a function');\n    }\n    this.filterers_.push(filterer);\n  }\n\n  /**\n   * @overrides\n   */\n  logEvent(event) {\n    validateEvent(event);\n    this.lastAction_ = this.isReadyPromise_.then(() => {\n      for (let filterer = 0; filterer < this.filterers_.length; filterer++) {\n        try {\n          if (this.filterers_[filterer](event) === FilterResult.CANCEL_EVENT) {\n            return Promise.resolve();\n          }\n        } catch (e) {\n          log(e);\n        }\n      }\n      for (let listener = 0; listener < this.listeners_.length; listener++) {\n        try {\n          this.listeners_[listener](event);\n        } catch (e) {\n          log(e);\n        }\n      }\n      return Promise.resolve();\n    });\n  }\n\n  /**\n   * Creates an event with the arguments provided and calls logEvent.\n   * @param {!AnalyticsEvent} eventType\n   * @param {?boolean=} isFromUserAction\n   * @param {../proto/api_messages.EventParams=} eventParams\n   */\n  logSwgEvent(eventType, isFromUserAction = false, eventParams = null) {\n    this.logEvent({\n      eventType,\n      eventOriginator: EventOriginator.SWG_CLIENT,\n      isFromUserAction,\n      additionalParameters: eventParams,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {PayStartFlow} from './pay-flow';\nimport {SubscriptionFlows, ProductType} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\nimport {\n  SkuSelectedResponse,\n  AlreadySubscribedResponse,\n} from '../proto/api_messages';\n\n/**\n * The class for Contributions flow.\n */\nexport class ContributionsFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    const isClosable = (options && options.isClosable) || true;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/contributionsiframe'),\n      feArgs({\n        'productId': deps.pageConfig().getProductId(),\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productType': ProductType.UI_CONTRIBUTION,\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': isClosable,\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * @param {SkuSelectedResponse} response\n   */\n  startPayFlow_(response) {\n    const sku = response.getSku();\n    if (sku) {\n      new PayStartFlow(this.deps_, sku, ProductType.UI_CONTRIBUTION).start();\n    }\n  }\n\n  /**\n   * Starts the contributions flow or alreadyMember flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_CONTRIBUTION_OPTIONS);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_CONTRIBUTION_OPTIONS);\n    });\n    this.activityIframeView_.on(\n      AlreadySubscribedResponse,\n      this.handleLinkRequest_.bind(this)\n    );\n    this.activityIframeView_.on(\n      SkuSelectedResponse,\n      this.startPayFlow_.bind(this)\n    );\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {DeferredAccountCreationResponse} from '../api/deferred-account-creation';\nimport {JwtHelper} from '../utils/jwt';\nimport {PayCompleteFlow} from './pay-flow';\nimport {PurchaseData, SubscribeResponse} from '../api/subscribe-response';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {UserData} from '../api/user-data';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\nimport {AnalyticsEvent} from '../proto/api_messages';\n\n/**\n * The flow to initiate deferred account process.\n * See `Subscriptions.completeDeferredAccountCreation` API.\n */\nexport class DeferredAccountFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?../api/deferred-account-creation.DeferredAccountCreationRequest} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @type {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    const defaultOptions = {\n      entitlements: null,\n      consent: true,\n    };\n    /** @private @const {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    this.options_ = Object.assign(defaultOptions, options || {});\n  }\n\n  /**\n   * Starts the deferred account flow.\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  start() {\n    const entitlements = this.options_.entitlements;\n\n    // For now, entitlements are required to be present and have the Google\n    // token. This is strictly not required for the implementation. But it's\n    // preferrable API-wise at this time.\n    if (!entitlements || !entitlements.getEntitlementForSource('google')) {\n      throw new Error('No entitlements with \"google\" source');\n    }\n\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION);\n\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/recoveriframe'),\n      feArgs({\n        'publicationId': this.deps_.pageConfig().getPublicationId(),\n        'productId': this.deps_.pageConfig().getProductId(),\n        'entitlements': (entitlements && entitlements.raw) || null,\n        'consent': this.options_.consent,\n      }),\n      /* shouldFadeBody */ true\n    );\n\n    this.openPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.activityIframeView_.acceptResult().then(\n      result => {\n        // The consent part is complete.\n        return this.handleConsentResponse_(\n          /** @type {!Object} */ (result.data)\n        );\n      },\n      reason => {\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(\n              SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION\n            );\n        } else {\n          this.dialogManager_.completeView(this.activityIframeView_);\n        }\n        throw reason;\n      }\n    );\n  }\n\n  /**\n   * @param {!Object} data\n   * @return {!DeferredAccountCreationResponse}\n   * @private\n   */\n  handleConsentResponse_(data) {\n    this.deps_.entitlementsManager().blockNextNotification();\n\n    // Parse the response.\n    const entitlementsJwt = data['entitlements'];\n    const idToken = data['idToken'];\n    const productType = data['productType'];\n    const entitlements = this.deps_\n      .entitlementsManager()\n      .parseEntitlements({'signedEntitlements': entitlementsJwt});\n    const userData = new UserData(\n      idToken,\n      /** @type {!Object} */ (new JwtHelper().decode(idToken))\n    );\n    const purchaseDataList = data['purchaseDataList']\n      ? data['purchaseDataList'].map(\n          pd => new PurchaseData(pd['data'], pd['signature'])\n        )\n      : [\n          // TODO(dvoytenko): cleanup/deprecate.\n          new PurchaseData(\n            data['purchaseData']['data'],\n            data['purchaseData']['signature']\n          ),\n        ];\n\n    // For now, we'll use the `PayCompleteFlow` as a \"creating account\" flow.\n    // But this can be eventually implemented by the same iframe.\n    const creatingFlow = new PayCompleteFlow(this.deps_);\n    const completeHandler = creatingFlow.complete.bind(creatingFlow);\n\n    const response = new DeferredAccountCreationResponse(\n      entitlements,\n      userData,\n      purchaseDataList,\n      completeHandler\n    );\n\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.ACTION_NEW_DEFERRED_ACCOUNT, true);\n\n    // Start the \"sync\" flow.\n    creatingFlow.start(\n      new SubscribeResponse(\n        '', // raw field doesn't matter in this case\n        purchaseDataList[0],\n        userData,\n        entitlements,\n        productType,\n        () => Promise.resolve() // completeHandler doesn't matter in this case\n      )\n    );\n    return response;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @interface */\nexport class DepsDef {\n  /**\n   * @return {!../model/doc.Doc}\n   */\n  doc() {}\n\n  /**\n   * @return {!Window}\n   */\n  win() {}\n\n  /**\n   * @return {!../api/subscriptions.Config}\n   */\n  config() {}\n\n  /**\n   * @return {!../model/page-config.PageConfig}\n   */\n  pageConfig() {}\n\n  /**\n   * @return {!../components/activities.ActivityPorts}\n   */\n  activities() {}\n\n  /**\n   * @return {!./pay-client.PayClient}\n   */\n  payClient() {}\n\n  /**\n   * @return {!../components/dialog-manager.DialogManager}\n   */\n  dialogManager() {}\n\n  /**\n   * @return {!./entitlements-manager.EntitlementsManager}\n   */\n  entitlementsManager() {}\n\n  /**\n   * @return {!./callbacks.Callbacks}\n   */\n  callbacks() {}\n\n  /**\n   * @return {!../runtime/storage.Storage}\n   */\n  storage() {}\n\n  /**\n   * @return {!../runtime/analytics-service.AnalyticsService}\n   */\n  analytics() {}\n\n  /**\n   * @return {!../runtime/jserror.JsError}\n   */\n  jserror() {}\n\n  /**\n   * @return {!../runtime/client-event-manager.ClientEventManager}\n   */\n  eventManager() {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlement, Entitlements} from '../api/entitlements';\nimport {JwtHelper} from '../utils/jwt';\nimport {Toast} from '../ui/toast';\nimport {serviceUrl} from './services';\nimport {feArgs, feUrl} from '../runtime/services';\n\nconst SERVICE_ID = 'subscribe.google.com';\nconst TOAST_STORAGE_KEY = 'toast';\nconst ENTS_STORAGE_KEY = 'ents';\nconst IS_READY_TO_PAY_STORAGE_KEY = 'isreadytopay';\n\n/**\n */\nexport class EntitlementsManager {\n  /**\n   * @param {!Window} win\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {!./fetcher.Fetcher} fetcher\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(win, pageConfig, fetcher, deps) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {string} */\n    this.publicationId_ = this.pageConfig_.getPublicationId();\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!JwtHelper} */\n    this.jwtHelper_ = new JwtHelper();\n\n    /** @private {?Promise<!Entitlements>} */\n    this.responsePromise_ = null;\n\n    /** @private {number} */\n    this.positiveRetries_ = 0;\n\n    /** @private {boolean} */\n    this.blockNextNotification_ = false;\n\n    /** @private @const {!./storage.Storage} */\n    this.storage_ = deps.storage();\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = deps.config();\n  }\n\n  /**\n   * @param {boolean=} opt_expectPositive\n   */\n  reset(opt_expectPositive) {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = Math.max(\n      this.positiveRetries_,\n      opt_expectPositive ? 3 : 0\n    );\n    if (opt_expectPositive) {\n      this.storage_.remove(ENTS_STORAGE_KEY);\n      this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n    }\n  }\n\n  /**\n   * Clears all of the entitlements state and cache.\n   */\n  clear() {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = 0;\n    this.unblockNextNotification();\n    this.storage_.remove(ENTS_STORAGE_KEY);\n    this.storage_.remove(TOAST_STORAGE_KEY);\n    this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getQueryString_() {\n    return this.win_.location.search;\n  }\n\n  /**\n   * @param {?string=} opt_encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements(opt_encryptedDocumentKey) {\n    if (!this.responsePromise_) {\n      this.responsePromise_ = this.getEntitlementsFlow_(\n        opt_encryptedDocumentKey\n      );\n    }\n    return this.responsePromise_.then(response => {\n      if (response.isReadyToPay != null) {\n        this.analyticsService_.setReadyToPay(response.isReadyToPay);\n      }\n      return response;\n    });\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean=} opt_isReadyToPay\n   * @return {boolean}\n   */\n  pushNextEntitlements(raw, opt_isReadyToPay) {\n    const entitlements = this.getValidJwtEntitlements_(\n      raw,\n      /* requireNonExpired */ true,\n      opt_isReadyToPay\n    );\n    if (entitlements && entitlements.enablesThis()) {\n      this.storage_.set(ENTS_STORAGE_KEY, raw);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @param {?string=} opt_encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  getEntitlementsFlow_(opt_encryptedDocumentKey) {\n    return this.fetchEntitlementsWithCaching_(opt_encryptedDocumentKey).then(\n      entitlements => {\n        this.onEntitlementsFetched_(entitlements);\n        return entitlements;\n      }\n    );\n  }\n\n  /**\n   * @param {?string=} opt_encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlementsWithCaching_(opt_encryptedDocumentKey) {\n    return Promise.all([\n      this.storage_.get(ENTS_STORAGE_KEY),\n      this.storage_.get(IS_READY_TO_PAY_STORAGE_KEY),\n    ]).then(cachedValues => {\n      const raw = cachedValues[0];\n      const irtp = cachedValues[1];\n      // Try cache first.\n      if (raw && !opt_encryptedDocumentKey) {\n        const cached = this.getValidJwtEntitlements_(\n          raw,\n          /* requireNonExpired */ true,\n          irtpStringToBoolean(irtp)\n        );\n        if (cached && cached.enablesThis()) {\n          // Already have a positive response.\n          this.positiveRetries_ = 0;\n          return cached;\n        }\n      }\n      // If cache didn't match, perform fetch.\n      return this.fetchEntitlements_(opt_encryptedDocumentKey).then(ents => {\n        // If entitlements match the product, store them in cache.\n        if (ents && ents.enablesThis() && ents.raw) {\n          this.storage_.set(ENTS_STORAGE_KEY, ents.raw);\n        }\n        return ents;\n      });\n    });\n  }\n\n  /**\n   * @param {?string=} opt_encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlements_(opt_encryptedDocumentKey) {\n    // TODO(dvoytenko): Replace retries with consistent fetch.\n    let positiveRetries = this.positiveRetries_;\n    this.positiveRetries_ = 0;\n    const attempt = () => {\n      positiveRetries--;\n      return this.fetch_(opt_encryptedDocumentKey).then(entitlements => {\n        if (entitlements.enablesThis() || positiveRetries <= 0) {\n          return entitlements;\n        }\n        return new Promise(resolve => {\n          this.win_.setTimeout(() => {\n            resolve(attempt());\n          }, 550);\n        });\n      });\n    };\n    return attempt();\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setToastShown(value) {\n    this.storage_.set(TOAST_STORAGE_KEY, value ? '1' : '0');\n  }\n\n  /**\n   */\n  blockNextNotification() {\n    this.blockNextNotification_ = true;\n  }\n\n  /**\n   */\n  unblockNextNotification() {\n    this.blockNextNotification_ = false;\n  }\n\n  /**\n   * The JSON must either contain a \"signedEntitlements\" with JWT, or\n   * \"entitlements\" field with plain JSON object.\n   * @param {!Object} json\n   * @return {!Entitlements}\n   */\n  parseEntitlements(json) {\n    const isReadyToPay = json['isReadyToPay'];\n    if (isReadyToPay == null) {\n      this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n    } else {\n      this.storage_.set(IS_READY_TO_PAY_STORAGE_KEY, String(isReadyToPay));\n    }\n    const signedData = json['signedEntitlements'];\n    if (signedData) {\n      const entitlements = this.getValidJwtEntitlements_(\n        signedData,\n        /* requireNonExpired */ false,\n        isReadyToPay\n      );\n      if (entitlements) {\n        return entitlements;\n      }\n    } else {\n      const plainEntitlements = json['entitlements'];\n      if (plainEntitlements) {\n        return this.createEntitlements_('', plainEntitlements, isReadyToPay);\n      }\n    }\n    // Empty response.\n    return this.createEntitlements_('', [], isReadyToPay);\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean} requireNonExpired\n   * @param {boolean=} opt_isReadyToPay\n   * @param {?string=} opt_decryptedDocumentKey\n   * @return {?Entitlements}\n   * @private\n   */\n  getValidJwtEntitlements_(\n    raw,\n    requireNonExpired,\n    opt_isReadyToPay,\n    opt_decryptedDocumentKey\n  ) {\n    try {\n      const jwt = this.jwtHelper_.decode(raw);\n      if (requireNonExpired) {\n        const now = Date.now();\n        const exp = jwt['exp'];\n        if (parseFloat(exp) * 1000 < now) {\n          return null;\n        }\n      }\n      const entitlementsClaim = jwt['entitlements'];\n      return (\n        (entitlementsClaim &&\n          this.createEntitlements_(\n            raw,\n            entitlementsClaim,\n            opt_isReadyToPay,\n            opt_decryptedDocumentKey\n          )) ||\n        null\n      );\n    } catch (e) {\n      // Ignore the error.\n      this.win_.setTimeout(() => {\n        throw e;\n      });\n    }\n    return null;\n  }\n\n  /**\n   * @param {string} raw\n   * @param {!Object|!Array<!Object>} json\n   * @param {boolean=} opt_isReadyToPay\n   * @param {?string=} opt_decryptedDocumentKey\n   * @return {!Entitlements}\n   * @private\n   */\n  createEntitlements_(raw, json, opt_isReadyToPay, opt_decryptedDocumentKey) {\n    return new Entitlements(\n      SERVICE_ID,\n      raw,\n      Entitlement.parseListFromJson(json),\n      this.pageConfig_.getProductId(),\n      this.ack_.bind(this),\n      opt_isReadyToPay,\n      opt_decryptedDocumentKey\n    );\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  onEntitlementsFetched_(entitlements) {\n    // Skip any notifications and toast if other flows are ongoing.\n    // TODO(dvoytenko): what's the right action when pay flow was canceled?\n    const blockNotification = this.blockNextNotification_;\n    this.blockNextNotification_ = false;\n    if (blockNotification) {\n      return;\n    }\n\n    // Notify on the received entitlements.\n    this.deps_\n      .callbacks()\n      .triggerEntitlementsResponse(Promise.resolve(entitlements));\n\n    // Show a toast if needed.\n    this.maybeShowToast_(entitlements);\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @return {!Promise}\n   * @private\n   */\n  maybeShowToast_(entitlements) {\n    const entitlement = entitlements.getEntitlementForThis();\n    if (!entitlement) {\n      return Promise.resolve();\n    }\n    // Check if storage bit is set. It's only set by the `Entitlements.ack`\n    // method.\n    return this.storage_.get(TOAST_STORAGE_KEY).then(value => {\n      if (value == '1') {\n        // Already shown;\n        return;\n      }\n      if (entitlement) {\n        this.showToast_(entitlement);\n      }\n    });\n  }\n\n  /**\n   * @param {!Entitlement} entitlement\n   * @private\n   */\n  showToast_(entitlement) {\n    const source = entitlement.source || 'google';\n    return new Toast(\n      this.deps_,\n      feUrl('/toastiframe'),\n      feArgs({\n        'publicationId': this.publicationId_,\n        'source': source,\n      })\n    ).open();\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  ack_(entitlements) {\n    if (entitlements.getEntitlementForThis()) {\n      this.setToastShown(true);\n    }\n  }\n\n  /**\n   * @param {?string=} opt_encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetch_(opt_encryptedDocumentKey) {\n    let url =\n      '/publication/' +\n      encodeURIComponent(this.publicationId_) +\n      '/entitlements';\n    if (opt_encryptedDocumentKey) {\n      //TODO(chenshay): Make this a 'Post'.\n      url += '?crypt=' + encodeURIComponent(opt_encryptedDocumentKey);\n    }\n    return this.fetcher_\n      .fetchCredentialedJson(serviceUrl(url))\n      .then(json => this.parseEntitlements(json));\n  }\n}\n\n/**\n * Convert String value of isReadyToPay\n * (from JSON or Cache) to a boolean value.\n * @param {string} value\n * @return {boolean|undefined}\n * @private\n */\nfunction irtpStringToBoolean(value) {\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      return undefined;\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Event} from '../api/logger-api';\nimport {AnalyticsEvent} from '../proto/api_messages';\n\n/** @const {!Object<string,AnalyticsEvent>} */\nconst PublisherEventToAnalyticsEvent = {\n  [Event.IMPRESSION_PAYWALL]: AnalyticsEvent.IMPRESSION_PAYWALL,\n  [Event.IMPRESSION_AD]: AnalyticsEvent.IMPRESSION_AD,\n  [Event.IMPRESSION_OFFERS]: AnalyticsEvent.IMPRESSION_OFFERS,\n  [Event.ACTION_SUBSCRIPTIONS_LANDING_PAGE]:\n    AnalyticsEvent.ACTION_SUBSCRIPTIONS_LANDING_PAGE,\n  [Event.ACTION_OFFER_SELECTED]: AnalyticsEvent.ACTION_OFFER_SELECTED,\n  [Event.ACTION_PAYMENT_FLOW_STARTED]:\n    AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED,\n  [Event.ACTION_PAYMENT_COMPLETED]: AnalyticsEvent.ACTION_PAYMENT_COMPLETE,\n  [Event.EVENT_CUSTOM]: AnalyticsEvent.EVENT_CUSTOM,\n};\n\n/** @const {!Object<number,?Event>} */\nconst AnalyticsEventToPublisherEvent = {\n  [AnalyticsEvent.UNKNOWN]: null,\n  [AnalyticsEvent.IMPRESSION_PAYWALL]: Event.IMPRESSION_PAYWALL,\n  [AnalyticsEvent.IMPRESSION_AD]: Event.IMPRESSION_AD,\n  [AnalyticsEvent.IMPRESSION_OFFERS]: Event.IMPRESSION_OFFERS,\n  [AnalyticsEvent.IMPRESSION_SUBSCRIBE_BUTTON]: null,\n  [AnalyticsEvent.IMPRESSION_SMARTBOX]: null,\n  [AnalyticsEvent.ACTION_SUBSCRIBE]: null,\n  [AnalyticsEvent.ACTION_PAYMENT_COMPLETE]: Event.ACTION_PAYMENT_COMPLETED,\n  [AnalyticsEvent.ACTION_ACCOUNT_CREATED]: null,\n  [AnalyticsEvent.ACTION_ACCOUNT_ACKNOWLEDGED]: null,\n  [AnalyticsEvent.ACTION_SUBSCRIPTIONS_LANDING_PAGE]:\n    Event.ACTION_SUBSCRIPTIONS_LANDING_PAGE,\n  [AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED]:\n    Event.ACTION_PAYMENT_FLOW_STARTED,\n  [AnalyticsEvent.ACTION_OFFER_SELECTED]: Event.ACTION_OFFER_SELECTED,\n  [AnalyticsEvent.EVENT_PAYMENT_FAILED]: null,\n  [AnalyticsEvent.EVENT_CUSTOM]: Event.EVENT_CUSTOM,\n};\n\n/**\n * Converts a propensity event enum into an analytics event enum.\n * @param {!Event|string} propensityEvent\n * @returns {!AnalyticsEvent}\n */\nexport function publisherEventToAnalyticsEvent(propensityEvent) {\n  return PublisherEventToAnalyticsEvent[propensityEvent];\n}\n\n/**\n * Converts an analytics event enum into a propensity event enum.\n * @param {!AnalyticsEvent} analyticsEvent\n * @returns {?Event}\n */\nexport function analyticsEventToPublisherEvent(analyticsEvent) {\n  return AnalyticsEventToPublisherEvent[analyticsEvent];\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {string}\n */\nexport const ExperimentFlags = {\n  /**\n   * Enables GPay API in SwG.\n   * Cleanup issue: #406.\n   */\n  GPAY_API: 'gpay-api',\n\n  /**\n   * Enables GPay native support.\n   * Cleanup issue: #441.\n   */\n  GPAY_NATIVE: 'gpay-native',\n\n  /**\n   * Enables the feature that allows you to replace one subscription\n   * for another in the subscribe() API.\n   */\n  REPLACE_SUBSCRIPTION: 'replace-subscription',\n\n  /**\n   * Enables the contributions feature.\n   */\n  CONTRIBUTIONS: 'contributions',\n\n  /**\n   * Enables the Propensity feature\n   */\n  PROPENSITY: 'propensity',\n\n  /**\n   * Enables the Smartbox feature.\n   */\n  SMARTBOX: 'smartbox',\n\n  /**\n   * Enables using new Activities APIs\n   */\n  HEJIRA: 'hejira',\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ErrorUtils} from '../utils/errors';\nimport {parseQueryString} from '../utils/url';\n\n/**\n * @fileoverview\n *\n * Client-side experiments in SwG.\n *\n * The experiments can be set in a few different ways:\n *  1. By gulp build rules using `--experiments=${experimentsString}` argument.\n *  2. By `#swg.experiments=${experimentsString}` parameter in the URL's\n *     fragment.\n *  3. By `swg.configure({experiments: [array]})` call.\n *\n * The `${experimentsString}` is defined as following:\n *  - experimentString = (experimentSpec,)*\n *  - experimentSpec = experimentId | experimentId '=' num100 ('c')?\n *\n * Some examples:\n *  - `A,B` - defines two experiments \"A\" and \"B\" that will be turned on.\n *  - `A:100,B:100` - the same: \"A\" and \"B\" will be turned on.\n *  - `A:0` - the experiment \"A\" will be disabled.\n *  - `A:1` - enable the experiment \"A\" in 1% of impressions.\n *  - `A:10c` - enable the experiment \"A\" in 10% of impressions with 10%\n *    control. In this case, 20% of the impressions will be split into two\n *    categories: experiment and control. Notice, a control can be requested\n *    only for the fraction under 20%.\n */\n\n/**\n * @enum {string}\n */\nconst Selection = {\n  EXPERIMENT: 'e',\n  CONTROL: 'c',\n};\n\n/**\n * A comma-separated set of experiments.\n * @type {string}\n */\nlet experimentsString = '$experiments$';\n\n/**\n * A parsed map of experiments.\n * @type {?Object<string, boolean>}\n */\nlet experimentMap = null;\n\n/**\n * @param {string} s\n * @package Visible for testing only.\n */\nexport function setExperimentsStringForTesting(s) {\n  experimentsString = s;\n  experimentMap = null;\n}\n\n/**\n * Ensures that the experiments have been initialized and returns them.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperiments(win) {\n  if (!experimentMap) {\n    experimentMap = {};\n    let combinedExperimentString = experimentsString;\n    try {\n      const query = parseQueryString(win.location.hash);\n      const experimentStringFromHash = query['swg.experiments'];\n      if (experimentStringFromHash) {\n        combinedExperimentString += ',' + experimentStringFromHash;\n      }\n    } catch (e) {\n      // Ignore: experiment parsing cannot block runtime.\n      ErrorUtils.throwAsync(e);\n    }\n\n    // Format:\n    // - experimentString = (experimentSpec,)*\n    combinedExperimentString.split(',').forEach(s => {\n      s = s.trim();\n      if (!s) {\n        return;\n      }\n      try {\n        parseSetExperiment(win, experimentMap, s);\n      } catch (e) {\n        // Ignore: experiment parsing cannot block runtime.\n        ErrorUtils.throwAsync(e);\n      }\n    });\n  }\n  return experimentMap;\n}\n\n/**\n * @param {!Window} win\n * @param {?Object<string, boolean>} experimentMap\n * @param {string} spec\n */\nfunction parseSetExperiment(win, experimentMap, spec) {\n  // Format:\n  // - experimentSpec = experimentId | experimentId '=' num100 ('c')?\n  let experimentId;\n  let fraction;\n  let control = false;\n  const eq = spec.indexOf(':');\n  if (eq == -1) {\n    experimentId = spec;\n    fraction = 100;\n    control = false;\n  } else {\n    experimentId = spec.substring(0, eq).trim();\n    spec = spec.substring(eq + 1);\n    if (spec.substring(spec.length - 1) == Selection.CONTROL) {\n      control = true;\n      spec = spec.substring(0, spec.length - 1);\n    }\n    fraction = parseInt(spec, 10);\n  }\n  if (isNaN(fraction)) {\n    throw new Error('invalid fraction');\n  }\n\n  // Calculate \"on\"/\"off\".\n  let on;\n  if (fraction > 99) {\n    // Explicitly \"on\".\n    on = true;\n  } else if (fraction < 1) {\n    // Explicitly \"off\".\n    on = false;\n  } else if (win.sessionStorage) {\n    // Fractional and possibly with the control.\n    // Note that:\n    // a. We can't do persistent experiments if storage is not available.\n    // b. We can't run control on more than 20%.\n    control = control && fraction <= 20;\n    try {\n      // Set fraction in the experiment to make it unlaunchable.\n      const storageKey =\n        'subscribe.google.com:e:' +\n        experimentId +\n        ':' +\n        fraction +\n        (control ? 'c' : '');\n      let selection = parseSelection(win.sessionStorage.getItem(storageKey));\n      if (!selection) {\n        // Is experiment/control range?\n        if (win.Math.random() * 100 <= fraction * (control ? 2 : 1)) {\n          const inExperiment = control ? win.Math.random() <= 0.5 : true;\n          selection = inExperiment ? Selection.EXPERIMENT : Selection.CONTROL;\n          win.sessionStorage.setItem(storageKey, selection);\n        }\n      }\n      on = !!selection;\n      if (selection == Selection.CONTROL) {\n        experimentId = 'c-' + experimentId;\n      }\n    } catch (e) {\n      // Ignore: experiment parsing cannot block runtime.\n      on = false;\n      ErrorUtils.throwAsync(e);\n    }\n  } else {\n    on = false;\n  }\n\n  experimentMap[experimentId] = on;\n}\n\n/**\n * @param {?string} s\n * @return {?Selection}\n */\nfunction parseSelection(s) {\n  // Do a simple if-then to inline the whole Selection enum.\n  return s == Selection.EXPERIMENT\n    ? Selection.EXPERIMENT\n    : s == Selection.CONTROL\n    ? Selection.CONTROL\n    : null;\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  return getExperiments(win)[experimentId] || false;\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean} on\n */\nexport function setExperiment(win, experimentId, on) {\n  getExperiments(win)[experimentId] = on;\n}\n\n/**\n * @return {!Array<string>}\n */\nexport function getOnExperiments(win) {\n  const experimentMap = getExperiments(win);\n  const experiments = [];\n  for (const experiment in experimentMap) {\n    if (experimentMap[experiment]) {\n      experiments.push(experiment);\n    }\n  }\n  return experiments;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Xhr} from '../utils/xhr';\n\n/**\n * @interface\n */\nexport class Fetcher {\n  /**\n   * @param {string} unusedUrl\n   * @return {!Promise<!Object>}\n   */\n  fetchCredentialedJson(unusedUrl) {}\n\n  /**\n   * @param {string} unusedUrl\n   * @param {!../utils/xhr.FetchInitDef} unusedInit\n   * @return {!Promise<!../utils/xhr.FetchResponse>}\n   */\n  fetch(unusedUrl, unusedInit) {}\n}\n\n/**\n * @implements {Fetcher}\n */\nexport class XhrFetcher {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Xhr} */\n    this.xhr_ = new Xhr(win);\n  }\n\n  /** @override */\n  fetchCredentialedJson(url) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      headers: {'Accept': 'text/plain, application/json'},\n      credentials: 'include',\n    });\n    return this.xhr_.fetch(url, init).then(response => response.json());\n  }\n\n  /** @override */\n  fetch(url, init) {\n    return this.xhr_.fetch(url, init);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n */\nexport class JsError {\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Promise} */\n    this.microTask_ = Promise.resolve();\n  }\n\n  /**\n   * @param {...*} var_args\n   * @return {!Promise}\n   */\n  error(var_args) {\n    const args = Array.prototype.slice.call(arguments, 0);\n    return this.microTask_.then(() => {\n      const error = createErrorVargs.apply(null, args);\n      if (error.reported) {\n        return;\n      }\n      const img = this.doc_.getWin().document.createElement('img');\n      img.src =\n        '$frontend$/_/SubscribewithgoogleClientUi/jserror' +\n        '?error=' +\n        encodeURIComponent(String(error)) +\n        '&script=' +\n        encodeURIComponent('$frontend$/swg/js/v1/swg.js') +\n        '&line=' +\n        (error.lineNumber || 1) +\n        '&trace=' +\n        encodeURIComponent(error.stack);\n      // Appending this image to DOM is not necessary.\n      error.reported = true;\n    });\n  }\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n */\nfunction createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error}\n */\nfunction duplicateErrorIfNecessary(error) {\n  const messageProperty = Object.getOwnPropertyDescriptor(error, 'message');\n  if (messageProperty && messageProperty.writable) {\n    return error;\n  }\n\n  const {message, stack} = error;\n  const e = new Error(message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = stack;\n  return e;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows, WindowOpenMode} from '../api/subscriptions';\nimport {acceptPortResultData} from '../utils/activity-utils';\nimport {feArgs, feOrigin, feUrl} from './services';\nimport {isCancelError, createCancelError} from '../utils/errors';\nimport {LinkingInfoResponse, LinkSaveTokenRequest} from '../proto/api_messages';\n\nconst LINK_REQUEST_ID = 'swg-link';\n\n/**\n * The flow to initiate linkback flow.\n */\nexport class LinkbackFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n    const forceRedirect =\n      this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT;\n    const opener = this.activityPorts_.open(\n      LINK_REQUEST_ID,\n      feUrl('/linkbackstart'),\n      forceRedirect ? '_top' : '_blank',\n      feArgs({\n        'publicationId': this.pageConfig_.getPublicationId(),\n      }),\n      {}\n    );\n    this.dialogManager_.popupOpened(opener && opener.targetWin);\n    return Promise.resolve();\n  }\n}\n\n/**\n * The class for Link accounts flow.\n */\nexport class LinkCompleteFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /**\n     * Handler function.\n     * @param {!../components/activities.ActivityPortDef} port\n     */\n    function handler(port) {\n      deps.entitlementsManager().blockNextNotification();\n      deps.callbacks().triggerLinkProgress();\n      deps.dialogManager().popupClosed();\n      const promise = acceptPortResultData(\n        port,\n        feOrigin(),\n        /* requireOriginVerified */ false,\n        /* requireSecureChannel */ false\n      );\n      return promise.then(\n        response => {\n          const flow = new LinkCompleteFlow(deps, response);\n          flow.start();\n        },\n        reason => {\n          if (isCancelError(reason)) {\n            deps\n              .callbacks()\n              .triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n          }\n        }\n      );\n    }\n    deps.activities().onResult(LINK_REQUEST_ID, handler);\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Object} response\n   */\n  constructor(deps, response) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!./entitlements-manager.EntitlementsManager} */\n    this.entitlementsManager_ = deps.entitlementsManager();\n\n    /** @private @const {!./callbacks.Callbacks} */\n    this.callbacks_ = deps.callbacks();\n\n    const index = (response && response['index']) || '0';\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/linkconfirmiframe', '/u/' + index),\n      feArgs({\n        'productId': deps.pageConfig().getProductId(),\n        'publicationId': deps.pageConfig().getPublicationId(),\n      }),\n      /* shouldFadeBody */ true\n    );\n\n    /** @private {?function()} */\n    this.completeResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.completePromise_ = new Promise(resolve => {\n      this.completeResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @return {!Promise}\n   */\n  start() {\n    const promise = this.activityIframeView_.acceptResultAndVerify(\n      feOrigin(),\n      /* requireOriginVerified */ true,\n      /* requireSecureChannel */ true\n    );\n    promise\n      .then(response => {\n        this.complete_(response);\n      })\n      .catch(reason => {\n        // Rethrow async.\n        setTimeout(() => {\n          throw reason;\n        });\n      })\n      .then(() => {\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      });\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {?Object} response\n   * @private\n   */\n  complete_(response) {\n    this.callbacks_.triggerLinkComplete();\n    this.callbacks_.resetLinkProgress();\n    this.entitlementsManager_.setToastShown(true);\n    this.entitlementsManager_.unblockNextNotification();\n    this.entitlementsManager_.reset((response && response['success']) || false);\n    if (response && response['entitlements']) {\n      this.entitlementsManager_.pushNextEntitlements(response['entitlements']);\n    }\n    this.completeResolver_();\n  }\n\n  /** @return {!Promise} */\n  whenComplete() {\n    return this.completePromise_;\n  }\n}\n\n/**\n * The flow to save subscription information.\n */\nexport class LinkSaveFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SaveSubscriptionRequestCallback} callback\n   */\n  constructor(deps, callback) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {!../api/subscriptions.SaveSubscriptionRequestCallback} */\n    this.callback_ = callback;\n\n    /** @private {?Promise<!../api/subscriptions.SaveSubscriptionRequest>} */\n    this.requestPromise_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n  }\n\n  /**\n   * @return {?Promise<!../api/subscriptions.SaveSubscriptionRequest>}\n   * @package Visible for testing.\n   */\n  getRequestPromise() {\n    return this.requestPromise_;\n  }\n\n  /**\n   * @private\n   */\n  complete_() {\n    this.dialogManager_.completeView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {!Object} result\n   * @return {!Promise<boolean>}\n   * @private\n   */\n  handleLinkSaveResponse_(result) {\n    // This flow is complete\n    this.complete_();\n    let startPromise;\n    let linkConfirm = null;\n    if (result['linked']) {\n      // When linking succeeds, start link confirmation flow\n      this.dialogManager_.popupClosed();\n      this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n      linkConfirm = new LinkCompleteFlow(this.deps_, result);\n      startPromise = linkConfirm.start();\n    } else {\n      startPromise = Promise.reject(createCancelError(this.win_, 'not linked'));\n    }\n    const completePromise = startPromise.then(() => {\n      this.deps_.callbacks().triggerLinkProgress();\n      return linkConfirm.whenComplete();\n    });\n\n    return completePromise.then(() => {\n      return true;\n    });\n  }\n\n  /**\n   * @param {LinkingInfoResponse} response\n   * @private\n   */\n  sendLinkSaveToken_(response) {\n    if (!response || !response.getRequested()) {\n      return;\n    }\n    this.requestPromise_ = new Promise(resolve => {\n      resolve(this.callback_());\n    })\n      .then(request => {\n        const saveRequest = new LinkSaveTokenRequest();\n        if (request && request.token) {\n          if (request.authCode) {\n            throw new Error('Both authCode and token are available');\n          } else {\n            saveRequest.setToken(request.token);\n          }\n        } else if (request && request.authCode) {\n          saveRequest.setAuthCode(request.authCode);\n        } else {\n          throw new Error('Neither token or authCode is available');\n        }\n        this.activityIframeView_.execute(saveRequest);\n      })\n      .catch(reason => {\n        // The flow is complete.\n        this.complete_();\n        throw reason;\n      });\n  }\n\n  /**\n   * @return {?Promise}\n   */\n  /**\n   * Starts the save subscription\n   * @return {!Promise}\n   */\n  start() {\n    const iframeArgs = {\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'isClosable': true,\n    };\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/linksaveiframe'),\n      feArgs(iframeArgs),\n      /* shouldFadeBody */ false,\n      /* hasLoadingIndicator */ true\n    );\n    this.activityIframeView_.on(\n      LinkingInfoResponse,\n      this.sendLinkSaveToken_.bind(this)\n    );\n\n    this.openPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_,\n      /* hidden */ true\n    );\n    /** {!Promise<boolean>} */\n    return this.activityIframeView_\n      .acceptResultAndVerify(\n        feOrigin(),\n        /* requireOriginVerified */ true,\n        /* requireSecureChannel */ true\n      )\n      .then(result => {\n        return this.handleLinkSaveResponse_(result);\n      })\n      .catch(reason => {\n        // In case this flow wasn't complete, complete it here\n        this.complete_();\n        // Handle cancellation from user, link confirm start or completion here\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n          return false;\n        }\n        throw reason;\n      });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Event, SubscriptionState} from '../api/logger-api';\nimport {isObject, isEnumValue, isBoolean} from '../utils/types';\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\nimport {publisherEventToAnalyticsEvent} from './event-type-mapping';\n\n/**\n * @implements {../api/logger-api.LoggerApi}\n */\nexport class Logger {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../api/client-event-manager-api.ClientEventManagerApi} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /** @override */\n  sendSubscriptionState(state, jsonProducts) {\n    if (!isEnumValue(SubscriptionState, state)) {\n      throw new Error('Invalid subscription state provided');\n    }\n    if (\n      (SubscriptionState.SUBSCRIBER == state ||\n        SubscriptionState.PAST_SUBSCRIBER == state) &&\n      !jsonProducts\n    ) {\n      throw new Error(\n        'Entitlements must be provided for users with' +\n          ' active or expired subscriptions'\n      );\n    }\n    if (jsonProducts && !isObject(jsonProducts)) {\n      throw new Error('Entitlements must be an Object');\n    }\n    let productsOrSkus = null;\n    if (jsonProducts) {\n      productsOrSkus = JSON.stringify(jsonProducts);\n    }\n    this.eventManager_.logEvent({\n      eventType: AnalyticsEvent.EVENT_SUBSCRIPTION_STATE,\n      eventOriginator: EventOriginator.PUBLISHER_CLIENT,\n      isFromUserAction: null,\n      additionalParameters: {\n        state,\n        productsOrSkus,\n      },\n    });\n  }\n\n  /** @override */\n  sendEvent(userEvent) {\n    let data = null;\n    if (\n      !isEnumValue(Event, userEvent.name) ||\n      !publisherEventToAnalyticsEvent(userEvent.name)\n    ) {\n      throw new Error('Invalid user event provided(' + userEvent.name + ')');\n    }\n\n    if (userEvent.data) {\n      if (!isObject(userEvent.data)) {\n        throw new Error('Event data must be an Object(' + userEvent.data + ')');\n      } else {\n        data = {};\n        Object.assign(data, userEvent.data);\n      }\n    }\n\n    if (isBoolean(userEvent.active)) {\n      if (!data) {\n        data = {};\n      }\n      Object.assign(data, {'is_active': userEvent.active});\n    } else if (userEvent.active != null) {\n      throw new Error('Event active must be a boolean');\n    }\n    this.eventManager_.logEvent({\n      eventType: publisherEventToAnalyticsEvent(userEvent.name),\n      eventOriginator: EventOriginator.PUBLISHER_CLIENT,\n      isFromUserAction: userEvent.active,\n      additionalParameters: data,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\n\nexport class LoginNotificationApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/loginiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        // No need to ask the user. Just tell them you're logging them in.\n        userConsent: false,\n        // TODO(chenshay): Pass entitlements value here.\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Continues the Login flow (after waiting).\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_LOGIN_NOTIFICATION);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.activityIframeView_.acceptResult().then(\n      () => {\n        // The consent part is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      },\n      reason => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\n\nexport class LoginPromptApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/loginiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        // First ask the user if they want us to log them in.\n        userConsent: true,\n        // TODO(chenshay): Pass entitlements value here.\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Prompts the user to login.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_LOGIN_PROMPT);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.activityIframeView_.acceptResult().then(\n      () => {\n        // The consent part is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      },\n      reason => {\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(SubscriptionFlows.SHOW_LOGIN_PROMPT);\n        } else {\n          this.dialogManager_.completeView(this.activityIframeView_);\n        }\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {serviceUrl} from './services';\n\nexport class OffersApi {\n  /**\n   * @param {!../model/page-config.PageConfig} config\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(config, fetcher) {\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.config_ = config;\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n  }\n\n  /**\n   * @param {string=} opt_productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   */\n  getOffers(opt_productId) {\n    const productId = opt_productId || this.config_.getProductId();\n    if (!productId) {\n      throw new Error('getOffers requires productId in config or arguments');\n    }\n    return this.fetch_(productId);\n  }\n\n  /**\n   * @param {string} productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   * @private\n   */\n  fetch_(productId) {\n    const url = serviceUrl(\n      '/publication/' +\n        encodeURIComponent(this.config_.getPublicationId()) +\n        '/offers' +\n        '?label=' +\n        encodeURIComponent(productId)\n    );\n    // TODO(dvoytenko): switch to a non-credentialed request after launch.\n    return this.fetcher_.fetchCredentialedJson(url).then(json => {\n      return json['offers'] || [];\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {PayStartFlow} from './pay-flow';\nimport {SubscriptionFlows, ProductType} from '../api/subscriptions';\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {feArgs, feUrl} from './services';\nimport {assert} from '../utils/log';\nimport {\n  SkuSelectedResponse,\n  AlreadySubscribedResponse,\n  ViewSubscriptionsResponse,\n  SubscribeResponse,\n} from '../proto/api_messages';\n\n/**\n * Offers view is closable when request was originated from 'AbbrvOfferFlow'\n * or from 'SubscribeOptionFlow'.\n */\nconst OFFERS_VIEW_CLOSABLE = true;\n\n/**\n * The class for Offers flow.\n */\nexport class OffersFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    let isClosable = options && options.isClosable;\n    if (isClosable == undefined) {\n      isClosable = false; // Default is to hide Close button.\n    }\n\n    const feArgsObj = {\n      'productId': deps.pageConfig().getProductId(),\n      'publicationId': deps.pageConfig().getPublicationId(),\n      'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n      'productType': ProductType.SUBSCRIPTION,\n      'list': (options && options.list) || 'default',\n      'skus': (options && options.skus) || null,\n      'isClosable': isClosable,\n    };\n\n    this.prorationMode = feArgsObj['replaceSkuProrationMode'] || undefined;\n\n    if (options && options.oldSku) {\n      feArgsObj['oldSku'] = options.oldSku;\n    }\n\n    if (feArgsObj['oldSku']) {\n      assert(feArgsObj['skus'], 'Need a sku list if old sku is provided!');\n\n      // Remove old sku from offers if in list.\n      let skuList = feArgsObj['skus'];\n      const /** @type {string} */ oldSku = feArgsObj['oldSku'];\n      skuList = skuList.filter(sku => sku !== oldSku);\n\n      assert(\n        skuList.length > 0,\n        'Sku list only contained offer user already has'\n      );\n      feArgsObj['skus'] = skuList;\n    }\n\n    // Redirect to payments if only one upgrade option is passed.\n    if (feArgsObj['skus'] && feArgsObj['skus'].length === 1) {\n      const sku = feArgsObj['skus'][0];\n      const /** @type {string|undefined} */ oldSku = feArgsObj['oldSku'];\n      // Update subscription triggers experimental flag if oldSku is passed,\n      // so we need to check for oldSku to decide if it needs to be sent.\n      // Otherwise we might accidentally block a regular subscription request.\n      if (oldSku) {\n        new PayStartFlow(this.deps_, {\n          skuId: sku,\n          oldSku,\n          replaceSkuProrationMode: this.prorationMode,\n        }).start();\n        return;\n      }\n    }\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/offersiframe'),\n      feArgs(feArgsObj),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * @param {SkuSelectedResponse} response\n   * @private\n   */\n  startPayFlow_(response) {\n    const sku = response.getSku();\n    const oldSku = response.getOldSku();\n    if (sku) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_OFFER_SELECTED,\n        true\n      );\n      let skuOrSubscriptionRequest;\n      if (oldSku) {\n        skuOrSubscriptionRequest = {};\n        skuOrSubscriptionRequest['skuId'] = sku;\n        skuOrSubscriptionRequest['oldSku'] = oldSku;\n      } else {\n        skuOrSubscriptionRequest = sku;\n      }\n      new PayStartFlow(this.deps_, skuOrSubscriptionRequest).start();\n    }\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   * @private\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_ALREADY_SUBSCRIBED,\n        true\n      );\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * @param {ViewSubscriptionsResponse} response\n   * @private\n   */\n  startNativeFlow_(response) {\n    if (response.getNative()) {\n      this.deps_.callbacks().triggerSubscribeRequest();\n    }\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    if (this.activityIframeView_) {\n      // So no error if skipped to payment screen.\n      // Start/cancel events.\n      this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.SHOW_OFFERS);\n      this.activityIframeView_.onCancel(() => {\n        this.deps_\n          .callbacks()\n          .triggerFlowCanceled(SubscriptionFlows.SHOW_OFFERS);\n      });\n      this.activityIframeView_.on(\n        SkuSelectedResponse,\n        this.startPayFlow_.bind(this)\n      );\n      this.activityIframeView_.on(\n        AlreadySubscribedResponse,\n        this.handleLinkRequest_.bind(this)\n      );\n      this.activityIframeView_.on(\n        ViewSubscriptionsResponse,\n        this.startNativeFlow_.bind(this)\n      );\n\n      this.eventManager_.logSwgEvent(AnalyticsEvent.IMPRESSION_OFFERS);\n\n      return this.dialogManager_.openView(this.activityIframeView_);\n    }\n    return Promise.resolve();\n  }\n}\n\n/**\n * The class for subscribe option flow.\n */\nexport class SubscribeOptionFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      deps.win(),\n      this.activityPorts_,\n      feUrl('/optionsiframe'),\n      feArgs({\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productId': deps.pageConfig().getProductId(),\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': true,\n      }),\n      /* shouldFadeBody */ false\n    );\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    });\n    this.activityIframeView_.on(\n      SubscribeResponse,\n      this.maybeOpenOffersFlow_.bind(this)\n    );\n\n    this.activityIframeView_.acceptResult().then(\n      result => {\n        const data = result.data;\n        const response = new SubscribeResponse();\n        if (data['subscribe']) {\n          response.setSubscribe(true);\n        }\n        this.maybeOpenOffersFlow_(response);\n      },\n      reason => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_CLICK_TO_SHOW_OFFERS\n    );\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {SubscribeResponse} response\n   * @private\n   */\n  maybeOpenOffersFlow_(response) {\n    if (response.getSubscribe()) {\n      const options = this.options_ || {};\n      if (options.isClosable == undefined) {\n        options.isClosable = OFFERS_VIEW_CLOSABLE;\n      }\n      this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_VIEW_OFFERS, true);\n      new OffersFlow(this.deps_, options).start();\n    }\n  }\n}\n\n/**\n * The class for Abbreviated Offer flow.\n *\n */\nexport class AbbrvOfferFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest=} options\n   */\n  constructor(deps, options = {}) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/abbrvofferiframe'),\n      feArgs({\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productId': deps.pageConfig().getProductId(),\n        'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': true,\n      }),\n      /* shouldFadeBody */ false\n    );\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   * @private\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_ALREADY_SUBSCRIBED,\n        true\n      );\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * Starts the offers flow\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_ABBRV_OFFER);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_ABBRV_OFFER);\n    });\n\n    // If the user is already subscribed, trigger login flow\n    this.activityIframeView_.on(\n      AlreadySubscribedResponse,\n      this.handleLinkRequest_.bind(this)\n    );\n\n    // If result is due to requesting offers, redirect to offers flow\n    this.activityIframeView_.acceptResult().then(result => {\n      if (result.data['viewOffers']) {\n        const options = this.options_ || {};\n        if (options.isClosable == undefined) {\n          options.isClosable = OFFERS_VIEW_CLOSABLE;\n        }\n        this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_VIEW_OFFERS, true);\n        new OffersFlow(this.deps_, options).start();\n        return;\n      }\n      if (result.data['native']) {\n        this.deps_.callbacks().triggerSubscribeRequest();\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return;\n      }\n    });\n\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_CLICK_TO_SHOW_OFFERS_OR_ALREADY_SUBSCRIBED\n    );\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ExperimentFlags} from './experiment-flags';\nimport {PaymentsAsyncClient} from '../../third_party/gpay/src/payjs_async';\nimport {Xhr} from '../utils/xhr';\nimport {bytesToString, stringToBytes} from '../utils/bytes';\nimport {createCancelError} from '../utils/errors';\nimport {feArgs, feCached} from './services';\nimport {isExperimentOn} from './experiments';\n\nconst PAY_REQUEST_ID = 'swg-pay';\nconst GPAY_ACTIVITY_REQUEST = 'GPAY';\n\nconst REDIRECT_STORAGE_KEY = 'subscribe.google.com:rk';\n\n/**\n * @typedef {{\n *   forceRedirect: (boolean|undefined),\n * }}\n */\nexport let PayOptionsDef;\n\n/**\n * @const {!Object<string, string>}\n * @package Visible for testing only.\n */\nexport const PAY_ORIGIN = {\n  'PRODUCTION': 'https://pay.google.com',\n  'SANDBOX': 'https://pay.sandbox.google.com',\n};\n\n/** @return {string} */\nfunction payOrigin() {\n  return PAY_ORIGIN['$payEnvironment$'];\n}\n\n/** @return {string} */\nfunction payUrl() {\n  return feCached(PAY_ORIGIN['$payEnvironment$'] + '/gp/p/ui/pay');\n}\n\n/** @return {string} */\nfunction payDecryptUrl() {\n  return PAY_ORIGIN['$payEnvironment$'] + '/gp/p/apis/buyflow/process';\n}\n\n/**\n */\nexport class PayClient {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {!../components/dialog-manager.DialogManager} dialogManager\n   */\n  constructor(win, activityPorts, dialogManager) {\n    /** @const @private {!PayClientBindingDef} */\n    this.binding_ = isExperimentOn(win, ExperimentFlags.GPAY_API)\n      ? new PayClientBindingPayjs(win, activityPorts)\n      : new PayClientBindingSwg(win, activityPorts, dialogManager);\n  }\n\n  /**\n   * @param {!../utils/preconnect.Preconnect} pre\n   */\n  preconnect(pre) {\n    pre.prefetch(payUrl());\n    pre.prefetch(\n      'https://payments.google.com/payments/v4/js/integrator.js?ss=md'\n    );\n    pre.prefetch('https://clients2.google.com/gr/gr_full_2.0.6.js');\n    pre.preconnect('https://www.gstatic.com/');\n    pre.preconnect('https://fonts.googleapis.com/');\n    pre.preconnect('https://www.google.com/');\n  }\n\n  /**\n   * @return {string}\n   */\n  getType() {\n    // TODO(dvoytenko, #406): remove once GPay API is launched.\n    return this.binding_.getType();\n  }\n\n  /**\n   * @param {!Object} paymentRequest\n   * @param {!PayOptionsDef=} options\n   */\n  start(paymentRequest, options = {}) {\n    this.binding_.start(paymentRequest, options);\n  }\n\n  /**\n   * @param {function(!Promise<!Object>)} callback\n   */\n  onResponse(callback) {\n    this.binding_.onResponse(callback);\n  }\n}\n\n/**\n * TODO(dvoytenko, #406): remove delegated class once GPay launches.\n * @interface\n */\nclass PayClientBindingDef {\n  /**\n   * @return {string}\n   */\n  getType() {}\n\n  /**\n   * @param {!Object} unusedPaymentRequest\n   * @param {!PayOptionsDef} unusedOptions\n   */\n  start(unusedPaymentRequest, unusedOptions) {}\n\n  /**\n   * @param {function(!Promise<!Object>)} unusedCallback\n   */\n  onResponse(unusedCallback) {}\n}\n\n/**\n * @implements {PayClientBindingDef}\n */\nclass PayClientBindingSwg {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {!../components/dialog-manager.DialogManager} dialogManager\n   */\n  constructor(win, activityPorts, dialogManager) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = dialogManager;\n  }\n\n  /** @override */\n  getType() {\n    return 'SWG';\n  }\n\n  /** @override */\n  start(paymentRequest, options) {\n    const opener = this.activityPorts_.open(\n      GPAY_ACTIVITY_REQUEST,\n      payUrl(),\n      options.forceRedirect ? '_top' : '_blank',\n      feArgs(paymentRequest),\n      {}\n    );\n    this.dialogManager_.popupOpened((opener && opener.targetWin) || null);\n  }\n\n  /** @override */\n  onResponse(callback) {\n    const responseCallback = port => {\n      this.dialogManager_.popupClosed();\n      callback(this.validatePayResponse_(port));\n    };\n    this.activityPorts_.onResult(GPAY_ACTIVITY_REQUEST, responseCallback);\n    this.activityPorts_.onResult(PAY_REQUEST_ID, responseCallback);\n  }\n\n  /**\n   * @param {!../components/activities.ActivityPortDef} port\n   * @return {!Promise<!Object>}\n   * @private\n   */\n  validatePayResponse_(port) {\n    // Do not require security immediately: it will be checked below.\n    return port.acceptResult().then(result => {\n      if (result.origin != payOrigin()) {\n        throw new Error('channel mismatch');\n      }\n      const data = /** @type {!Object} */ (result.data);\n      if (data['redirectEncryptedCallbackData']) {\n        // Data is supplied as an encrypted blob.\n        const xhr = new Xhr(this.win_);\n        const url = payDecryptUrl();\n        const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n          method: 'post',\n          headers: {'Accept': 'text/plain, application/json'},\n          credentials: 'include',\n          body: data['redirectEncryptedCallbackData'],\n          mode: 'cors',\n        });\n        return xhr\n          .fetch(url, init)\n          .then(response => response.json())\n          .then(response => {\n            const dataClone = Object.assign({}, data);\n            delete dataClone['redirectEncryptedCallbackData'];\n            return Object.assign(dataClone, response);\n          });\n      }\n      // Data is supplied directly: must be a verified and secure channel.\n      if (result.originVerified && result.secureChannel) {\n        return data;\n      }\n      throw new Error('channel mismatch');\n    });\n  }\n}\n\n/**\n * Binding based on the https://github.com/google/payjs.\n * @implements {PayClientBindingDef}\n * @package Visible for testing only.\n */\nexport class PayClientBindingPayjs {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   */\n  constructor(win, activityPorts) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n\n    /** @private {?function(!Promise<!Object>)} */\n    this.responseCallback_ = null;\n\n    /** @private {?Promise<!Object>} */\n    this.response_ = null;\n\n    /** @private @const {!RedirectVerifierHelper} */\n    this.redirectVerifierHelper_ = new RedirectVerifierHelper(this.win_);\n\n    /** @private @const {!PaymentsAsyncClient} */\n    this.client_ = this.createClient_(\n      {\n        environment: '$payEnvironment$',\n        'i': {\n          'redirectKey': this.redirectVerifierHelper_.restoreKey(),\n        },\n      },\n      this.handleResponse_.bind(this)\n    );\n\n    // Prepare new verifier pair.\n    this.redirectVerifierHelper_.prepare();\n  }\n\n  /**\n   * @param {!Object} options\n   * @param {function(!Promise<!Object>)} handler\n   * @return {!PaymentsAsyncClient}\n   * @private\n   */\n  createClient_(options, handler) {\n    return new PaymentsAsyncClient(\n      options,\n      handler,\n      /* useIframe */ false,\n      this.activityPorts_.getOriginalWebActivityPorts()\n    );\n  }\n\n  /** @override */\n  getType() {\n    return 'PAYJS';\n  }\n\n  /** @override */\n  start(paymentRequest, options) {\n    if (options.forceRedirect) {\n      paymentRequest = Object.assign(paymentRequest, {\n        'forceRedirect': options.forceRedirect || false,\n      });\n    }\n    setInternalParam(\n      paymentRequest,\n      'disableNative',\n      // The page cannot be iframed at this time. May be relaxed later\n      // for AMP and similar contexts.\n      this.win_ != this.top_() ||\n        // Experiment must be enabled.\n        !isExperimentOn(this.win_, ExperimentFlags.GPAY_NATIVE)\n    );\n    // Notice that the callback for verifier may execute asynchronously.\n    this.redirectVerifierHelper_.useVerifier(verifier => {\n      if (verifier) {\n        setInternalParam(paymentRequest, 'redirectVerifier', verifier);\n      }\n      this.client_.loadPaymentData(paymentRequest);\n    });\n  }\n\n  /** @override */\n  onResponse(callback) {\n    this.responseCallback_ = callback;\n    const response = this.response_;\n    if (response) {\n      Promise.resolve().then(() => {\n        if (response) {\n          callback(this.convertResponse_(response));\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {!Promise<!Object>} responsePromise\n   * @private\n   */\n  handleResponse_(responsePromise) {\n    this.response_ = responsePromise;\n    if (this.responseCallback_) {\n      this.responseCallback_(this.convertResponse_(this.response_));\n    }\n  }\n\n  /**\n   * @param {!Promise<!Object>} response\n   * @return {!Promise<!Object>}\n   * @private\n   */\n  convertResponse_(response) {\n    return response.catch(reason => {\n      if (typeof reason == 'object' && reason['statusCode'] == 'CANCELED') {\n        return Promise.reject(createCancelError(this.win_));\n      }\n      return Promise.reject(reason);\n    });\n  }\n\n  /**\n   * @return {!Window}\n   * @private\n   */\n  top_() {\n    // Only exists for testing since it's not possible to override `window.top`.\n    return this.win_.top;\n  }\n}\n\n/**\n * @typedef {{\n *   key: string,\n *   verifier: string,\n * }}\n */\nlet RedirectVerifierPairDef;\n\n/**\n * This helper generates key/verifier pair for the redirect mode. When the\n * redirect mode is used, the encrypted payload is returned via nivigation URL.\n * This payload need to be decrypted and to avoid session fixation attacks, a\n * verifier has to be used. This redirect verifier is not the only session\n * verifier in use: we also use GAIA. However, we have to fallback to this\n * verifier when GAIA is not available.\n *\n * @package Visible for testing only.\n */\nexport class RedirectVerifierHelper {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private {boolean} */\n    this.pairCreated_ = false;\n\n    /** @private {?RedirectVerifierPairDef} */\n    this.pair_ = null;\n\n    /** @private {?Promise<?RedirectVerifierPairDef>} */\n    this.pairPromise_ = null;\n  }\n\n  /**\n   * To avoid popup blockers, the key/verifier pair is created as soon as\n   * possible.\n   * @return {?Promise}\n   */\n  prepare() {\n    return this.getOrCreatePair_(() => {});\n  }\n\n  /**\n   * Calls the provided callback with the generated redirect verifier. This\n   * API is sync/async, which is a big anti-pattern. However, it's necessary\n   * to reduce the risk of popup blockers. If the verifier is already available\n   * (see `prepare` method), the callback will be called immediately and thus\n   * in the same event loop as the user action.\n   *\n   * The return verifier could be `null`. This could mean either that its\n   * generation failed, or if the platform doesn't support necessary APIs, such\n   * as Web Crypto. The redirect can still proceed and try to fallback on GAIA\n   * as a redirect verifier. The set of platforms where GAIA is not available\n   * and the redirect verifier cannot be created is negligible.\n   *\n   * The key corresponding to the returned verifier is stored in the session\n   * storage and can be later restored using `restoreKey` method.\n   *\n   * @param {function(?string)} callback\n   */\n  useVerifier(callback) {\n    this.getOrCreatePair_(pair => {\n      if (pair) {\n        try {\n          this.win_.localStorage.setItem(REDIRECT_STORAGE_KEY, pair.key);\n        } catch (e) {\n          // If storage has failed, there's no point in using the verifer.\n          // However, there are other ways to recover the redirect, so it's\n          // not necessarily a fatal condition.\n          pair = null;\n        }\n      }\n      callback((pair && pair.verifier) || null);\n    });\n  }\n\n  /**\n   * Restores the redirect key from the session storage. The key may be null.\n   * @return {?string}\n   */\n  restoreKey() {\n    try {\n      return (\n        (this.win_.localStorage &&\n          this.win_.localStorage.getItem(REDIRECT_STORAGE_KEY)) ||\n        null\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @param {function(?RedirectVerifierPairDef)} callback\n   * @return {?Promise}\n   * @private\n   */\n  getOrCreatePair_(callback) {\n    this.createPair_();\n    if (this.pairCreated_) {\n      // Already created.\n      callback(this.pair_);\n    } else if (this.pairPromise_) {\n      // Otherwise wait for it to be created.\n      this.pairPromise_.then(pair => callback(pair));\n    }\n    return this.pairPromise_;\n  }\n\n  /**\n   * @private\n   */\n  createPair_() {\n    // Either already created or already started.\n    if (this.pairCreated_ || this.pairPromise_) {\n      return;\n    }\n\n    // Check that the platform can fully support verification. That means\n    // that it's expected to implement the following APIs:\n    // a. Local storage (localStorage);\n    // b. WebCrypto (crypto.subtle);\n    // c. Crypto random (crypto.getRandomValues);\n    // d. SHA284 (crypto.subtle.digest).\n    const crypto = this.win_.crypto;\n    if (\n      this.win_.localStorage &&\n      crypto &&\n      crypto.getRandomValues &&\n      crypto.subtle &&\n      crypto.subtle.digest\n    ) {\n      this.pairPromise_ = new Promise((resolve, reject) => {\n        // 1. Use crypto random to create a 128-bit (16 byte) redirect key.\n        const keyBytes = new Uint8Array(16);\n        crypto.getRandomValues(keyBytes);\n\n        // 2. Encode key as base64.\n        const key = btoa(bytesToString(keyBytes));\n\n        // 3. Create a hash.\n        crypto.subtle.digest({name: 'SHA-384'}, stringToBytes(key)).then(\n          buffer => {\n            const verifier = btoa(\n              bytesToString(\n                new Uint8Array(/** @type {!ArrayBuffer} */ (buffer))\n              )\n            );\n            resolve({key, verifier});\n          },\n          reason => {\n            reject(reason);\n          }\n        );\n      })\n        .catch(() => {\n          // Ignore failures. A failure to create a redirect verifier is often\n          // recoverable.\n          return null;\n        })\n        .then(pair => {\n          this.pairCreated_ = true;\n          this.pair_ = pair;\n          return pair;\n        });\n    } else {\n      // Not supported.\n      this.pairCreated_ = true;\n      this.pair_ = null;\n    }\n  }\n}\n\n/**\n * @param {!Object} paymentRequest\n * @param {string} param\n * @param {*} value\n */\nfunction setInternalParam(paymentRequest, param, value) {\n  paymentRequest['i'] = Object.assign(paymentRequest['i'] || {}, {\n    [param]: value,\n  });\n}\n\n// TODO(dvoytenko, #406): Remove once GPay API is supported.\nexport function getPayjsBindingForTesting() {\n  return PayClientBindingPayjs;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The Flow goes like this:\n * a. Start Payments\n * b. Complete Payments\n * c. Create Account\n * d. Acknowledge Account\n *\n * In other words, Flow = Payments + Account Creation.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {AnalyticsEvent, EventParams} from '../proto/api_messages';\nimport {JwtHelper} from '../utils/jwt';\nimport {PurchaseData, SubscribeResponse} from '../api/subscribe-response';\nimport {\n  ProductType,\n  SubscriptionFlows,\n  WindowOpenMode,\n} from '../api/subscriptions';\nimport {UserData} from '../api/user-data';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\nimport {parseJson, tryParseJson} from '../utils/json';\nimport {\n  EntitlementsResponse,\n  AccountCreationRequest,\n} from '../proto/api_messages';\n/**\n * String values input by the publisher are mapped to the number values.\n * @type {!Object<string, number>}\n */\nexport const ReplaceSkuProrationModeMapping = {\n  // The replacement takes effect immediately, and the remaining time will\n  // be prorated and credited to the user. This is the current default\n  // behavior.\n  'IMMEDIATE_WITH_TIME_PRORATION': 1,\n};\n\n/**\n * The flow to initiate payment process.\n */\nexport class PayStartFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SubscriptionRequest|string} skuOrSubscriptionRequest\n   * @param {!../api/subscriptions.ProductType} productType\n   */\n  constructor(\n    deps,\n    skuOrSubscriptionRequest,\n    productType = ProductType.SUBSCRIPTION\n  ) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!./pay-client.PayClient} */\n    this.payClient_ = deps.payClient();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../api/subscriptions.SubscriptionRequest} */\n    this.subscriptionRequest_ =\n      typeof skuOrSubscriptionRequest == 'string'\n        ? {'skuId': skuOrSubscriptionRequest}\n        : skuOrSubscriptionRequest;\n\n    /**@private @const {!ProductType} */\n    this.productType_ = productType;\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    // Map the proration mode to the enum value (if proration exists).\n    this.prorationMode = this.subscriptionRequest_.replaceSkuProrationMode;\n    this.prorationEnum = 0;\n    if (this.prorationMode) {\n      this.prorationEnum = ReplaceSkuProrationModeMapping[this.prorationMode];\n    } else if (this.subscriptionRequest_.oldSku) {\n      this.prorationEnum =\n        ReplaceSkuProrationModeMapping['IMMEDIATE_WITH_TIME_PRORATION'];\n    }\n  }\n\n  /**\n   * Starts the payments flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Add the 'publicationId' key to the subscriptionRequest_ object.\n    const swgPaymentRequest = Object.assign({}, this.subscriptionRequest_, {\n      'publicationId': this.pageConfig_.getPublicationId(),\n    });\n\n    if (this.prorationEnum) {\n      swgPaymentRequest.replaceSkuProrationMode = this.prorationEnum;\n    }\n\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(\n        SubscriptionFlows.SUBSCRIBE,\n        this.subscriptionRequest_\n      );\n    // TODO(chenshay): Create analytics for 'replace subscription'.\n    this.analyticsService_.setSku(this.subscriptionRequest_.skuId);\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED,\n      true\n    );\n    this.payClient_.start(\n      {\n        'apiVersion': 1,\n        'allowedPaymentMethods': ['CARD'],\n        'environment': '$payEnvironment$',\n        'playEnvironment': '$playEnvironment$',\n        'swg': swgPaymentRequest,\n        'i': {\n          'startTimeMs': Date.now(),\n          'googleTransactionId': this.analyticsService_.getTransactionId(),\n          'productType': this.productType_,\n        },\n      },\n      {\n        forceRedirect:\n          this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT,\n      }\n    );\n    return Promise.resolve();\n  }\n}\n\n/**\n * The flow for successful payments completion.\n */\nexport class PayCompleteFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /** @const @type {./client-event-manager.ClientEventManager} */\n    const eventManager = deps.eventManager();\n\n    deps.payClient().onResponse(payPromise => {\n      deps.entitlementsManager().blockNextNotification();\n      const flow = new PayCompleteFlow(deps);\n      const promise = validatePayResponse(\n        deps,\n        payPromise,\n        flow.complete.bind(flow)\n      );\n      deps.callbacks().triggerSubscribeResponse(promise);\n      return promise.then(\n        response => {\n          eventManager.logSwgEvent(\n            AnalyticsEvent.ACTION_PAYMENT_COMPLETE,\n            true\n          );\n          flow.start(response);\n        },\n        reason => {\n          if (isCancelError(reason)) {\n            deps.callbacks().triggerFlowCanceled(SubscriptionFlows.SUBSCRIBE);\n          } else {\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.EVENT_PAYMENT_FAILED, false);\n            deps.jserror().error('Pay failed', reason);\n          }\n          throw reason;\n        }\n      );\n    });\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?SubscribeResponse} */\n    this.response_ = null;\n\n    /** @private {?Promise} */\n    this.readyPromise_ = null;\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /**\n   * Starts the payments completion flow.\n   * @param {!SubscribeResponse} response\n   * @return {!Promise}\n   */\n  start(response) {\n    if (!this.analyticsService_.getSku()) {\n      // This is a redirect response. Extract the SKU if possible.\n      this.analyticsService_.addLabels(['redirect']);\n      const sku = parseSkuFromPurchaseDataSafe(response.purchaseData);\n      if (sku) {\n        this.analyticsService_.setSku(sku);\n      }\n    }\n\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_ACCOUNT_CHANGED,\n      true\n    );\n    this.deps_.entitlementsManager().reset(true);\n    this.response_ = response;\n    // TODO(dianajing): find a way to specify whether response is a subscription update\n    const args = {\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'productType': this.response_['productType'],\n      // 'isSubscriptionUpdate': !!response.oldSku,\n    };\n    // TODO(dvoytenko, #400): cleanup once entitlements is launched everywhere.\n    if (response.userData && response.entitlements) {\n      args['idToken'] = response.userData.idToken;\n      this.deps_\n        .entitlementsManager()\n        .pushNextEntitlements(response.entitlements.raw);\n    } else {\n      args['loginHint'] = response.userData && response.userData.email;\n    }\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/payconfirmiframe'),\n      feArgs(args),\n      /* shouldFadeBody */ true\n    );\n\n    this.activityIframeView_.on(\n      EntitlementsResponse,\n      this.handleEntitlementsResponse_.bind(this)\n    );\n\n    this.activityIframeView_.acceptResult().then(() => {\n      // The flow is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    });\n    this.readyPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.readyPromise_;\n  }\n\n  /**\n   * @param {!EntitlementsResponse} response\n   * @private\n   */\n  handleEntitlementsResponse_(response) {\n    const jwt = response.getJwt();\n    if (jwt) {\n      this.deps_.entitlementsManager().pushNextEntitlements(jwt);\n    }\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  complete() {\n    this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_ACCOUNT_CREATED, true);\n    this.deps_.entitlementsManager().unblockNextNotification();\n    this.readyPromise_.then(() => {\n      const accountCompletionRequest = new AccountCreationRequest();\n      accountCompletionRequest.setComplete(true);\n      this.activityIframeView_.execute(accountCompletionRequest);\n    });\n    return this.activityIframeView_\n      .acceptResult()\n      .catch(() => {\n        // Ignore errors.\n      })\n      .then(() => {\n        this.eventManager_.logSwgEvent(\n          AnalyticsEvent.ACTION_ACCOUNT_ACKNOWLEDGED,\n          true\n        );\n        this.deps_.entitlementsManager().setToastShown(true);\n      });\n  }\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {!Promise<!Object>} payPromise\n * @param {function():!Promise} completeHandler\n * @return {!Promise<!SubscribeResponse>}\n */\nfunction validatePayResponse(deps, payPromise, completeHandler) {\n  return payPromise.then(data => {\n    // 1) We log against a random TX ID which is how we track a specific user\n    //    anonymously.\n    // 2) If there was a redirect to gPay, we may have lost our stored TX ID.\n    // 3) Pay service is supposed to give us the TX ID it logged against.\n\n    const hasLogged = deps.analytics().getHasLogged();\n    let eventType = AnalyticsEvent.UNKNOWN;\n    let eventParams = undefined;\n    if (typeof data !== 'object' || !data['googleTransactionId']) {\n      // If gPay doesn't give us a TX ID it means that something may\n      // be wrong.  If we previously logged then we are at least continuing to\n      // log against the same TX ID.  If we didn't previously log then we have\n      // lost all connection to the events that preceded the payment event and\n      // we at least want to know why that data was lost.\n      eventParams = new EventParams();\n      eventParams.setHadLogged(hasLogged);\n      eventType = AnalyticsEvent.EVENT_GPAY_NO_TX_ID;\n    } else {\n      const oldTxId = deps.analytics().getTransactionId();\n      const newTxId = data['googleTransactionId'];\n\n      if (!hasLogged) {\n        // This is the expected case for full redirects.  It may be happening\n        // unexpectedly at other times too though and we want to be aware of it\n        // if it does.\n        deps.analytics().setTransactionId(newTxId);\n        eventType = AnalyticsEvent.EVENT_GPAY_CANNOT_CONFIRM_TX_ID;\n      } else {\n        if (oldTxId === newTxId) {\n          // This is the expected case for non-redirect pay events\n          eventType = AnalyticsEvent.EVENT_CONFIRM_TX_ID;\n        } else {\n          // This is an unexpected case: gPay rejected our TX ID and created\n          // its own.  Log the gPay TX ID but keep our logging consistent.\n          eventParams = new EventParams();\n          eventParams.setGpayTransactionId(newTxId);\n          eventType = AnalyticsEvent.EVENT_CHANGED_TX_ID;\n        }\n      }\n    }\n    deps.eventManager().logSwgEvent(eventType, true, eventParams);\n    return parseSubscriptionResponse(deps, data, completeHandler);\n  });\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {*} data\n * @param {function():!Promise} completeHandler\n * @return {!SubscribeResponse}\n */\nexport function parseSubscriptionResponse(deps, data, completeHandler) {\n  let swgData = null;\n  let raw = null;\n  let productType = null;\n  if (data) {\n    if (typeof data == 'string') {\n      raw = /** @type {string} */ (data);\n    } else {\n      // Assume it's a json object in the format:\n      // `{integratorClientCallbackData: \"...\"}` or `{swgCallbackData: \"...\"}`.\n      const json = /** @type {!Object} */ (data);\n      if ('productType' in data) {\n        productType = data['productType'];\n      }\n      if ('swgCallbackData' in json) {\n        swgData = /** @type {!Object} */ (json['swgCallbackData']);\n      } else if ('integratorClientCallbackData' in json) {\n        raw = json['integratorClientCallbackData'];\n      }\n    }\n  }\n  if (!productType) {\n    productType = ProductType.SUBSCRIPTION;\n  }\n  if (raw && !swgData) {\n    raw = atob(raw);\n    if (raw) {\n      const parsed = parseJson(raw);\n      swgData = parsed['swgCallbackData'];\n    }\n  }\n  if (!swgData) {\n    throw new Error('unexpected payment response');\n  }\n  raw = JSON.stringify(/** @type {!JsonObject} */ (swgData));\n  return new SubscribeResponse(\n    raw,\n    parsePurchaseData(swgData),\n    parseUserData(swgData),\n    parseEntitlements(deps, swgData),\n    productType,\n    completeHandler\n  );\n}\n\n/**\n * @param {!Object} swgData\n * @return {!PurchaseData}\n */\nfunction parsePurchaseData(swgData) {\n  const raw = swgData['purchaseData'];\n  const signature = swgData['purchaseDataSignature'];\n  return new PurchaseData(raw, signature);\n}\n\n/**\n * @param {!Object} swgData\n * @return {?UserData}\n * @package Visible for testing.\n */\nexport function parseUserData(swgData) {\n  const idToken = swgData['idToken'];\n  if (!idToken) {\n    return null;\n  }\n  const jwt = /** @type {!Object} */ (new JwtHelper().decode(idToken));\n  return new UserData(idToken, jwt);\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {!Object} swgData\n * @return {?../api/entitlements.Entitlements}\n * @package Visible for testing.\n */\nexport function parseEntitlements(deps, swgData) {\n  if (swgData['signedEntitlements']) {\n    return deps.entitlementsManager().parseEntitlements(swgData);\n  }\n  return null;\n}\n\n/**\n * @param {!PurchaseData} purchaseData\n * @return {?string}\n */\nfunction parseSkuFromPurchaseDataSafe(purchaseData) {\n  const json = tryParseJson(purchaseData.raw);\n  return (json && json['productId']) || null;\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {adsUrl} from './services';\nimport {\n  AnalyticsEvent,\n  EventOriginator,\n  EventParams,\n} from '../proto/api_messages';\nimport {isObject, isBoolean} from '../utils/types';\nimport {analyticsEventToPublisherEvent} from './event-type-mapping';\n\n/**\n * Implements interface to Propensity server\n */\nexport class PropensityServer {\n  /**\n   * Page configuration is known when Propensity API\n   * is available, publication ID is therefore used\n   * in constructor for the server interface.\n   * @param {!Window} win\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(win, deps, fetcher) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n    /** @private @const {string} */\n    this.publicationId_ = this.deps_.pageConfig().getPublicationId();\n    /** @private {?string} */\n    this.clientId_ = null;\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n    /** @private @const {number} */\n    this.version_ = 1;\n\n    this.deps_\n      .eventManager()\n      .registerEventListener(this.handleClientEvent_.bind(this));\n  }\n\n  /**\n   * @private\n   * @return {string}\n   */\n  getDocumentCookie_() {\n    return this.win_.document.cookie;\n  }\n\n  /**\n   * Returns the client ID to be used.\n   * @return {?string}\n   * @private\n   */\n  getClientId_() {\n    if (!this.clientId_) {\n      // Match '__gads' (name of the cookie) dropped by Ads Tag.\n      const gadsmatch = this.getDocumentCookie_().match(\n        '(^|;)\\\\s*__gads\\\\s*=\\\\s*([^;]+)'\n      );\n      // Since the cookie will be consumed using decodeURIComponent(),\n      // use encodeURIComponent() here to match.\n      this.clientId_ = gadsmatch && encodeURIComponent(gadsmatch.pop());\n    }\n    return this.clientId_;\n  }\n\n  /**\n   * @private\n   * @param {string} url\n   * @return {string}\n   */\n  propensityUrl_(url) {\n    url = url + '&u_tz=240&v=' + this.version_;\n    const clientId = this.getClientId_();\n    if (clientId) {\n      url = url + '&cookie=' + clientId;\n    }\n    url = url + '&cdm=' + this.win_.location.hostname;\n    return url;\n  }\n\n  /**\n   * @param {string} state\n   * @param {?string} productsOrSkus\n   */\n  sendSubscriptionState(state, productsOrSkus) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    let userState = this.publicationId_ + ':' + state;\n    if (productsOrSkus) {\n      userState = userState + ':' + encodeURIComponent(productsOrSkus);\n    }\n    const url = adsUrl('/subopt/data?states=') + encodeURIComponent(userState);\n    return this.fetcher_.fetch(this.propensityUrl_(url), init);\n  }\n\n  /**\n   * @param {string} event\n   * @param {?string} context\n   * @private\n   */\n  sendEvent_(event, context) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    let eventInfo = this.publicationId_ + ':' + event;\n    if (context) {\n      eventInfo = eventInfo + ':' + encodeURIComponent(context);\n    }\n    const url = adsUrl('/subopt/data?events=') + encodeURIComponent(eventInfo);\n    return this.fetcher_.fetch(this.propensityUrl_(url), init);\n  }\n\n  /**\n   *\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   */\n  handleClientEvent_(event) {\n    /**\n     * Does a live check of the config because we don't know when publisher\n     * called to enable (it may be after a consent dialog).\n     */\n    if (\n      !this.deps_.config().enablePropensity &&\n      event.eventOriginator !== EventOriginator.PROPENSITY_CLIENT\n    ) {\n      return;\n    }\n\n    if (event.eventType === AnalyticsEvent.EVENT_SUBSCRIPTION_STATE) {\n      this.sendSubscriptionState(\n        event.additionalParameters['state'],\n        event.additionalParameters['productsOrSkus']\n      );\n      return;\n    }\n    const propEvent = analyticsEventToPublisherEvent(event.eventType);\n    if (propEvent == null) {\n      return;\n    }\n    let additionalParameters = event.additionalParameters;\n    // The EventParams object is private to SwG analytics.  Do not send.\n    if (additionalParameters instanceof EventParams) {\n      additionalParameters = undefined;\n    }\n    if (isBoolean(event.isFromUserAction)) {\n      if (!isObject(additionalParameters)) {\n        additionalParameters = {};\n      }\n      additionalParameters['is_active'] = event.isFromUserAction;\n    }\n    this.sendEvent_(\n      propEvent,\n      JSON.stringify(/** @type {?JsonObject} */ (additionalParameters))\n    );\n  }\n\n  /**\n   * @param {JsonObject} response\n   * @return {!../api/propensity-api.PropensityScore}\n   */\n  parsePropensityResponse_(response) {\n    let defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({});\n    if (!response['header']) {\n      defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n        header: {ok: false},\n        body: {error: 'No valid response'},\n      });\n      return defaultScore;\n    }\n    const status = response['header'];\n    let scoreDetails = undefined;\n    if (status['ok']) {\n      const scores = response['scores'];\n      scoreDetails = [];\n      for (let i = 0; i < scores.length; i++) {\n        const result = scores[i];\n        const scoreStatus = !!result['score'];\n        let scoreDetail;\n        if (scoreStatus) {\n          const value = /** @type {!../api/propensity-api.Score} */ ({\n            value: result['score'],\n            bucketed: result['score_type'] == 2,\n          });\n          scoreDetail = /** @type {!../api/propensity-api.Body} */ ({\n            product: result['product'],\n            score: value,\n          });\n        } else {\n          scoreDetail = /** @type {!../api/propensity-api.Body} */ ({\n            product: result['product'],\n            error: result['error_message'],\n          });\n        }\n        scoreDetails.push(scoreDetail);\n      }\n      if (scoreDetails) {\n        defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n          header: {ok: true},\n          body: {scores: scoreDetails},\n        });\n      }\n      return defaultScore;\n    }\n    defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n      header: {ok: false},\n      body: {error: response['error']},\n    });\n    return defaultScore;\n  }\n  /**\n   * @param {string} referrer\n   * @param {string} type\n   * @return {?Promise<../api/propensity-api.PropensityScore>}\n   */\n  getPropensity(referrer, type) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    const url =\n      adsUrl('/subopt/pts?products=') +\n      this.publicationId_ +\n      '&type=' +\n      type +\n      '&ref=' +\n      referrer;\n    return this.fetcher_\n      .fetch(this.propensityUrl_(url), init)\n      .then(result => result.json())\n      .then(response => {\n        return this.parsePropensityResponse_(response);\n      });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as PropensityApi from '../api/propensity-api';\nimport {Event, SubscriptionState} from '../api/logger-api';\nimport {PropensityServer} from './propensity-server';\nimport {isObject, isEnumValue} from '../utils/types';\nimport {EventOriginator} from '../proto/api_messages';\nimport {publisherEventToAnalyticsEvent} from './event-type-mapping';\nimport {isBoolean} from '../utils/types';\n\n/**\n * @implements {PropensityApi.PropensityApi}\n */\nexport class Propensity {\n  /**\n   * @param {!Window} win\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   *\n   * IMPORTANT: deps may not be full initialized config and pageConfig are\n   * available immediately, other function should be gated on a ready promise.\n   * #TODO(jpettitt) switch refactor to take out the win and use deps to get win\n   */\n  constructor(win, deps, fetcher) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private {PropensityServer} */\n    this.propensityServer_ = new PropensityServer(win, deps, fetcher);\n\n    /** @private @const {!../api/client-event-manager-api.ClientEventManagerApi} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /** @override */\n  sendSubscriptionState(state, jsonProducts) {\n    if (!Object.values(SubscriptionState).includes(state)) {\n      throw new Error('Invalid subscription state provided');\n    }\n    if (\n      (SubscriptionState.SUBSCRIBER == state ||\n        SubscriptionState.PAST_SUBSCRIBER == state) &&\n      !jsonProducts\n    ) {\n      throw new Error(\n        'Entitlements must be provided for users with' +\n          ' active or expired subscriptions'\n      );\n    }\n    if (jsonProducts && !isObject(jsonProducts)) {\n      throw new Error('Entitlements must be an Object');\n    }\n    let productsOrSkus = null;\n    if (jsonProducts) {\n      productsOrSkus = JSON.stringify(jsonProducts);\n    }\n    this.propensityServer_.sendSubscriptionState(state, productsOrSkus);\n  }\n\n  /** @override */\n  getPropensity(type) {\n    if (type && !Object.values(PropensityApi.PropensityType).includes(type)) {\n      throw new Error('Invalid propensity type requested');\n    }\n    if (!type) {\n      type = PropensityApi.PropensityType.GENERAL;\n    }\n    return this.propensityServer_.getPropensity(\n      this.win_.document.referrer,\n      type\n    );\n  }\n\n  /** @override */\n  sendEvent(userEvent) {\n    const analyticsEvent = publisherEventToAnalyticsEvent(userEvent.name);\n    let data = null;\n    if (!isEnumValue(Event, userEvent.name) || !analyticsEvent) {\n      throw new Error('Invalid user event provided(' + userEvent.name + ')');\n    }\n\n    if (userEvent.data) {\n      if (!isObject(userEvent.data)) {\n        throw new Error('Event data must be an Object(' + userEvent.data + ')');\n      } else {\n        data = {};\n        Object.assign(data, userEvent.data);\n      }\n    }\n\n    if (isBoolean(userEvent.active)) {\n      if (!data) {\n        data = {};\n      }\n      Object.assign(data, {'is_active': userEvent.active});\n    } else if (userEvent.active != null) {\n      throw new Error('Event active must be a boolean');\n    }\n\n    this.eventManager_.logEvent({\n      eventType: analyticsEvent,\n      eventOriginator: EventOriginator.PROPENSITY_CLIENT,\n      isFromUserAction: userEvent.active,\n      additionalParameters: data,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityPorts} from '../components/activities';\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {ButtonApi} from './button-api';\nimport {CSS as SWG_DIALOG} from '../../build/css/components/dialog.css';\nimport {Callbacks} from './callbacks';\nimport {ContributionsFlow} from './contributions-flow';\nimport {DeferredAccountFlow} from './deferred-account-flow';\nimport {DepsDef} from './deps';\nimport {DialogManager} from '../components/dialog-manager';\nimport {Doc, resolveDoc} from '../model/doc';\nimport {EntitlementsManager} from './entitlements-manager';\nimport {ExperimentFlags} from './experiment-flags';\nimport {Fetcher, XhrFetcher} from './fetcher';\nimport {JsError} from './jserror';\nimport {\n  LinkCompleteFlow,\n  LinkbackFlow,\n  LinkSaveFlow,\n} from './link-accounts-flow';\nimport {LoginPromptApi} from './login-prompt-api';\nimport {LoginNotificationApi} from './login-notification-api';\nimport {PayClient} from './pay-client';\nimport {WaitForSubscriptionLookupApi} from './wait-for-subscription-lookup-api';\nimport {OffersApi} from './offers-api';\nimport {OffersFlow, SubscribeOptionFlow, AbbrvOfferFlow} from './offers-flow';\nimport {PageConfig} from '../model/page-config';\nimport {\n  PageConfigResolver,\n  getControlFlag,\n} from '../model/page-config-resolver';\nimport {PayStartFlow, PayCompleteFlow} from './pay-flow';\nimport {Preconnect} from '../utils/preconnect';\nimport {Storage} from './storage';\nimport {\n  Subscriptions,\n  WindowOpenMode,\n  defaultConfig,\n  ProductType,\n} from '../api/subscriptions';\nimport {debugLog} from '../utils/log';\nimport {injectStyleSheet, isEdgeBrowser} from '../utils/dom';\nimport {isArray} from '../utils/types';\nimport {isExperimentOn} from './experiments';\nimport {setExperiment} from './experiments';\nimport {AnalyticsService} from './analytics-service';\nimport {AnalyticsMode} from '../api/subscriptions';\nimport {Propensity} from './propensity';\nimport {ClientEventManager} from './client-event-manager';\nimport {Logger} from './logger';\nimport {assert} from '../utils/log';\nimport {isBoolean} from '../utils/types';\n\nconst RUNTIME_PROP = 'SWG';\nconst RUNTIME_LEGACY_PROP = 'SUBSCRIPTIONS'; // MIGRATE\n\n/** @private {!Runtime} */\nlet runtimeInstance_;\n\n/**\n * Returns runtime for testing if available. Throws if the runtime is not\n * initialized yet.\n * @visibleForTesting\n * @return {!Runtime}\n */\nexport function getRuntime() {\n  assert(runtimeInstance_, 'not initialized yet');\n  return runtimeInstance_;\n}\n\n/**\n * @param {!Window} win\n */\nexport function installRuntime(win) {\n  if (win[RUNTIME_PROP] && !isArray(win[RUNTIME_PROP])) {\n    return;\n  }\n\n  const runtime = new Runtime(win);\n\n  const waitingArray = [].concat(win[RUNTIME_PROP], win[RUNTIME_LEGACY_PROP]);\n\n  // Public runtime.\n  const publicRuntime = createPublicRuntime(runtime);\n\n  const dependencyInstaller = {};\n\n  /**\n   * @param {function(!Subscriptions)} callback\n   */\n  function pushDependency(callback) {\n    if (!callback) {\n      return;\n    }\n    runtime.whenReady().then(() => {\n      callback(publicRuntime);\n    });\n  }\n  Object.defineProperty(dependencyInstaller, 'push', {\n    get: () => pushDependency,\n    configurable: false,\n  });\n  win[RUNTIME_PROP] = dependencyInstaller;\n  win[RUNTIME_LEGACY_PROP] = dependencyInstaller;\n  if (waitingArray) {\n    waitingArray.forEach(pushDependency);\n  }\n  runtimeInstance_ = runtime;\n  runtime.startSubscriptionsFlowIfNeeded();\n}\n\n/**\n * @implements {Subscriptions}\n */\nexport class Runtime {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(win);\n\n    /** @private @const {!Promise} */\n    this.ready_ = Promise.resolve();\n\n    /** @private {?string} */\n    this.productOrPublicationId_ = null;\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = {};\n\n    /** @private {boolean} */\n    this.committed_ = false;\n\n    /** @private {?function((!ConfiguredRuntime|!Promise))} */\n    this.configuredResolver_ = null;\n\n    /** @private @const {!Promise<!ConfiguredRuntime>} */\n    this.configuredPromise_ = new Promise(resolve => {\n      this.configuredResolver_ = resolve;\n    });\n\n    /** @private {?PageConfigResolver} */\n    this.pageConfigResolver_ = null;\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_, this.configuredPromise_);\n    this.buttonApi_.init(); // Injects swg-button stylesheet.\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * @param {boolean} commit\n   * @return {!Promise<!ConfiguredRuntime>}\n   * @private\n   */\n  configured_(commit) {\n    if (!this.committed_ && commit) {\n      this.committed_ = true;\n      /** @type {!Promise<!PageConfig>} */\n      let pageConfigPromise;\n      if (this.productOrPublicationId_) {\n        pageConfigPromise = Promise.resolve(\n          new PageConfig(this.productOrPublicationId_, /* locked */ false)\n        );\n      } else {\n        this.pageConfigResolver_ = new PageConfigResolver(this.doc_);\n        pageConfigPromise = this.pageConfigResolver_\n          .resolveConfig()\n          .then(config => {\n            this.pageConfigResolver_ = null;\n            return config;\n          });\n      }\n      pageConfigPromise.then(\n        pageConfig => {\n          this.configuredResolver_(\n            new ConfiguredRuntime(\n              this.doc_,\n              pageConfig,\n              /* opt_integr */ {configPromise: this.configuredPromise_},\n              this.config_\n            )\n          );\n          this.configuredResolver_ = null;\n        },\n        reason => {\n          this.configuredResolver_(Promise.reject(reason));\n          this.configuredResolver_ = null;\n        }\n      );\n    } else if (commit && this.pageConfigResolver_) {\n      this.pageConfigResolver_.check();\n    }\n    return this.configuredPromise_;\n  }\n\n  /**\n   * Starts the subscription flow if it hasn't been started and the page is\n   * configured to start it automatically.\n   *\n   * @return {?Promise}\n   * @package\n   */\n  startSubscriptionsFlowIfNeeded() {\n    const control = getControlFlag(this.win_.document);\n    debugLog(control, 'mode');\n    if (control == 'manual') {\n      // \"Skipping automatic start because control flag is set to \"manual\".\n      return null;\n    }\n    return this.start();\n  }\n\n  /** @override */\n  init(productOrPublicationId) {\n    assert(!this.committed_, 'already configured');\n    this.productOrPublicationId_ = productOrPublicationId;\n  }\n\n  /** @override */\n  configure(config) {\n    // Accumulate config for startup.\n    Object.assign(this.config_, config);\n    return this.configured_(false).then(runtime => runtime.configure(config));\n  }\n\n  /** @override */\n  start() {\n    return this.configured_(true).then(runtime => runtime.start());\n  }\n\n  /** @override */\n  reset() {\n    return this.configured_(true).then(runtime => runtime.reset());\n  }\n\n  /** @override */\n  clear() {\n    return this.configured_(true).then(runtime => runtime.clear());\n  }\n\n  /** @override */\n  getEntitlements(opt_encryptedDocumentKey) {\n    return this.configured_(true).then(runtime =>\n      runtime.getEntitlements(opt_encryptedDocumentKey)\n    );\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnEntitlementsResponse(callback)\n    );\n  }\n\n  /** @override */\n  getOffers(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.getOffers(opt_options)\n    );\n  }\n\n  /** @override */\n  showOffers(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showOffers(opt_options)\n    );\n  }\n\n  /** @override */\n  showUpdateOffers(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showUpdateOffers(opt_options)\n    );\n  }\n\n  /** @override */\n  showSubscribeOption(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showSubscribeOption(opt_options)\n    );\n  }\n\n  /** @override */\n  showAbbrvOffer(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showAbbrvOffer(opt_options)\n    );\n  }\n\n  /** @override */\n  showContributionOptions(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showContributionOptions(opt_options)\n    );\n  }\n\n  /** @override */\n  waitForSubscriptionLookup(accountPromise) {\n    return this.configured_(true).then(runtime =>\n      runtime.waitForSubscriptionLookup(accountPromise)\n    );\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnNativeSubscribeRequest(callback)\n    );\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnSubscribeResponse(callback)\n    );\n  }\n\n  /** @override */\n  subscribe(sku) {\n    return this.configured_(true).then(runtime => runtime.subscribe(sku));\n  }\n\n  /** @override */\n  updateSubscription(subscriptionRequest) {\n    return this.configured_(true).then(runtime =>\n      runtime.updateSubscription(subscriptionRequest)\n    );\n  }\n\n  /** @override */\n  setOnContributionResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnContributionResponse(callback)\n    );\n  }\n\n  /** @override */\n  contribute(skuOrSubscriptionRequest) {\n    return this.configured_(true).then(runtime =>\n      runtime.contribute(skuOrSubscriptionRequest)\n    );\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(opt_options) {\n    return this.configured_(true).then(runtime =>\n      runtime.completeDeferredAccountCreation(opt_options)\n    );\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnLoginRequest(callback)\n    );\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnLinkComplete(callback)\n    );\n  }\n\n  /** @override */\n  linkAccount() {\n    return this.configured_(true).then(runtime => runtime.linkAccount());\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnFlowStarted(callback)\n    );\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnFlowCanceled(callback)\n    );\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.configured_(true).then(runtime => {\n      return runtime.saveSubscription(saveSubscriptionRequestCallback);\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.configured_(true).then(runtime => {\n      return runtime.showLoginPrompt();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.configured_(true).then(runtime => {\n      return runtime.showLoginNotification();\n    });\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, opt_callback) {\n    return this.buttonApi_.create(optionsOrCallback, opt_callback);\n  }\n\n  /** @override */\n  attachSmartButton(button, optionsOrCallback, opt_callback) {\n    return this.configured_(true).then(runtime =>\n      runtime.attachSmartButton(button, optionsOrCallback, opt_callback)\n    );\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, opt_callback) {\n    return this.buttonApi_.attach(button, optionsOrCallback, opt_callback);\n  }\n\n  /** @override */\n  getPropensityModule() {\n    return this.configured_(true).then(runtime => {\n      return runtime.getPropensityModule();\n    });\n  }\n\n  /** @override */\n  getLogger() {\n    return this.configured_(true).then(runtime => runtime.getLogger());\n  }\n}\n\n/**\n * @implements {DepsDef}\n * @implements {Subscriptions}\n */\nexport class ConfiguredRuntime {\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {{\n   *     fetcher: (!Fetcher|undefined),\n   *     configPromise: (!Promise|undefined),\n   *   }=} opt_integr\n   * @param {!../api/subscriptions.Config=} opt_config\n   */\n  constructor(winOrDoc, pageConfig, opt_integr, opt_config) {\n    opt_integr = opt_integr || {};\n    opt_integr.configPromise = opt_integr.configPromise || Promise.resolve();\n\n    /** @private @const {!ClientEventManager} */\n    this.eventManager_ = new ClientEventManager(opt_integr.configPromise);\n\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private @const {!Window} */\n    this.win_ = this.doc_.getWin();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = defaultConfig();\n\n    if (isEdgeBrowser(this.win_)) {\n      // TODO(dvoytenko, b/120607343): Find a way to remove this restriction\n      // or move it to Web Activities.\n      this.config_.windowOpenMode = WindowOpenMode.REDIRECT;\n    }\n    if (opt_config) {\n      this.configure_(opt_config);\n    }\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {!Promise} */\n    this.documentParsed_ = this.doc_.whenReady();\n\n    /** @private @const {!JsError} */\n    this.jserror_ = new JsError(this.doc_);\n\n    /** @private @const {!Fetcher} */\n    this.fetcher_ = opt_integr.fetcher || new XhrFetcher(this.win_);\n\n    /** @private @const {!Storage} */\n    this.storage_ = new Storage(this.win_);\n\n    /** @private @const {!DialogManager} */\n    this.dialogManager_ = new DialogManager(this.doc_);\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = new ActivityPorts(this.win_);\n\n    /** @private @const {!PayClient} */\n    this.payClient_ = new PayClient(\n      this.win_,\n      this.activityPorts_,\n      this.dialogManager_\n    );\n\n    /** @private @const {!Callbacks} */\n    this.callbacks_ = new Callbacks();\n\n    //NOTE: 'this' is passed in as a DepsDef.  Do not pass in 'this' before\n    //analytics service and entitlements manager are constructed unless\n    //you are certain they do not rely on them because they are part of that\n    //definition.\n    /** @private @const {!Logger} */\n    this.logger_ = new Logger(this);\n\n    /** @private @const {!AnalyticsService} */\n    this.analyticsService_ = new AnalyticsService(this);\n\n    /** @private @const {!EntitlementsManager} */\n    this.entitlementsManager_ = new EntitlementsManager(\n      this.win_,\n      this.pageConfig_,\n      this.fetcher_,\n      this // See note about 'this' above\n    );\n\n    /** @private @const {!Propensity} */\n    this.propensityModule_ = new Propensity(\n      this.win_,\n      this, // See note about 'this' above\n      this.fetcher_\n    );\n\n    /** @private @const {!OffersApi} */\n    this.offersApi_ = new OffersApi(this.pageConfig_, this.fetcher_);\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_, Promise.resolve(this));\n\n    const preconnect = new Preconnect(this.win_.document);\n\n    preconnect.prefetch('$assets$/loader.svg');\n    LinkCompleteFlow.configurePending(this);\n    PayCompleteFlow.configurePending(this);\n    this.payClient_.preconnect(preconnect);\n\n    injectStyleSheet(this.doc_, SWG_DIALOG);\n\n    // Report redirect errors if any.\n    this.activityPorts_.onRedirectError(error => {\n      this.analyticsService_.addLabels(['redirect']);\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.EVENT_PAYMENT_FAILED,\n        false\n      );\n      this.jserror_.error('Redirect error', error);\n    });\n  }\n\n  /** @override */\n  doc() {\n    return this.doc_;\n  }\n\n  /** @override */\n  win() {\n    return this.win_;\n  }\n\n  /** @override */\n  pageConfig() {\n    return this.pageConfig_;\n  }\n\n  /** @override */\n  jserror() {\n    return this.jserror_;\n  }\n\n  /** @override */\n  activities() {\n    return this.activityPorts_;\n  }\n\n  /** @override */\n  payClient() {\n    return this.payClient_;\n  }\n\n  /** @override */\n  dialogManager() {\n    return this.dialogManager_;\n  }\n\n  /** @override */\n  entitlementsManager() {\n    return this.entitlementsManager_;\n  }\n\n  /** @override */\n  callbacks() {\n    return this.callbacks_;\n  }\n\n  /** @override */\n  storage() {\n    return this.storage_;\n  }\n\n  /** @override */\n  analytics() {\n    return this.analyticsService_;\n  }\n\n  /** @override */\n  init() {\n    // Implemented by the `Runtime` class.\n  }\n\n  /** @override */\n  configure(config) {\n    // Indirected for constructor testing.\n    this.configure_(config);\n  }\n\n  /**\n   * @param {!../api/subscriptions.Config} config\n   * @private\n   */\n  configure_(config) {\n    // Validate first.\n    let error = '';\n    for (const k in config) {\n      const v = config[k];\n      switch (k) {\n        case 'windowOpenMode':\n          if (v != WindowOpenMode.AUTO && v != WindowOpenMode.REDIRECT) {\n            error = 'Unknown windowOpenMode: ' + v;\n          }\n          break;\n        case 'experiments':\n          v.forEach(experiment => setExperiment(this.win_, experiment, true));\n          break;\n        case 'analyticsMode':\n          if (v != AnalyticsMode.DEFAULT && v != AnalyticsMode.IMPRESSIONS) {\n            error = 'Unknown analytics mode: ' + v;\n          }\n          break;\n        case 'enableSwgAnalytics':\n          if (!isBoolean(v)) {\n            error = 'Unknown enableSwgAnalytics value: ' + v;\n          }\n          break;\n        case 'enablePropensity':\n          if (!isBoolean(v)) {\n            error = 'Unknown enablePropensity value: ' + v;\n          }\n          break;\n        default:\n          error = 'Unknown config property: ' + k;\n      }\n    }\n    // Throw error string if it's not null\n    assert(!error, error || undefined);\n    // Assign.\n    Object.assign(this.config_, config);\n  }\n\n  /** @override */\n  config() {\n    return this.config_;\n  }\n\n  /** @override */\n  reset() {\n    this.entitlementsManager_.reset();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  clear() {\n    this.entitlementsManager_.clear();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  start() {\n    // No need to run entitlements without a product or for an unlocked page.\n    if (!this.pageConfig_.getProductId() || !this.pageConfig_.isLocked()) {\n      return Promise.resolve();\n    }\n    this.getEntitlements();\n  }\n\n  /** @override */\n  getEntitlements(opt_encryptedDocumentKey) {\n    return this.entitlementsManager_\n      .getEntitlements(opt_encryptedDocumentKey)\n      .then(entitlements => entitlements.clone());\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    this.callbacks_.setOnEntitlementsResponse(callback);\n  }\n\n  /** @override */\n  getOffers(opt_options) {\n    return this.offersApi_.getOffers(opt_options && opt_options.productId);\n  }\n\n  /** @override */\n  showOffers(opt_options) {\n    return this.documentParsed_.then(() => {\n      const errorMessage =\n        'The showOffers() method cannot be used to update a subscription. ' +\n        'Use the showUpdateOffers() method instead.';\n      assert(opt_options ? !opt_options['oldSku'] : true, errorMessage);\n      const flow = new OffersFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showUpdateOffers(opt_options) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.REPLACE_SUBSCRIPTION),\n      'Not yet launched!'\n    );\n    return this.documentParsed_.then(() => {\n      const errorMessage =\n        'The showUpdateOffers() method cannot be used for new subscribers. ' +\n        'Use the showOffers() method instead.';\n      assert(opt_options ? !!opt_options['oldSku'] : false, errorMessage);\n      const flow = new OffersFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showSubscribeOption(opt_options) {\n    return this.documentParsed_.then(() => {\n      const flow = new SubscribeOptionFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showAbbrvOffer(opt_options) {\n    return this.documentParsed_.then(() => {\n      const flow = new AbbrvOfferFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showContributionOptions(opt_options) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.CONTRIBUTIONS),\n      'Not yet launched!'\n    );\n    return this.documentParsed_.then(() => {\n      const flow = new ContributionsFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  waitForSubscriptionLookup(accountPromise) {\n    return this.documentParsed_.then(() => {\n      const wait = new WaitForSubscriptionLookupApi(this, accountPromise);\n      return wait.start();\n    });\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    this.callbacks_.setOnLoginRequest(callback);\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    this.callbacks_.setOnLinkComplete(callback);\n  }\n\n  /** @override */\n  linkAccount() {\n    return this.documentParsed_.then(() => {\n      return new LinkbackFlow(this).start();\n    });\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.documentParsed_.then(() => {\n      return new LinkSaveFlow(this, saveSubscriptionRequestCallback).start();\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.documentParsed_.then(() => {\n      return new LoginPromptApi(this).start();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.documentParsed_.then(() => {\n      return new LoginNotificationApi(this).start();\n    });\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    this.callbacks_.setOnSubscribeRequest(callback);\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    this.callbacks_.setOnSubscribeResponse(callback);\n  }\n\n  /** @override */\n  subscribe(sku) {\n    const errorMessage =\n      'The subscribe() method can only take a sku as its parameter; ' +\n      'for subscription updates please use the updateSubscription() method';\n    assert(typeof sku === 'string', errorMessage);\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, sku).start();\n    });\n  }\n\n  /** @override */\n  updateSubscription(subscriptionRequest) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.REPLACE_SUBSCRIPTION),\n      'Not yet launched!'\n    );\n    const errorMessage =\n      'The updateSubscription() method should be used for subscription ' +\n      'updates; for new subscriptions please use the subscribe() method';\n    assert(\n      subscriptionRequest ? subscriptionRequest['oldSku'] : false,\n      errorMessage\n    );\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, subscriptionRequest).start();\n    });\n  }\n\n  /** @override */\n  setOnContributionResponse(callback) {\n    this.callbacks_.setOnContributionResponse(callback);\n  }\n\n  /** @override */\n  contribute(skuOrSubscriptionRequest) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.CONTRIBUTIONS),\n      'Not yet launched!'\n    );\n\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(\n        this,\n        skuOrSubscriptionRequest,\n        ProductType.UI_CONTRIBUTION\n      ).start();\n    });\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(opt_options) {\n    return this.documentParsed_.then(() => {\n      return new DeferredAccountFlow(this, opt_options || null).start();\n    });\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    this.callbacks_.setOnFlowStarted(callback);\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    this.callbacks_.setOnFlowCanceled(callback);\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, opt_callback) {\n    // This is a minor duplication to allow this code to be sync.\n    return this.buttonApi_.create(optionsOrCallback, opt_callback);\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, opt_callback) {\n    // This is a minor duplication to allow this code to be sync.\n    this.buttonApi_.attach(button, optionsOrCallback, opt_callback);\n  }\n\n  /** @override */\n  attachSmartButton(button, optionsOrCallback, opt_callback) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.SMARTBOX),\n      'Not yet launched!'\n    );\n    this.buttonApi_.attachSmartButton(\n      this,\n      button,\n      optionsOrCallback,\n      opt_callback\n    );\n  }\n\n  /** @override */\n  getPropensityModule() {\n    return Promise.resolve(this.propensityModule_);\n  }\n\n  /** @override\n   * @return {!ClientEventManager}\n   */\n  eventManager() {\n    return this.eventManager_;\n  }\n\n  /** @override */\n  getLogger() {\n    return Promise.resolve(this.logger_);\n  }\n}\n\n/**\n * @param {!Runtime} runtime\n * @return {!Subscriptions}\n */\nfunction createPublicRuntime(runtime) {\n  return /** @type {!Subscriptions} */ ({\n    init: runtime.init.bind(runtime),\n    configure: runtime.configure.bind(runtime),\n    start: runtime.start.bind(runtime),\n    reset: runtime.reset.bind(runtime),\n    clear: runtime.clear.bind(runtime),\n    getEntitlements: runtime.getEntitlements.bind(runtime),\n    linkAccount: runtime.linkAccount.bind(runtime),\n    showLoginPrompt: runtime.showLoginPrompt.bind(runtime),\n    showLoginNotification: runtime.showLoginNotification.bind(runtime),\n    getOffers: runtime.getOffers.bind(runtime),\n    showOffers: runtime.showOffers.bind(runtime),\n    showUpdateOffers: runtime.showUpdateOffers.bind(runtime),\n    showAbbrvOffer: runtime.showAbbrvOffer.bind(runtime),\n    showSubscribeOption: runtime.showSubscribeOption.bind(runtime),\n    showContributionOptions: runtime.showContributionOptions.bind(runtime),\n    waitForSubscriptionLookup: runtime.waitForSubscriptionLookup.bind(runtime),\n    subscribe: runtime.subscribe.bind(runtime),\n    updateSubscription: runtime.updateSubscription.bind(runtime),\n    contribute: runtime.contribute.bind(runtime),\n    completeDeferredAccountCreation: runtime.completeDeferredAccountCreation.bind(\n      runtime\n    ),\n    setOnEntitlementsResponse: runtime.setOnEntitlementsResponse.bind(runtime),\n    setOnLoginRequest: runtime.setOnLoginRequest.bind(runtime),\n    setOnLinkComplete: runtime.setOnLinkComplete.bind(runtime),\n    setOnNativeSubscribeRequest: runtime.setOnNativeSubscribeRequest.bind(\n      runtime\n    ),\n    setOnSubscribeResponse: runtime.setOnSubscribeResponse.bind(runtime),\n    setOnContributionResponse: runtime.setOnContributionResponse.bind(runtime),\n    setOnFlowStarted: runtime.setOnFlowStarted.bind(runtime),\n    setOnFlowCanceled: runtime.setOnFlowCanceled.bind(runtime),\n    saveSubscription: runtime.saveSubscription.bind(runtime),\n    createButton: runtime.createButton.bind(runtime),\n    attachButton: runtime.attachButton.bind(runtime),\n    attachSmartButton: runtime.attachSmartButton.bind(runtime),\n    getPropensityModule: runtime.getPropensityModule.bind(runtime),\n    getLogger: runtime.getLogger.bind(runtime),\n  });\n}\n\n/**\n * @return {!Function}\n * @protected\n */\nexport function getSubscriptionsClassForTesting() {\n  return Subscriptions;\n}\n\n/**\n * @return {!Function}\n * @protected\n */\nexport function getFetcherClassForTesting() {\n  return Fetcher;\n}\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addQueryParam, parseQueryString, parseUrl} from '../utils/url';\n\n/**\n * Have to put these in the map to avoid compiler optimization. Due to\n * optimization issues, this map only allows property-style keys. E.g. \"hr1\",\n * as opposed to \"1hr\".\n * @type {!Object<string, number>}\n * @package Visible for testing only.\n */\nexport const CACHE_KEYS = {\n  'nocache': 1,\n  'hr1': 3600000, // 1hr = 1000 * 60 * 60\n  'hr12': 43200000, // 12hr = 1000 * 60 * 60 * 12\n};\n\n/**\n * @return {string}\n */\nexport function feOrigin() {\n  return parseUrl('$frontend$').origin;\n}\n\n/**\n * @param {string} url Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nexport function serviceUrl(url) {\n  return '$frontend$/swg/_/api/v1' + url;\n}\n\n/**\n * @param {string} url  Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nexport function adsUrl(url) {\n  return '$adsServer$' + url;\n}\n\n/**\n * @param {string} url Relative URL, e.g. \"/offersiframe\".\n * @param {string=} prefix\n * @return {string} The complete URL.\n */\nexport function feUrl(url, prefix = '') {\n  // Add cache param.\n  url = feCached('$frontend$' + prefix + '/swg/_/ui/v1' + url);\n\n  // Optionally add jsmode param. This allows us to test against \"aggressively\" compiled Boq JS.\n  const query = parseQueryString(self.location.hash);\n  const boqJsMode = query['swg.boqjsmode'];\n  if (boqJsMode !== undefined) {\n    url = addQueryParam(url, 'jsmode', boqJsMode);\n  }\n\n  return url;\n}\n\n/**\n * @param {string} url FE URL.\n * @return {string} The complete URL including cache param.\n */\nexport function feCached(url) {\n  return addQueryParam(url, '_', cacheParam('$frontendCache$'));\n}\n\n/**\n * @param {!Object<string, ?>} args\n * @return {!Object<string, ?>}\n */\nexport function feArgs(args) {\n  return Object.assign(args, {\n    '_client': 'SwG $internalRuntimeVersion$',\n  });\n}\n\n/**\n * @param {string} cacheKey\n * @return {string}\n * @package Visible for testing only.\n */\nexport function cacheParam(cacheKey) {\n  let period = CACHE_KEYS[cacheKey];\n  if (period == null) {\n    period = 1;\n  }\n  if (period === 0) {\n    return '_';\n  }\n  const now = Date.now();\n  return String(period <= 1 ? now : Math.floor(now / period));\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\nimport {setImportantStyles} from '../utils/style';\nimport {feArgs, feUrl} from './services';\nimport {SmartBoxMessage} from '../proto/api_messages';\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n/**\n * @enum {string}\n */\nexport const Theme = {\n  LIGHT: 'light',\n  DARK: 'dark',\n};\n\n/**\n * The class for Smart button Api.\n */\nexport class SmartSubscriptionButtonApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!Element} button\n   * @param {!../api/subscriptions.SmartButtonOptions} options\n   * @param {function()=} callback\n   */\n  constructor(deps, button, options, callback) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_,\n      'iframe',\n      iframeAttributes\n    ));\n\n    /** @private @const {!Element} */\n    this.button_ = button;\n\n    /** @private {!../api/subscriptions.SmartButtonOptions} */\n    this.options_ = options;\n\n    /** @private const {function()=} */\n    this.callback_ = callback;\n\n    /** @private @const {string} */\n    this.src_ = feUrl('/smartboxiframe');\n\n    const frontendArguments = {\n      'productId': this.deps_.pageConfig().getProductId(),\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'theme': (this.options_ && this.options_.theme) || 'light',\n      'lang': (this.options_ && this.options_.lang) || 'en',\n    };\n    const messageTextColor = this.options_ && this.options_.messageTextColor;\n    if (messageTextColor) {\n      frontendArguments['messageTextColor'] = messageTextColor;\n    }\n\n    /** @private @const {!Object} */\n    this.args_ = feArgs(frontendArguments);\n  }\n\n  /**\n   * @param {SmartBoxMessage} smartBoxMessage\n   */\n  handleSmartBoxClick_(smartBoxMessage) {\n    if (smartBoxMessage && smartBoxMessage.getIsClicked()) {\n      if (!this.callback_) {\n        throw new Error('No callback!');\n      }\n      this.callback_();\n      return;\n    }\n  }\n\n  /**\n   * Make a call to build button content and listens for the 'click' message.\n   * @return {!Element}\n   */\n  start() {\n    /**\n     * Add a callback to the button itself to fire the iframe's button click\n     * action when user tabs to the container button and hits enter.\n     */\n    this.button_.addEventListener('click', () => {\n      this.callback_();\n    });\n\n    setImportantStyles(this.iframe_, {\n      'opacity': 1,\n      'position': 'absolute',\n      'top': 0,\n      'bottom': 0,\n      'left': 0,\n      'height': '100%',\n      'right': 0,\n      'width': '100%',\n    });\n    this.button_.appendChild(this.iframe_);\n    const analyticsContext = this.deps_\n      .analytics()\n      .getContext()\n      .toArray();\n    this.args_['analyticsContext'] = analyticsContext;\n    this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then(port => {\n        port.on(SmartBoxMessage, this.handleSmartBoxClick_.bind(this));\n      });\n    return this.iframe_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PREFIX = 'subscribe.google.com';\n\nexport class Storage {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Object<string, !Promise<?string>>} */\n    this.values_ = {};\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise<?string>}\n   */\n  get(key) {\n    if (!this.values_[key]) {\n      this.values_[key] = new Promise(resolve => {\n        if (this.win_.sessionStorage) {\n          try {\n            resolve(this.win_.sessionStorage.getItem(storageKey(key)));\n          } catch (e) {\n            // Ignore error.\n            resolve(null);\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    }\n    return this.values_[key];\n  }\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   * @return {!Promise}\n   */\n  set(key, value) {\n    this.values_[key] = Promise.resolve(value);\n    return new Promise(resolve => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.setItem(storageKey(key), value);\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise}\n   */\n  remove(key) {\n    delete this.values_[key];\n    return new Promise(resolve => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.removeItem(storageKey(key));\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n}\n\n/**\n * @param {string} key\n * @return {string}\n */\nfunction storageKey(key) {\n  return PREFIX + ':' + key;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {DeferredAccountCreationResponse} from '../api/deferred-account-creation';\nimport {feArgs, feUrl} from './services';\n\nexport class WaitForSubscriptionLookupApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Promise} accountPromise\n   */\n  constructor(deps, accountPromise) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private {?Promise} */\n    this.accountPromise_ = accountPromise || null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/waitforsubscriptionlookupiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n      }),\n      /* shouldFadeBody */ true,\n      /* hasLoadingIndicator */ true\n    );\n  }\n\n  /**\n   * Starts the Login Flow.\n   * @return {!Promise}\n   */\n  start() {\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.accountPromise_.then(\n      account => {\n        // Account was found.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return account;\n      },\n      reason => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {View} from '../components/view';\nimport {createElement} from '../utils/dom';\nimport {isCancelError} from '../utils/errors';\nimport {acceptPortResultData} from '../utils/activity-utils';\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n/**\n * Class to build and render Activity iframe view.\n */\nexport class ActivityIframeView extends View {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {string} src\n   * @param {!Object<string, ?>=} args\n   * @param {boolean=} shouldFadeBody\n   * @param {boolean=} hasLoadingIndicator\n   */\n  constructor(\n    win,\n    activityPorts,\n    src,\n    args,\n    shouldFadeBody = false,\n    hasLoadingIndicator = false\n  ) {\n    super();\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_,\n      'iframe',\n      iframeAttributes\n    ));\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args || {};\n\n    /** @private @const {boolean} */\n    this.shouldFadeBody_ = shouldFadeBody;\n\n    /** @private @const {boolean} */\n    this.hasLoadingIndicator_ = hasLoadingIndicator;\n\n    /** @private {?../components/activities.ActivityIframePort} */\n    this.port_ = null;\n\n    /**\n     * @private\n     * {?function<!web-activities/activity-ports.ActivityIframePort|!Promise>}\n     */\n    this.portResolver_ = null;\n\n    /**\n     * @private @const\n     * {!Promise<!web-activities/activity-ports.ActivityIframePort>}\n     */\n    this.portPromise_ = new Promise(resolve => {\n      this.portResolver_ = resolve;\n    });\n  }\n\n  /** @override */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /** @override */\n  init(dialog) {\n    return this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then(port => this.onOpenIframeResponse_(port, dialog));\n  }\n\n  /**\n   * Returns if document should fade for this view.\n   * @return {boolean}\n   */\n  shouldFadeBody() {\n    return this.shouldFadeBody_;\n  }\n\n  /**\n   * Returns if the view shows loading indicator.\n   * @return {boolean}\n   */\n  hasLoadingIndicator() {\n    return this.hasLoadingIndicator_;\n  }\n\n  /**\n   * @param {!../components/activities.ActivityIframePort} port\n   * @param {!../components/dialog.Dialog} dialog\n   * @return {!Promise}\n   */\n  onOpenIframeResponse_(port, dialog) {\n    this.port_ = port;\n    this.portResolver_(port);\n\n    this.port_.onResizeRequest(height => {\n      dialog.resizeView(this, height);\n    });\n\n    return this.port_.whenReady();\n  }\n\n  /**\n   * @return {!Promise<!../components/activities.ActivityIframePort>}\n   * @private\n   */\n  getPortPromise_() {\n    return this.portPromise_;\n  }\n\n  /**\n   * @param {!Object} data\n   */\n  messageDeprecated(data) {\n    this.getPortPromise_().then(port => {\n      port.messageDeprecated(data);\n    });\n  }\n\n  /**\n   * Handles the message received by the port.\n   * @param {function(!Object<string, string|boolean>)} callback\n   */\n  onMessageDeprecated(callback) {\n    this.getPortPromise_().then(port => {\n      port.onMessageDeprecated(callback);\n    });\n  }\n  /**\n   * @param {!function(new: T)}  message\n   * @param {function(../proto/api_messages.Message)} callback\n   * @template T\n   */\n  on(message, callback) {\n    this.getPortPromise_().then(port => {\n      port.on(message, callback);\n    });\n  }\n\n  /**\n   * @param {!../proto/api_messages.Message} request\n   */\n  execute(request) {\n    this.getPortPromise_().then(port => {\n      port.execute(request);\n    });\n  }\n\n  /**\n   * Accepts results from the caller.\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.getPortPromise_().then(port => port.acceptResult());\n  }\n\n  /**\n   * Accepts results from the caller and verifies origin.\n   * @param {string} requireOrigin\n   * @param {boolean} requireOriginVerified\n   * @param {boolean} requireSecureChannel\n   * @return {!Promise<!Object>}\n   */\n  acceptResultAndVerify(\n    requireOrigin,\n    requireOriginVerified,\n    requireSecureChannel\n  ) {\n    return this.getPortPromise_().then(port => {\n      return acceptPortResultData(\n        port,\n        requireOrigin,\n        requireOriginVerified,\n        requireSecureChannel\n      );\n    });\n  }\n\n  /**\n   * Completes the flow.\n   * @return {!Promise}\n   */\n  whenComplete() {\n    return this.acceptResult();\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  onCancel(callback) {\n    this.acceptResult().catch(reason => {\n      if (isCancelError(reason)) {\n        callback();\n      }\n      throw reason;\n    });\n  }\n\n  /** @override */\n  resized() {\n    if (this.port_) {\n      this.port_.resized();\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\n\n/**\n * Loading indicator class. Builds the loading indicator view to be injected in\n * parent element <iframe class=\"swg-dialog\"> element. Provides methods to\n * show/hide loading indicator.\n */\nexport class LoadingView {\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.loadingContainer_ = createElement(\n      this.doc_,\n      'swg-loading-container',\n      {}\n    );\n\n    /** @private @const {!Element} */\n    this.loading_ = createElement(this.doc_, 'swg-loading', {});\n    this.loadingContainer_.appendChild(this.loading_);\n\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n\n    // Build the animated loading indicator.\n    this.buildLoadingIndicator_();\n  }\n\n  /**\n   * Gets the populated loading container.\n   * @return {!Element}\n   */\n  getElement() {\n    return this.loadingContainer_;\n  }\n\n  /**\n   * Shows the loading indicator within the container element.\n   */\n  show() {\n    this.loadingContainer_.style.removeProperty('display');\n  }\n\n  /**\n   * Hides the loading indicator within the container element.\n   */\n  hide() {\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n  }\n\n  /**\n   * Populates the loading indivicator. The populated element\n   * can be added in any view, when required.\n   * @private\n   */\n  buildLoadingIndicator_() {\n    const loadingContainer = this.loading_;\n\n    const loadingIndicatorTopContainer = createElement(\n      this.doc_,\n      'swg-loading-animate',\n      {}\n    );\n    loadingContainer.appendChild(loadingIndicatorTopContainer);\n\n    const loadingIndicatorChildContainer = createElement(\n      this.doc_,\n      'swg-loading-image',\n      {}\n    );\n    loadingIndicatorTopContainer.appendChild(loadingIndicatorChildContainer);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\nimport {resetStyles, setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\n/** @const {!Object<string, string|number>} */\nexport const toastImportantStyles = {\n  'height': 0,\n};\n\n/** @typedef {{\n *    text: string,\n *    action: ({label: string, handler: function()}|undefined)\n *  }}\n */\nexport let ToastSpecDef;\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n  'class': 'swg-toast',\n};\n\n/**\n * The class Notification toast.\n */\nexport class Toast {\n  /**\n   * @param {!../runtime/deps.DepsDef} deps\n   * @param {string} src\n   * @param {!Object<string, ?>} args\n   */\n  constructor(deps, src, args) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_.getWin().document,\n      'iframe',\n      iframeAttributes\n    ));\n\n    setImportantStyles(this.iframe_, toastImportantStyles);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise(resolve => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * Returns the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Opens the notification toast.\n   * @return {!Promise}\n   */\n  open() {\n    this.doc_.getBody().appendChild(this.iframe_); // Fires onload.\n    return this.buildToast_();\n  }\n\n  /**\n   * Builds the content of the iframe. On load, animates the toast.\n   */\n  buildToast_() {\n    const toastDurationSeconds = 7;\n    return this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then(port => {\n        return port.whenReady();\n      })\n      .then(() => {\n        resetStyles(this.iframe_, ['height']);\n\n        this.animate_(() => {\n          setImportantStyles(this.iframe_, {\n            'transform': 'translateY(100%)',\n            'opactiy': 1,\n            'visibility': 'visible',\n          });\n          return transition(\n            this.iframe_,\n            {\n              'transform': 'translateY(0)',\n              'opacity': 1,\n              'visibility': 'visible',\n            },\n            400,\n            'ease-out'\n          );\n        });\n\n        // Close the Toast after the specified duration.\n        this.doc_.getWin().setTimeout(() => {\n          this.close();\n        }, (toastDurationSeconds + 1) * 1000);\n      });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return (this.animating_ = wait\n      .then(\n        () => {\n          return callback();\n        },\n        () => {\n          // Ignore errors to make sure animations don't get stuck.\n        }\n      )\n      .then(() => {\n        this.animating_ = null;\n      }));\n  }\n\n  /**\n   * Closes the toast.\n   * @return {!Promise}\n   */\n  close() {\n    return this.animate_(() => {\n      // Remove the toast from the DOM after animation is complete.\n      this.doc_.getWin().setTimeout(() => {\n        this.doc_.getBody().removeChild(this.iframe_);\n        return Promise.resolve();\n      }, 500);\n\n      return transition(\n        this.iframe_,\n        {\n          'transform': 'translateY(100%)',\n          'opacity': 1,\n          'visibility': 'visible',\n        },\n        400,\n        'ease-out'\n      );\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!../components/activities.ActivityPortDef} port\n * @param {string} requireOrigin\n * @param {boolean} requireOriginVerified\n * @param {boolean} requireSecureChannel\n * @return {!Promise<!Object>}\n */\nexport function acceptPortResultData(\n  port,\n  requireOrigin,\n  requireOriginVerified,\n  requireSecureChannel\n) {\n  return port.acceptResult().then(result => {\n    if (\n      result.origin != requireOrigin ||\n      (requireOriginVerified && !result.originVerified) ||\n      (requireSecureChannel && !result.secureChannel)\n    ) {\n      throw new Error('channel mismatch');\n    }\n    return result.data;\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {setImportantStyles} from './style';\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nexport function transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise(resolve => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(\n        el,\n        Object.assign(\n          {\n            'transition': `transform ${tr}, opacity ${tr}`,\n          },\n          props\n        )\n      );\n    });\n  }).then(() => {\n    setImportantStyles(el, {\n      'transition': previousTransitionValue,\n    });\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_'};\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nexport function utf8DecodeSync(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8EncodeSync(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, ch => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/]/g, ch => base64UrlEncodeSubs[ch]);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!Document} doc\n * @return {string}\n */\nfunction getReadyState(doc) {\n  return /** @type {string} */ (doc['readyState']);\n}\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isDocumentReady(doc) {\n  const readyState = getReadyState(doc);\n  return readyState != 'loading' && readyState != 'uninitialized';\n}\n\n/**\n * Whether the document has loaded all the css and sub-resources.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentComplete(doc) {\n  return getReadyState(doc) == 'complete';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nexport function onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Returns a promise that is resolved when document is complete.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentComplete(doc) {\n  return new Promise(resolve => {\n    onDocumentState(doc, isDocumentComplete, resolve);\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\nimport {setStyles} from './style';\n\n/** @const @enum{string} */\nexport const styleLinkAttrs = {\n  'rel': 'stylesheet',\n  'type': 'text/css',\n};\n\n/** @const {string} */\nexport const styleType = 'text/css';\n\n/** @const {string} */\nexport const styleExistsQuerySelector = 'link[rel=stylesheet][href]';\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!Object<string, string|number|boolean|!Object<string, string|number|boolean>>} attributes\n * @return {!Element} updated element.\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    if (attr == 'style') {\n      setStyles(\n        element,\n        /** @type {!Object<string, string|boolean|number>} */\n        (attributes[attr])\n      );\n    } else {\n      element.setAttribute(\n        attr,\n        /** @type {string|boolean|number} */ (attributes[attr])\n      );\n    }\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!Object<string, string>} attributes\n * @param {?(string|!Node|!ArrayLike<!Node>|!Array<!Node>)=} opt_content\n * @return {!Element} created element.\n */\nexport function createElement(doc, tagName, attributes, opt_content) {\n  const element = doc.createElement(tagName);\n  addAttributesToElement(element, attributes);\n  if (opt_content != null) {\n    if (typeof opt_content == 'string') {\n      element.textContent = opt_content;\n    } else if (opt_content.nodeType) {\n      element.appendChild(opt_content);\n    } else if ('length' in opt_content) {\n      for (let i = 0; i < opt_content.length; i++) {\n        element.appendChild(opt_content[i]);\n      }\n    } else {\n      assert(false, 'Unsupported content: %s', opt_content);\n    }\n  }\n  return element;\n}\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n/**\n * Removes all children from the parent element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  parent.textContent = '';\n}\n\n/**\n * Injects the provided styles in the HEAD section of the document.\n * @param {!../model/doc.Doc} doc The document object.\n * @param {string} styleText The style string.\n * @return {!Element}\n */\nexport function injectStyleSheet(doc, styleText) {\n  const styleElement = createElement(doc.getWin().document, 'style', {\n    'type': styleType,\n  });\n  styleElement.textContent = styleText;\n  doc.getHead().appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node=} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while (\n    (currentElement = currentElement.parentNode) &&\n    currentElement != opt_stopNode\n  );\n  return false;\n}\n\n/**\n * Polyfill of the `Node.isConnected` API. See\n * https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected.\n * @param {!Node} node\n * @return {boolean}\n */\nexport function isConnected(node) {\n  // Ensure that node is attached if specified. This check uses a new and\n  // fast `isConnected` API and thus only checked on platforms that have it.\n  // See https://www.chromestatus.com/feature/5676110549352448.\n  if ('isConnected' in node) {\n    return node['isConnected'];\n  }\n  // Polyfill.\n  const root = node.ownerDocument && node.ownerDocument.documentElement;\n  return (root && root.contains(node)) || false;\n}\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createAbortError, isAbortError} from 'web-activities/activity-ports';\n\n/**\n * Whether the specified error is an AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {*} error\n * @return {boolean}\n */\nexport function isCancelError(error) {\n  return isAbortError(error);\n}\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} opt_message\n * @return {!DOMException}\n */\nexport function createCancelError(win, opt_message) {\n  return createAbortError(win, opt_message);\n}\n\n/**\n * A set of error utilities combined in a class to allow easy stubbing in tests.\n */\nexport class ErrorUtils {\n  /**\n   * @param {!Error} error\n   */\n  static throwAsync(error) {\n    setTimeout(() => {\n      throw error;\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!Object<string, string>} map\n * @param {?string|?Element} langOrElement\n * @return {?string}\n */\nexport function msg(map, langOrElement) {\n  const lang = !langOrElement\n    ? ''\n    : typeof langOrElement == 'string'\n    ? langOrElement\n    : langOrElement.lang ||\n      (langOrElement.ownerDocument &&\n        langOrElement.ownerDocument.documentElement.lang);\n  let search = ((lang && lang.toLowerCase()) || 'en').replace(/_/g, '-');\n  while (search) {\n    if (search in map) {\n      return map[search];\n    }\n    const dash = search.lastIndexOf('-');\n    search = dash != -1 ? search.substring(0, dash) : '';\n  }\n  // \"en\" is always default.\n  return map['en'];\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object, the returned value will\n * be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (!part) {\n      value = undefined;\n      break;\n    }\n    if (\n      !isObject(value) ||\n      value[part] === undefined ||\n      !hasOwnProperty(value, part)\n    ) {\n      value = undefined;\n      break;\n    }\n    value = value[part];\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */ (JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n    /** @type {!Object} */ (obj),\n    key\n  );\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {base64UrlDecodeToBytes, utf8DecodeSync} from './bytes';\nimport {tryParseJson} from './json';\n\n/**\n * @typedef {{\n *   header: (?JsonObject|undefined),\n *   payload: (?JsonObject|undefined),\n *   verifiable: string,\n *   sig: string,\n * }}\n */\nlet JwtTokenInternalDef;\n\n/**\n * Provides helper methods to decode and verify JWT tokens.\n */\nexport class JwtHelper {\n  constructor() {}\n\n  /**\n   * Decodes JWT token and returns its payload.\n   * @param {string} encodedToken\n   * @return {?JsonObject|undefined}\n   */\n  decode(encodedToken) {\n    return this.decodeInternal_(encodedToken).payload;\n  }\n\n  /**\n   * @param {string} encodedToken\n   * @return {!JwtTokenInternalDef}\n   * @private\n   */\n  decodeInternal_(encodedToken) {\n    // See https://jwt.io/introduction/\n    /**\n     * Throws error about invalid token.\n     */\n    function invalidToken() {\n      throw new Error(`Invalid token: \"${encodedToken}\"`);\n    }\n\n    // Encoded token has three parts: header.payload.sig\n    // Note! The padding is not allowed by JWT spec:\n    // http://self-issued.info/docs/draft-goland-json-web-token-00.html#rfc.section.5\n    const parts = encodedToken.split('.');\n    if (parts.length != 3) {\n      invalidToken();\n    }\n    const headerUtf8Bytes = base64UrlDecodeToBytes(parts[0]);\n    const payloadUtf8Bytes = base64UrlDecodeToBytes(parts[1]);\n    return {\n      header: tryParseJson(utf8DecodeSync(headerUtf8Bytes), invalidToken),\n      payload: tryParseJson(utf8DecodeSync(payloadUtf8Bytes), invalidToken),\n      verifiable: `${parts[0]}.${parts[1]}`,\n      sig: parts[2],\n    };\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Debug logger, only log message if #swg.log=1\n * @param {...*} var_args [decription]\n */\n\n/* eslint-disable */\n\nfunction debugLog(var_args) {\n  if (/swg.debug=1/.test(self.location.hash)) {\n    const logArgs = Array.prototype.slice.call(arguments, 0);\n    logArgs.unshift('[Subscriptions]');\n    log.apply(log, logArgs);\n  }\n}\n\n/**\n * @param  {...*} var_args [description]\n */\nfunction log(var_args) {\n  console.log.apply(console, arguments);\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {string=} opt_message The assertion message\n * @param {...*} var_args Arguments substituted into %s in the message.\n * @return {T} The value of shouldBeTrueish.\n * @template T\n */\nfunction assert(shouldBeTrueish, opt_message, var_args) {\n  let firstElement;\n  if (!shouldBeTrueish) {\n    const message = opt_message || 'Assertion failed';\n    const splitMessage = message.split('%s');\n    const first = splitMessage.shift();\n    let formatted = first;\n    const messageArray = [];\n    pushIfNonEmpty(messageArray, first);\n    for (let i = 2; i < arguments.length; i++) {\n      const val = arguments[i];\n      if (val && val.tagName) {\n        firstElement = val;\n      }\n      const nextConstant = splitMessage.shift();\n      messageArray.push(val);\n      pushIfNonEmpty(messageArray, nextConstant.trim());\n      formatted += toString(val) + nextConstant;\n    }\n    const e = new Error(formatted);\n    e.fromAssert = true;\n    e.associatedElement = firstElement;\n    e.messageArray = messageArray;\n    throw e;\n  }\n  return shouldBeTrueish;\n}\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\nmodule.exports = {\n  assert,\n  debugLog,\n  log\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {Object=} opt_initial This should typically be an object literal.\n * @return {!Object}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Implements `Array.find()` method that's not yet available in all browsers.\n *\n * @param {?Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {?T}\n * @template T\n */\nexport function findInArray(array, predicate) {\n  if (!array) {\n    return null;\n  }\n  const len = array.length || 0;\n  if (len > 0) {\n    for (let i = 0; i < len; i++) {\n      const other = array[i];\n      if (predicate(other, i, array)) {\n        return other;\n      }\n    }\n  }\n  return null;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from './dom';\n\nexport class Preconnect {\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @param {string} url\n   */\n  preconnect(url) {\n    this.pre_(url, 'preconnect');\n  }\n\n  /**\n   * @param {string} url\n   */\n  dnsPrefetch(url) {\n    this.pre_(url, 'dns-prefetch');\n  }\n\n  /**\n   * @param {string} url\n   */\n  prefetch(url) {\n    this.pre_(url, 'preconnect prefetch');\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} as\n   */\n  preload(url, as) {\n    this.pre_(url, 'preconnect preload', as);\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} rel\n   * @param {?string=} opt_as\n   * @private\n   */\n  pre_(url, rel, opt_as) {\n    // <link rel=\"prefetch\" href=\"...\" as=\"\">\n    const linkEl = createElement(this.doc_, 'link', {\n      'rel': rel,\n      'href': url,\n    });\n    if (opt_as) {\n      linkEl.setAttribute('as', opt_as);\n    }\n    this.doc_.head.appendChild(linkEl);\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an array of random values.  The length of the array is numInts.  Each\n * int will be >= 0 and < maxVal.\n * @param {!number} numInts\n * @param {!number} maxVal\n */\nexport function getRandomInts(numInts, maxVal) {\n  // Ensure array type is appropriate for the max value (performance)\n  const arr =\n    maxVal < 256\n      ? new Uint8Array(numInts)\n      : maxVal < 32768\n      ? new Uint16Array(numInts)\n      : new Uint32Array(numInts);\n\n  if (crypto && crypto.getRandomValues) {\n    crypto.getRandomValues(arr);\n    for (let i = arr.length - 1; i > -1; i--) {\n      arr[i] = arr[i] % maxVal;\n    }\n  } else {\n    // For older browsers\n    for (let i = arr.length - 1; i > -1; i--) {\n      arr[i] = Math.floor(Math.random() * maxVal);\n    }\n  }\n\n  return arr;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getRandomInts} from './random';\n\nconst CHARS = '0123456789ABCDEF';\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes removed and character after to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {!function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const length = str.length;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n\n/**\n * Ensures the passed value is safe to use for character 19 per rfc4122,\n * sec. 4.1.5.  \"Sets the high bits of clock sequence\".\n * @param {!number} v\n */\nfunction getChar19(v) {\n  return CHARS[(v & 0x3) | 0x8];\n}\n\n/**\n * The returned identifier will always be an 8 digit valid hexidecimal number\n * and will be unique for each MS within a given month.\n * @return {string}\n */\nfunction getMonthlyTimeIdentifier() {\n  const hexTime = Date.now().toString(16);\n  return hexTime.substring(hexTime.length - 8).toUpperCase();\n}\n\n/**\n * Generates a RFC 4122 V4 UUID. Ex: \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n * The first 8 digits are unique for the millisecond of the month.  The rest\n * are randomly generated.\n */\nexport function getUuid() {\n  let uuid = getMonthlyTimeIdentifier() + '-';\n  let rIndex = 0;\n  const rands = getRandomInts(23, 16);\n  for (let i = 9; i < 36; i++) {\n    switch (i) {\n      case 13:\n      case 18:\n      case 23:\n        uuid += '-';\n        break;\n      case 14:\n        uuid += '4';\n        break;\n      case 19:\n        uuid += getChar19(rands[rIndex++]);\n        break;\n      default:\n        uuid += CHARS[rands[rIndex++]];\n        break;\n    }\n  }\n  return uuid;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './object.js';\nimport {startsWith} from './string';\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n/**\n * Default styles to be set for top level friendly iframe.\n * Some attributes are not included such as height, left, margin-left; since\n * these attributes are updated by @media queries and having these values\n * defined here as !important does not work on IE/edge browsers.\n * @const {!Object<string, string|number>}\n */\nexport const defaultStyles = {\n  'align-content': 'normal',\n  'animation': 'none',\n  'align-items': 'normal',\n  'align-self': 'auto',\n  'alignment-baseline': 'auto',\n  'backface-visibility': 'hidden',\n  'background-clip': 'border-box',\n  'background-image': 'none',\n  'baseline-shift': '0',\n  'block-size': 'auto',\n  'border': 'none',\n  'border-collapse': 'separate',\n  'bottom': '0',\n  'box-sizing': 'border-box',\n  'break-after': 'auto',\n  'break-before': 'auto',\n  'break-inside': 'auto',\n  'buffered-rendering': 'auto',\n  'caption-side': 'top',\n  'caret-color': 'rgb(51, 51, 51)',\n  'clear': 'none',\n  'color': 'rgb(51, 51, 51)',\n  'color-rendering': 'auto',\n  'column-count': 'auto',\n  'column-fill': 'balance',\n  'column-gap': 'normal',\n  'column-rule-color': 'rgb(51, 51, 51)',\n  'column-rule-style': 'none',\n  'column-rule-width': '0',\n  'column-span': 'none',\n  'column-width': 'auto',\n  'contain': 'none',\n  'counter-increment': 'none',\n  'counter-reset': 'none',\n  'cursor': 'auto',\n  'direction': 'inherit',\n  'display': 'block',\n  'empty-cells': 'show',\n  'filter': 'none',\n  'flex': 'none', // flex-grow, flex-shrink, and flex-basis.\n  'flex-flow': 'row nowrap', // flex-direction, flex-wrap.\n  'float': 'none',\n  'flood-color': 'rgb(0, 0, 0)',\n  'flood-opacity': '1',\n  'font': 'none',\n  'font-size': 'medium',\n  'font-family': '',\n  'height': 'auto',\n  'hyphens': 'manual',\n  'image-rendering': 'auto',\n  'inline-size': '', // Setting to 'auto' will not allow override.\n  'isolation': 'auto',\n  'justify-content': 'normal',\n  'justify-items': 'normal',\n  'justify-self': 'auto',\n  'letter-spacing': 'normal',\n  'lighting-color': 'rgb(255, 255, 255)',\n  'line-break': 'auto',\n  'line-height': 'normal',\n  'mask': 'none',\n  'max-block-size': 'none',\n  'max-height': 'none',\n  'max-inline-size': 'none',\n  'max-width': 'none',\n  'min-block-size': 'none',\n  'min-height': '0',\n  'min-inline-size': '0',\n  'min-width': '0',\n  'mix-blend-mode': 'normal',\n  'object-fit': 'fill', // Important for Safari browser.\n  'offset-distance': 'none', // Chrome only (Experimental).\n  'offset-path': 'none', // Chrome only (Experimental).\n  'offset-rotate': 'auto 0deg', // Chrome only (Experimental).\n  'opacity': '1',\n  'order': '0',\n  'orphans': '2',\n  'outline': 'none',\n  'overflow-anchor': 'auto',\n  'overflow-wrap': 'normal',\n  'overflow': 'visible',\n  'padding': '0',\n  'page': '',\n  'perspective': 'none',\n  'pointer-events': 'auto',\n  'position': 'static',\n  'quotes': '',\n  'resize': 'none',\n  'right': '0',\n  'scroll-behavior': 'auto',\n  'tab-size': '8', // Only Chrome, Safari (Experimental).\n  'table-layout': 'auto',\n  'text-align': 'start',\n  'text-align-last': 'auto',\n  'text-anchor': 'start',\n  'text-combine-upright': 'none',\n  'text-decoration': 'none',\n  'text-indent': '0',\n  'text-orientation': 'mixed',\n  'text-overflow': 'clip',\n  'text-rendering': 'auto',\n  'text-shadow': 'none',\n  'text-size-adjust': 'auto',\n  'text-transform': 'none',\n  'text-underline-position': 'auto',\n  'top': 'auto',\n  'touch-action': 'auto',\n  'transform': 'none',\n  'transition': 'none 0s ease 0s',\n  'unicode-bidi': 'normal',\n  'user-select': 'auto',\n  'vector-effect': 'none',\n  'vertical-align': 'baseline',\n  'visibility': 'visible',\n  'white-space': 'normal',\n  'widows': '2',\n  'word-break': 'normal',\n  'word-spacing': '0',\n  'word-wrap': 'normal',\n  'writing-mode': 'horizontal-tb',\n  'zoom': '1',\n  'z-index': 'auto',\n};\n\n/** @const {string} */\nexport const googleFontsUrl =\n  'https://fonts.googleapis.com/css?family=Google+Sans';\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n      getVendorJsPropertyName(styles, k),\n      styles[k].toString(),\n      'important'\n    );\n  }\n}\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {Element} element\n * @param {string} property\n * @param {?string|number|boolean} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    opt_bypassCache\n  );\n  if (propertyName) {\n    element.style[propertyName] = /** @type {string} */ (opt_units\n      ? value + opt_units\n      : value);\n  }\n}\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    opt_bypassCache\n  );\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, ?string|number|boolean>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return value + 'px';\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n    /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g,\n    '($1,$2,$3, 1)'\n  );\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */ (win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */ (style) || map();\n}\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n\n/**\n * Resets all the styles of an element to a given value. Defaults to null.\n * The valid values are 'inherit', 'initial', 'unset' or null.\n * @param {!Element} element\n */\nexport function resetAllStyles(element) {\n  setImportantStyles(element, defaultStyles);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Determines if value is of FormData type.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFormData(value) {\n  return toString(value) === '[object FormData]';\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * True if the value is a function.\n * @param {*} value\n */\nexport function isFunction(value) {\n  return value !== null && typeof value === 'function';\n}\n\n/**\n * True if the value is either true or false.\n * @param {?*} value\n */\nexport function isBoolean(value) {\n  return value === true || value === false;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isArray} from './types';\n\n/**\n  @typedef {{\n    href: string,\n    protocol: string,\n    host: string,\n    hostname: string,\n    port: string,\n    pathname: string,\n    search: string,\n    hash: string,\n    origin: string,\n  }}\n  */\nlet LocationDef;\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {Object<string, !LocationDef>}\n */\nlet cache;\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!LocationDef}\n */\nexport function parseUrl(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = Object.create(null));\n  }\n\n  const fromCache = cache[url];\n  if (fromCache) {\n    return fromCache;\n  }\n\n  const info = parseUrlWithA(a, url);\n\n  return (cache[url] = info);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @return {!LocationDef}\n */\nfunction parseUrlWithA(a, url) {\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  /** @type {!LocationDef} */\n  const info = {\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: '', // Set below.\n  };\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if (\n    (info.protocol == 'http:' && info.port == 80) ||\n    (info.protocol == 'https:' && info.port == 443)\n  ) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n  return info;\n}\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nexport function parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n    .split('&')\n    .reduce((params, param) => {\n      const item = param.split('=');\n      const key = decodeURIComponent(item[0] || '');\n      const value = decodeURIComponent(item[1] || '');\n      if (key) {\n        params[key] = value;\n      }\n      return params;\n    }, {});\n}\n\n/**\n * Adds a parameter to a query string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nexport function addQueryParam(url, param, value) {\n  const queryIndex = url.indexOf('?');\n  const fragmentIndex = url.indexOf('#');\n  let fragment = '';\n  if (fragmentIndex != -1) {\n    fragment = url.substring(fragmentIndex);\n    url = url.substring(0, fragmentIndex);\n  }\n  if (queryIndex == -1) {\n    url += '?';\n  } else if (queryIndex < url.length - 1) {\n    url += '&';\n  }\n  url += encodeURIComponent(param) + '=' + encodeURIComponent(value);\n  return url + fragment;\n}\n\n/**\n * Returns the Url including the path and search, without fregment.\n * @param {string} url\n * @return {string}\n */\nexport function getHostUrl(url) {\n  const locationHref = parseUrl(url);\n  return locationHref.origin + locationHref.pathname + locationHref.search;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\nimport {parseJson} from './json';\nimport {parseUrl} from './url';\nimport {utf8EncodeSync} from './bytes';\n\n/**\n * The \"init\" argument of the Fetch API. Currently, only \"credentials: include\"\n * is implemented.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * @typedef {{\n *   body: (!FormData|string|undefined),\n *   credentials: (string|undefined),\n *   headers: (!Object|undefined),\n *   method: (string|undefined),\n *   responseType: (string)\n * }}\n */\nexport let FetchInitDef;\n\n/** @private @const {!Array<string>} */\nconst allowedMethods_ = ['GET', 'POST'];\n\n/** @private @enum {number} Allowed fetch responses. */\nconst allowedFetchTypes_ = {\n  document: 1,\n  text: 2,\n};\n\n/**\n * A class that polyfills Fetch API.\n */\nexport class Xhr {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Window} */\n    this.win = win;\n  }\n\n  /**\n   * We want to call `fetch_` unbound from any context since it could\n   * be either the native fetch or our polyfill.\n   *\n   * @param {string} input\n   * @param {!FetchInitDef} init\n   * @return {!Promise<!FetchResponse>|!Promise<!Response>}\n   * @private\n   */\n  fetch_(input, init) {\n    // TODO(avimehta): Should the requests go through when page is not visible?\n    assert(typeof input == 'string', 'Only URL supported: %s', input);\n    // In particular, Firefox does not tolerate `null` values for\n    // `credentials`.\n    const creds = init.credentials;\n    assert(\n      creds === undefined || creds == 'include' || creds == 'omit',\n      'Only credentials=include|omit support: %s',\n      creds\n    );\n    // Fallback to xhr polyfill since `fetch` api does not support\n    // responseType = 'document'. We do this so we don't have to do any parsing\n    // and document construction on the UI thread which would be expensive.\n    if (init.responseType == 'document') {\n      return fetchPolyfill(input, init);\n    }\n    return (this.win.fetch || fetchPolyfill).apply(null, arguments);\n  }\n\n  /**\n   * @param {string} input URL\n   * @param {?FetchInitDef} opt_init Fetch options object.\n   * @return {!Promise<!FetchResponse>}\n   */\n  fetch(input, opt_init) {\n    // TODO (avimehta): Figure out if CORS needs be handled the way AMP does it.\n    const init = setupInit(opt_init);\n    return this.fetch_(input, init)\n      .then(\n        response => response,\n        reason => {\n          const targetOrigin = parseUrl(input).origin;\n          throw new Error(\n            `XHR Failed fetching (${targetOrigin}/...):`,\n            reason && reason.message\n          );\n        }\n      )\n      .then(response => assertSuccess(response));\n  }\n}\n\n/**\n * Normalized method name by uppercasing.\n * @param {string|undefined} method\n * @return {string}\n * @private\n */\nfunction normalizeMethod_(method) {\n  if (method === undefined) {\n    return 'GET';\n  }\n  method = method.toUpperCase();\n\n  assert(\n    allowedMethods_.includes(method),\n    'Only one of %s is currently allowed. Got %s',\n    allowedMethods_.join(', '),\n    method\n  );\n\n  return method;\n}\n\n/**\n * Sets up and normalizes the FetchInitDef\n *\n * @param {?FetchInitDef=} opt_init Fetch options object.\n * @param {string=} opt_accept The HTTP Accept header value.\n * @return {!FetchInitDef}\n */\nfunction setupInit(opt_init, opt_accept) {\n  const init = opt_init || /** @type {FetchInitDef} */ ({});\n  init.method = normalizeMethod_(init.method);\n  init.headers = init.headers || {};\n  if (opt_accept) {\n    init.headers['Accept'] = opt_accept;\n  }\n  return init;\n}\n\n/**\n * A minimal polyfill of Fetch API. It only polyfills what we currently use.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * Notice that the \"fetch\" method itself is not exported as that would require\n * us to immediately support a much wide API.\n *\n * @param {string} input\n * @param {!FetchInitDef} init\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nexport function fetchPolyfill(input, init) {\n  return new Promise(function(resolve, reject) {\n    const xhr = createXhrRequest(init.method || 'GET', input);\n\n    if (init.credentials == 'include') {\n      xhr.withCredentials = true;\n    }\n\n    if (init.responseType in allowedFetchTypes_) {\n      xhr.responseType = init.responseType;\n    }\n\n    if (init.headers) {\n      Object.keys(init.headers).forEach(function(header) {\n        xhr.setRequestHeader(header, init.headers[header]);\n      });\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n        return;\n      }\n      if (xhr.status < 100 || xhr.status > 599) {\n        xhr.onreadystatechange = null;\n        reject(new Error(`Unknown HTTP status ${xhr.status}`));\n        return;\n      }\n\n      // TODO(dvoytenko): This is currently simplified: we will wait for the\n      // whole document loading to complete. This is fine for the use cases\n      // we have now, but may need to be reimplemented later.\n      if (xhr.readyState == /* COMPLETE */ 4) {\n        resolve(new FetchResponse(xhr));\n      }\n    };\n    xhr.onerror = () => {\n      reject(new Error('Network failure'));\n    };\n    xhr.onabort = () => {\n      reject(new Error('Request aborted'));\n    };\n\n    if (init.method == 'POST') {\n      xhr.send(init.body);\n    } else {\n      xhr.send();\n    }\n  });\n}\n\n/**\n * @param {string} method\n * @param {string} url\n * @return {!XMLHttpRequest}\n * @private\n */\nfunction createXhrRequest(method, url) {\n  const xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else {\n    throw new Error('CORS is not supported');\n  }\n  return xhr;\n}\n\n/**\n * If 415 or in the 5xx range.\n * @param {number} status\n */\nfunction isRetriable(status) {\n  return status == 415 || (status >= 500 && status < 600);\n}\n\n/**\n * Returns the response if successful or otherwise throws an error.\n * @param {!FetchResponse} response\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nexport function assertSuccess(response) {\n  return new Promise(resolve => {\n    if (response.ok) {\n      return resolve(response);\n    }\n\n    const {status} = response;\n    const err = new Error(`HTTP error ${status}`);\n    err.retriable = isRetriable(status);\n    // TODO(@jridgewell, #9448): Callers who need the response should\n    // skip processing.\n    err.response = response;\n    throw err;\n  });\n}\n\n/**\n * Response object in the Fetch API.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n */\nexport class FetchResponse {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n\n    /** @const {number} */\n    this.status = this.xhr_.status;\n\n    /** @const {boolean} */\n    this.ok = this.status >= 200 && this.status < 300;\n\n    /** @const {!FetchResponseHeaders} */\n    this.headers = new FetchResponseHeaders(xhr);\n\n    /** @type {boolean} */\n    this.bodyUsed = false;\n\n    /** @type {?ReadableStream} */\n    this.body = null;\n  }\n\n  /**\n   * Create a copy of the response and return it.\n   * @return {!FetchResponse}\n   */\n  clone() {\n    assert(!this.bodyUsed, 'Body already used');\n    return new FetchResponse(this.xhr_);\n  }\n\n  /**\n   * Drains the response and returns the text.\n   * @return {!Promise<string>}\n   * @private\n   */\n  drainText_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    return Promise.resolve(this.xhr_.responseText);\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * text.\n   * @return {!Promise<string>}\n   */\n  text() {\n    return this.drainText_();\n  }\n\n  /**\n   * Drains the response and returns the JSON object.\n   * @return {!Promise<!JsonObject>}\n   */\n  json() {\n    return /** @type {!Promise<!JsonObject>} */ (this.drainText_().then(\n      parseJson\n    ));\n  }\n\n  /**\n   * Reads the xhr responseXML.\n   * @return {!Promise<!Document>}\n   * @private\n   */\n  document_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    assert(\n      this.xhr_.responseXML,\n      'responseXML should exist. Make sure to return ' +\n        'Content-Type: text/html header.'\n    );\n    return /** @type {!Promise<!Document>} */ (Promise.resolve(\n      assert(this.xhr_.responseXML)\n    ));\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * ArrayBuffer.\n   * @return {!Promise<!ArrayBuffer>}\n   */\n  arrayBuffer() {\n    return /** @type {!Promise<!ArrayBuffer>} */ (this.drainText_().then(\n      utf8EncodeSync\n    ));\n  }\n}\n\n/**\n * Provides access to the response headers as defined in the Fetch API.\n * @private Visible for testing.\n */\nexport class FetchResponseHeaders {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n  }\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  get(name) {\n    return this.xhr_.getResponseHeader(name);\n  }\n\n  /**\n   * @param {string} name\n   * @return {boolean}\n   */\n  has(name) {\n    return this.xhr_.getResponseHeader(name) != null;\n  }\n}\n","(function (global) {\n  var babelHelpers = global.babelHelpers = {};\n\n  babelHelpers.inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  babelHelpers.createClass = (function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })();\n\n  babelHelpers.slice = Array.prototype.slice;\n  babelHelpers.bind = Function.prototype.bind;\n\n  babelHelpers.interopRequireWildcard = function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n\n      newObj[\"default\"] = obj;\n      return newObj;\n    }\n  };\n\n  babelHelpers.interopRequireDefault = function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  };\n\n  babelHelpers.get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  };\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.defineProperty = function(obj, key, value) {\n      obj[key] = value;\n      return obj;\n  };\n})(typeof global === \"undefined\" ? self : global);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst MAX_Z_INDEX = 2147483647;\n\nconst Constants = {};\n\n/**\n * Supported environments.\n *\n * @enum {string}\n */\nConstants.Environment = {\n  LOCAL: 'LOCAL',\n  PREPROD: 'PREPROD',\n  PRODUCTION: 'PRODUCTION',\n  SANDBOX: 'SANDBOX',\n  TEST: 'TEST',\n  TIN: 'TIN',\n};\n\n/**\n * Supported payment methods.\n *\n * @enum {string}\n */\nConstants.PaymentMethod = {\n  CARD: 'CARD',\n  TOKENIZED_CARD: 'TOKENIZED_CARD',\n  UPI: 'UPI',\n};\n\n/**\n * Auth methods.\n *\n * @enum {string}\n */\nConstants.AuthMethod = {\n  CRYPTOGRAM_3DS: 'CRYPTOGRAM_3DS',\n  PAN_ONLY: 'PAN_ONLY',\n};\n\n/**\n * Returned result status.\n *\n * @enum {string}\n */\nConstants.ResponseStatus = {\n  CANCELED: 'CANCELED',\n  DEVELOPER_ERROR: 'DEVELOPER_ERROR',\n};\n\n/**\n * Supported total price status.\n *\n * @enum {string}\n */\nConstants.TotalPriceStatus = {\n  ESTIMATED: 'ESTIMATED',\n  FINAL: 'FINAL',\n  NOT_CURRENTLY_KNOWN: 'NOT_CURRENTLY_KNOWN',\n};\n\n/**\n * Supported Google Pay payment button type.\n *\n * @enum {string}\n */\nConstants.ButtonType = {\n  SHORT: 'short',\n  LONG: 'long',\n};\n\n/**\n * Supported button colors.\n *\n * @enum {string}\n */\nConstants.ButtonColor = {\n  DEFAULT: 'default',  // Currently defaults to black.\n  BLACK: 'black',\n  WHITE: 'white',\n};\n\n/**\n * Id attributes.\n *\n * @enum {string}\n */\nConstants.Id = {\n  POPUP_WINDOW_CONTAINER: 'popup-window-container',\n};\n\n/** @const {string} */\nConstants.STORAGE_KEY_PREFIX = 'google.payments.api.storage';\n\n/** @const {string} */\nConstants.IS_READY_TO_PAY_RESULT_KEY =\n    Constants.STORAGE_KEY_PREFIX + '.isreadytopay.result';\n\n/** @const {string} */\nConstants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY =\n    Constants.STORAGE_KEY_PREFIX + '.upi.canMakePaymentCache';\n\n\nConstants.CLASS_PREFIX = 'google-payments-';\nConstants.IFRAME_ACTIVE_CONTAINER_CLASS =\n    `${Constants.CLASS_PREFIX}activeContainer`;\nConstants.IFRAME_CONTAINER_CLASS = `${Constants.CLASS_PREFIX}dialogContainer`;\nConstants.IFRAME_STYLE_CENTER_CLASS = `${Constants.CLASS_PREFIX}dialogCenter`;\nConstants.IFRAME_STYLE_CLASS = `${Constants.CLASS_PREFIX}dialog`;\n\nConstants.IFRAME_STYLE = `\n.${Constants.IFRAME_STYLE_CLASS} {\n    animation: none 0s ease 0s 1 normal none running;\n    background: none 0 0 / auto repeat scroll padding-box border-box #fff;\n    background-blend-mode: normal;\n    border: 0 none #333;\n    border-radius: 8px 8px 0 0;\n    border-collapse: separate;\n    bottom: 0;\n    box-shadow: #808080 0 3px 0 0, #808080 0 0 22px;\n    box-sizing: border-box;\n    letter-spacing: normal;\n    max-height: 100%;\n    overflow: visible;\n    position: fixed;\n    width: 100%;\n    z-index: ${MAX_Z_INDEX};\n    -webkit-appearance: none;\n    left: 0;\n}\n@media (min-width: 480px) {\n  .${Constants.IFRAME_STYLE_CLASS} {\n    width: 480px !important;\n    left: -240px !important;\n    margin-left: calc(100vw - 100vw / 2) !important;\n  }\n}\n.${Constants.IFRAME_CONTAINER_CLASS} {\n  background-color: rgba(0,0,0,0.26);\n  bottom: 0;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  right: 0;\n}\n.iframeContainer {\n  -webkit-overflow-scrolling: touch;\n}\n`;\n\nConstants.IFRAME_STYLE_CENTER = `\n.${Constants.IFRAME_STYLE_CENTER_CLASS} {\n  animation: none 0s ease 0s 1 normal none running;\n  background-blend-mode: normal;\n  background: none 0 0 / auto repeat scroll padding-box border-box #fff;\n  border-collapse: separate;\n  border-radius: 8px;\n  border: 0px none #333;\n  bottom: auto;\n  box-shadow: #808080 0 0 22px;\n  box-sizing: border-box;\n  left: -240px;\n  letter-spacing: normal;\n  margin-left: calc(100vw - 100vw / 2) !important;\n  max-height: 90%;\n  overflow: visible;\n  position: absolute;\n  top: 100%;\n  transform: scale(0.8);\n  width: 480px;\n  z-index: ${MAX_Z_INDEX};\n  -webkit-appearance: none;\n}\n@media (min-height: 667px) {\n  .${Constants.IFRAME_STYLE_CENTER_CLASS} {\n    max-height: 600px;\n  }\n}\n.${Constants.IFRAME_ACTIVE_CONTAINER_CLASS} {\n  top: 50%;\n  transform: scale(1.0) translateY(-50%);\n}\n`;\n\nConstants.GPAY_BUTTON_WITH_CARD_INFO_IMAGE =\n    'background-image: url(https://pay.google.com/gp/p/generate_gpay_btn_img);';\n\nConstants.BUTTON_LOCALE_TO_MIN_WIDTH = {\n  'en': 152,\n  'bg': 163,\n  'cs': 192,\n  'de': 183,\n  'es': 183,\n  'fr': 183,\n  'hr': 157,\n  'id': 186,\n  'ja': 148,\n  'ko': 137,\n  'ms': 186,\n  'nl': 167,\n  'pl': 182,\n  'pt': 193,\n  'ru': 206,\n  'sk': 157,\n  'sl': 211,\n  'sr': 146,\n  'tr': 161,\n  'uk': 207,\n  'zh': 156,\n};\n\n/**\n * Name of the graypane.\n *\n * @const {string}\n */\nConstants.GPAY_GRAYPANE = 'gpay-graypane';\n\n/**\n * Class used for the gpay button.\n *\n * @const {string}\n */\nConstants.GPAY_BUTTON_CLASS = 'gpay-button';\n\nConstants.BUTTON_STYLE = `\n.${Constants.GPAY_BUTTON_CLASS} {\n  background-origin: content-box;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: contain;\n  border: 0px;\n  border-radius: 4px;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 1px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n  cursor: pointer;\n  height: 40px;\n  min-height: 40px;\n  padding: 11px 24px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black {\n  background-color: #000;\n  box-shadow: none;\n  padding: 12px 24px 10px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white {\n  background-color: #fff;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.short {\n  min-width: 90px;\n  width: 160px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.short {\n  background-image: url(https://www.gstatic.com/instantbuy/svg/dark_gpay.svg);\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.short {\n  background-image: url(https://www.gstatic.com/instantbuy/svg/light_gpay.svg);\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.active {\n  background-color: #5f6368;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.hover {\n  background-color: #3c4043;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.active {\n  background-color: #fff;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.focus {\n  box-shadow: #e8e8e8 0 1px 1px 0, #e8e8e8 0 1px 3px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.hover {\n  background-color: #f8f8f8;\n}\n`;\n\nConstants.GPAY_BUTTON_WITH_OFFER_ICON_ADDITIONAL_STYLE = 'position: relative;';\n\nConstants.GPAY_OFFER_ICON_CLASS = 'gpay-offer-icon';\n\nConstants.GPAY_OFFER_ICON_SVG =\n    \"<svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\" \" +\n    \"version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\" +\n    \"\\\"http://www.w3.org/1999/xlink\\\" class=\\\"gpay-offer-icon\\\"><defs><path d=\\\"M19.41,9.58 L10.41,0.58 \" +\n    \"C10.05,0.22 9.55,0 9,0 L2,0 C0.9,0 0,0.9 0,2 L0,9 C0,9.55 0.22,10.05 \" +\n    \"0.59,10.42 L9.59,19.42 C9.95,19.78 10.45,20 11,20 C11.55,20 12.05,19.78 \" +\n    \"12.41,19.41 L19.41,12.41 C19.78,12.05 20,11.55 20,11 C20,10.45 19.77,\" +\n    \"9.94 19.41,9.58 Z\\\" id=\\\"path-1\\\"></path></defs><g id=\\\"buttons_10.05\\\"\" +\n    \" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\" +\n    \"<g id=\\\"Artboard\\\" transform=\\\"translate(-40.000000, -43.000000)\\\">\" +\n    \"<g id=\\\"Group-3\\\" transform=\\\"translate(40.000000, 43.000000)\\\">\" +\n    \"<g id=\\\"Group-2-Copy-2\\\"><g id=\\\"Group-Copy\\\"><g id=\\\"ic_loyalty_24px\\\">\" +\n    \"<mask id=\\\"mask-2\\\" fill=\\\"white\\\"><use xlink:href=\\\"#path-1\\\"></use>\" +\n    \"</mask><use id=\\\"gpay-Shape\\\" fill=\\\"#FF6100\\\" fill-rule=\\\"nonzero\\\" \" +\n    \"xlink:href=\\\"#path-1\\\"></use><path d=\\\"M3.5,5 C2.67,5 2,4.33 2,3.5 C2,\" +\n    \"2.67 2.67,2 3.5,2 C4.33,2 5,2.67 5,3.5 C5,4.33 4.33,5 3.5,5 Z\\\" \" +\n    \"id=\\\"Path\\\" fill=\\\"#FFFFFF\\\" fill-rule=\\\"nonzero\\\" mask=\\\"url(#mask-2)\\\">\" +\n    \"</path></g></g></g><g id=\\\"Group-13-Copy-7\\\" transform=\\\"translate\" +\n    \"(6.000000, 6.000000)\\\" fill=\\\"#FFFFFF\\\" fill-rule=\\\"nonzero\\\">\" +\n    \"<g id=\\\"Group-13-Copy-2\\\"><path d=\\\"M2.15217391,4.55172414 C0.963561082,\" +\n    \"4.55172414 1.99840144e-14,3.53278598 1.99840144e-14,2.27586207 \" +\n    \"C1.99840144e-14,1.01893816 0.963561082,6.30606678e-14 2.15217391,6.\" +\n    \"30606678e-14 C3.34078674,6.30606678e-14 4.30434783,1.01893816 4.30434783,\" +\n    \"2.27586207 C4.30434783,3.53278598 3.34078674,4.55172414 2.15217391,\" +\n    \"4.55172414 Z M2.15217391,3.31034483 C2.69245247,3.31034483 3.13043478,2.\" +\n    \"84719112 3.13043478,2.27586207 C3.13043478,1.70453302 2.69245247,\" +\n    \"1.24137931 2.15217391,1.24137931 C1.61189535,1.24137931 1.17391304,1\" +\n    \".70453302 1.17391304,2.27586207 C1.17391304,2.84719112 1.61189535,3.\" +\n    \"31034483 2.15217391,3.31034483 Z\\\" id=\\\"Combined-Shape\\\"></path>\" +\n    \"<path d=\\\"M6.84782609,9 C5.65921326,9 4.69565217,7.98106184 4.69565217,\" +\n    \"6.72413793 C4.69565217,5.46721402 5.65921326,4.44827586 6.84782609,\" +\n    \"4.44827586 C8.03643892,4.44827586 9,5.46721402 9,6.72413793 C9,7.98106184\" +\n    \" 8.03643892,9 6.84782609,9 Z M6.84782609,7.75862069 C7.38810465,\" +\n    \"7.75862069 7.82608696,7.29546698 7.82608696,6.72413793 C7.82608696\" +\n    \",6.15280888 7.38810465,5.68965517 6.84782609,5.68965517 C6.30754753,\" +\n    \"5.68965517 5.86956522,6.15280888 5.86956522,6.72413793 C5.86956522,\" +\n    \"7.29546698 6.30754753,7.75862069 6.84782609,7.75862069 Z\\\" \" +\n    \"id=\\\"Combined-Shape\\\"></path><polygon id=\\\"Rectangle\\\" \" +\n    \"transform=\\\"translate(4.497720, 4.541938) rotate(34.000000) \" +\n    \"translate(-4.497720, -4.541938) \\\" points=\\\"3.77901778 -0.202295978 \" +\n    \"4.9740273 -0.171019161 5.21642263 9.28617278 4.02141311 9.25489596\\\">\" +\n    \"</polygon></g></g></g></g></g></svg>\";\n\nConstants.GPAY_OFFER_ICON_STYLE = `\n.${Constants.GPAY_OFFER_ICON_CLASS} {\n  position: absolute;\n  right: -5px;\n  top: -5px;\n}\n\n#ic_loyalty_24px use.hover {\n  fill: #FC853B;\n}\n`;\n\nConstants.GPAY_OFFER_DESCRIPTION_CLASS = 'gpay-offer-description';\n\nConstants.GPAY_OFFER_DESCRIPTION_STYLE = `\n@import url(//fonts.googleapis.com/css?family=Google+Sans:500);\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS} {\n  text-align: center;\n  font: 10px 'Google Sans';\n  margin-top: 2px;\n  margin-bottom: 0px;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.gpay-btn-clicked {\n  color: #3C4043;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.short {\n  min-width: 90px;\n  width: 160px;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.long {\n  min-width: 152px;\n  width: 240px;\n}\n`;\n\n/**\n * Class used for the new gpay button with card info (last 4 digits, card net).\n *\n * @const {string}\n */\nConstants.GPAY_BUTTON_CARD_INFO_CLASS = 'gpay-card-info-btn';\n\nConstants.GPAY_BUTTON_CARD_INFO_BUTTON_STYLE = `\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS} {\n    background-origin: content-box;\n    background-position: center center;\n    background-repeat: no-repeat;\n    background-size: contain;\n    border: 0px;\n    border-radius: 4px;\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 1px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n    cursor: pointer;\n    height: 40px;\n    min-height: 40px;\n    padding: 11px 24px;\n    background-color: #000;\n    box-shadow: none;\n    padding: 9px 24px 10px;\n    min-width: 190px;\n    width: 240px;\n  }\n\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS}.active {\n    background-color: #5f6368;\n  }\n\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS}.hover {\n    background-color: #3c4043;\n  }\n  `;\n\n\n/**\n * Trusted domain for secure context validation\n *\n * @const {string}\n */\nConstants.TRUSTED_DOMAIN = '.google.com';\n\nexport {Constants};\n\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\n/**\n * Injects the provided style sheet to the document head.\n * @param {string} styleText The stylesheet to be injected.\n * @return {!Element}\n */\nfunction injectStyleSheet(styleText) {\n  const styleElement = document.createElement('style');\n  styleElement.type = 'text/css';\n  styleElement.textContent = styleText;\n  document.head.appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Injects the pay with google iframe.\n * @param {string} iframeClassName The classname of the iFrame wrapper.\n * @return {!{container: !Element, iframe:!HTMLIFrameElement}}\n */\nfunction injectIframe(iframeClassName) {\n  const container = document.createElement('div');\n  container.classList.add(Constants.IFRAME_CONTAINER_CLASS);\n  const iframeContainer = document.createElement('div');\n  iframeContainer.classList.add('iframeContainer');\n  /** @private @const {!HTMLIFrameElement} */\n  const iframe =\n      /** @type {!HTMLIFrameElement} */ (document.createElement('iframe'));\n  iframe.classList.add(iframeClassName);\n  iframe.setAttribute('frameborder', '0');\n  iframe.setAttribute('scrolling', 'no');\n  iframeContainer.appendChild(iframe);\n  container.appendChild(iframeContainer);\n  document.body.appendChild(container);\n  return {'container': container, 'iframe': iframe};\n}\n\nexport {\n  injectStyleSheet,\n  injectIframe,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\nconst MAX_Z_INDEX = 2147483647;\n\n\nclass Graypane {\n\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.element_ = doc.createElement(Constants.GPAY_GRAYPANE);\n    setImportantStyles(this.element_, {\n      'z-index': MAX_Z_INDEX,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n\n    /** @private {?Window} */\n    this.popupWindow_ = null;\n\n    this.element_.addEventListener('click', () => {\n      if (this.popupWindow_) {\n        try {\n          this.popupWindow_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {?Window|undefined} popupWindow\n   * @return {!Promise}\n   */\n  show(popupWindow) {\n    this.popupWindow_ = popupWindow || null;\n    this.doc_.body.appendChild(this.element_);\n    setImportantStyles(this.element_, {\n      'display': 'block',\n      'opacity': 0,\n    });\n    return transition(this.element_, {\n      'opacity': 1,\n    }, 300, 'ease-out');\n  }\n\n  /**\n   * Hides the graypane.\n   * @return {!Promise|undefined}\n   */\n  hide() {\n    this.popupWindow_ = null;\n    if (!this.element_.parentElement) {\n      // Has already been removed or haven't been even added to DOM.\n      // This could be possible after redirect.\n      return;\n    }\n    return transition(this.element_, {\n      'opacity': 0,\n    }, 300, 'ease-out').then(() => {\n      setImportantStyles(this.element_, {'display': 'none'});\n      this.doc_.body.removeChild(this.element_);\n    });\n  }\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n *\n * The `!important` styles are used to avoid accidental specificity overrides\n * from the 3p page's stylesheet.\n *\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nfunction setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(k, styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nfunction transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise(resolve => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(el, Object.assign({\n        'transition': `transform ${tr}, opacity ${tr}`,\n      }, props));\n    });\n  }).then(() => {\n    // Stop transition and make sure that the final properties get set.\n    setImportantStyles(el, Object.assign({\n      'transition': previousTransitionValue,\n    }, props));\n  });\n}\n\n\nexport {Graypane};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PostMessageService} from './post_message_service.js';\n\n/**\n * Supported interactions between iframe and merchant page.\n *\n * @enum {number}\n */\n// Next Id: 10\nconst PostMessageEventType = {\n  IS_READY_TO_PAY: 6,\n  LOG_BUTTON_CLICK: 5,\n  LOG_IS_READY_TO_PAY_API: 0,\n  LOG_LOAD_PAYMENT_DATA_API: 1,\n  LOG_RENDER_BUTTON: 2,\n  LOG_INITIALIZE_PAYMENTS_CLIENT: 9,\n  LOG_PAY_FRAME_REQUESTED: 15,\n  LOG_PAY_FRAME_LOADED: 16,\n  LOG_PAY_FRAME_LOADED_WITH_ALL_JS: 17,\n  LOG_INLINE_PAYMENT_WIDGET_INITIALIZE: 4,\n  LOG_INLINE_PAYMENT_WIDGET_SUBMIT: 3,\n  LOG_INLINE_PAYMENT_WIDGET_DISPLAYED: 7,\n  LOG_INLINE_PAYMENT_WIDGET_HIDDEN: 8,\n};\n\n/**\n * Types of buy flow activity modes.\n *\n * @enum {number}\n */\nconst BuyFlowActivityMode = {\n  UNKNOWN_MODE: 0,\n  IFRAME: 1,\n  POPUP: 2,\n  REDIRECT: 3,\n  ANDROID_NATIVE: 4,\n  PAYMENT_HANDLER: 5,\n};\n\n/**\n * Types of buy flow activity modes.\n *\n * @enum {number}\n */\nconst PublicErrorCode = {\n  UNKNOWN_ERROR_TYPE: 0,\n  INTERNAL_ERROR: 1,\n  DEVELOPER_ERROR: 2,\n  BUYER_ACCOUNT_ERROR: 3,\n  MERCHANT_ACCOUNT_ERROR: 4,\n  UNSUPPORTED_API_VERSION: 5,\n  BUYER_CANCEL: 6,\n};\n\n/**\n * The presentation mode of the buy flow\n *\n * @enum {number}\n */\nconst BuyFlowMode = {\n  PAY_WITH_GOOGLE: 5,\n  SUBSCRIBE_WITH_GOOGLE: 6,\n};\n\n/**\n * Iframe used for logging and prefetching.\n *\n * @type {?Element}\n */\nlet iframe = null;\n\n/** @type {?PostMessageService} */\nlet postMessageService = null;\n\n/** @type {?string} */\nlet environment = null;\n\n/** @type {?string} */\nlet googleTransactionId = null;\n\n/** @type {number} */\nlet originTimeMs = Date.now();\n\n/** @type {?BuyFlowActivityMode} */\nlet buyFlowActivityMode = null;\n\n/** @type {boolean} */\nlet iframeLoaded = false;\n\n/** @type {!Array<!Object>} */\nlet buffer = [];\n\nclass PayFrameHelper {\n  /**\n   * Creates a hidden iframe for logging and appends it to the top level\n   * document.\n   */\n  static load() {\n    if (iframe) {\n      return;\n    }\n    const initOptions =\n        /** @type {!PaymentOptions} */ (window['gpayInitParams']) || {};\n    environment = initOptions.environment || Constants.Environment.PRODUCTION;\n    iframe = document.createElement('iframe');\n    // Pass in origin because document.referrer inside iframe is empty in\n    // certain cases\n    // Can be replaced by iframe.src=... in non Google context.\n    iframe.src = PayFrameHelper.getIframeUrl_(\n            window.location.origin,\n            initOptions.merchantInfo && initOptions.merchantInfo.merchantId);\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_PAY_FRAME_REQUESTED,\n      'clientLatencyStartMs': Date.now(),\n    });\n    iframe.height = '0';\n    iframe.width = '0';\n    iframe.style.display = 'none';\n    iframe.style.visibility = 'hidden';\n    iframe.onload = function() {\n      PayFrameHelper.postMessage({\n        'eventType': PostMessageEventType.LOG_PAY_FRAME_LOADED_WITH_ALL_JS,\n        'clientLatencyStartMs': Date.now(),\n      });\n      PayFrameHelper.iframeLoaded();\n    };\n    // If the body is already loaded, just append the iframe. Otherwise, we wait\n    // until the DOM has loaded to append the iframe, otherwise document.body is\n    // null.\n    if (document.body) {\n      PayFrameHelper.initialize_();\n    } else {\n      document.addEventListener(\n          'DOMContentLoaded', () => PayFrameHelper.initialize_());\n    }\n  }\n\n  /**\n   * Appends the iframe to the DOM and updates the post message service.\n   * @private\n   */\n  static initialize_() {\n    document.body.appendChild(iframe);\n    postMessageService = new PostMessageService(iframe.contentWindow);\n  }\n\n  /**\n   * Sends a message to the iframe and wait for a response.\n   * Uses the responseHandler specified only if the responseType is a match.\n   *\n   * @param {!Object} data\n   * @param {!PostMessageEventType} eventType\n   * @param {string} responseType\n   * @param {function(!Event)} responseHandler\n   */\n  static sendAndWaitForResponse(\n      data, eventType, responseType, responseHandler) {\n    function callback(event) {\n      if (event.data[responseType]) {\n        responseHandler(event);\n        // We only want to process the response from the payframe once.\n        // so stop listening to the event once processed.\n        PayFrameHelper.removeMessageEventListener_(callback);\n      }\n    }\n\n    PayFrameHelper.addMessageEventListener_(callback);\n\n    const postMessageData = Object.assign({'eventType': eventType}, data);\n    PayFrameHelper.postMessage(postMessageData);\n  }\n\n  /**\n   * Add an event listener for listening to messages received.\n   *\n   * @param {function(!Event)} callback\n   * @private\n   */\n  static addMessageEventListener_(callback) {\n    window.addEventListener('message', callback);\n  }\n\n  /**\n   * Remove the event listener for listening to messages.\n   *\n   * @param {function(!Event)} callback\n   * @private\n   */\n  static removeMessageEventListener_(callback) {\n    window.removeEventListener('message', callback);\n  }\n\n  /**\n   * Posts a message to the iframe with the given data.\n   *\n   * @param {!Object} data\n   */\n  static postMessage(data) {\n    if (!iframeLoaded) {\n      buffer.push(data);\n      return;\n    }\n    const postMessageData = Object.assign(\n        {\n          'buyFlowActivityMode': buyFlowActivityMode,\n          'googleTransactionId': googleTransactionId,\n          'originTimeMs': originTimeMs,\n        },\n        data);\n    postMessageService.postMessage(\n        postMessageData, PayFrameHelper.getIframeOrigin_());\n  }\n\n  /**\n   * Sets the activity mode.\n   *\n   * @param {!BuyFlowActivityMode} mode\n   */\n  static setBuyFlowActivityMode(mode) {\n    buyFlowActivityMode = mode;\n  }\n\n  /**\n   * Sets the google transaction id.\n   *\n   * @param {string} txnId\n   */\n  static setGoogleTransactionId(txnId) {\n    googleTransactionId = txnId;\n  }\n\n  /**\n   * Sets the originTimeMs. To be used only for tests.\n   *\n   * @param {number} originTimeMsTemp\n   */\n  static setOriginTimeMs(originTimeMsTemp) {\n    originTimeMs = originTimeMsTemp;\n  }\n\n  /**\n   * Override postMessageService for testing.\n   *\n   * @param {!PostMessageService} messageService\n   */\n  static setPostMessageService(messageService) {\n    postMessageService = messageService;\n  }\n\n  /**\n   * Clears the singleton variables.\n   */\n  static reset() {\n    iframe = null;\n    buffer.length = 0;\n    iframeLoaded = false;\n    buyFlowActivityMode = null;\n  }\n\n  /**\n   * Sets whether the iframe has been loaded or not.\n   *\n   * @param {boolean} loaded\n   */\n  static setIframeLoaded(loaded) {\n    iframeLoaded = loaded;\n  }\n\n  /**\n   * Called whenever the iframe is loaded.\n   */\n  static iframeLoaded() {\n    iframeLoaded = true;\n    buffer.forEach(function(data) {\n      PayFrameHelper.postMessage(data);\n    });\n    buffer.length = 0;\n  }\n\n  /**\n   * Returns the events that have been buffered.\n   *\n   * @return {!Array<!Object>}\n   */\n  static getBuffer() {\n    return buffer;\n  }\n\n  /**\n   * Mocks the iframe as an arbitrary html element instead of actually injecting\n   * it for testing.\n   */\n  static injectIframeForTesting() {\n    PayFrameHelper.reset();\n    iframe = document.createElement('p');\n    PayFrameHelper.iframeLoaded();\n  }\n\n  /**\n   * Returns the payframe origin based on the environment.\n   *\n   * @return {string}\n   * @private\n   */\n  static getIframeOrigin_() {\n    let iframeUrl = 'https://pay';\n    if (environment == Constants.Environment.SANDBOX) {\n      iframeUrl += '.sandbox';\n    } else if (environment == Constants.Environment.PREPROD) {\n      iframeUrl += '-preprod.sandbox';\n    }\n    return iframeUrl + '.google.com';\n  }\n\n  /**\n   * Returns the payframe URL based on the environment.\n   *\n   * @param {string} origin The origin that is opening the payframe.\n   * @param {string|null=} merchantId The merchant id.\n   * @return {string}\n   * @private\n   */\n  static getIframeUrl_(origin, merchantId) {\n    // TrustedResourceUrl header needs to start with https or '//'.\n    const iframeUrl = `https://pay${environment == Constants.Environment.PREPROD ?\n             '-preprod.sandbox' :\n             environment == Constants.Environment.SANDBOX ? '.sandbox' : ''}.google.com/gp/p/ui/payframe?origin=${origin}&mid=%{merchantId}`;\n    return iframeUrl;\n  }\n}\n\n// Start loading pay frame early\nPayFrameHelper.load();\n\nexport {\n  BuyFlowActivityMode,\n  BuyFlowMode,\n  PayFrameHelper,\n  PostMessageEventType,\n  PublicErrorCode,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\nimport {PaymentsRequestDelegate} from './payments_request_delegate.js';\nimport {PaymentsWebActivityDelegate} from './payments_web_activity_delegate.js';\nimport {UpiHandler} from './upi_handler.js';\nimport {ActivityPorts} from 'web-activities/activity-ports';\nimport {BuyFlowActivityMode, BuyFlowMode, PayFrameHelper, PostMessageEventType, PublicErrorCode} from './pay_frame_helper.js';\nimport {apiV2DoesMerchantSupportSpecifiedCardType, chromeSupportsPaymentHandler, chromeSupportsPaymentRequest, doesMerchantSupportOnlyTokenizedCards, getUpiPaymentMethod, validatePaymentOptions, validateIsReadyToPayRequest, validatePaymentDataRequest, validateSecureContext} from './validator.js';\n\nimport {createGoogleTransactionId} from './utils.js';\n\nconst TRUSTED_DOMAINS = [\n  'actions.google.com',\n  'amp-actions.sandbox.google.com',\n  'amp-actions-staging.sandbox.google.com',\n  'amp-actions-autopush.sandbox.google.com',\n  'payments.developers.google.com',\n  'payments.google.com',\n];\n\n/**\n * The client for interacting with the Google Payment APIs.\n * <p>\n * The async refers to the fact that this client supports redirects\n * when using webactivties.\n * <p>\n * If you are using this be sure that this is what you want.\n * <p>\n * In almost all cases PaymentsClient is the better client to use because\n * it exposes a promises based api which is easier to deal with.\n * @final\n */\nclass PaymentsAsyncClient {\n  /**\n   * @param {!PaymentOptions} paymentOptions\n   * @param {function(!Promise<!PaymentData>)} onPaymentResponse\n   * @param {boolean=} opt_useIframe\n   * @param {!ActivityPorts=} opt_activities Can be used to provide a shared\n   *   activities manager. By default, the new manager is created.\n   */\n  constructor(paymentOptions, onPaymentResponse, opt_useIframe,\n             opt_activities) {\n    this.onPaymentResponse_ = onPaymentResponse;\n\n    validatePaymentOptions(paymentOptions);\n\n    /** @private {?number} */\n    this.loadPaymentDataApiStartTimeMs_ = null;\n\n    /** @private @const {string} */\n    this.environment_ =\n        paymentOptions.environment || Constants.Environment.TEST;\n    if (!PaymentsAsyncClient.googleTransactionId_) {\n      PaymentsAsyncClient.googleTransactionId_ =\n          /** @type {string} */ (\n              (this.isInTrustedDomain_() && paymentOptions['i'] &&\n               paymentOptions['i']['googleTransactionId']) ?\n                  paymentOptions['i']['googleTransactionId'] :\n                  createGoogleTransactionId(this.environment_));\n    }\n\n    /** @private @const {!PaymentOptions} */\n    this.paymentOptions_ = paymentOptions;\n\n    /** @private @const {!PaymentsClientDelegateInterface} */\n    this.webActivityDelegate_ = new PaymentsWebActivityDelegate(\n        this.environment_, PaymentsAsyncClient.googleTransactionId_,\n        opt_useIframe, opt_activities,\n        paymentOptions['i'] && paymentOptions['i']['redirectKey']);\n\n    /** @private {number} */\n    this.buyFlowMode_ = BuyFlowMode.PAY_WITH_GOOGLE;\n\n    const paymentRequestSupported = chromeSupportsPaymentRequest();\n    // TODO: Remove the temporary hack that disable payments\n    // request for inline flow.\n    /** @private @const {?PaymentsClientDelegateInterface} */\n    this.delegate_ = paymentRequestSupported && !opt_useIframe ?\n        new PaymentsRequestDelegate(this.environment_) :\n        this.webActivityDelegate_;\n\n    this.upiHandler_ = new UpiHandler();\n\n    this.webActivityDelegate_.onResult(this.onResult_.bind(this));\n    this.delegate_.onResult(this.onResult_.bind(this));\n\n    // If web delegate is used anyway then this is overridden in the web\n    // activity delegate when load payment data is called.\n    if (chromeSupportsPaymentHandler()) {\n      PayFrameHelper.setBuyFlowActivityMode(\n          BuyFlowActivityMode.PAYMENT_HANDLER);\n    } else if (paymentRequestSupported) {\n      PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.ANDROID_NATIVE);\n    }\n\n    PayFrameHelper.setGoogleTransactionId(\n        PaymentsAsyncClient.googleTransactionId_);\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_INITIALIZE_PAYMENTS_CLIENT,\n      'clientLatencyStartMs': Date.now(),\n    });\n\n    window.addEventListener(\n        'message', event => this.handleMessageEvent_(event));\n  }\n\n  /**\n   * Check whether the user can make payments using the Payment API.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @export\n   */\n  isReadyToPay(isReadyToPayRequest) {\n    // Merge with paymentOptions, preferring values from isReadyToPayRequest\n    if (isReadyToPayRequest) {\n      isReadyToPayRequest =\n          Object.assign({}, this.paymentOptions_, isReadyToPayRequest);\n    }\n    const startTimeMs = Date.now();\n    /** @type {?string} */\n    const errorMessage = validateSecureContext() ||\n        validateIsReadyToPayRequest(isReadyToPayRequest);\n    if (errorMessage) {\n      return new Promise((resolve, reject) => {\n        PaymentsAsyncClient.logDevErrorToConsole_('isReadyToPay', errorMessage);\n        PayFrameHelper.postMessage({\n          'eventType': PostMessageEventType.LOG_IS_READY_TO_PAY_API,\n          'error': PublicErrorCode.DEVELOPER_ERROR,\n        });\n        reject({\n          'statusCode': Constants.ResponseStatus.DEVELOPER_ERROR,\n          'statusMessage': errorMessage\n        });\n      });\n    }\n\n    const isReadyToPayPromise = this.isReadyToPay_(isReadyToPayRequest);\n\n    isReadyToPayPromise.then(response => {\n      PayFrameHelper.postMessage({\n        'eventType': PostMessageEventType.LOG_IS_READY_TO_PAY_API,\n        'clientLatencyStartMs': startTimeMs,\n        'isReadyToPayApiResponse': response,\n      });\n      return response;\n    });\n    return isReadyToPayPromise;\n  }\n\n  /**\n   * Actual implementation of isReadyToPay in a private method so that\n   * we can add callbacks to the promise to measure latencies.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @private\n   */\n  isReadyToPay_(isReadyToPayRequest) {\n    if (this.upiHandler_.isUpiRequest(isReadyToPayRequest)) {\n      return this.upiHandler_.isReadyToPay(isReadyToPayRequest);\n    }\n    if (chromeSupportsPaymentRequest() &&\n       !isNativeDisabledInRequest(isReadyToPayRequest)) {\n      if (isReadyToPayRequest.apiVersion >= 2) {\n        return this.isReadyToPayApiV2ForChromePaymentRequest_(\n            isReadyToPayRequest);\n      } else {\n        // This is the apiVersion 1 branch.\n        // If the merchant supports only Tokenized cards then just rely on\n        // delegate to give us the result.\n        // This will need to change once b/78519188 is fixed.\n        const webPromise =\n            this.webActivityDelegate_.isReadyToPay(isReadyToPayRequest);\n        const nativePromise = this.delegate_.isReadyToPay(isReadyToPayRequest);\n        if (doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest) &&\n            !chromeSupportsPaymentHandler()) {\n          return nativePromise;\n        }\n        // Return webIsReadyToPay only if delegateIsReadyToPay has been\n        // executed.\n        return nativePromise.then(() => webPromise);\n      }\n    }\n    const webPromise =\n        this.webActivityDelegate_.isReadyToPay(isReadyToPayRequest);\n    return webPromise;\n  }\n\n  /**\n   * Handle is ready to pay for api v2.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @private\n   */\n  isReadyToPayApiV2ForChromePaymentRequest_(isReadyToPayRequest) {\n    let defaultPromise = Promise.resolve({'result': false});\n    if (isReadyToPayRequest.existingPaymentMethodRequired) {\n      defaultPromise =\n          Promise.resolve({'result': false, 'paymentMethodPresent': false});\n    }\n\n    let nativePromise = defaultPromise;\n    if (apiV2DoesMerchantSupportSpecifiedCardType(\n            isReadyToPayRequest, Constants.AuthMethod.CRYPTOGRAM_3DS)) {\n      // If the merchant supports tokenized cards.\n      // Make a separate call to gms core to check if the user isReadyToPay\n      // with just tokenized cards. We can't pass in PAN_ONLY here\n      // because gms core always returns true for PAN_ONLY.\n      // Leave other payment methods as is.\n      const nativeRtpRequest = /** @type {!IsReadyToPayRequest} */\n          (JSON.parse(JSON.stringify(isReadyToPayRequest)));\n      for (var i = 0; i < nativeRtpRequest.allowedPaymentMethods.length; i++) {\n        if (nativeRtpRequest.allowedPaymentMethods[i].type ==\n            Constants.PaymentMethod.CARD) {\n          nativeRtpRequest.allowedPaymentMethods[i]\n              .parameters['allowedAuthMethods'] =\n              [Constants.AuthMethod.CRYPTOGRAM_3DS];\n        }\n      }\n\n      nativePromise = this.delegate_.isReadyToPay(nativeRtpRequest);\n    }\n\n    let webPromise = defaultPromise;\n    if (apiV2DoesMerchantSupportSpecifiedCardType(\n            isReadyToPayRequest, Constants.AuthMethod.PAN_ONLY)) {\n      webPromise = this.webActivityDelegate_.isReadyToPay(isReadyToPayRequest);\n    }\n\n    // Update session storage with payment handler canMakePayment result but\n    // rely on web delegate for actual response\n    if (chromeSupportsPaymentHandler()) {\n      return nativePromise.then(() => webPromise);\n    }\n\n    return nativePromise.then(nativeResult => {\n      if ((nativeResult && nativeResult['result']) == true) {\n        return nativeResult;\n      }\n      return webPromise;\n    });\n  }\n\n  /**\n   * Prefetch paymentData to speed up loadPaymentData call. Note the provided\n   * paymentDataRequest should exactly be the same as provided in\n   * loadPaymentData to make the loadPaymentData call fast since current\n   * web flow prefetching is based on the full request parameters.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @export\n   */\n  prefetchPaymentData(paymentDataRequest) {\n    /** @type {?string} */\n    const errorMessage = validateSecureContext() ||\n        validatePaymentDataRequest(paymentDataRequest);\n    if (errorMessage) {\n      PaymentsAsyncClient.logDevErrorToConsole_(\n          'prefetchPaymentData', errorMessage);\n      return;\n    }\n    this.assignInternalParams_(paymentDataRequest);\n    if (chromeSupportsPaymentRequest()\n       && !isNativeDisabledInRequest(paymentDataRequest)) {\n      this.delegate_.prefetchPaymentData(paymentDataRequest);\n    } else {\n      // For non chrome supports always use the hosting page.\n      this.webActivityDelegate_.prefetchPaymentData(paymentDataRequest);\n    }\n  }\n\n  /**\n   * Request PaymentData, which contains necessary infomartion to complete a\n   * payment.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @export\n   */\n  loadPaymentData(paymentDataRequest) {\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_BUTTON_CLICK,\n    });\n    const errorMessage = validateSecureContext() ||\n        validatePaymentDataRequest(paymentDataRequest);\n    this.buyFlowMode_ = paymentDataRequest && paymentDataRequest.swg ?\n        BuyFlowMode.SUBSCRIBE_WITH_GOOGLE :\n        BuyFlowMode.PAY_WITH_GOOGLE;\n    if (errorMessage) {\n      this.onPaymentResponse_(new Promise((resolve, reject) => {\n        PayFrameHelper.postMessage({\n          'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n          'error': PublicErrorCode.DEVELOPER_ERROR,\n          'buyFlowMode': this.buyFlowMode_,\n        });\n        PaymentsAsyncClient.logDevErrorToConsole_(\n            'loadPaymentData', errorMessage);\n        reject({\n          'statusCode': Constants.ResponseStatus.DEVELOPER_ERROR,\n          'statusMessage': errorMessage\n        });\n      }));\n      return;\n    }\n\n    // Handler for UPI PaymentMethod\n    // Currently we don't support UPI along with other payment methods, if\n    // UPI is in payment methods then we assume it is UPI only.\n    const upiPaymentMethod = getUpiPaymentMethod(paymentDataRequest);\n    if (upiPaymentMethod) {\n      this.upiHandler_.loadPaymentData(\n          paymentDataRequest, upiPaymentMethod, this.onResult_.bind(this));\n      return;\n    }\n\n    const isReadyToPayResult =\n        window.sessionStorage.getItem(Constants.IS_READY_TO_PAY_RESULT_KEY);\n    this.loadPaymentDataApiStartTimeMs_ = Date.now();\n    this.assignInternalParams_(paymentDataRequest);\n    // We want to fall back to the web delegate if payment handler is supported\n    // and isReadyToPay bit is not explicitly set to true (fallback to web if\n    // isReadyToPay wasn't called for PH)\n    if ((chromeSupportsPaymentHandler() && isReadyToPayResult !== 'true')\n       || isNativeDisabledInRequest(paymentDataRequest)) {\n      this.webActivityDelegate_.loadPaymentData(paymentDataRequest);\n    } else {\n      this.delegate_.loadPaymentData(paymentDataRequest);\n    }\n  }\n\n  /**\n   * Log developer error to console.\n   *\n   * @param {string} apiName\n   * @param {?string} errorMessage\n   * @private\n   */\n  static logDevErrorToConsole_(apiName, errorMessage) {\n    console.error('DEVELOPER_ERROR in ' + apiName + ' : ' + errorMessage);\n  }\n\n  /**\n   * Return a <div> element containing a Google Pay payment button.\n   *\n   * @param {!ButtonOptions=} options\n   * @return {!Element}\n   * @export\n   */\n  createButton(options = {}) {\n    let button = null;\n    // Only log if button was created successfully\n    const startTimeMs = Date.now();\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_RENDER_BUTTON,\n      'clientLatencyStartMs': startTimeMs,\n    });\n    return button;\n  }\n\n  /**\n   * @param {!Event} e postMessage event from the AMP page.\n   * @private\n   */\n  handleMessageEvent_(e) {\n    if (this.isInTrustedDomain_()) {\n      // Only handles the event right now if loaded in trusted domain.\n      if (e.data['name'] === 'logPaymentData') {\n        PayFrameHelper.postMessage(e.data['data']);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @return {boolean}\n   */\n  isInTrustedDomain_() {\n    return TRUSTED_DOMAINS.indexOf(window.location.hostname) != -1;\n  }\n\n  /**\n   * Called when load payment data result is returned. This triggers the payment\n   * response callback passed to the client.\n   *\n   * @private\n   */\n  onResult_(response) {\n    response\n        .then(result => {\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'clientLatencyStartMs': this.loadPaymentDataApiStartTimeMs_,\n          });\n        })\n        .catch(result => {\n          if (result['errorCode']) {\n            PayFrameHelper.postMessage({\n              'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n              'error': /** @type {!PublicErrorCode} */ (result['errorCode']),\n              'buyFlowMode': this.buyFlowMode_,\n            });\n          } else {\n            // If user closes window we don't get a error code\n            PayFrameHelper.postMessage({\n              'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n              'error': PublicErrorCode.BUYER_CANCEL,\n              'buyFlowMode': this.buyFlowMode_,\n            });\n          }\n        });\n    this.onPaymentResponse_(response);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {!PaymentDataRequest}\n   * @private\n   */\n  assignInternalParams_(paymentDataRequest) {\n    const internalParam = {\n      'startTimeMs': Date.now(),\n      'googleTransactionId': PaymentsAsyncClient.googleTransactionId_,\n    };\n    paymentDataRequest['i'] = paymentDataRequest['i'] ?\n        Object.assign(internalParam, paymentDataRequest['i']) :\n        internalParam;\n    return paymentDataRequest;\n  }\n}\n\n/** @const {?string} */\nPaymentsAsyncClient.googleTransactionId_;\n\n\n/**\n * Whether the request specifies that the native support has to be disabled.\n *\n * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n * @return {boolean}\n */\nfunction isNativeDisabledInRequest(request) {\n  return (request['i'] && request['i']['disableNative']) === true;\n}\n\n\nexport {PaymentsAsyncClient};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An interface which captures what we need to start up buyflow across surfaces.\n * @interface\n */\nclass PaymentsClientDelegateInterface {\n  /**\n   * Check whether the user can make payments using the Payment API.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   */\n  isReadyToPay(isReadyToPayRequest) {}\n\n  /**\n   * Prefetch paymentData to speed up loadPaymentData call. Note the provided\n   * paymentDataRequest should exactly be the same as provided in\n   * loadPaymentData to make the loadPaymentData call fast.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   */\n  prefetchPaymentData(paymentDataRequest) {}\n\n  /**\n   * Request PaymentData, which contains necessary infomartion to complete a\n   * payment.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   */\n  loadPaymentData(paymentDataRequest) {}\n\n  /**\n   * @param {function(!Promise<!PaymentData>)} callback\n   */\n  onResult(callback) {}\n}\n\nexport {PaymentsClientDelegateInterface};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Description of this file.\n */\nimport {Constants} from './constants.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\n\n/**\n * An implementation of PaymentsClientDelegateInterface that leverages payment\n * request.\n * @implements {PaymentsClientDelegateInterface}\n */\nclass PaymentsRequestDelegate {\n  /**\n   * @param {string} environment\n   */\n  constructor(environment) {\n    this.environment_ = environment;\n\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.callback_ = null;\n  }\n\n  /** @override */\n  onResult(callback) {\n    this.callback_ = callback;\n  }\n\n  /** @override */\n  isReadyToPay(isReadyToPayRequest) {\n    /** @type{!PaymentRequest} */\n    const paymentRequest = this.createPaymentRequest_(isReadyToPayRequest);\n    return new Promise((resolve, reject) => {\n      paymentRequest.canMakePayment()\n          .then(result => {\n            window.sessionStorage.setItem(\n                Constants.IS_READY_TO_PAY_RESULT_KEY, result.toString());\n            const response = {'result': result};\n            if (isReadyToPayRequest.apiVersion >= 2 &&\n                isReadyToPayRequest.existingPaymentMethodRequired) {\n              // For apiVersion 2, we always use native to only check for\n              // tokenized cards.\n              // For tokenized cards native always does a presence check so\n              // we can say that if canMakePayment is true for native for\n              // tokenizedCards then the user has a payment method which is\n              // present.\n              response['paymentMethodPresent'] = result;\n            }\n            resolve(response);\n          })\n          .catch(function(err) {\n            if (window.sessionStorage.getItem(\n                    Constants.IS_READY_TO_PAY_RESULT_KEY)) {\n              resolve({\n                'result': window.sessionStorage.getItem(\n                              Constants.IS_READY_TO_PAY_RESULT_KEY) == 'true'\n              });\n            } else {\n              resolve({'result': false});\n            }\n          });\n    });\n  }\n\n  /** @override */\n  prefetchPaymentData(paymentDataRequest) {\n    // Creating PaymentRequest instance will call\n    // Gcore isReadyToPay internally which will prefetch tempaltes.\n    this.createPaymentRequest_(\n        paymentDataRequest, this.environment_,\n        paymentDataRequest.transactionInfo.currencyCode,\n        paymentDataRequest.transactionInfo.totalPrice);\n  }\n\n  /** @override */\n  loadPaymentData(paymentDataRequest) {\n    this.loadPaymentDataThroughPaymentRequest_(paymentDataRequest);\n  }\n\n  /**\n   * Create PaymentRequest instance.\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request The necessary information to check if user is\n   *     ready to pay or to support a payment from merchants.\n   * @param {?string=} environment (optional)\n   * @param {?string=} currencyCode (optional)\n   * @param {?string=} totalPrice (optional)\n   * @return {!PaymentRequest} PaymentRequest instance.\n   * @private\n   */\n  createPaymentRequest_(request, environment, currencyCode, totalPrice) {\n    let data = {};\n    if (request) {\n      data = JSON.parse(JSON.stringify(request));\n    }\n\n    // Only set the apiVersion if the merchant doesn't set it.\n    if (!data['apiVersion']) {\n      data['apiVersion'] = 1;\n    }\n\n    // Add allowedPaymentMethods for swg to get through gms core validation.\n    if (data['swg']) {\n      data['allowedPaymentMethods'] = [Constants.PaymentMethod.CARD];\n    }\n\n    if (environment && environment == Constants.Environment.TEST) {\n      data['environment'] = environment;\n    }\n\n    const supportedInstruments = [{\n      'supportedMethods': ['https://google.com/pay'],\n      'data': data,\n    }];\n\n    const details = {\n      'total': {\n        'label': 'Estimated Total Price',\n        'amount': {\n          // currency and value are required fields in PaymentRequest, but these\n          // fields will never be used since PaymentRequest UI is skipped when\n          // we're the only payment method, so default to some value to by pass\n          // this requirement.\n          'currency': currencyCode || 'USD',\n          'value': totalPrice || '0',\n        }\n      }\n    };\n\n    return new PaymentRequest(supportedInstruments, details);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @private\n   */\n  loadPaymentDataThroughPaymentRequest_(paymentDataRequest) {\n    const currencyCode = (paymentDataRequest.transactionInfo &&\n                          paymentDataRequest.transactionInfo.currencyCode) ||\n        undefined;\n    const totalPrice = (paymentDataRequest.transactionInfo &&\n                        paymentDataRequest.transactionInfo.totalPrice) ||\n        undefined;\n    const paymentRequest = this.createPaymentRequest_(\n        paymentDataRequest, this.environment_, currencyCode, totalPrice);\n    this.callback_(\n        /** @type{!Promise<!PaymentData>} */\n        (paymentRequest.show()\n             .then(\n                 /**\n                  * @param {!PaymentResponse} paymentResponse\n                  * @return {!PaymentData}\n                  */\n                 (paymentResponse) => {\n                   // Should be called to dismiss any remaining UI\n                   paymentResponse.complete('success');\n                   return paymentResponse.details;\n                 })\n             .catch(function(err) {\n               err['statusCode'] = Constants.ResponseStatus.CANCELED;\n               throw err;\n             })));\n  }\n}\n\nexport {PaymentsRequestDelegate};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {Graypane} from './graypane.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\nimport {ActivityPort, ActivityPorts, ActivityIframePort} from 'web-activities/activity-ports';\nimport {BuyFlowActivityMode, PayFrameHelper, PostMessageEventType} from './pay_frame_helper.js';\nimport {doesMerchantSupportOnlyTokenizedCards} from './validator.js';\nimport {injectStyleSheet, injectIframe} from './element_injector.js';\n\nconst GPAY_ACTIVITY_REQUEST = 'GPAY';\nconst IFRAME_CLOSE_DURATION_IN_MS = 250;\nconst IFRAME_SHOW_UP_DURATION_IN_MS = 250;\nconst IFRAME_SMOOTH_HEIGHT_TRANSITION =\n    `height ${IFRAME_SHOW_UP_DURATION_IN_MS}ms`;\nconst ERROR_PREFIX = 'Error: ';\n\n/**\n * Supported browser user agent keys.\n *\n * @enum {string}\n */\nconst BrowserUserAgent = {\n  CHROME: 'Chrome',\n  FIREFOX: 'Firefox',\n  SAFARI: 'Safari',\n};\n\n\n/**\n * Resizing payload including resize height and transition style.\n *\n * @typedef {{\n *   height: string,\n *   transition: string,\n * }}\n */\nlet ResizePayload;\n\n\n/**\n * An implementation of PaymentsClientDelegateInterface that uses the custom\n * hosting page along with web activities to actually get to the hosting page.\n * @implements {PaymentsClientDelegateInterface}\n */\nclass PaymentsWebActivityDelegate {\n  /**\n   * @param {string} environment\n   * @param {string} googleTransactionId\n   * @param {boolean=} opt_useIframe\n   * @param {!ActivityPorts=} opt_activities Can be used to provide a shared\n   *   activities manager. By default, the new manager is created.\n   * @param {?string=} opt_redirectKey The redirect key used for redirect mode.\n   */\n  constructor(environment, googleTransactionId, opt_useIframe,\n             opt_activities, opt_redirectKey) {\n    this.environment_ = environment;\n    /** @private @const {boolean} */\n    \n    /** @const {!ActivityPorts} */\n    this.activities = opt_activities || new ActivityPorts(window);\n    /** @const @private {!Graypane} */\n    this.graypane_ = new Graypane(window.document);\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.callback_ = null;\n    /**\n     * @private {?{\n     *             container: !Element,\n     *             iframe:!HTMLIFrameElement,\n     *             request:!PaymentDataRequest,\n     *             dataPromise:?Promise<!PaymentData>}}\n     */\n    this.prefetchedObjects_ = null;\n    /** @private {boolean} */\n    this.shouldHandleResizing_ = false;\n    /** @private {?ActivityIframePort} */\n    this.port_ = null;\n    /** @private {?function(!Promise<void>)} */\n    this.dismissPromiseResolver_ = null;\n    /** @const @private {string} */\n    this.googleTransactionId_ = googleTransactionId;\n    /** @const @private {?string} */\n    this.redirectKey_ = opt_redirectKey || null;\n\n    /**\n     * @private {?ResizePayload}\n     */\n    this.savedResizePayload_ = null;\n\n    // Only install dialog styles when iframing is allowed.\n    if (null) {\n      injectStyleSheet(Constants.IFRAME_STYLE);\n      if (null) {\n        injectStyleSheet(Constants.IFRAME_STYLE_CENTER);\n      }\n    }\n  }\n\n  /** @override */\n  onResult(callback) {\n    if (this.callback_) {\n      return;\n    }\n    this.callback_ = callback;\n    this.activities.onResult(GPAY_ACTIVITY_REQUEST,\n                             this.onActivityResult_.bind(this));\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @private\n   */\n  onActivityResult_(port) {\n    // Hide the graypane.\n    this.graypane_.hide();\n    // Only verified origins are allowed.\n    this.callback_(port.acceptResult().then(\n        (result) => {\n          // Origin must always match: popup, iframe or redirect.\n          if (result.origin != this.getOrigin_()) {\n            throw new Error('channel mismatch');\n          }\n          const data = /** @type {!PaymentData} */ (result.data);\n          if (data['redirectEncryptedCallbackData']) {\n            PayFrameHelper.setBuyFlowActivityMode(\n                BuyFlowActivityMode.REDIRECT);\n            return this.fetchRedirectResponse_(\n                data['redirectEncryptedCallbackData'])\n                .then((decrypedJson) => {\n                  // Merge other non-encrypted fields into the final response.\n                  const clone = Object.assign({}, data);\n                  delete clone['redirectEncryptedCallbackData'];\n                  return Object.assign(clone, decrypedJson);\n                });\n          }\n          // Unencrypted data supplied: must be a verified and secure channel.\n          if (!result.originVerified || !result.secureChannel) {\n            throw new Error('channel mismatch');\n          }\n          return data;\n        },\n        (error) => {\n          // TODO: Log the original and the inferred error to eye3.\n          let originalError = error['message'];\n          let inferredError = error['message'];\n          try {\n            // Try to parse the error message to a structured error, if it's\n            // not possible, fallback to use the error message string.\n            inferredError =\n                JSON.parse(originalError.substring(ERROR_PREFIX.length));\n          } catch (e) {\n          }\n          if (inferredError['statusCode'] && [\n                'DEVELOPER_ERROR', 'MERCHANT_ACCOUNT_ERROR'\n              ].indexOf(inferredError['statusCode']) == -1) {\n            inferredError = {\n              'statusCode': 'CANCELED',\n            };\n          }\n          if (inferredError == 'AbortError') {\n            inferredError = {\n              'statusCode': 'CANCELED',\n            };\n          }\n          return Promise.reject(inferredError);\n        }));\n  }\n\n  /**\n   * @param {string} redirectEncryptedCallbackData\n   * @return {!PaymentData}\n   * @private\n   */\n  fetchRedirectResponse_(redirectEncryptedCallbackData) {\n    // This method has to rely on the legacy XHR API because the redirect\n    // functionality is, in part, aimed at older browsers.\n    return new Promise((resolve, reject) => {\n      const url = this.getDecryptionUrl_();\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', url, true);\n      if ('withCredentials' in xhr) {\n        // It's fine to proceed in a non-redirect mode because redirectVerifier\n        // plays the part of CORS propagation.\n        xhr.withCredentials = true;\n      }\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n          return;\n        }\n        if (xhr.status < 100 || xhr.status > 599) {\n          xhr.onreadystatechange = null;\n          reject(new Error(`Unknown HTTP status ${xhr.status}`));\n          return;\n        }\n        if (xhr.readyState == /* COMPLETE */ 4) {\n          try {\n            resolve(JSON.parse(xhr.responseText));\n          } catch (e) {\n            // JSON parsing error is expected here.\n            reject(e);\n          }\n        }\n      };\n      xhr.onerror = () => {\n        reject(new Error('Network failure'));\n      };\n      xhr.onabort = () => {\n        reject(new Error('Request aborted'));\n      };\n\n      // Send POST.\n      xhr.send(redirectEncryptedCallbackData);\n    });\n  }\n\n  /** @override */\n  isReadyToPay(isReadyToPayRequest) {\n    return new Promise((resolve, reject) => {\n      if (doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest)) {\n        resolve({'result': false});\n        return;\n      }\n      const userAgent = window.navigator.userAgent;\n      const isIosGsa = userAgent.indexOf('GSA/') > 0 &&\n          userAgent.indexOf(BrowserUserAgent.SAFARI) > 0;\n      // pop up in IGSA doesn't work.\n      if (isIosGsa && !null) {\n        resolve({'result': false});\n        return;\n      }\n      const isFirefoxIos = userAgent.indexOf('FxiOS') > 0;\n      if (isFirefoxIos) {\n        resolve({'result': false});\n        return;\n      }\n      const isSupported = userAgent.indexOf(BrowserUserAgent.CHROME) > 0 ||\n          userAgent.indexOf(BrowserUserAgent.FIREFOX) > 0 ||\n          userAgent.indexOf(BrowserUserAgent.SAFARI) > 0;\n      if (isSupported && isReadyToPayRequest.apiVersion >= 2 &&\n          isReadyToPayRequest.existingPaymentMethodRequired) {\n        isReadyToPayRequest.environment = this.environment_;\n        PayFrameHelper.sendAndWaitForResponse(\n            isReadyToPayRequest, PostMessageEventType.IS_READY_TO_PAY,\n            'isReadyToPayResponse', function(event) {\n              const response = {\n                'result': isSupported,\n              };\n              if (isReadyToPayRequest.existingPaymentMethodRequired) {\n                response['paymentMethodPresent'] =\n                    event.data['isReadyToPayResponse'] == 'READY_TO_PAY';\n              }\n              resolve(response);\n            });\n      } else {\n        resolve({'result': isSupported});\n      }\n    });\n  }\n\n  /** @override */\n  prefetchPaymentData(paymentDataRequest) {\n    // Only handles prefetch for iframe for now.\n    if (!null) {\n      return;\n    }\n    const containerAndFrame = this.injectIframe_(paymentDataRequest);\n    const paymentDataPromise = this.openIframe_(\n        containerAndFrame['container'], containerAndFrame['iframe'],\n        paymentDataRequest);\n    this.prefetchedObjects_ = {\n      'container': containerAndFrame['container'],\n      'iframe': containerAndFrame['iframe'],\n      'request': paymentDataRequest,\n      'dataPromise': paymentDataPromise,\n    };\n  }\n\n  /** @override */\n  loadPaymentData(paymentDataRequest) {\n    if (!paymentDataRequest.swg) {\n      // Only set the apiVersion if the merchant is not setting it.\n      if (!paymentDataRequest.apiVersion) {\n        paymentDataRequest.apiVersion = 1;\n      }\n    }\n    paymentDataRequest.environment = this.environment_;\n    if (null) {\n      PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.IFRAME);\n      // TODO: Compare the request with prefetched request.\n      let containerAndFrame;\n      let paymentDataPromise;\n      if (this.prefetchedObjects_) {\n        // Rendering prefetched frame and container.\n        containerAndFrame = this.prefetchedObjects_;\n        paymentDataPromise = this.prefetchedObjects_['dataPromise'];\n        this.prefetchedObjects_ = null;\n      } else {\n        containerAndFrame = this.injectIframe_(paymentDataRequest);\n        paymentDataPromise = this.openIframe_(\n            containerAndFrame['container'], containerAndFrame['iframe'],\n            paymentDataRequest);\n      }\n      this.showContainerAndIframeWithAnimation_(\n          containerAndFrame['container'], containerAndFrame['iframe'],\n          paymentDataRequest);\n      history.pushState({}, '', '');\n      const onPopState = (e) => {\n        e.preventDefault();\n        this.backButtonHandler_(containerAndFrame);\n        window.removeEventListener('popstate', onPopState);\n      };\n      window.addEventListener('popstate', onPopState);\n      const dismissPromise = new Promise(resolve => {\n        this.dismissPromiseResolver_ = resolve;\n      });\n      this.callback_(Promise.race([paymentDataPromise, dismissPromise]));\n      return;\n    }\n    PayFrameHelper.setBuyFlowActivityMode(\n        paymentDataRequest['forceRedirect'] ? BuyFlowActivityMode.REDIRECT :\n                                              BuyFlowActivityMode.POPUP);\n    const opener = this.activities.open(\n        GPAY_ACTIVITY_REQUEST, this.getHostingPageUrl_(),\n        this.getRenderMode_(paymentDataRequest), paymentDataRequest,\n        {'width': 600, 'height': 600});\n    this.graypane_.show(opener && opener.targetWin);\n  }\n\n  /**\n   * Returns the render mode whether need to force redirect.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {string}\n   * @private\n   */\n  getRenderMode_(paymentDataRequest) {\n    return paymentDataRequest['forceRedirect'] ?\n        '_top' :\n        'gp-js-popup';\n  }\n\n  /**\n   * Returns the server origin based on the environment.\n   *\n   * @private\n   * @return {string}\n   */\n  getOrigin_() {\n    if (this.environment_ == Constants.Environment.LOCAL) {\n      return '';\n    }\n\n    var baseDomain;\n    if (this.environment_ == Constants.Environment.PREPROD) {\n      baseDomain = 'pay-preprod.sandbox';\n    } else if (this.environment_ == Constants.Environment.SANDBOX) {\n      baseDomain = 'pay.sandbox';\n    } else {\n      baseDomain = 'pay';\n    }\n    return 'https://' + baseDomain + '.google.com';\n  }\n\n  /**\n   * Returns the base path based on the environment.\n   *\n   * @private\n   * @return {string} The base path\n   */\n  getBasePath_() {\n    return this.getOrigin_() + '/gp/p';\n  }\n\n  /**\n   * Returns the decryption url to be used to decrypt the encrypted payload.\n   *\n   * @private\n   * @return {string} The decryption url\n   */\n  getDecryptionUrl_() {\n    let url = this.getBasePath_() + '/apis/buyflow/process';\n    if (this.redirectKey_) {\n      url += '?rk=' + encodeURIComponent(this.redirectKey_);\n    }\n    return url;\n  }\n\n  /**\n   * Returns the hosting page url.\n   *\n   * @private\n   * @return {string} The hosting page url\n   */\n  getHostingPageUrl_() {\n    // In Tin tests, the hosting page is requested from\n    // /testing/buyflow/merchantdemo.html and is accessed relatively since the\n    // base path is unknown ahead of time.\n    if (this.environment_ == Constants.Environment.TIN) {\n      // There is no /gp/p prefix since multilogin prefixes is broken in Tin:\n      // http://yaqs/4912322941550592\n      return '/ui/pay';\n    }\n    return this.getBasePath_() + '/ui/pay';\n  }\n\n  /**\n   * Returns the iframe pwg url to be used to be used for amp.\n   *\n   * @param {string} environment\n   * @param {string} origin\n   * @return {string} The iframe url\n   */\n  getIframeUrl(environment, origin) {\n    // TODO: These should be compile time constants and not dependent\n    // on the environment.\n    let iframeUrl = `https://pay.google.com/gp/p/ui/pay?origin=${origin}`;\n    if (environment == Constants.Environment.SANDBOX ||\n        environment == Constants.Environment.PREPROD) {\n      iframeUrl =   `https://pay'+  (environment == Constants.Environment.PREPROD ? '-preprod' : '')+  '.sandbox.google.com/gp/p/ui/pay?origin=${origin}`;\n    }\n    return iframeUrl;\n  }\n\n  /**\n   * Close iframe with animation.\n   *\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @private\n   */\n  removeIframeAndContainer_(container, iframe) {\n    const transitionStyle = 'all ' + IFRAME_CLOSE_DURATION_IN_MS + 'ms ease 0s';\n    this.setTransition_(iframe, transitionStyle);\n    iframe.height = '0px';\n    // TODO: This should be replaced by listening to TransitionEnd event\n    setTimeout(() => {\n      if (container.parentNode) {\n        container.parentNode.removeChild(container);\n      }\n    }, IFRAME_CLOSE_DURATION_IN_MS);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {{container: !Element, iframe:!HTMLIFrameElement}}\n   * @private\n   */\n  injectIframe_(paymentDataRequest) {\n    const containerAndFrame = injectIframe(\n        this.isVerticalCenterExperimentEnabled_(paymentDataRequest) ?\n            Constants.IFRAME_STYLE_CENTER_CLASS :\n            Constants.IFRAME_STYLE_CLASS);\n    const iframe = containerAndFrame['iframe'];\n    const container = containerAndFrame['container'];\n    container.addEventListener(\n        'click', this.closeActionHandler_.bind(this, containerAndFrame));\n    // Hide iframe and disable resize at initialize.\n    container.style.display = 'none';\n    iframe.style.display = 'none';\n    iframe.height = '0px';\n    const transitionStyle =\n        'all ' + IFRAME_SHOW_UP_DURATION_IN_MS + 'ms ease 0s';\n    this.setTransition_(iframe, transitionStyle);\n    this.shouldHandleResizing_ = false;\n    return containerAndFrame;\n  }\n\n  /**\n   * Handler when back button is triggered, should dismiss iframe if present.\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  backButtonHandler_(containerAndFrame) {\n    this.dismissIframe_(containerAndFrame);\n  }\n\n  /**\n   * Handler when close action is triggered, will pop history state to close\n   * the iframe.\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  closeActionHandler_(containerAndFrame) {\n    if (containerAndFrame['container'].parentNode) {\n      // Close action only when container is still attached to the page.\n      history.back();\n    }\n  }\n\n  /**\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  dismissIframe_(containerAndFrame) {\n    // Dismiss iframe only when container is still attached in the page.\n    if (containerAndFrame['container'].parentNode) {\n      // TODO: Think about whether this could be just hide instead of\n      // disconnect and remove, the tricky part is how to handle the case where\n      // payment data request is not the same.\n      this.dismissPromiseResolver_(Promise.reject({'errorCode': 'CANCELED'}));\n      this.removeIframeAndContainer_(\n          containerAndFrame['container'], containerAndFrame['iframe']);\n      this.port_ && this.port_.disconnect();\n    }\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {boolean}\n   * @private\n   */\n  isVerticalCenterExperimentEnabled_(paymentDataRequest) {\n    return null\n        && paymentDataRequest['i']\n        && paymentDataRequest['i'].renderContainerCenter;\n  }\n\n  /**\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @private\n   */\n  showContainerAndIframeWithAnimation_(container, iframe, paymentDataRequest) {\n    container.style.display = 'block';\n    iframe.style.display = 'block';\n    setTimeout(() => {\n      // Hard code the apprx height here, it will be resize to expected height\n      // later.\n      iframe.height = '280px';\n      if (this.isVerticalCenterExperimentEnabled_(paymentDataRequest)) {\n        iframe.classList.add(Constants.IFRAME_ACTIVE_CONTAINER_CLASS);\n      }\n      // TODO: This should be handles properly by listening to\n      // TransitionEnd event.\n      setTimeout(() => {\n        this.shouldHandleResizing_ = true;\n        // TODO: Add browser test that catches this.\n        if (this.savedResizePayload_) {\n          this.setTransition_(iframe, this.savedResizePayload_['transition']);\n          iframe.height = this.savedResizePayload_['height'];\n          this.savedResizePayload_ = null;\n        }\n      }, IFRAME_SHOW_UP_DURATION_IN_MS);\n    }, 1);\n  }\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} transitionStyle\n   * @private\n   */\n  setTransition_(iframe, transitionStyle) {\n    iframe.style.setProperty('transition', transitionStyle);\n    // For safari.\n    iframe.style.setProperty('-webkit-transition', transitionStyle);\n  }\n\n  /**\n   * Use WebActivitiy to open iframe that's in given container.\n   *\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {!Promise<!PaymentData>}\n   * @private\n   */\n  openIframe_(container, iframe, paymentDataRequest) {\n    if (!paymentDataRequest.swg) {\n      if (!paymentDataRequest.apiVersion) {\n        paymentDataRequest.apiVersion = 1;\n      }\n    }\n    paymentDataRequest.environment = this.environment_;\n    let iframeLoadStartTime;\n    const trustedUrl =\n        this.getIframeUrl(this.environment_, window.location.origin);\n    return this.activities.openIframe(iframe, trustedUrl, paymentDataRequest)\n        .then(port => {\n          // Handle custom resize message.\n          this.port_ = port;\n          port.onMessage(payload => {\n            if (payload['type'] !== 'resize' || !this.shouldHandleResizing_) {\n              // Save the resize event later after initial animation is finished\n              this.savedResizePayload_ = {\n                'height': payload['height'],\n                'transition': payload['transition']\n              };\n              return;\n            }\n            // b/111310899: Smooth out initial iFrame loading\n            if (!iframeLoadStartTime) {\n              iframeLoadStartTime = Date.now();\n            }\n            if (Date.now() <\n                iframeLoadStartTime + IFRAME_SHOW_UP_DURATION_IN_MS) {\n              this.setTransition_(iframe, payload['transition'] + ', '\n                  + IFRAME_SMOOTH_HEIGHT_TRANSITION);\n            } else {\n              this.setTransition_(iframe, payload['transition']);\n            }\n            iframe.height = payload['height'];\n          });\n          return /** @type {!Promise<!Object>} */ (port.acceptResult());\n        })\n        .then(\n            /**\n             * @param {!Object} result\n             * @return {!PaymentData}\n             */\n            result => {\n              this.removeIframeAndContainer_(container, iframe);\n              // This is only for popping the state we pushed earlier.\n              history.back();\n              const data = /** @type {!PaymentData} */ (result['data']);\n              return data;\n            },\n            error => {\n              this.removeIframeAndContainer_(container, iframe);\n              // This is only for popping the state we pushed earlier.\n              history.back();\n              return Promise.reject(error);\n            });\n  }\n}\n\nexport {PaymentsWebActivityDelegate};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Service wrapping window.parent.postMessage. This enables\n * window.postMessage to be swapped out in unit tests.\n */\nclass PostMessageService {\n  constructor(window) {\n    /** @private @const {!Window} */\n    this.window_ = window;\n  }\n\n  /**\n   * Passthrough to Window#postMessage. See Window#postMessage DOM API\n   * documentation for more information about arguments.\n   *\n   * @param {!Object} message\n   * @param {string} targetOrigin\n   */\n  postMessage(message, targetOrigin) {\n    this.window_.postMessage(message, targetOrigin);\n  }\n}\n\nexport {PostMessageService};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PublicErrorCode} from './pay_frame_helper.js';\nimport {getUpiPaymentMethod} from './validator.js';\n\nclass UpiHandler {\n  constructor() {}\n\n  /**\n   * Returns upi payment method object if it exists in allowed payment methods\n   * or null if it doesn't\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n   * @return {boolean}\n   */\n  isUpiRequest(request) {\n    return !!getUpiPaymentMethod(request);\n  }\n\n  /**\n   * Returns upi payment method object if it exists in allowed payment methods\n   * or null if it doesn't\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   */\n  isReadyToPay(request) {\n    // Always return true for UPI if api version is 2 and chrome supports\n    // payment request\n    if (getUpiPaymentMethod(request)) {\n      if (request.existingPaymentMethodRequired) {\n        return Promise.resolve({'result': true, 'paymentMethodPresent': true});\n      } else {\n        return Promise.resolve({'result': true});\n      }\n    }\n    throw new Error('No Upi payment method found in handler');\n  }\n\n  /**\n   * Request payment data when payment method is UPI\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @param {!Object} upiPaymentMethod UPI paymentmethod in\n   *     allowedPaymentMethods array.\n   * @param {!Function} onResultCallback Function to call when everything is\n   *     done.\n   */\n  loadPaymentData(paymentDataRequest, upiPaymentMethod, onResultCallback) {\n    const parameters = upiPaymentMethod['parameters'];\n    const transactionInfo = paymentDataRequest['transactionInfo'];\n    const supportedInstruments = null ?\n        [{\n          // This is the url for Tez teamfood release.\n          'supportedMethods': ['https://pwp-server.appspot.com/pay-teamfood'],\n          'data': {\n            'pa': 'redbus@axisbank',\n            'pn': parameters['payeeName'],\n            'tr': parameters['transactionReferenceId'],\n            'url': parameters['referenceUrl'],\n            'mc': '4131',\n            'tn': 'Purchase in Merchant',\n          },\n        }] :\n        [{\n          'supportedMethods': ['https://tez.google.com/pay'],\n          'data': {\n            'pa': parameters['payeeVpa'],\n            'pn': parameters['payeeName'],\n            'tr': parameters['transactionReferenceId'],\n            'url': parameters['referenceUrl'],\n            'mc': parameters['mcc'],\n            'tn': transactionInfo['transactionNote'],\n          },\n        }];\n\n    if (parameters['transactionId']) {\n      supportedInstruments[0]['data']['tid'] = parameters['transactionId'];\n    }\n\n    const details = {\n      'total': {\n        'label': 'Total',\n        'amount': {\n          'currency': transactionInfo['currencyCode'],\n          'value': transactionInfo['totalPrice'],\n        },\n      },\n      'displayItems': [{\n        'label': 'Original Amount',\n        'amount': {\n          'currency': transactionInfo['currencyCode'],\n          'value': transactionInfo['totalPrice'],\n        },\n      }],\n    };\n\n    let request = new PaymentRequest(supportedInstruments, details);\n\n    onResultCallback(\n        this.checkCanMakePayment_(request)\n            .then(result => {\n              if (result) {\n                return this.showUi_(request);\n              } else {\n                return this.redirectToGooglePlay_();\n              }\n            })\n            .then(paymentData => {\n              return this.processData_(\n                  paymentData, paymentDataRequest, upiPaymentMethod);\n            })\n            .catch(error => {\n              error['statusCode'] = Constants.ResponseStatus.CANCELED;\n              return Promise.reject(error);\n            }));\n  }\n\n  /**\n   * Show the Tez payment request UI.\n   *\n   * @private\n   * @param {!PaymentRequest} request The payment request object.\n   * @return {!Promise<!PaymentData>} A promise containing payment response.\n   */\n  showUi_(request) {\n    return request.show().then(paymentResponse => {\n      paymentResponse.complete('success');\n      return paymentResponse.details;\n    });\n  }\n\n  /**\n   * Checks whether can make a payment with Tez on this device.\n   *\n   * @private\n   * @param {!PaymentRequest} request The payment request object.\n   * @return {!Promise<boolean>} a promise containing the result of whether can\n   *     make payment.\n   */\n  checkCanMakePayment_(request) {\n    // Checks canMakePayment cache, and use the cache result if it exists.\n    const cacheResult =\n        window.sessionStorage.getItem(Constants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY);\n    if (cacheResult) {\n      return Promise.resolve(cacheResult === 'true');\n    }\n\n    // Feature detect canMakePayment().\n    if (!request.canMakePayment) {\n      return Promise.resolve(true);\n    }\n\n    let canMakePaymentPromise = request.canMakePayment();\n\n    return canMakePaymentPromise.then(result => {\n      // Store the result in cache if the result is true to avoid quota error\n      // caused by querying multiple times with different data.\n      // Doesn't store false because if we do so, user will be redirected to\n      // Google Play again after installing Google Pay if Chrome is not closed.\n      if (result) {\n        window.sessionStorage.setItem(\n            Constants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY, result.toString());\n      }\n      return result;\n    });\n  }\n\n  /**\n   * Redirect user to Google Pay app in Google Play store\n   *\n   * @private\n   * @returns {!Promise<!Object>} Rejected promise with error message\n   */\n  redirectToGooglePlay_() {\n    window.location.replace(\n        null ?\n            'https://play.google.com/store/apps/details?id=com.google.android.apps.nbu.paisa.user.teamfood ' :  // NOLINT\n            'https://play.google.com/store/apps/details?id=com.google.android.apps.nbu.paisa.user');  // NOLINT\n    return Promise.reject(\n        {'errorMessage': 'Cannot redirect to Tez page in Google Play.'});\n  }\n\n  /**\n   * Convert Tez payment data to GPay payment data if payment succeeded, or\n   * reject if payment failed\n   *\n   * @private\n   * @param {!PaymentData} tezPaymentData The payment data object from Tez.\n   * @param {!PaymentDataRequest} paymentDataRequest The payment data request.\n   * @param {!Object} upiPaymentMethod UPI paymentmethod in\n   * allowedPaymentMethods array\n   * @returns {!Promise<PaymentData>} A promise containing payment data or\n   *     error message.\n   */\n  processData_(tezPaymentData, paymentDataRequest, upiPaymentMethod) {\n    const tezResponse = JSON.parse(tezPaymentData['tezResponse']);\n    if (tezResponse['Status'] === 'FAILURE') {\n      let error;\n      switch (tezResponse['responseCode']) {\n        case 'ZM':\n          // payment failure due to invalid MPIN\n          error = {\n            'errorCode': PublicErrorCode.BUYER_ACCOUNT_ERROR,\n            'errorMessage': 'Payment failure due to invalid MPIN.'\n          };\n          break;\n        case 'Z9':\n          // payment failure due to insufficient funds\n          error = {\n            'errorCode': PublicErrorCode.BUYER_ACCOUNT_ERROR,\n            'errorMessage': 'Payment failure due to insufficient funds.'\n          };\n          break;\n        case '91':\n          // payment failure due to transaction timeout or connection issue\n          error = {\n            'errorCode': PublicErrorCode.INTERNAL_ERROR,\n            'errorMessage':\n                'Payment failure due to transaction timeout or connection' +\n                ' issue.'\n          };\n          break;\n        default:\n          // payment failure due to user cancel or other issues\n          error = {'errorMessage': 'Payment cancelled.'};\n      }\n      return Promise.reject(error);\n    }\n\n    const signedMessage = {\n      'paymentMethodType': 'UPI',\n      'payeeVpa': upiPaymentMethod['parameters']['payeeVpa'],\n      'status': tezResponse['Status'],\n      'transactionReferenceId':\n          upiPaymentMethod['parameters']['transactionReferenceId'],\n      'transactionId': upiPaymentMethod['parameters']['transactionId'] ?\n          upiPaymentMethod['parameters']['transactionId'] :\n          tezResponse['txnId'],\n      'transactionInfo': paymentDataRequest['transactionInfo'],\n    };\n\n    let paymentData = {\n      'apiVersion': paymentDataRequest['apiVersion'],\n      'apiVersionMinor': paymentDataRequest['apiVersionMinor'],\n      'paymentMethodData': {\n        'type': upiPaymentMethod['type'],\n        'tokenizationData': {\n          'type': 'DIRECT',\n          'token': {\n            'protocolVersion': 'ECv1',\n            // TODO: Verify that response comes from tez and\n            // add signature and encrypt signed message here\n            'signature': '',\n            'signedMessage': signedMessage\n          }\n        }\n      }\n    };\n    return Promise.resolve(paymentData);\n  }\n}\n\nexport {UpiHandler};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport uuid from '../third_party/random_uuid/Random.uuid.js';\n\n/**\n * Returns a google transaction id.\n *\n * @param {string} environment\n * @return {string}\n */\nfunction createGoogleTransactionId(environment) {\n  return uuid.uuidFast() + '.' + environment;\n}\n\nexport {createGoogleTransactionId};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\n/**\n * @return {boolean} true if this version of Chrome supports PaymentHandler.\n */\nfunction chromeSupportsPaymentHandler() {\n  // Check if feature is enabled for user\n  if (typeof google == 'undefined' ||\n      !null) {\n    return false;\n  }\n\n  // Payment handler isn't supported on mobile\n  const mobilePlatform = window.navigator.userAgent.match(\n      /Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n  if (mobilePlatform != null) {\n    return false;\n  }\n\n  const chromeVersion = window.navigator.userAgent.match(/Chrome\\/([0-9]+)\\./i);\n  return 'PaymentRequest' in window && chromeVersion != null &&\n      Number(chromeVersion[1]) >= 68 &&\n      window.navigator.vendor == 'Google Inc.';\n}\n\n/**\n * @return {boolean} true if this version of Chrome supports PaymentRequest.\n */\nfunction chromeSupportsPaymentRequest() {\n  // Opera uses chrome as rendering engine and sends almost the exact same\n  // user agent as chrome thereby fooling us on android.\n  const isOpera = window.navigator.userAgent.indexOf('OPR/') != -1;\n  if (isOpera) {\n    return false;\n  }\n  if (chromeSupportsPaymentHandler()) {\n    return true;\n  }\n\n  const androidPlatform = window.navigator.userAgent.match(/Android/i);\n  const chromeVersion = window.navigator.userAgent.match(/Chrome\\/([0-9]+)\\./i);\n  return androidPlatform != null && 'PaymentRequest' in window &&\n      // Make sure skipping PaymentRequest UI when only one PaymentMethod is\n      // supported (starts on Google Chrome 59).\n      window.navigator.vendor == 'Google Inc.' && chromeVersion != null &&\n      Number(chromeVersion[1]) >= 59;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n *\n * @return {boolean} true if the merchant only supports tokenized cards.\n */\nfunction doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest) {\n  if (isReadyToPayRequest.apiVersion >= 2) {\n    const allowedAuthMethods =\n        extractAllowedAuthMethodsForCards_(isReadyToPayRequest);\n    if (allowedAuthMethods && allowedAuthMethods.length == 1 &&\n        allowedAuthMethods[0] == Constants.AuthMethod.CRYPTOGRAM_3DS) {\n      return true;\n    }\n  }\n  return isReadyToPayRequest.allowedPaymentMethods.length == 1 &&\n      isReadyToPayRequest.allowedPaymentMethods[0] ==\n      Constants.PaymentMethod.TOKENIZED_CARD;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @param {Constants.AuthMethod} apiV2AuthMethod\n *\n * @return {boolean} true if the merchant supports pan cards.\n */\nfunction apiV2DoesMerchantSupportSpecifiedCardType(\n    isReadyToPayRequest, apiV2AuthMethod) {\n  if (isReadyToPayRequest.apiVersion >= 2) {\n    const allowedAuthMethods =\n        extractAllowedAuthMethodsForCards_(isReadyToPayRequest);\n    if (allowedAuthMethods && allowedAuthMethods.includes(apiV2AuthMethod)) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * Validate if is secure context. Returns null if context is secure, otherwise\n * return error message.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\n *\n * @return {?string} null if current context is secure, otherwise return error\n * message.\n */\nfunction validateSecureContext() {\n  if (window.location.hostname.endsWith(Constants.TRUSTED_DOMAIN)) {\n    // This is for local development.\n    return null;\n  }\n  if (window.isSecureContext === undefined) {\n    // Browser not support isSecureContext, figure out a way to validate this\n    // for the unsupported browser.\n    return null;\n  }\n  return window.isSecureContext ?\n      null :\n      'Google Pay APIs should be called in secure context!';\n}\n\n/**\n * Validate PaymentOptions.\n *\n * @param {!PaymentOptions} paymentOptions\n */\nfunction validatePaymentOptions(paymentOptions) {\n  if (paymentOptions.environment &&\n      !Object.values(Constants.Environment)\n           .includes(paymentOptions.environment)) {\n    throw new Error(\n        'Parameter environment in PaymentOptions can optionally be set to ' +\n        'PRODUCTION, otherwise it defaults to TEST.');\n  }\n}\n\n/**\n * Validate IsReadyToPayRequest.\n *\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validateIsReadyToPayRequest(isReadyToPayRequest) {\n  if (!isReadyToPayRequest) {\n    return 'isReadyToPayRequest must be set!';\n  } else if (isReadyToPayRequest.apiVersion >= 2) {\n    if (!('apiVersionMinor' in isReadyToPayRequest)) {\n      return 'apiVersionMinor must be set!';\n    }\n    if (!isReadyToPayRequest.allowedPaymentMethods ||\n        !Array.isArray(isReadyToPayRequest.allowedPaymentMethods) ||\n        isReadyToPayRequest.allowedPaymentMethods.length == 0) {\n      return 'for v2 allowedPaymentMethods must be set to an array containing a list of accepted payment methods';\n    }\n    for (var i = 0; i < isReadyToPayRequest.allowedPaymentMethods.length; i++) {\n      let allowedPaymentMethod = isReadyToPayRequest.allowedPaymentMethods[i];\n      if (allowedPaymentMethod['type'] == Constants.PaymentMethod.CARD) {\n        if (!allowedPaymentMethod['parameters']) {\n          return 'Field parameters must be setup in each allowedPaymentMethod';\n        }\n        var allowedCardNetworks =\n            allowedPaymentMethod['parameters']['allowedCardNetworks'];\n        if (!allowedCardNetworks || !Array.isArray(allowedCardNetworks) ||\n            allowedCardNetworks.length == 0) {\n          return 'allowedCardNetworks must be setup in parameters for type CARD';\n        }\n        var allowedAuthMethods =\n            allowedPaymentMethod['parameters']['allowedAuthMethods'];\n        if (!allowedAuthMethods || !Array.isArray(allowedAuthMethods) ||\n            allowedAuthMethods.length == 0 ||\n            !allowedAuthMethods.every(isAuthMethodValid)) {\n          return 'allowedAuthMethods must be setup in parameters for type \\'CARD\\' ' +\n              ' and must contain \\'CRYPTOGRAM_3DS\\' and/or \\'PAN_ONLY\\'';\n        }\n      }\n    }\n    return null;\n  } else if (\n      !isReadyToPayRequest.allowedPaymentMethods ||\n      !Array.isArray(isReadyToPayRequest.allowedPaymentMethods) ||\n      isReadyToPayRequest.allowedPaymentMethods.length == 0 ||\n      !isReadyToPayRequest.allowedPaymentMethods.every(isPaymentMethodValid)) {\n    return 'allowedPaymentMethods must be set to an array containing \\'CARD\\' ' +\n        'and/or \\'TOKENIZED_CARD\\'!';\n  }\n  return null;\n}\n\n/**\n * Validate the payment method.\n *\n * @param {string} paymentMethod\n * @return {boolean} if the current payment method is valid.\n */\nfunction isPaymentMethodValid(paymentMethod) {\n  return Object.values(Constants.PaymentMethod).includes(paymentMethod);\n}\n\n/**\n * Validate the auth method.\n *\n * @param {string} authMethod\n * @return {boolean} if the current auth method is valid.\n */\nfunction isAuthMethodValid(authMethod) {\n  return Object.values(Constants.AuthMethod).includes(authMethod);\n}\n\n/**\n * Validate PaymentDataRequest.\n *\n * @param {!PaymentDataRequest} paymentDataRequest\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validatePaymentDataRequest(paymentDataRequest) {\n  if (!paymentDataRequest) {\n    return 'paymentDataRequest must be set!';\n  }\n  if (paymentDataRequest.swg) {\n    return validatePaymentDataRequestForSwg(paymentDataRequest.swg);\n  } else if (!paymentDataRequest.transactionInfo) {\n    return 'transactionInfo must be set!';\n  } else if (!paymentDataRequest.transactionInfo.currencyCode) {\n    return 'currencyCode in transactionInfo must be set!';\n  } else if (\n      !paymentDataRequest.transactionInfo.totalPriceStatus ||\n      !Object.values(Constants.TotalPriceStatus)\n           .includes(paymentDataRequest.transactionInfo.totalPriceStatus)) {\n    return 'totalPriceStatus in transactionInfo must be set to one of' +\n        ' NOT_CURRENTLY_KNOWN, ESTIMATED or FINAL!';\n  } else if (\n      paymentDataRequest.transactionInfo.totalPriceStatus !==\n          'NOT_CURRENTLY_KNOWN' &&\n      !paymentDataRequest.transactionInfo.totalPrice) {\n    return 'totalPrice in transactionInfo must be set when' +\n        ' totalPriceStatus is ESTIMATED or FINAL!';\n  }\n\n  // Validate payment data request for UPI payment method\n  const allowedPaymentMethod = getUpiPaymentMethod(paymentDataRequest);\n  if (allowedPaymentMethod) {\n    if (!allowedPaymentMethod['parameters']) {\n      return 'parameters must be set in allowedPaymentMethod!';\n    }\n\n    var parameters = allowedPaymentMethod['parameters'];\n    if (!parameters['payeeVpa']) {\n      return 'payeeVpa in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['payeeName']) {\n      return 'payeeName in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['referenceUrl']) {\n      return 'referenceUrl in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['mcc']) {\n      return 'mcc in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['transactionReferenceId']) {\n      return 'transactionReferenceId in allowedPaymentMethod parameters' +\n          ' must be set!';\n    }\n\n    if (paymentDataRequest['transactionInfo']['currencyCode'] !== 'INR') {\n      return 'currencyCode in transactionInfo must be set to INR!';\n    } else if (\n        paymentDataRequest['transactionInfo']['totalPriceStatus'] !== 'FINAL') {\n      return 'totalPriceStatus in transactionInfo must be set to FINAL!';\n    } else if (!paymentDataRequest['transactionInfo']['transactionNote']) {\n      return 'transactionNote in transactionInfo must be set!';\n    }\n  }\n  return null;\n}\n\n/**\n * Returns upi payment method object if it exists in allowed payment methods\n * or null if it doesn't\n *\n * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n * @return {?Object}\n */\nfunction getUpiPaymentMethod(request) {\n  if (!chromeSupportsPaymentRequest() || request.apiVersion < 2 ||\n      !request.allowedPaymentMethods) {\n    return null;\n  }\n  return getAllowedPaymentMethodForType_(request, Constants.PaymentMethod.UPI);\n}\n\n/**\n * Validate parameters for swg.\n *\n * @param {?SwgParameters} swgParameters\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validatePaymentDataRequestForSwg(swgParameters) {\n  if (!swgParameters) {\n    return 'Swg parameters must be provided';\n  }\n  if (!swgParameters.skuId || !swgParameters.publicationId) {\n    return 'Both skuId and publicationId must be provided';\n  }\n  return null;\n}\n\n/**\n * Returns the allowedAuthMethods for a card from the request.\n *\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @return {?Array<string>}\n * @private\n */\nfunction extractAllowedAuthMethodsForCards_(isReadyToPayRequest) {\n  if (isReadyToPayRequest.allowedPaymentMethods) {\n    const allowedPaymentMethod = getAllowedPaymentMethodForType_(\n        isReadyToPayRequest, Constants.PaymentMethod.CARD);\n    if (allowedPaymentMethod && allowedPaymentMethod.parameters) {\n      return allowedPaymentMethod.parameters['allowedAuthMethods'];\n    }\n  }\n  return null;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @param {string} paymentMethodType\n * @return {?PaymentMethod} Return first payment method for the given type,\n *     return null if not found.\n * @private\n */\nfunction getAllowedPaymentMethodForType_(\n    isReadyToPayRequest, paymentMethodType) {\n  for (var i = 0; i < isReadyToPayRequest.allowedPaymentMethods.length; i++) {\n    const allowedPaymentMethod = isReadyToPayRequest.allowedPaymentMethods[i];\n    if (allowedPaymentMethod.type == paymentMethodType) {\n      return allowedPaymentMethod;\n    }\n  }\n  return null;\n}\n\nexport {\n  apiV2DoesMerchantSupportSpecifiedCardType,\n  chromeSupportsPaymentHandler,\n  chromeSupportsPaymentRequest,\n  doesMerchantSupportOnlyTokenizedCards,\n  getUpiPaymentMethod,\n  isPaymentMethodValid,\n  validateIsReadyToPayRequest,\n  validatePaymentOptions,\n  validatePaymentDataRequest,\n  validateSecureContext\n};\n","/** @license\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   \"VcydxgltxrVZSTV\"\n *\n *   // Two arguments - returns ID of the specified length, and radix. (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   \"01001010\"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   \"47473046\"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   \"098F4D35\"\n */\n\nexport default class Random_uuid {};\n  // Private array of chars to use\n  var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n  Random_uuid.uuid = function (len, radix) {\n    var chars = CHARS, uuid = [], i;\n    radix = radix || chars.length;\n\n    if (len) {\n      // Compact form\n      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      // rfc4122, version 4 form\n      var r;\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      for (i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n  };\n\n  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\n  // by minimizing calls to random()\n  Random_uuid.uuidFast = function() {\n    var chars = CHARS, uuid = new Array(36), rnd=0, r;\n    for (var i = 0; i < 36; i++) {\n      if (i==8 || i==13 ||  i==18 || i==23) {\n        uuid[i] = '-';\n      } else if (i==14) {\n        uuid[i] = '4';\n      } else {\n        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n        r = rnd & 0xf;\n        rnd = rnd >> 4;\n        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n      }\n    }\n    return uuid.join('');\n  };\n\n  // A more compact, but less performant, RFC4122v4 solution:\n  Random_uuid.uuidCompact = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n  };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}