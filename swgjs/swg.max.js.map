{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/css/components/dialog.css.js","build/css/ui/ui.css.js","node_modules/promise-pjs/promise.js","node_modules/web-activities/activity-ports.js","src/api/client-event-manager-api.js","src/api/deferred-account-creation.js","src/api/entitlements.js","src/api/logger-api.js","src/api/offer.js","src/api/propensity-api.js","src/api/subscribe-response.js","src/api/subscriptions.js","src/api/user-data.js","src/components/activities.js","src/components/dialog-manager.js","src/components/dialog.js","src/components/friendly-iframe.js","src/components/graypane.js","src/components/view.js","src/main.js","src/model/doc.js","src/model/page-config-resolver.js","src/model/page-config.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/object-values.js","src/polyfills/promise.js","src/proto/api_messages.js","src/runtime/analytics-service.js","src/runtime/button-api.js","src/runtime/callbacks.js","src/runtime/client-event-manager.js","src/runtime/contributions-flow.js","src/runtime/deferred-account-flow.js","src/runtime/deps.js","src/runtime/entitlements-manager.js","src/runtime/event-type-mapping.js","src/runtime/experiment-flags.js","src/runtime/experiments.js","src/runtime/fetcher.js","src/runtime/jserror.js","src/runtime/link-accounts-flow.js","src/runtime/logger.js","src/runtime/login-notification-api.js","src/runtime/login-prompt-api.js","src/runtime/offers-api.js","src/runtime/offers-flow.js","src/runtime/pay-client.js","src/runtime/pay-flow.js","src/runtime/propensity-server.js","src/runtime/propensity.js","src/runtime/runtime.js","src/runtime/services.js","src/runtime/smart-button-api.js","src/runtime/storage.js","src/runtime/wait-for-subscription-lookup-api.js","src/ui/activity-iframe-view.js","src/ui/loading-view.js","src/ui/toast.js","src/utils/activity-utils.js","src/utils/animation.js","src/utils/bytes.js","src/utils/document-ready.js","src/utils/dom.js","src/utils/errors.js","src/utils/i18n.js","src/utils/json.js","src/utils/jwt.js","src/utils/log.js","src/utils/object.js","src/utils/preconnect.js","src/utils/random.js","src/utils/string.js","src/utils/style.js","src/utils/types.js","src/utils/url.js","src/utils/xhr.js","third_party/gpay/src/constants.js","third_party/gpay/src/element_injector.js","third_party/gpay/src/graypane.js","third_party/gpay/src/pay_frame_helper.js","third_party/gpay/src/payjs_async.js","third_party/gpay/src/payments_client_delegate_interface.js","third_party/gpay/src/payments_request_delegate.js","third_party/gpay/src/payments_web_activity_delegate.js","third_party/gpay/src/post_message_service.js","third_party/gpay/src/upi_handler.js","third_party/gpay/src/utils.js","third_party/gpay/src/validator.js","third_party/gpay/third_party/random_uuid/Random.uuid.js"],"names":[],"mappings":"AAAA;;;;;;;ACAO,IAAM,GAAG,GAAG,w4BAAZ;;;;;;;;;;ACAA,IAAM,GAAG,GAAG,gzgwDA;;;;;;;;AAEA;AACO,IAAM,YAAY,GAAG;AAC1B;AACA,EAAA,aAAa,EAAE,CAFW;;AAG1B;AACA,EAAA,YAAY,EAAE;AAJY,CAArB;AAOP;;;;;;;;;;;;;;;;;;AAgBO,IAAI,WAAJ;AAEP;;;;;;IAGa,qB;;;;;;;;;;AACX;;;;;0CAKsB,Q,EAAU,CAAG;AAEnC;;;;;;;;;;0CAOsB,Q,EAAU,CAAG;AAEnC;;;;;;;;;;6BAOS,K,EAAO,CAAG;;;;;;;;;;;;;;;;ACvDrB;;AACA;;AACA;;;;;;;;AAGA;;;;;;;;;;;AAWO,IAAI,8BAAJ;AAGP;;;;;IAEa,+B;;;AAEX;;;;;;AAMA,2CAAY,YAAZ,EAA0B,QAA1B,EAAoC,gBAApC,EAAsD,eAAtD,EAAuE;AAAA;;AACrE;AACA,SAAK,YAAL,GAAoB,YAApB;AACA;;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA;;AACA,SAAK,gBAAL,GAAwB,gBAAxB,CANqE,CAOrE;;AACA;;AACA,SAAK,YAAL,GAAoB,gBAAgB,CAAC,CAAD,CAApC;AACA;;AACA,SAAK,gBAAL,GAAwB,eAAxB;AACD;AAED;;;;;;;4BAGQ;AACN,aAAO,IAAI,+BAAJ,CACH,KAAK,YADF,EAEH,KAAK,QAFF,EAGH,KAAK,gBAHF,EAIH,KAAK,gBAJF,CAAP;AAKD;AAED;;;;;;2BAGO;AACL,aAAO;AACL,wBAAgB,KAAK,YAAL,CAAkB,IAAlB,EADX;AAEL,oBAAY,KAAK,QAAL,CAAc,IAAd,EAFP;AAGL,4BAAoB,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,UAAA,EAAE;AAAA,iBAAI,EAAE,CAAC,IAAH,EAAJ;AAAA,SAA5B,CAHf;AAIL;AACA,wBAAgB,KAAK,YAAL,CAAkB,IAAlB;AALX,OAAP;AAOD;AAED;;;;;;;;;;;;;;;;+BAaW;AACT,aAAO,KAAK,gBAAL,EAAP;AACD;;;;;;;;;;;;;;;;AClFH;;;;;;;;AAEA;;;IAGa,Y;;;AACX;;;;;;;;;AASA,wBACE,OADF,EAEE,GAFF,EAGE,YAHF,EAIE,cAJF,EAKE,UALF,EAME,YANF,EAOE,oBAPF,EAQE;AAAA;;AACA;AACA,SAAK,OAAL,GAAe,OAAf;AACA;;AACA,SAAK,GAAL,GAAW,GAAX;AACA;;AACA,SAAK,YAAL,GAAoB,YAApB;AACA;;AACA,SAAK,YAAL,GAAoB,YAAY,IAAI,KAApC;AACA;;AACA,SAAK,oBAAL,GAA4B,oBAAoB,IAAI,IAApD;AAEA;;AACA,SAAK,QAAL,GAAgB,cAAhB;AACA;;AACA,SAAK,WAAL,GAAmB,UAAnB;AACD;AAED;;;;;;;4BAGQ;AACN,aAAO,IAAI,YAAJ,CACL,KAAK,OADA,EAEL,KAAK,GAFA,EAGL,KAAK,YAAL,CAAkB,GAAlB,CAAsB,UAAA,GAAG;AAAA,eAAI,GAAG,CAAC,KAAJ,EAAJ;AAAA,OAAzB,CAHK,EAIL,KAAK,QAJA,EAKL,KAAK,WALA,EAML,KAAK,YANA,EAOL,KAAK,oBAPA,CAAP;AASD;AAED;;;;;;2BAGO;AACL,aAAO;AACL,mBAAW,KAAK,OADX;AAEL,wBAAgB,KAAK,YAAL,CAAkB,GAAlB,CAAsB,UAAA,IAAI;AAAA,iBAAI,IAAI,CAAC,IAAL,EAAJ;AAAA,SAA1B,CAFX;AAGL,wBAAgB,KAAK;AAHhB,OAAP;AAKD;AAED;;;;;;;gCAIY,M,EAAQ;AAClB,aAAO,KAAK,OAAL,CAAa,KAAK,QAAlB,EAA4B,MAA5B,CAAP;AACD;AAED;;;;;;;+BAIW,M,EAAQ;AACjB,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,YACE,KAAK,YAAL,CAAkB,CAAlB,EAAqB,QAArB,CAA8B,MAA9B,GAAuC,CAAvC,KACC,CAAC,MAAD,IAAW,MAAM,IAAI,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAD3C,CADF,EAGE;AACA,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;;;4BAOQ,O,EAAS,M,EAAQ;AACvB,UAAI,CAAC,OAAL,EAAc;AACZ,eAAO,KAAP;AACD;;AACD,aAAO,CAAC,CAAC,KAAK,iBAAL,CAAuB,OAAvB,EAAgC,MAAhC,CAAT;AACD;AAED;;;;;;;;;0CAMsB,M,EAAQ;AAC5B,aAAO,KAAK,iBAAL,CAAuB,KAAK,QAA5B,EAAsC,MAAtC,CAAP;AACD;AAED;;;;;;;;;;sCAOkB,O,EAAS,M,EAAQ;AACjC,UAAI,OAAO,IAAI,KAAK,YAAL,CAAkB,MAAlB,GAA2B,CAA1C,EAA6C;AAC3C,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,cACE,KAAK,YAAL,CAAkB,CAAlB,EAAqB,OAArB,CAA6B,OAA7B,MACC,CAAC,MAAD,IAAW,MAAM,IAAI,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAD3C,CADF,EAGE;AACA,mBAAO,KAAK,YAAL,CAAkB,CAAlB,CAAP;AACD;AACF;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;;4CAMwB,M,EAAQ;AAC9B,UAAI,KAAK,YAAL,CAAkB,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,cACE,KAAK,YAAL,CAAkB,CAAlB,EAAqB,iBAArB,IACA,MAAM,IAAI,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAFjC,EAGE;AACA,mBAAO,KAAK,YAAL,CAAkB,CAAlB,CAAP;AACD;AACF;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;0BAIM;AACJ,WAAK,WAAL,CAAiB,IAAjB;AACD;;;;;AAGH;;;;;;;IAGa,W;;;AACX;;;;;AAKA,uBAAY,MAAZ,EAAoB,QAApB,EAA8B,iBAA9B,EAAiD;AAAA;;AAC/C;AACA,SAAK,MAAL,GAAc,MAAd;AACA;;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA;;AACA,SAAK,iBAAL,GAAyB,iBAAzB;AACD;AAED;;;;;;;4BAGQ;AACN,aAAO,IAAI,WAAJ,CACL,KAAK,MADA,EAEL,KAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,CAFK,EAGL,KAAK,iBAHA,CAAP;AAKD;AAED;;;;;;2BAGO;AACL,aAAO;AACL,kBAAU,KAAK,MADV;AAEL,oBAAY,KAAK,QAFZ;AAGL,6BAAqB,KAAK;AAHrB,OAAP;AAKD;AAED;;;;;;;4BAIQ,O,EAAS;AACf,UAAI,CAAC,OAAL,EAAc;AACZ,eAAO,KAAP;AACD,OAHc,CAIf;;;AACA,UAAM,EAAE,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAX;;AACA,UACE,EAAE,IAAI,CAAC,CAAP,IACA,KAAK,QAAL,CAAc,QAAd,CAAuB,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,EAAE,GAAG,CAA1B,IAA+B,GAAtD,CAFF,EAGE;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,OAAvB,CAAP;AACD;AAED;;;;;;;;AA4BA;;;;6BAIS;AACP;AACE;AAAwB,6CACtB,KAAK,iBADiB,EAEtB,WAFsB,KAGnB;AAJP;AAMD;;;kCAnCoB,I,EAAM;AACzB,UAAI,CAAC,IAAL,EAAW;AACT,QAAA,IAAI,GAAG,EAAP;AACD;;AACD,UAAM,MAAM,GAAG,IAAI,CAAC,QAAD,CAAJ,IAAkB,EAAjC;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,UAAD,CAAJ,IAAoB,EAArC;AACA,UAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAD,CAA9B;AACA,aAAO,IAAI,WAAJ,CAAgB,MAAhB,EAAwB,QAAxB,EAAkC,iBAAlC,CAAP;AACD;AAED;;;;;;;;;;sCAOyB,I,EAAM;AAC7B,UAAM,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,IAAd;AACb;AAA+B,MAAA,IADlB,GAEb,CAAC,IAAD,CAFJ;AAGA,aAAO,QAAQ,CAAC,GAAT,CAAa,UAAA,IAAI;AAAA,eAAI,WAAW,CAAC,aAAZ,CAA0B,IAA1B,CAAJ;AAAA,OAAjB,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;AC1QH;;;;;;;;;;;;;;;;AAgBA;;;AAGO,IAAM,iBAAiB,GAAG;AAC/B;AACA,EAAA,OAAO,EAAE,SAFsB;AAG/B;AACA,EAAA,cAAc,EAAE,gBAJe;AAK/B;AACA,EAAA,UAAU,EAAE,YANmB;AAO/B;AACA,EAAA,eAAe,EAAE;AARc,CAA1B;AAWP;;;;;;;;;AAOO,IAAM,KAAK,GAAG;AACnB;;;;;;;;;;;;;;AAcA,EAAA,kBAAkB,EAAE,SAfD;;AAgBnB;;;;;;;;;;;;;;AAcA,EAAA,aAAa,EAAE,UA9BI;;AA+BnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,EAAA,iBAAiB,EAAE,cAlEA;;AAmEnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,EAAA,iCAAiC,EAAE,4BAjGhB;;AAkGnB;;;;;;;;;;;;;;AAcA,EAAA,qBAAqB,EAAE,gBAhHJ;;AAiHnB;;;;;;;;;;;;;AAaA,EAAA,2BAA2B,EAAE,oBA9HV;;AA+HnB;;;;;;;;;;;;;AAaA,EAAA,wBAAwB,EAAE,kBA5IP;;AA6InB;;;;;;;;;;;;;;;;AAgBA,EAAA,YAAY,EAAE;AA7JK,CAAd;AAgKP;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,IAAI,cAAJ;AAEP;;;;;;IAGa,S;;;;;;;;;;AACX;;;;;;;;;8BASU,S,EAAW,CAAE;AAEvB;;;;;;;;;;;;;;;;0CAasB,K,EAAO,Y,EAAc,CAAE;;;;;;;;;;;;;;;;;;AC3P/C;;;;;;;;;;;;;;;;AAiBA;;IAEa,K;AAEX;;;;;;AAMA,eAAY,KAAZ,EAAmB,KAAnB,EAA0B,WAA1B,EAAuC,KAAvC,EAA8C;AAAA;;AAC5C;AACA,OAAK,KAAL,GAAa,KAAb;AACA;;AACA,OAAK,KAAL,GAAa,KAAb;AACA;;AACA,OAAK,WAAL,GAAmB,WAAnB;AACA;;AACA,OAAK,KAAL,GAAa,KAAb;AACD,C;;;;;;;;;;;;ACrBH;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;AAGO,IAAM,cAAc,GAAG;AAC5B;AACA,EAAA,OAAO,EAAE,SAFmB;AAG5B;AACA,EAAA,OAAO,EAAE;AAJmB,CAAvB;AAOP;;;;;;;;;;;;AAUO,IAAI,KAAJ;AAEP;;;;;;;;;;;;;;;AAaO,IAAI,WAAJ;AAEP;;;;;;;;;;;;;AAWO,IAAI,IAAJ;AAEP;;;;;;;;;;;AASO,IAAI,MAAJ;AAEP;;;;;;;;;;;;;AAWO,IAAI,eAAJ;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BO,IAAI,eAAJ;AAEP;;;;;;;;;AAOO,IAAM,KAAK,GAAG,SAAS,CAAC,KAAxB;;AACA,IAAM,iBAAiB,GAAG,SAAS,CAAC,iBAApC;AAEP;;;;;;;IAIa,a;;;;;;;;;;;;;;AACX;;;;;;;kCAOc,I,EAAM,CAAE;;;;EARW,SAAS,CAAC,S;;;;;;;;;;;;ACtH7C;;AACA;;;;;;;;AAGA;;IAEa,iB;;;AAEX;;;;;;;;;AASA,6BAAY,GAAZ,EAAiB,YAAjB,EAA+B,QAA/B,EAAyC,YAAzC,EAAuD,WAAvD,EACI,eADJ,EACoC;AAAA,QAAf,MAAe,uEAAN,IAAM;;AAAA;;AAClC;AACA,SAAK,GAAL,GAAW,GAAX;AACA;;AACA,SAAK,YAAL,GAAoB,YAApB;AACA;;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA;;AACA,SAAK,YAAL,GAAoB,YAApB;AACA;;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA;;AACA,SAAK,gBAAL,GAAwB,eAAxB;AACA;;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;;;;;;4BAGQ;AACN,aAAO,IAAI,iBAAJ,CACH,KAAK,GADF,EAEH,KAAK,YAFF,EAGH,KAAK,QAHF,EAIH,KAAK,YAJF,EAKH,KAAK,WALF,EAMH,KAAK,gBANF,EAOH,KAAK,MAPF,CAAP;AASD;AAED;;;;;;2BAGO;AACL,aAAO;AACL,wBAAgB,KAAK,YAAL,CAAkB,IAAlB,EADX;AAEL,oBAAY,KAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,EAAhB,GAAuC,IAF9C;AAGL,wBAAgB,KAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,EAApB,GAA+C,IAH1D;AAIL,kBAAW,KAAK,MAJX;AAKL,uBAAe,KAAK;AALf,OAAP;AAOD;AAED;;;;;;;;;;;;;;;;+BAaW;AACT,aAAO,KAAK,gBAAL,EAAP;AACD;;;;;AAIH;;;;;;IAEa,Y;;;AAEX;;;;AAIA,wBAAY,GAAZ,EAAiB,SAAjB,EAA4B;AAAA;;AAC1B;AACA,SAAK,GAAL,GAAW,GAAX;AACA;;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;AAED;;;;;;;4BAGQ;AACN,aAAO,IAAI,YAAJ,CAAiB,KAAK,GAAtB,EAA2B,KAAK,SAAhC,CAAP;AACD;AAED;;;;;;2BAGO;AACL,aAAO;AACL,gBAAQ,KAAK,GADR;AAEL,qBAAa,KAAK;AAFb,OAAP;AAID;;;;;;;;;;;;;;;;;AClHH;;AACA;;AACA;;AAIA;;AACA;;AACA;;;;;;;;AAEA;;;IAGa,a;;;;;;;;;;AACX;;;;;;yBAMK,sB,EAAwB,CAAE;AAE/B;;;;;;;;8BAKU,M,EAAQ,CAAE;AAEpB;;;;;;4BAGQ,CAAE;AAEV;;;;;;4BAGQ,CAAE;AAEV;;;;;;4BAGQ,CAAE;AAEV;;;;;;;oCAIgB,oB,EAAsB,CAAE;AAExC;;;;;;;8CAI0B,Q,EAAU,CAAE;AAEtC;;;;;;;;;;8BAOU,O,EAAS,CAAE;AAErB;;;;;;;+BAIW,O,EAAS,CAAE;AAEtB;;;;;;;qCAIiB,O,EAAS,CAAE;AAE5B;;;;;;;wCAIoB,O,EAAS,CAAE;AAE/B;;;;;;;mCAIe,O,EAAS,CAAE;AAE1B;;;;;;;;;;;;4CASwB,O,EAAS,CAAE;AAEnC;;;;;;;;gDAK4B,Q,EAAU,CAAE;AAExC;;;;;;;2CAIuB,Q,EAAU,CAAE;AAEnC;;;;;;;8BAIU,G,EAAK,CAAE;AAEjB;;;;;;;uCAImB,mB,EAAqB,CAAE;AAE1C;;;;;;;8CAI0B,Q,EAAU,CAAE;AAEtC;;;;;;;yCAIqB,Q,EAAU,CAAE;AAEjC;;;;;;;+BAIW,wB,EAA0B,CAAE;AAEvC;;;;;;;;;oDAMgC,O,EAAS,CAAE;AAE3C;;;;;;sCAGkB,Q,EAAU,CAAE;AAE9B;;;;;;;sCAIkB,CAAE;AAEpB;;;;;;;4CAIwB,CAAE;AAE1B;;;;;;sCAGkB,Q,EAAU,CAAE;AAE9B;;;;;;;8CAI0B,c,EAAgB,CAAE;AAE5C;;;;;;;;gCAKY,M,EAAQ,CAAE;AAEtB;;;;;;;;;;;;;qCAUiB,Q,EAAU,CAAE;AAE7B;;;;;;;;;;;;;;;;sCAakB,Q,EAAU,CAAE;AAE9B;;;;;;;;qCAKiB,e,EAAiB,CAAE;AAEpC;;;;;;;;;;;iCAQa,iB,EAAmB,Q,EAAU,CAAE;AAE5C;;;;;;;;;;;iCAQa,M,EAAQ,iB,EAAmB,Q,EAAU,CAAE;AAEpD;;;;;;;;;;;sCAQkB,M,EAAQ,iB,EAAmB,Q,EAAU,CAAE;AAEzD;;;;;;;;0CAKsB,CAAE;AAExB;;;;gCACY,CAAE;;;;;AAGhB;;;;AACO,IAAM,iBAAiB,GAAG;AAC/B,EAAA,WAAW,EAAE,YADkB;AAE/B,EAAA,qBAAqB,EAAE,qBAFQ;AAG/B,EAAA,gBAAgB,EAAE,gBAHa;AAI/B,EAAA,yBAAyB,EAAE,yBAJI;AAK/B,EAAA,SAAS,EAAE,WALoB;AAM/B,EAAA,UAAU,EAAE,YANmB;AAO/B,EAAA,kCAAkC,EAAE,iCAPL;AAQ/B,EAAA,YAAY,EAAE,aARiB;AAS/B,EAAA,iBAAiB,EAAE,iBATY;AAU/B,EAAA,uBAAuB,EAAE;AAVM,CAA1B;AAaP;;;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAI,MAAJ;AAEP;;;;;AAGO,IAAM,aAAa,GAAG;AAC3B,EAAA,OAAO,EAAE,CADkB;AAE3B,EAAA,WAAW,EAAE;AAFc,CAAtB;AAKP;;;;;AAGO,IAAM,cAAc,GAAG;AAC5B,EAAA,IAAI,EAAE,MADsB;AAE5B,EAAA,QAAQ,EAAE;AAFkB,CAAvB;AAKP;;;;;AAGO,IAAM,uBAAuB,GAAG;AACrC;AACA;AACA;AACA,EAAA,6BAA6B,EAAE;AAJM,CAAhC;AAOP;;;;;;;;;AAOO,IAAM,WAAW,GAAG;AACzB,EAAA,YAAY,EAAE,cADW;AAEzB,EAAA,eAAe,EAAE;AAFQ,CAApB;AAKP;;;;;;AAGO,SAAS,aAAT,GAAyB;AAC9B,SAAO;AACL,IAAA,cAAc,EAAE,cAAc,CAAC,IAD1B;AAEL,IAAA,aAAa,EAAE,aAAa,CAAC,OAFxB;AAGL,IAAA,kBAAkB,EAAE,KAHf;AAIL,IAAA,gBAAgB,EAAE;AAJb,GAAP;AAMD;AAED;;;;;;;;;;;;;;;;AAcO,IAAI,aAAJ;AAEP;;;;;;;AAKO,IAAI,YAAJ;AAEP;;;;;;;;;;;;AAUO,IAAI,uBAAJ;AAEP;;;;;;;;AAMO,IAAI,+BAAJ;AAEP;;;;;;;;;;;;AAUO,IAAI,aAAJ;AAEP;;;;;;;;;;;;;;AAYO,IAAI,kBAAJ;AAEP;;;;;;;;;;;;;;;;;;;;AAkBO,IAAI,mBAAJ;;;;;;;;;;;;;;;;;ACpcP;;;;;;;;;;;;;;;;AAiBA;;IAEa,Q;;;AAEX;;;;AAIA,oBAAY,OAAZ,EAAqB,IAArB,EAA2B;AAAA;;AACzB;AACA,SAAK,OAAL,GAAe,OAAf;AACA;;AACA,SAAK,IAAL,GAAY,IAAZ;AAEA;;AACA,SAAK,EAAL,GAAU,IAAI,CAAC,KAAD,CAAd;AACA;;AACA,SAAK,KAAL,GAAa,IAAI,CAAC,OAAD,CAAjB;AACA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,gBAAD,CAAzB;AACA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,MAAD,CAAhB;AACA;;AACA,SAAK,SAAL,GAAiB,IAAI,CAAC,YAAD,CAArB;AACA;;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,aAAD,CAAtB;AACA;;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,SAAD,CAAtB;AACD;AAED;;;;;;;4BAGQ;AACN,aAAO,IAAI,QAAJ,CAAa,KAAK,OAAlB,EAA2B,KAAK,IAAhC,CAAP;AACD;AAED;;;;;;2BAGO;AACL,aAAO;AACL,cAAM,KAAK,EADN;AAEL,iBAAS,KAAK,KAFT;AAGL,yBAAiB,KAAK,aAHjB;AAIL,gBAAQ,KAAK,IAJR;AAKL,qBAAa,KAAK,SALb;AAML,sBAAc,KAAK,UANd;AAOL,sBAAc,KAAK;AAPd,OAAP;AASD;;;;;;;;;;;;;;;;ACpDH;;AAIA;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGa,e;;;;;;;;;;AACX;;;mCAGe,CAAE;;;;;AAEnB;;;;;;;IAGa,Y;;;;;;;;;;;;;;AACX;;;;8BAIU,CAAE;AAEZ;;;;;;;;;;;;;;mCAWe,CAAE;AAEjB;;;;;;;;gCAKY,CAAE;AAEd;;;;;;;8BAIU,CAAE;AAEZ;;;;;;iCAGa,CAAE;AAEf;;;;;;;;oCAKgB,c,EAAgB,CAAE;AAElC;;;;;;4BAGQ,a,EAAe,CAAE;AAEzB;;;;;;;;uBAKG,a,EAAe,c,EAAgB,CAAE;AAEpC;;;;;;;8BAIU,CAAE;;;;EA7DoB,e;AA+DlC;;;;;;;IAGM,sB;;;AACJ;;;AAGA,kCAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,KAAL,GAAa,IAAb;AACD;AAED;;;;;;;mCAGe;AACb,aAAO,KAAK,KAAL,CAAW,YAAX,EAAP;AACD;;;;;AAGH;;;;;IAGa,kB;;;AACX;;;;;AAKA,8BAAY,MAAZ,EAAoB,GAApB,EAAyB,IAAzB,EAA+B;AAAA;;AAC7B;AACA,SAAK,WAAL,GAAmB,IAAI,iCAAJ,CAA0B,MAA1B,EAAkC,GAAlC,EAAuC,IAAvC,CAAnB;AACA;;AACA,SAAK,YAAL,GAAoB,EAApB;AACA;;AACA,SAAK,iBAAL,GAAyB,IAAzB;AACD;AAED;;;;;;;;;gCAKY;AACV,aAAO,KAAK,WAAL,CAAiB,SAAjB,EAAP;AACD;AAED;;;;;;;8BAIU;AAAA;;AACR,aAAO,KAAK,WAAL,CAAiB,OAAjB,GAA2B,IAA3B,CAAgC,YAAM;AAC3C;AACA,QAAA,KAAI,CAAC,WAAL,CAAiB,SAAjB,CAA2B,UAAA,IAAI,EAAI;AACjC,cAAI,KAAI,CAAC,iBAAT,EAA4B;AAC1B,YAAA,KAAI,CAAC,iBAAL,CAAuB,IAAvB;AACD;;AACD,cAAM,QAAQ,GAAG,IAAI,IAAI,IAAI,CAAC,UAAD,CAA7B;;AACA,cAAI,CAAC,QAAL,EAAe;AACb;AACD;;AACD,cAAM,EAAE,GAAG,KAAI,CAAC,YAAL,CAAkB,QAAQ,CAAC,CAAD,CAA1B,CAAX;;AACA,cAAI,EAAJ,EAAQ;AACN,YAAA,EAAE,CAAC,+BAAY,QAAZ,CAAD,CAAF;AACD;AACF,SAZD;AAaD,OAfM,CAAP;AAgBD;AAED;;;;;;iCAGa;AACX,WAAK,WAAL,CAAiB,UAAjB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,KAAK,WAAL,CAAiB,OAAjB,EAAP;AACD;AAED;;;;;;;;;;;;;;mCAWe;AACb,aAAO,KAAK,WAAL,CAAiB,YAAjB,EAAP;AACD;AAED;;;;;;;;oCAKgB,Q,EAAU;AACxB,aAAO,KAAK,WAAL,CAAiB,eAAjB,CAAiC,QAAjC,CAAP;AACD;AAED;;;;;;4BAGQ,O,EAAS;AACf,WAAK,WAAL,CAAiB,OAAjB,CAAyB;AAAC,mBAAW,OAAO,CAAC,OAAR;AAAZ,OAAzB;AACD;AAED;;;;;;;;uBAKG,O,EAAS,Q,EAAU;AACpB,UAAM,KAAK,GAAG,4BAAS,OAAT,CAAd;;AACA,UAAI,CAAC,KAAL,EAAY;AACV,cAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACD,OAFD,MAEO,IAAI,KAAK,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AACnC,cAAM,IAAI,KAAJ,CAAU,yCAAV,EAAqD,KAArD,CAAN;AACD;;AACD,WAAK,YAAL,CAAkB,KAAlB,IAA2B,QAA3B;AACD;AAED;;;;;;;8BAIU;AACR,WAAK,WAAL,CAAiB,OAAjB;AACD;;;;;;;;IAGU,a;;;AACX;;;AAGA,yBAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,4BAAJ,CAAqB,IAAI,CAAC,GAAL,EAArB,CAAtB;AACD;AAED;;;;;;;;;wCAKoB,I,EAAM;AACxB,UAAM,IAAI,GAAG,KAAK,KAAlB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,UAAL,EAAnB;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,SAAL,GAAiB,UAAjB,EAAhB;AACA,aAAO,MAAM,CAAC,MAAP,CACL;AACE,4BAAoB,OAAO,CAAC,OAAR,EADtB;AAEE,yBAAiB,UAAU,CAAC,gBAAX,EAFnB;AAGE,qBAAa,UAAU,CAAC,YAAX,EAHf;AAIE,mBAAW;AAJb,OADK,EAOL,IAAI,IAAI,EAPH,CAAP;AASD;AAED;;;;;;;;;;4CAOwB,M,EAAQ,G,EAAK,I,EAAM;AACzC,UAAM,YAAY,GAAG,IAAI,kBAAJ,CAAuB,MAAvB,EAA+B,GAA/B,EAAoC,IAApC,CAArB;AACA,aAAO,YAAY,CAAC,OAAb,GAAuB,IAAvB,CAA4B;AAAA,eAAM,YAAN;AAAA,OAA5B,CAAP;AACD;AAED;;;;;;;;;;;+BAQW,M,EAAQ,G,EAAK,I,EAAmC;AAAA,UAA7B,mBAA6B,uEAAP,KAAO;;AACzD,UAAI,mBAAJ,EAAyB;AACvB,QAAA,IAAI,GAAG,KAAK,mBAAL,CAAyB,IAAzB,CAAP;AACD;;AACD,aAAO,KAAK,uBAAL,CAA6B,MAA7B,EAAqC,GAArC,EAA0C,IAA1C,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA0BK,S,EAAW,G,EAAK,M,EAAQ,I,EAAM,O,EAAsC;AAAA,UAA7B,mBAA6B,uEAAP,KAAO;;AACvE,UAAI,mBAAJ,EAAyB;AACvB,QAAA,IAAI,GAAG,KAAK,mBAAL,CAAyB,IAAzB,CAAP;AACD;;AACD,aAAO,KAAK,cAAL,CAAoB,IAApB,CAAyB,SAAzB,EAAoC,GAApC,EAAyC,MAAzC,EAAiD,IAAjD,EAAuD,OAAvD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA+BS,S,EAAW,Q,EAAU;AAC5B,WAAK,cAAL,CAAoB,QAApB,CAA6B,SAA7B,EAAwC,UAAA,IAAI,EAAI;AAC9C,QAAA,QAAQ,CAAC,IAAI,sBAAJ,CAA2B,IAA3B,CAAD,CAAR;AACD,OAFD;AAGD;AAED;;;;;;oCAGgB,O,EAAS;AACvB,WAAK,cAAL,CAAoB,eAApB,CAAoC,OAApC;AACD;AAED;;;;;;kDAG8B;AAC5B,aAAO,KAAK,cAAZ;AACD;;;;;;;;;;;;;;;;ACzWH;;AACA;;AACA;;;;;;;;AAEA,IAAM,aAAa,GAAG,UAAtB;AAEA;;;;;IAIa,a;;;AACX;;;AAGA,yBAAY,GAAZ,EAAiB;AAAA;;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,OAAL,GAAe,IAAf;AAEA;;AACA,SAAK,YAAL,GAAoB,IAApB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,kBAAJ,CAAa,GAAb,EAAkB,aAAlB,CAAtB;AAEA;;AACA,SAAK,SAAL,GAAiB,IAAjB;AAEA,SAAK,cAAL,CAAoB,UAApB,GAAiC,gBAAjC,CAAkD,OAAlD,EAA2D,YAAM;AAC/D,UAAI,KAAI,CAAC,SAAT,EAAoB;AAClB,YAAI;AACF,UAAA,KAAI,CAAC,SAAL,CAAe,KAAf;AACD,SAFD,CAEE,OAAO,CAAP,EAAU,CACV;AACD;AACF;AACF,KARD;AASD;AAED;;;;;;;;iCAI2B;AAAA,UAAhB,MAAgB,uEAAP,KAAO;;AACzB,UAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,aAAK,OAAL,GAAe,IAAI,cAAJ,CAAW,KAAK,IAAhB,CAAf;AACA,aAAK,YAAL,GAAoB,KAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB,CAApB;AACD;;AACD,aAAO,KAAK,YAAZ;AACD;AAED;;;;;;;;6BAKS,I,EAAsB;AAAA;;AAAA,UAAhB,MAAgB,uEAAP,KAAO;AAC7B,MAAA,IAAI,CAAC,YAAL,YAA0B,UAAA,MAAM,EAAI;AAClC,YAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,UAAA,MAAI,CAAC,YAAL,CAAkB,IAAlB;AACD;;AACD,cAAM,MAAN;AACD,OALD;AAMA,aAAO,KAAK,UAAL,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,UAAA,MAAM,EAAI;AAC5C,eAAO,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;;;iCAGa,I,EAAM;AAAA;;AACjB;AACA,MAAA,UAAU,CAAC,YAAM;AACf,YAAI,MAAI,CAAC,OAAL,IAAgB,MAAI,CAAC,OAAL,CAAa,cAAb,MAAiC,IAArD,EAA2D;AACzD,UAAA,MAAI,CAAC,MAAL;AACD;AACF,OAJS,EAIP,GAJO,CAAV;AAKD;AAED;;;;;kCAEc;AACZ,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,MAAL;AACD;;AACD,UAAI,KAAK,cAAL,CAAoB,UAApB,EAAJ,EAAsC;AACpC,aAAK,cAAL,CAAoB,OAApB;AACD;AACF;AAED;;;;6BACS;AACP,WAAK,OAAL,CAAa,KAAb;AACA,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,YAAL,GAAoB,IAApB;AACD;AAED;;;;;;gCAGY,S,EAAW;AACrB,WAAK,SAAL,GAAiB,SAAS,IAAI,IAA9B;;AACA,UAAI,CAAC,KAAK,cAAL,CAAoB,UAApB,EAAL,EAAuC;AACrC,aAAK,cAAL,CAAoB,MAApB;AACD;;AACD,WAAK,cAAL,CAAoB,IAApB;AACD;AAED;;;;;kCAEc;AACZ,WAAK,SAAL,GAAiB,IAAjB;;AACA,UAAI;AACF,aAAK,cAAL,CAAoB,IAApB;AACD,OAFD,CAEE,OAAO,CAAP,EAAU,CACV;AACD;AACF;;;;;;;;;;;;;;;;ACxHH;;AACA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AACA;;;;;;;;AAEA,IAAM,OAAO,GAAG,UAAhB;AAEA;;;;;;;AAMA,IAAM,0BAA0B,GAAG;AACjC,gBAAc,MADmB;AAEjC,YAAU,MAFuB;AAGjC,aAAW,OAHsB;AAIjC,cAAY,OAJqB;AAKjC,aAAW,OALsB;AAMjC,gBAAc;AANmB,CAAnC;AASA;;;;;AAIA,IAAM,eAAe,GAAG;AACtB,cAAY,UADU;AAEtB,SAAO,GAFe;AAGtB,UAAQ,GAHc;AAItB,WAAS,GAJa;AAKtB,YAAU,GALY;AAMtB,aAAW,CANW;;AAOtB;;AACA;AACA,YAAU,CATY;AAUtB,gBAAc,MAVQ;AAWtB,eAAa,MAXS;AAYtB,gBAAc,MAZQ;AAatB,eAAa,MAbS;AActB,WAAS;AAda,CAAxB;AAiBA;;;;;AAIA,IAAM,UAAU,GAAG;AACjB,EAAA,MAAM,EAAE,QADS;AAEjB,EAAA,GAAG,EAAE,KAFY;AAGjB,EAAA,KAAK,EAAE,OAHU;AAIjB,EAAA,IAAI,EAAE;AAJW,CAAnB;AAOA;;;;;IAIa,M;;;AACX;;;;;;AAMA,kBAAY,GAAZ,EAAoD;AAAA,QAAnC,eAAmC,uEAAjB,EAAiB;AAAA,QAAb,MAAa,uEAAJ,EAAI;;AAAA;;AAClD;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,OAAL,GAAe,IAAI,8BAAJ,CAAmB,GAAG,CAAC,MAAJ,GAAa,QAAhC,EAA0C;AACvD,eAAS;AAD8C,KAA1C,CAAf;AAIA;;AACA,SAAK,SAAL,GAAiB,IAAI,kBAAJ,CAAa,GAAb,EAAkB,OAAO,GAAG,CAA5B,CAAjB;AAEA,QAAM,uBAAuB,GAAG,MAAM,CAAC,MAAP,CAC9B,EAD8B,EAE9B,0BAF8B,EAG9B,eAH8B,CAAhC;AAKA,mCAAmB,KAAK,OAAL,CAAa,UAAb,EAAnB,EAA8C,uBAA9C;AAEA,0BAAU,KAAK,OAAL,CAAa,UAAb,EAAV,EAAqC,MAArC;AAEA;;AACA,SAAK,YAAL,GAAoB,IAApB;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAlB,CAzBkD,CAyB1B;;AAExB;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAlB;AAEA;;AACA,SAAK,OAAL,GAAe,KAAf;AAEA;;AACA,SAAK,qBAAL,GAA6B,IAA7B;AAEA;;AACA,SAAK,cAAL,GAAsB,KAAtB;AACD;AAED;;;;;;;;;2BAKqB;AAAA;;AAAA,UAAhB,MAAgB,uEAAP,KAAO;AACnB,UAAM,MAAM,GAAG,KAAK,OAApB;;AACA,UAAI,MAAM,CAAC,WAAP,EAAJ,EAA0B;AACxB,cAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD,OAJkB,CAMnB;;;AACA,WAAK,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,MAAM,CAAC,UAAP,EAAhC,EAPmB,CAOmC;;AAEtD,WAAK,SAAL,CAAe,MAAf;;AAEA,UAAI,MAAJ,EAAY;AACV,uCAAmB,MAAM,CAAC,UAAP,EAAnB,EAAwC;AACtC,wBAAc,QADwB;AAEtC,qBAAW;AAF2B,SAAxC;AAIA,aAAK,OAAL,GAAe,MAAf;AACD,OAND,MAMO;AACL,aAAK,KAAL;AACD;;AAED,UAAI,KAAK,cAAT,EAAyB;AACvB,eAAO,KAAK,IAAL,CACJ,eADI,CACY,MAAM,CAAC,UAAP,EADZ,EAEJ,IAFI,CAEC;AAAA,iBAAM,MAAM,CAAC,SAAP,EAAN;AAAA,SAFD,EAGJ,IAHI,CAGC,YAAM;AACV,UAAA,KAAI,CAAC,YAAL;;AACA,iBAAO,KAAP;AACD,SANI,CAAP;AAOD,OARD,MAQO;AACL,eAAO,MAAM,CAAC,SAAP,GAAmB,IAAnB,CAAwB,YAAM;AACnC,UAAA,KAAI,CAAC,YAAL;;AACA,iBAAO,KAAP;AACD,SAHM,CAAP;AAID;AACF;AAED;;;;;;;mCAIe;AACb,UAAM,MAAM,GAAG,KAAK,OAApB;AACA,UAAM,UAAU,GAAG,MAAM,CAAC,OAAP,EAAnB;AACA,UAAM,SAAS;AAAG;AAA8B,WAAK,OAAL,CAAa,WAAb,EAAhD,CAHa,CAKb;;AACA,iCAAiB,qBAAW,SAAX,CAAjB,EAAwC,OAAxC,EANa,CAQb;;AACA,WAAK,YAAL,GAAoB,IAAI,wBAAJ,CAAgB,SAAhB,CAApB;AACA,MAAA,UAAU,CAAC,WAAX,CAAuB,KAAK,YAAL,CAAkB,UAAlB,EAAvB,EAVa,CAYb;;AACA,WAAK,UAAL,GAAkB,wBAAc,SAAd,EAAyB,eAAzB,EAA0C,EAA1C,CAAlB;AACA,MAAA,UAAU,CAAC,WAAX,CAAuB,KAAK,UAA5B;AACA,WAAK,YAAL;AACD;AAED;;;;;;;;4BAKuB;AAAA;;AAAA,UAAjB,QAAiB,uEAAN,IAAM;AACrB,UAAI,SAAJ;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,SAAS,GAAG,KAAK,QAAL,CAAc,YAAM;AAC9B,UAAA,MAAI,CAAC,SAAL,CAAe,IAAf;AAAoB;AAAc,cAAlC;;AACA,iBAAO,2BACL,MAAI,CAAC,UAAL,EADK,EAEL;AACE,yBAAa;AADf,WAFK,EAKL,GALK,EAML,UANK,CAAP;AAQD,SAVW,CAAZ;AAWD,OAZD,MAYO;AACL,QAAA,SAAS,GAAG,OAAO,CAAC,OAAR,EAAZ;AACD;;AACD,aAAO,SAAS,CAAC,IAAV,CAAe,YAAM;AAC1B,YAAM,QAAQ,GAAG,MAAI,CAAC,OAAL,CAAa,UAAb,EAAjB;;AACA,QAAA,QAAQ,CAAC,UAAT,CAAoB,WAApB,CAAgC,QAAhC;;AAEA,QAAA,MAAI,CAAC,oBAAL;;AACA,QAAA,MAAI,CAAC,SAAL,CAAe,OAAf;AACD,OANM,CAAP;AAOD;AAED;;;;;;;mCAIe;AACb,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,cAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;;gCAIY;AACV,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;;iCAIa;AACX,aAAO,KAAK,OAAL,CAAa,UAAb,EAAP;AACD;AAED;;;;;;;iDAI6B;AAC3B,UAAI,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,mBAAX,EAAlB,EAAoD;AAClD;AACA,aAAK,qBAAL,GAA6B,KAAK,KAAlC;AACD,OAHD,MAGO;AACL;AACA,iCAAe,KAAK,YAAL,EAAf,EAFK,CAGL;AACA;;AACA,aAAK,YAAL,CAAkB,IAAlB;AACD;AACF;AAED;;;;;;;iDAI6B;AAC3B;AACA,UAAI,KAAK,qBAAT,EAAgC;AAC9B,gCAAc,KAAK,qBAAL,CAA2B,UAA3B,EAAd;AACA,aAAK,qBAAL,GAA6B,IAA7B;AACD,OAHD,MAGO;AACL,aAAK,YAAL,CAAkB,IAAlB;AACD;AACF;AAED;;;;qCACiB;AACf,aAAO,KAAK,KAAZ;AACD;AAED;;;;;;;;6BAKS,I,EAAM;AAAA;;AACb,qCAAmB,IAAI,CAAC,UAAL,EAAnB,EAAsC,eAAtC;AACA,WAAK,0BAAL;AAEA,WAAK,KAAL,GAAa,IAAb;AACA,WAAK,YAAL,GAAoB,WAApB,CAAgC,IAAI,CAAC,UAAL,EAAhC,EALa,CAOb;;AACA,UAAI,IAAI,CAAC,cAAL,MAAyB,CAAC,KAAK,OAAnC,EAA4C;AAC1C,aAAK,SAAL,CAAe,IAAf;AAAoB;AAAc,YAAlC;AACD;;AAED,aAAO,IAAI,CAAC,IAAL,CAAU,IAAV,EAAgB,IAAhB,CAAqB,YAAM;AAChC,uCAAmB,IAAI,CAAC,UAAL,EAAnB,EAAsC;AACpC,qBAAW;AADyB,SAAtC;;AAGA,YAAI,MAAI,CAAC,OAAT,EAAkB;AAChB,cAAI,IAAI,CAAC,cAAL,EAAJ,EAA2B;AACzB,YAAA,MAAI,CAAC,SAAL,CAAe,IAAf;AAAoB;AAAe,gBAAnC;AACD;;AACD,UAAA,MAAI,CAAC,KAAL;AACD;;AACD,QAAA,MAAI,CAAC,0BAAL;AACD,OAXM,CAAP;AAYD;AAED;;;;;;;4BAIQ;AAAA;;AACN,WAAK,QAAL,CAAc,YAAM;AAClB,uCAAmB,MAAI,CAAC,UAAL,EAAnB,EAAsC;AACpC,uBAAa,kBADuB;AAEpC,qBAAW,CAFyB;AAGpC,wBAAc;AAHsB,SAAtC;AAKA,eAAO,2BACL,MAAI,CAAC,UAAL,EADK,EAEL;AACE,uBAAa,eADf;AAEE,qBAAW,CAFb;AAGE,wBAAc;AAHhB,SAFK,EAOL,GAPK,EAQL,UARK,CAAP;AAUD,OAhBD;AAiBA,WAAK,OAAL,GAAe,KAAf;AACD;AAED;;;;;;;;;;+BAOW,I,EAAM,M,EAAyB;AAAA;;AAAA,UAAjB,QAAiB,uEAAN,IAAM;;AACxC,UAAI,KAAK,KAAL,IAAc,IAAlB,EAAwB;AACtB,eAAO,IAAP;AACD;;AACD,UAAM,SAAS,GAAG,KAAK,oBAAL,CAA0B,MAA1B,CAAlB;AAEA,UAAI,SAAJ;;AACA,UAAI,QAAJ,EAAc;AACZ,YAAM,SAAS,GAAG,KAAK,UAAL,GAAkB,YAApC;;AACA,YAAI,SAAS,IAAI,SAAjB,EAA4B;AAC1B;AACA,UAAA,SAAS,GAAG,KAAK,QAAL,CAAc,YAAM;AAC9B,2CAAmB,MAAI,CAAC,UAAL,EAAnB,EAAsC;AACpC,kCAAa,SAAb,OADoC;AAEpC,gDAA2B,SAAS,GAAG,SAAvC;AAFoC,aAAtC;AAIA,mBAAO,2BACL,MAAI,CAAC,UAAL,EADK,EAEL;AACE,2BAAa;AADf,aAFK,EAKL,GALK,EAML,UANK,CAAP;AAQD,WAbW,CAAZ;AAcD,SAhBD,MAgBO;AACL;AACA,UAAA,SAAS,GAAG,KAAK,QAAL,CAAc,YAAM;AAC9B,mBAAO,2BACL,MAAI,CAAC,UAAL,EADK,EAEL;AACE,gDAA2B,SAAS,GAAG,SAAvC;AADF,aAFK,EAKL,GALK,EAML,UANK,EAOL,IAPK,CAOA,YAAM;AACX,6CAAmB,MAAI,CAAC,UAAL,EAAnB,EAAsC;AACpC,oCAAa,SAAb,OADoC;AAEpC,6BAAa;AAFuB,eAAtC;AAID,aAZM,CAAP;AAaD,WAdW,CAAZ;AAeD;AACF,OApCD,MAoCO;AACL,uCAAmB,KAAK,UAAL,EAAnB,EAAsC;AACpC,8BAAa,SAAb;AADoC,SAAtC;AAGA,QAAA,SAAS,GAAG,OAAO,CAAC,OAAR,EAAZ;AACD;;AACD,aAAO,SAAS,CAAC,IAAV,CAAe,YAAM;AAC1B,QAAA,MAAI,CAAC,oBAAL,CAA0B,MAA1B;;AACA,QAAA,IAAI,CAAC,OAAL;AACD,OAHM,CAAP;AAID;AAED;;;;;;;;6BAKS,Q,EAAU;AAAA;;AACjB,UAAM,IAAI,GAAG,KAAK,UAAL,IAAmB,OAAO,CAAC,OAAR,EAAhC;AACA,aAAQ,KAAK,UAAL,GAAkB,IAAI,CAC3B,IADuB,CAEtB,YAAM;AACJ,eAAO,QAAQ,EAAf;AACD,OAJqB,EAKtB,YAAM,CACJ;AACD,OAPqB,EASvB,IATuB,CASlB,YAAM;AACV,QAAA,MAAI,CAAC,UAAL,GAAkB,IAAlB;AACD,OAXuB,CAA1B;AAYD;AAED;;;;;;;;;yCAMqB,M,EAAQ;AAC3B,aAAO,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAL,CAAU,MAAV;AAAmB;AAAO,MAAA,WAA1B,GAAwC,GAAzD,CAAP;AACD;AAED;;;;;;;;iCAKa;AACX,aAAO,KAAK,UAAL,GAAkB,YAAzB;AACD;AAED;;;;;;mCAGe;AACb,qCAAmB,KAAK,UAAL,EAAnB,EAAsC,KAAK,iBAAL,EAAtC;AACD;AAED;;;;;;;;;yCAMqB,S,EAAW;AAC9B,UAAI,KAAK,cAAL,MAAyB,UAAU,CAAC,MAAxC,EAAgD;AAC9C,YAAM,aAAa,GAAG,SAAS,GAAG,EAAlC,CAD8C,CACR;;AACtC,YAAM,WAAW,GAAG,KAAK,IAAL,CAAU,cAAV,EAApB;AACA,uCAAmB,WAAnB,EAAgC;AAC9B,sCAAqB,aAArB;AAD8B,SAAhC;AAGD;AACF;AAED;;;;;;;2CAIuB;AACrB,WAAK,IAAL,CAAU,cAAV,GAA2B,KAA3B,CAAiC,cAAjC,CAAgD,gBAAhD;AACD;AAED;;;;;;;;;;qCAOiB;AACf,aAAO,UAAU,CAAC,MAAlB;AACD;AAED;;;;;;;;wCAKoB;AAClB,UAAM,cAAc,GAAG,KAAK,cAAL,EAAvB;;AACA,cAAQ,cAAR;AACE,aAAK,UAAU,CAAC,MAAhB;AACE,iBAAO;AAAC,sBAAU;AAAX,WAAP;;AACF,aAAK,UAAU,CAAC,GAAhB;AACE,iBAAO;AAAC,mBAAO;AAAR,WAAP;;AACF,aAAK,UAAU,CAAC,KAAhB;AACE,iBAAO;AACL,wBAAY,OADP;AAEL,mBAAO,KAFF;AAGL,oBAAQ,KAHH;AAIL,yBAAa;AAJR,WAAP;;AAMF,aAAK,UAAU,CAAC,IAAhB;AACE,iBAAO;AACL,wBAAY,OADP;AAEL,sBAAU,MAFL;AAGL,mBAAO,CAHF;AAIL,sBAAU;AAJL,WAAP;;AAMF;AACE,iBAAO;AAAC,sBAAU;AAAX,WAAP;AApBJ;AAsBD;;;;;;;;;;;;;;;;ACxfH;;AACA;;;;;;;;AAEA;AACA,IAAM,wBAAwB,GAAG;AAC/B,iBAAe,CADgB;AAE/B,eAAa,IAFkB;AAG/B,SAAO;AAHwB,CAAjC;AAMA;;;;IAGa,c;;;AACX;;;;AAIA,0BAAY,GAAZ,EAA6B;AAAA;;AAAA,QAAZ,KAAY,uEAAJ,EAAI;;AAAA;;AAC3B,QAAM,WAAW,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,wBAAlB,EAA4C,KAA5C,CAApB;AAEA;;AACA,SAAK,OAAL;AAAe;AAAmC,4BAChD,GADgD,EAEhD,QAFgD,EAGhD,WAHgD,CAAlD,CAJ2B,CAU3B;;AACA,+BAAe,KAAK,OAApB;AAEA;;AACA,SAAK,MAAL,GAAc,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AACnC,MAAA,KAAI,CAAC,OAAL,CAAa,MAAb,GAAsB,OAAtB;AACD,KAFa,CAAd;AAGD;AAED;;;;;;;;gCAIY;AACV,aAAO,KAAK,MAAZ;AACD;AAED;;;;;;;iCAIa;AACX,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;;kCAIc;AACZ,UAAM,GAAG,GACP,KAAK,UAAL,GAAkB,eAAlB,IACC,KAAK,UAAL,GAAkB,aAAlB,IACC,KAAK,UAAL,GAAkB,aAAlB,CAAgC,QAHpC;;AAKA,UAAI,CAAC,GAAL,EAAU;AACR,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACD;;AACD,aAAO,GAAP;AACD;AAED;;;;;;;8BAIU;AACR;AAAO;AAAyB,aAAK,WAAL,GAAmB;AAAnD;AACD;AAED;;;;;;;kCAIc;AACZ,aAAO,sBAAY,KAAK,UAAL,EAAZ,CAAP;AACD;;;;;;;;;;;;;;;;ACnFH;;AACA;;;;;;;;IAEa,Q;;;AACX;;;;AAIA,oBAAY,GAAZ,EAAiB,MAAjB,EAAyB;AAAA;;AACvB;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,eAAL,GAAuB,KAAK,IAAL,CACpB,MADoB,GAEpB,QAFoB,CAEX,aAFW,CAEG,sBAFH,CAAvB;AAGA,mCAAmB,KAAK,eAAxB,EAAyC;AACvC,iBAAW,MAD4B;AAEvC,iBAAW,MAF4B;AAGvC,kBAAY,OAH2B;AAIvC,aAAO,CAJgC;AAKvC,eAAS,CAL8B;AAMvC,gBAAU,CAN6B;AAOvC,cAAQ,CAP+B;AAQvC,0BAAoB;AARmB,KAAzC;AAUD;AAED;;;;;;;iCAGa;AACX,aAAO,KAAK,eAAZ;AACD;AAED;;;;;;iCAGa;AACX,aAAO,CAAC,CAAC,KAAK,eAAL,CAAqB,UAA9B;AACD;AAED;;;;;;6BAGS;AACP,WAAK,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,KAAK,eAArC;AACD;AAED;;;;;;8BAGU;AACR,WAAK,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,KAAK,eAArC;AACD;AAED;;;;;;;;2BAKsB;AAAA,UAAjB,QAAiB,uEAAN,IAAM;AACpB,qCAAmB,KAAK,eAAxB,EAAyC;AACvC,mBAAW,OAD4B;AAEvC,mBAAW,QAAQ,GAAG,CAAH,GAAO;AAFa,OAAzC;;AAIA,UAAI,QAAJ,EAAc;AACZ,eAAO,2BACL,KAAK,eADA,EAEL;AACE,qBAAW;AADb,SAFK,EAKL,GALK,EAML,UANK,CAAP;AAQD;AACF;AAED;;;;;;;;2BAKsB;AAAA;;AAAA,UAAjB,QAAiB,uEAAN,IAAM;;AACpB,UAAI,QAAJ,EAAc;AACZ,eAAO,2BACL,KAAK,eADA,EAEL;AACE,qBAAW;AADb,SAFK,EAKL,GALK,EAML,UANK,EAOL,IAPK,CAOA,YAAM;AACX,yCAAmB,KAAI,CAAC,eAAxB,EAAyC;AAAC,uBAAW;AAAZ,WAAzC;AACD,SATM,CAAP;AAUD;;AACD,qCAAmB,KAAK,eAAxB,EAAyC;AAAC,mBAAW;AAAZ,OAAzC;AACD;;;;;;;;;;;;;;;;;;;;;;ACjHH;;;;;;;;;;;;;;;;AAgBA;;;;;IAKa,I;;;AACX;;;AAGA,kBAAc;AAAA;AAAE;AAEhB;;;;;;;;;iCAKa,CAAE;AAEf;;;;;;;;yBAKK,Y,EAAc,CAAE;AAErB;;;;;;8BAGU,CAET,C,CADC;;AAGF;;;;;;;;mCAKe,CAAE;AAEjB;;;;;;;qCAIiB,CAAE;AAEnB;;;;;;;0CAIsB,CAAE;;;;;;;;;;;AC5C1B;;AACA;;AACA;;AAvBA;;;;;;;;;;;;;;;;AAgBA;;;;AASA,cAAI,iDAAJ;AAEA,6BAAe,IAAf;;;;;;;;;;;ACXA;;;;;;;;AAEA;;;IAGa,G;;;;;;;;;;AACX;;;6BAGS,CAAE;AAEX;;;;;;;kCAIc,CAAE;AAEhB;;;;;;;qCAIiB,CAAE;AAEnB;;;;;;;;8BAKU,CAAE;AAEZ;;;;;;;;8BAKU,CAAE;AAEZ;;;;;;;8BAIU,CAAE;AAEZ;;;;;;;gCAIY,CAAE;AAEd;;;;;;;;;;oCAOgB,a,EAAe,CAAE;;;;;AAGnC;;;;;IACa,S;;;AACX;;;AAGA,qBAAY,QAAZ,EAAsB;AAAA;;AACpB,QAAM,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAzB;AACA;;AACA,SAAK,IAAL;AAAY;AAAwB,IAAA,KAAK;AACrC;AAAwB,IAAA,QADa;AAErC;AAA0B,IAAA,QAAD,CAAW,WAFxC;AAGA;;AACA,SAAK,IAAL,GAAY,KAAK;AACb;AAAwB,IAAA,QAAD,CAAW,QADrB;AAEb;AAA0B,IAAA,QAF9B;AAGD;AAED;;;;;6BACS;AACP,aAAO,KAAK,IAAZ;AACD;AAED;;;;kCACc;AACZ,aAAO,KAAK,IAAZ;AACD;AAED;;;;qCACiB;AACf,aAAO,KAAK,IAAL,CAAU,eAAjB;AACD;AAED;;;;8BACU;AACR;AACA;AAAO;AAAyB,aAAK,IAAL,CAAU;AAA1C;AACD;AAED;;;;8BACU;AACR,aAAO,KAAK,IAAL,CAAU,IAAjB;AACD;AAED;;;;8BACU;AACR,aAAO,oCAAgB,KAAK,IAArB,CAAP;AACD;AAED;;;;gCACY;AACV,aAAO,sCAAkB,KAAK,IAAvB,CAAP;AACD;AAED;;;;oCACgB,a,EAAe;AAC7B,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;;;;AAGH;;;;;;;;AAIO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC;AACA;AAAI;AAA0B,EAAA,KAAD,CAAQ,QAAR;AAAqB;AAAe,GAAjE,EAAoE;AAClE,WAAO,IAAI,SAAJ;AAAc;AAA0B,IAAA,KAAxC,CAAP;AACD,GAJ+B,CAKhC;;;AACA;AAAI;AAAwB,EAAA,KAAD,CAAQ,QAAnC,EAA6C;AAC3C,WAAO,IAAI,SAAJ;AAAc;AAAwB,IAAA,KAAtC,CAAP;AACD;;AACD;AAAO;AAAqB,IAAA;AAA5B;AACD;;;;;;;;;;;;ACpID;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,YAAY,GAAG,cAArB;AACA,IAAM,YAAY,GAAG,uBAArB;AAEA,IAAM,aAAa,GAAG,CACpB,cADoB,EAEpB,SAFoB,EAGpB,aAHoB,EAIpB,MAJoB,EAKpB,SALoB,EAMpB,QANoB,EAOpB,OAPoB,EAQpB,SARoB,EASpB,QAToB,EAUpB,SAVoB,CAAtB,C,CAaA;;AACA,IAAM,gBAAgB,GAAG,IAAI,MAAJ,CAAW,aAAa,CAAC,IAAd,CAAmB,GAAnB,CAAX,CAAzB;AAEA;;;IAEa,kB;;;AACX;;;AAGA,8BAAY,QAAZ,EAAsB;AAAA;;AAAA;;AACpB;AACA,SAAK,IAAL,GAAY,qBAAW,QAAX,CAAZ;AAEA;;AACA,SAAK,eAAL,GAAuB,IAAvB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC3C,MAAA,KAAI,CAAC,eAAL,GAAuB,OAAvB;AACD,KAFqB,CAAtB;AAIA;;AACA,SAAK,WAAL,GAAmB,IAAI,UAAJ,CAAe,KAAK,IAApB,CAAnB;AACA;;AACA,SAAK,SAAL,GAAiB,IAAI,YAAJ,CAAiB,KAAK,IAAtB,CAAjB;AACA;;AACA,SAAK,gBAAL,GAAwB,IAAI,eAAJ,CAAoB,KAAK,IAAzB,CAAxB;AACD;AAED;;;;;;;oCAGgB;AACd;AACA,MAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAAvB;AACA,WAAK,IAAL,CAAU,SAAV,GAAsB,IAAtB,CAA2B,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAA3B;AACA,aAAO,KAAK,cAAZ;AACD;AAED;;;;;;4BAGQ;AACN;AACA,UAAI,CAAC,KAAK,eAAV,EAA2B;AACzB,eAAO,IAAP;AACD;;AACD,UAAI,MAAM,GAAG,KAAK,WAAL,CAAiB,KAAjB,EAAb;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,MAAM,GAAG,KAAK,SAAL,CAAe,KAAf,EAAT;AACD;;AACD,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,MAAM,GAAG,KAAK,gBAAL,CAAsB,KAAtB,EAAT;AACD;;AACD,UAAI,MAAJ,EAAY;AACV;AACA,aAAK,eAAL,CAAqB,MAArB;AACA,aAAK,eAAL,GAAuB,IAAvB;AACD,OAJD,MAIO,IAAI,KAAK,IAAL,CAAU,OAAV,EAAJ,EAAyB;AAC9B,aAAK,eAAL,CACE,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,2CAAV,CAAf,CADF;AAGA,aAAK,eAAL,GAAuB,IAAvB;AACD;;AACD,yBAAS,MAAT;AACA,aAAO,MAAP;AACD;;;;;;;;IAGG,W;;;AACJ,yBAAc;AAAA;AAAE;AAEhB;;;;;;;;;;+BAMW,K,EAAO,a,EAAe;AAC/B,UAAI,CAAC,KAAL,EAAY;AACV,eAAO,KAAP;AACD;;AACD,aAAO,KAAK,UAAL,CAAgB,KAAK,QAAL,CAAc,KAAd,CAAhB,EAAsC,aAAtC,CAAP;AACD;AAED;;;;;;;;;gCAMY,Q,EAAU,a,EAAe;AACnC,UAAI,CAAC,QAAL,EAAe;AACb,eAAO,KAAP;AACD;;AACD,aAAO,KAAK,UAAL,CAAgB,QAAQ,CAAC,KAAT,CAAe,KAAf,CAAhB,EAAuC,aAAvC,CAAP;AACD;AAED;;;;;;;;+BAKW,S,EAAW,a,EAAe;AACnC,UAAI,KAAK,GAAG,KAAZ;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,aAAa,EAAI;AACjC,QAAA,KAAK,GACH,KAAK,IACL,aAAa,CAAC,QAAd,CACE,aAAa,CAAC,OAAd,CAAsB,yBAAtB,EAAiD,EAAjD,CADF,CAFF;AAKD,OAND;AAOA,aAAO,KAAP;AACD;AAED;;;;;;;;6BAKS,K,EAAO;AACd,aAAO,oBAAQ,KAAR,IAAiB,KAAjB,GAAyB,CAAC,KAAD,CAAhC;AACD;;;;;;IAGG,U;;;AACJ;;;AAGA,sBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AACD;AAED;;;;;;;4BAGQ;AACN,UAAI,CAAC,KAAK,IAAL,CAAU,OAAV,EAAL,EAA0B;AACxB;AACA,eAAO,IAAP;AACD,OAJK,CAMN;;;AACA,UAAM,SAAS,GAAG,UAAU,CAC1B,KAAK,IAAL,CAAU,WAAV,EAD0B,EAE1B,0BAF0B,CAA5B;;AAIA,UAAI,CAAC,SAAL,EAAgB;AACd,eAAO,IAAP;AACD,OAbK,CAeN;;;AACA,UAAM,iBAAiB,GAAG,UAAU,CAClC,KAAK,IAAL,CAAU,WAAV,EADkC,EAElC,mCAFkC,CAApC;AAIA,UAAM,MAAM,GACT,iBAAiB,IAAI,iBAAiB,CAAC,WAAlB,MAAmC,OAAzD,IACA,KAFF;AAIA,aAAO,IAAI,sBAAJ,CAAe,SAAf,EAA0B,MAA1B,CAAP;AACD;;;;;;IAGG,Y;;;AACJ;;;AAGA,wBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,UAAL,GAAkB,IAAI,WAAJ,EAAlB;AACD;AAED;;;;;;;4BAGQ;AACN,UAAI,CAAC,KAAK,IAAL,CAAU,OAAV,EAAL,EAA0B;AACxB;AACA,eAAO,IAAP;AACD;;AAED,UAAM,QAAQ,GAAG,KAAK,IAAL,CAAU,OAAV,EAAjB,CANM,CAQN;;AACA,UAAM,QAAQ,GAAG,KAAK,IAAL,CACd,WADc,GAEd,gBAFc,CAEG,oCAFH,CAAjB;;AAGA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;;AACA,YACE,OAAO,CAAC,YAAD,CAAP,IACA,CAAC,OAAO,CAAC,WADT,IAEC,CAAC,QAAD,IAAa,CAAC,qCAA2B,OAA3B,CAHjB,EAIE;AACA;AACD;;AACD,QAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,IAAxB;;AACA,YAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,OAAO,CAAC,WAA9B,CAAL,EAAiD;AAC/C;AACD;;AACD,YAAM,cAAc,GAAG,KAAK,iBAAL,CAAuB,OAAvB,CAAvB;;AACA,YAAI,cAAJ,EAAoB;AAClB,iBAAO,cAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;sCAIkB,O,EAAS;AACzB,UAAM,IAAI,GAAG,wBAAa,OAAO,CAAC,WAArB,CAAb;;AACA,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,IAAP;AACD,OAJwB,CAMzB;;;AACA,UAAI,CAAC,KAAK,UAAL,CAAgB,UAAhB,CAA2B,IAAI,CAAC,OAAD,CAA/B,EAA0C,aAA1C,CAAL,EAA+D;AAC7D,eAAO,IAAP;AACD,OATwB,CAWzB;;;AACA,UAAI,SAAS,GAAG,IAAhB;AACA,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,IAAjB,EAAuB,UAAvB,CAApB;;AACA,UAAI,WAAJ,EAAiB;AACf,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,UAAA,SAAS,GAAG,KAAK,kBAAL,CAAwB,WAAW,CAAC,CAAD,CAAnC,CAAZ;;AACA,cAAI,SAAJ,EAAe;AACb;AACD;AACF;AACF;;AACD,UAAI,CAAC,SAAL,EAAgB;AACd,eAAO,IAAP;AACD,OAxBwB,CA0BzB;;;AACA,UAAM,mBAAmB,GAAG,KAAK,KAAL,CAC1B,KAAK,YAAL,CAAkB,IAAlB,EAAwB,qBAAxB,CAD0B;AAE1B;AAAc,UAFY,CAA5B;AAKA,aAAO,IAAI,sBAAJ,CAAe,SAAf,EAA0B,CAAC,mBAA3B,CAAP;AACD;AAED;;;;;;;;0BAKM,K,EAAO,G,EAAK;AAChB,UAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,EAA/B,EAAmC;AACjC,eAAO,GAAP;AACD;;AACD,UAAI,OAAO,KAAP,IAAgB,SAApB,EAA+B;AAC7B,eAAO,KAAP;AACD;;AACD,UAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,YAAM,SAAS,GAAG,KAAK,CAAC,WAAN,EAAlB;;AACA,YAAI,SAAS,IAAI,OAAjB,EAA0B;AACxB,iBAAO,KAAP;AACD;;AACD,YAAI,SAAS,IAAI,MAAjB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,GAAP;AACD;AAED;;;;;;;uCAImB,I,EAAM;AACvB;AACA,UAAI,CAAC,KAAK,UAAL,CAAgB,UAAhB,CAA2B,IAAI,CAAC,OAAD,CAA/B,EAA0C,CAAC,SAAD,CAA1C,CAAL,EAA6D;AAC3D,eAAO,IAAP;AACD;;AACD;AAAO;AAAwB,aAAK,YAAL,CAAkB,IAAlB,EAAwB,WAAxB;AAA/B;AACD;AAED;;;;;;;;gCAKY,I,EAAM,I,EAAM;AACtB,UAAM,KAAK,GAAG,IAAI,CAAC,IAAD,CAAlB;;AACA,UAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,EAA/B,EAAmC;AACjC,eAAO,IAAP;AACD;;AACD,aAAO,oBAAQ,KAAR,IAAiB,KAAjB,GAAyB,CAAC,KAAD,CAAhC;AACD;AAED;;;;;;;;iCAKa,I,EAAM,I,EAAM;AACvB,UAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAAnB;AACA,UAAM,KAAK,GAAG,UAAU,IAAI,UAAU,CAAC,CAAD,CAAtC;AACA,aAAO,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,EAA3B,GAAgC,IAAhC,GAAuC,KAA9C;AACD;;;;;;IAGG,e;;;AACJ;;;AAGA,2BAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,OAAL,GAAe,IAAf;AACA;;AACA,SAAK,UAAL,GAAkB,IAAlB;AACA;;AACA,SAAK,UAAL,GAAkB,IAAI,WAAJ,EAAlB;AACD;AAED;;;;;;;;;;oCAMgB,I,EAAM;AACpB,UAAM,YAAY,GAAG,0BAArB;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,gBAAL,CAAsB,kCAAtB,CAAjB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,QAAQ,CAAC,CAAD,CAAxB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,YAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAM,OAAO,GAAG,OAAO,CAAC,YAAR,CAAqB,SAArB,KAAmC,OAAO,CAAC,WAA3D;;AACA,YAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AACD,YAAI,KAAK,eAAL,CAAqB,OAArB,EAA8B,IAA9B,EAAoC,YAApC,CAAJ,EAAuD;AACrD,cAAI,aAAa,GAAG,IAApB;;AACA,cAAI,OAAO,CAAC,WAAR,MAAyB,MAA7B,EAAqC;AACnC,YAAA,aAAa,GAAG,IAAhB;AACD,WAFD,MAEO,IAAI,OAAO,CAAC,WAAR,MAAyB,OAA7B,EAAsC;AAC3C,YAAA,aAAa,GAAG,KAAhB;AACD;;AACD,iBAAO,aAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;oCAWgB,O,EAAS,I,EAAM,W,EAAa;AAC1C,WACE,IAAI,IAAI,GAAG,OADb,EAEE,IAAI,IAAI,CAAC,IAAI,CAAC,WAAD,CAFf,EAGE,IAAI,GAAG,IAAI,CAAC,UAHd,EAIE;AACA,QAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,IAApB,CADA,CAEA;;AACA,YAAI,IAAI,CAAC,YAAL,IAAqB,IAAI,CAAC,YAAL,CAAkB,WAAlB,CAAzB,EAAyD;AACvD;AACA,cAAM,IAAI,GAAG,IAAI,CAAC,YAAL,CAAkB,UAAlB,CAAb;AACA,iBAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,EAAkC,aAAlC,CAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;;;;;uCASmB,I,EAAM;AACvB,UAAM,YAAY,GAAG,2BAArB;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,gBAAL,CAAsB,wBAAtB,CAAjB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,QAAQ,CAAC,CAAD,CAAxB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,YAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAM,OAAO,GAAG,OAAO,CAAC,YAAR,CAAqB,SAArB,KAAmC,OAAO,CAAC,WAA3D;AACA,YAAM,IAAI,GAAG,OAAO,CAAC,OAAR,CAAgB,uBAAhB,CAAb;AACA,YAAM,IAAI,GAAG,IAAI,CAAC,YAAL,CAAkB,UAAlB,CAAb;;AACA,YAAI,IAAI,CAAC,OAAL,CAAa,2BAAb,KAA6C,CAAC,CAAlD,EAAqD;AACnD;AACD;;AACD,YAAI,KAAK,eAAL,CAAqB,IAAI,CAAC,aAA1B,EAAyC,IAAzC,EAA+C,YAA/C,CAAJ,EAAkE;AAChE,iBAAO,OAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;qCAIiB;AACf,UAAI,MAAM,GAAG,IAAb;;AACA,UAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACxB,QAAA,MAAM,GAAG,CAAC,KAAK,OAAf;AACD,OAFD,MAEO,IAAI,KAAK,IAAL,CAAU,OAAV,EAAJ,EAAyB;AAC9B;AACA,QAAA,MAAM,GAAG,KAAT;AACD;;AACD,UAAI,KAAK,UAAL,IAAmB,IAAnB,IAA2B,MAAM,IAAI,IAAzC,EAA+C;AAC7C,eAAO,IAAI,sBAAJ,CAAe,KAAK,UAApB,EAAgC,MAAhC,CAAP;AACD;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;wCAIoB;AAAA;;AAClB,UAAI,MAAM,GAAG,KAAK,cAAL,EAAb;;AACA,UAAI,MAAJ,EAAY;AACV,eAAO,MAAP;AACD,OAJiB,CAMlB;;;AACA,UAAM,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CACd,IADc,CACT,KAAK,IAAL,CAAU,WAAV,GAAwB,gBAAxB,CAAyC,uBAAzC,CADS,EAEd,MAFc,CAEP,UAAA,IAAI;AAAA,eACV,MAAI,CAAC,UAAL,CAAgB,WAAhB,CACE,IAAI,CAAC,YAAL,CAAkB,UAAlB,CADF,EAEE,aAFF,CADU;AAAA,OAFG,CAAjB;;AASA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,QAAQ,CAAC,CAAD,CAAR,IAAe,MAAM,IAAI,IAAzC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,YAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;;AACA,YAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACxB,eAAK,OAAL,GAAe,KAAK,eAAL,CAAqB,OAArB,CAAf;AACD;;AACD,YAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,eAAK,UAAL,GAAkB,KAAK,kBAAL,CAAwB,OAAxB,CAAlB;AACD;;AACD,QAAA,MAAM,GAAG,KAAK,cAAL,EAAT;AACD;;AACD,aAAO,MAAP;AACD;AAED;;;;;;4BAGQ;AACN,UAAI,CAAC,KAAK,IAAL,CAAU,OAAV,EAAL,EAA0B;AACxB;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAK,iBAAL,EAAP;AACD;;;;;AAGH;;;;;;AAIO,SAAS,cAAT,CAAwB,QAAxB,EAAkC;AACvC;AACA,MAAM,IAAI,GAAG,UAAU,CAAC,QAAD,EAAW,YAAX,CAAvB;;AACA,MAAI,IAAJ,EAAU;AACR,WAAO,IAAP;AACD,GALsC,CAMvC;;;AACA,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAT,kBAAiC,YAAjC,OAAX;;AACA,MAAI,EAAJ,EAAQ;AACN,WAAO,EAAE,CAAC,YAAH,CAAgB,YAAhB,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;AAUA,SAAS,UAAT,CAAoB,QAApB,EAA8B,IAA9B,EAAoC;AAClC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAT,uBAAqC,IAArC,SAAX;;AACA,MAAI,EAAJ,EAAQ;AACN,WAAO,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;AACO,SAAS,qBAAT,GAAiC;AACtC,SAAO,QAAP;AACD;;;;;;;;;;;;;;;;ACviBD;;;;;;;;;;;;;;;;AAgBA;;IAEa,U;;;AACX;;;;AAIA,sBAAY,sBAAZ,EAAoC,MAApC,EAA4C;AAAA;;AAC1C,QAAI,aAAJ,EAAmB,SAAnB,EAA8B,KAA9B;AACA,QAAM,GAAG,GAAG,sBAAsB,CAAC,OAAvB,CAA+B,GAA/B,CAAZ;;AACA,QAAI,GAAG,IAAI,CAAC,CAAZ,EAAe;AACb;AACA,MAAA,SAAS,GAAG,sBAAZ;AACA,MAAA,aAAa,GAAG,SAAS,CAAC,SAAV,CAAoB,CAApB,EAAuB,GAAvB,CAAhB;AACA,MAAA,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,GAAG,GAAG,CAA1B,CAAR;;AACA,UAAI,KAAK,IAAI,GAAb,EAAkB;AAChB,cAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF,KARD,MAQO;AACL;AACA,MAAA,aAAa,GAAG,sBAAhB;AACA,MAAA,SAAS,GAAG,IAAZ;AACA,MAAA,KAAK,GAAG,IAAR;AACD;AAED;;;AACA,SAAK,cAAL,GAAsB,aAAtB;AACA;;AACA,SAAK,UAAL,GAAkB,SAAlB;AACA;;AACA,SAAK,MAAL,GAAc,KAAd;AACA;;AACA,SAAK,OAAL,GAAe,MAAf;AACD;AAED;;;;;;;uCAGmB;AACjB,aAAO,KAAK,cAAZ;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;+BAGW;AACT,aAAO,KAAK,MAAZ;AACD;AAED;;;;;;+BAGW;AACT,aAAO,KAAK,OAAZ;AACD;;;;;;;;;;;ACzDH;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AA1BA;;;;;;;;;;;;;;;;AAgBA;;;;AAYA,iCAA0B,IAA1B;AACA,uBAAgB,IAAhB;AACA,2BAAoB,IAApB;AACA,2BAAoB,IAApB;AACA,sBAAe,IAAf;AACA,+BAAmB,IAAnB;AACA,4BAAqB,IAArB;;;;;;;;;;AClCA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQA,SAAS,QAAT,CAAkB,KAAlB,EAAwC;AAAA,MAAf,SAAe,uEAAH,CAAG;AACtC,MAAM,GAAG,GAAG,KAAK,MAAjB;AACA,MAAI,CAAC,GAAG,SAAS,IAAI,CAAb,GAAiB,SAAjB,GAA6B,IAAI,CAAC,GAAL,CAAS,GAAG,GAAG,SAAf,EAA0B,CAA1B,CAArC;;AACA,SAAO,CAAC,GAAG,GAAX,EAAgB,CAAC,EAAjB,EAAqB;AACnB,QAAM,KAAK,GAAG,KAAK,CAAL,CAAd,CADmB,CAEnB;;AACA;;AACA,QAAI,KAAK,KAAK,KAAV,IAAoB,KAAK,KAAK,KAAV,IAAmB,KAAK,KAAK,KAArD,EAA6D;AAC3D,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;AAED;;;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,GAAG,CAAC,KAAJ,CAAU,SAAV,CAAoB,QAAzB,EAAmC;AACjC,IAAA,GAAG,CAAC,MAAJ,CAAW,cAAX,CAA0B,KAAK,CAAC,SAAhC,EAA2C,UAA3C,EAAuD;AACrD,MAAA,UAAU,EAAE,KADyC;AAErD,MAAA,YAAY,EAAE,IAFuC;AAGrD,MAAA,QAAQ,EAAE,IAH2C;AAIrD,MAAA,KAAK,EAAE;AAJ8C,KAAvD;AAMD;AACF;;;;;;;;;;ACnDD;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQA,SAAS,wBAAT,CAAkC,IAAlC,EAAwC;AACtC;AACA;AACA;AACA,SAAO,IAAI,IAAI,IAAR,IAAgB,KAAK,eAAL,CAAqB,QAArB,CAA8B,IAA9B,CAAvB;AACD;AAED;;;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,GAAG,CAAC,YAAJ,CAAiB,SAAjB,CAA2B,QAAhC,EAA0C;AACxC,IAAA,GAAG,CAAC,MAAJ,CAAW,cAAX,CAA0B,GAAG,CAAC,YAAJ,CAAiB,SAA3C,EAAsD,UAAtD,EAAkE;AAChE,MAAA,UAAU,EAAE,KADoD;AAEhE,MAAA,YAAY,EAAE,IAFkD;AAGhE,MAAA,QAAQ,EAAE,IAHsD;AAIhE,MAAA,KAAK,EAAE;AAJyD,KAAlE;AAMD;AACF;;;;;;;;;;AC5CD;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASA,SAAS,0BAAT,CAAoC,KAApC,EAA2C,KAA3C,EAAkD;AAChD,MAAM,MAAM,GAAG,KAAK,KAAK,SAAV,GAAsB,KAAK,QAAL,CAAc,KAAd,CAAtB,GAA6C,CAAC,KAA7D;;AACA,MAAI,MAAJ,EAAY;AACV,SAAK,MAAL,CAAY,KAAZ;AACA,WAAO,KAAP;AACD,GAHD,MAGO;AACL,SAAK,GAAL,CAAS,KAAT;AACA,WAAO,IAAP;AACD;AACF;AAED;;;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,IAAI,CAAC,GAAD,CAAJ,IAAa,GAAG,CAAC,YAArB,EAAmC;AACjC,IAAA,GAAG,CAAC,MAAJ,CAAW,cAAX,CAA0B,GAAG,CAAC,YAAJ,CAAiB,SAA3C,EAAsD,QAAtD,EAAgE;AAC9D,MAAA,UAAU,EAAE,KADkD;AAE9D,MAAA,YAAY,EAAE,IAFgD;AAG9D,MAAA,QAAQ,EAAE,IAHoD;AAI9D,MAAA,KAAK,EAAE;AAJuD,KAAhE;AAMD;AACF;AAED;;;;;;;AAKA,SAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,SAAO,yBAAyB,IAAzB,CAA8B,GAAG,CAAC,SAAJ,CAAc,SAA5C,CAAP;AACD;;;;;;;;;;;AC1DD;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQO,SAAS,IAAT,CAAc,CAAd,EAAiB;AACtB,EAAA,CAAC,GAAG,MAAM,CAAC,CAAD,CAAV,CADsB,CAGtB;;AACA,MAAI,CAAC,CAAL,EAAQ;AACN,WAAO,CAAP;AACD;;AAED,SAAO,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAApB;AACD;AAED;;;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,GAAG,CAAC,IAAJ,CAAS,IAAd,EAAoB;AAClB,IAAA,GAAG,CAAC,MAAJ,CAAW,cAAX,CAA0B,GAAG,CAAC,IAA9B,EAAoC,MAApC,EAA4C;AAC1C,MAAA,UAAU,EAAE,KAD8B;AAE1C,MAAA,YAAY,EAAE,IAF4B;AAG1C,MAAA,QAAQ,EAAE,IAHgC;AAI1C,MAAA,KAAK,EAAE;AAJmC,KAA5C;AAMD;AACF;;;;;;;;;;;AChDD;;;;;;;;;;;;;;;AAgBA,IAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,cAAxC;AAEA;;;;;;;;;AAQO,SAAS,MAAT,CAAgB,MAAhB,EAAwB,QAAxB,EAAkC;AACvC,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,UAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAD,CAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,QAAM,MAAM,GAAG,SAAS,CAAC,CAAD,CAAxB;;AACA,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAK,IAAM,GAAX,IAAkB,MAAlB,EAA0B;AACxB,YAAI,cAAc,CAAC,IAAf,CAAoB,MAApB,EAA4B,GAA5B,CAAJ,EAAsC;AACpC,UAAA,MAAM,CAAC,GAAD,CAAN,GAAc,MAAM,CAAC,GAAD,CAApB;AACD;AACF;AACF;AACF;;AACD,SAAO,MAAP;AACD;AAED;;;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,GAAG,CAAC,MAAJ,CAAW,MAAhB,EAAwB;AACtB,IAAA,GAAG,CAAC,MAAJ,CAAW,cAAX,CAA0B,GAAG,CAAC,MAA9B,EAAsC,QAAtC,EAAgD;AAC9C,MAAA,UAAU,EAAE,KADkC;AAE9C,MAAA,YAAY,EAAE,IAFgC;AAG9C,MAAA,QAAQ,EAAE,IAHoC;AAI9C,MAAA,KAAK,EAAE;AAJuC,KAAhD;AAMD;AACF;;;;;;;;;;;AC1DD;;;;;;;;;;;;;;;AAgBA,IAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,cAAxC;AAEA;;;;;;;;AAOO,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AAC7B,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,UAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,MAAM,MAAM,GAAG,EAAf;;AACA,OAAK,IAAM,GAAX,IAAkB,MAAlB,EAA0B;AACxB,QAAI,cAAc,CAAC,IAAf,CAAoB,MAApB,EAA4B,GAA5B,CAAJ,EAAsC;AACpC,MAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,GAAD,CAAlB;AACD;AACF;;AACD,SAAO,MAAP;AACD;AAED;;;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,GAAG,CAAC,MAAJ,CAAW,MAAhB,EAAwB;AACtB,IAAA,GAAG,CAAC,MAAJ,CAAW,cAAX,CAA0B,GAAG,CAAC,MAA9B,EAAsC,QAAtC,EAAgD;AAC9C,MAAA,UAAU,EAAE,KADkC;AAE9C,MAAA,YAAY,EAAE,IAFgC;AAG9C,MAAA,QAAQ,EAAE,IAHoC;AAI9C,MAAA,KAAK,EAAE;AAJuC,KAAhD;AAMD;AACF;;;;;;;;;;;;ACpCD;;;;;;AAhBA;;;;;;;;;;;;;;;;AAkBA;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;AAChB,IAAA,GAAG,CAAC,OAAJ;AAAc;AAAkB,IAAA,OAAhC,CADgB,CAEhB;AACA;;AACA,QAAI,OAAO,WAAX,EAAqB;AACnB,MAAA,GAAG,CAAC,OAAJ,GAAc,OAAO,WAArB;AACD,KANe,CAOhB;AACA;;;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,OAAZ,GAAsB,OAAO,CAAC,OAA9B;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,MAAZ,GAAqB,OAAO,CAAC,MAA7B;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,GAAZ,GAAkB,OAAO,CAAC,GAA1B;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,IAAZ,GAAmB,OAAO,CAAC,IAA3B;AACD;AACF;;;;;;;;;;;;;;;;;;ACrCD;;;;;;;;;;;;;;;;AAeA;;;IAGM,O;;;;;;;;;;AACJ;;;4BAGQ,CAAE;AAEV;;;;;;8BAGU,CAAE;;;;;AAGd;;;;AACA,IAAM,cAAc,GAAG;AACrB,EAAA,OAAO,EAAE,CADY;AAErB,EAAA,kBAAkB,EAAE,CAFC;AAGrB,EAAA,aAAa,EAAE,CAHM;AAIrB,EAAA,iBAAiB,EAAE,CAJE;AAKrB,EAAA,2BAA2B,EAAE,CALR;AAMrB,EAAA,mBAAmB,EAAE,CANA;AAOrB,EAAA,qBAAqB,EAAE,CAPF;AAQrB,EAAA,+BAA+B,EAAE,CARZ;AASrB,EAAA,qDAAqD,EAAE,CATlC;AAUrB,EAAA,gCAAgC,EAAE,CAVb;AAWrB,EAAA,0BAA0B,EAAE,EAXP;AAYrB,EAAA,oBAAoB,EAAE,EAZD;AAarB,EAAA,eAAe,EAAE,EAbI;AAcrB,EAAA,gCAAgC,EAAE,EAdb;AAerB,EAAA,yBAAyB,EAAE,EAfN;AAgBrB,EAAA,+BAA+B,EAAE,EAhBZ;AAiBrB,EAAA,iCAAiC,EAAE,EAjBd;AAkBrB,EAAA,gCAAgC,EAAE,EAlBb;AAmBrB,EAAA,kCAAkC,EAAE,EAnBf;AAoBrB,EAAA,gBAAgB,EAAE,IApBG;AAqBrB,EAAA,uBAAuB,EAAE,IArBJ;AAsBrB,EAAA,sBAAsB,EAAE,IAtBH;AAuBrB,EAAA,2BAA2B,EAAE,IAvBR;AAwBrB,EAAA,iCAAiC,EAAE,IAxBd;AAyBrB,EAAA,2BAA2B,EAAE,IAzBR;AA0BrB,EAAA,qBAAqB,EAAE,IA1BF;AA2BrB,EAAA,uBAAuB,EAAE,IA3BJ;AA4BrB,EAAA,kBAAkB,EAAE,IA5BC;AA6BrB,EAAA,yBAAyB,EAAE,IA7BN;AA8BrB,EAAA,2BAA2B,EAAE,IA9BR;AA+BrB,EAAA,oBAAoB,EAAE,IA/BD;AAgCrB,EAAA,kBAAkB,EAAE,IAhCC;AAiCrB,EAAA,2BAA2B,EAAE,IAjCR;AAkCrB,EAAA,4BAA4B,EAAE,IAlCT;AAmCrB,EAAA,qCAAqC,EAAE,IAnClB;AAoCrB,EAAA,mCAAmC,EAAE,IApChB;AAqCrB,EAAA,mCAAmC,EAAE,IArChB;AAsCrB,EAAA,oCAAoC,EAAE,IAtCjB;AAuCrB,EAAA,oBAAoB,EAAE,IAvCD;AAwCrB,EAAA,YAAY,EAAE,IAxCO;AAyCrB,EAAA,mBAAmB,EAAE,IAzCA;AA0CrB,EAAA,mBAAmB,EAAE,IA1CA;AA2CrB,EAAA,mBAAmB,EAAE,IA3CA;AA4CrB,EAAA,+BAA+B,EAAE,IA5CZ;AA6CrB,EAAA,oBAAoB,EAAE,IA7CD;AA8CrB,EAAA,wBAAwB,EAAE;AA9CL,CAAvB;AAgDA;;;AACA,IAAM,eAAe,GAAG;AACtB,EAAA,cAAc,EAAE,CADM;AAEtB,EAAA,UAAU,EAAE,CAFU;AAGtB,EAAA,UAAU,EAAE,CAHU;AAItB,EAAA,iBAAiB,EAAE,CAJG;AAKtB,EAAA,UAAU,EAAE,CALU;AAMtB,EAAA,gBAAgB,EAAE;AANI,CAAxB;AASA;;;;;;IAGM,sB;;;AACL;;;AAGC,oCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,SAAL,GAAkB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAhD;AACD;AAED;;;;;;;kCAGc;AACZ,aAAO,KAAK,SAAZ;AACD;AAED;;;;;;gCAGY,K,EAAO;AACjB,WAAK,SAAL,GAAiB,KAAjB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,SAFA,CAEY;AAFZ,OAAP;AAID;AAED;;;;;;;4BAIQ;AACN,aAAO,wBAAP;AACD;;;;;AAGH;;;;;;;IAGM,yB;;;AACL;;;AAGC,uCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,mBAAL,GAA4B,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA1D;AAEA;;AACA,SAAK,cAAL,GAAuB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAArD;AACD;AAED;;;;;;;4CAGwB;AACtB,aAAO,KAAK,mBAAZ;AACD;AAED;;;;;;0CAGsB,K,EAAO;AAC3B,WAAK,mBAAL,GAA2B,KAA3B;AACD;AAED;;;;;;uCAGmB;AACjB,aAAO,KAAK,cAAZ;AACD;AAED;;;;;;qCAGiB,K,EAAO;AACtB,WAAK,cAAL,GAAsB,KAAtB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,mBAFA,EAEsB;AAC3B,WAAK,cAHA,CAGiB;AAHjB,OAAP;AAKD;AAED;;;;;;;4BAIQ;AACN,aAAO,2BAAP;AACD;;;;;AAGH;;;;;;;IAGM,gB;;;AACL;;;AAGC,8BAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,eAAL,GAAwB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAtD;AAEA;;AACA,SAAK,cAAL,GAAuB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAArD;AAEA;;AACA,SAAK,gBAAL,GAAyB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAvD;AAEA;;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AAEA;;AACA,SAAK,YAAL,GAAqB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAnD;AAEA;;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AAEA;;AACA,SAAK,IAAL,GAAa,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA3C;AAEA;;AACA,SAAK,WAAL,GAAoB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAlD;AAEA;;AACA,SAAK,MAAL,GAAc,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAzB;AAEA;;AACA,SAAK,cAAL,GAAuB,IAAI,CAAC,EAAD,CAAJ,IAAY,IAAb,GAAqB,IAArB,GAA4B,IAAI,CAAC,EAAD,CAAtD;AACD;AAED;;;;;;;wCAGoB;AAClB,aAAO,KAAK,eAAZ;AACD;AAED;;;;;;sCAGkB,K,EAAO;AACvB,WAAK,eAAL,GAAuB,KAAvB;AACD;AAED;;;;;;uCAGmB;AACjB,aAAO,KAAK,cAAZ;AACD;AAED;;;;;;qCAGiB,K,EAAO;AACtB,WAAK,cAAL,GAAsB,KAAtB;AACD;AAED;;;;;;yCAGqB;AACnB,aAAO,KAAK,gBAAZ;AACD;AAED;;;;;;uCAGmB,K,EAAO;AACxB,WAAK,gBAAL,GAAwB,KAAxB;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;qCAGiB;AACf,aAAO,KAAK,YAAZ;AACD;AAED;;;;;;mCAGe,K,EAAO;AACpB,WAAK,YAAL,GAAoB,KAApB;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;6BAGS;AACP,aAAO,KAAK,IAAZ;AACD;AAED;;;;;;2BAGO,K,EAAO;AACZ,WAAK,IAAL,GAAY,KAAZ;AACD;AAED;;;;;;oCAGgB;AACd,aAAO,KAAK,WAAZ;AACD;AAED;;;;;;kCAGc,K,EAAO;AACnB,WAAK,WAAL,GAAmB,KAAnB;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,MAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,MAAL,GAAc,KAAd;AACD;AAED;;;;;;uCAGmB;AACjB,aAAO,KAAK,cAAZ;AACD;AAED;;;;;;qCAGiB,K,EAAO;AACtB,WAAK,cAAL,GAAsB,KAAtB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,eAFA,EAEkB;AACvB,WAAK,cAHA,EAGiB;AACtB,WAAK,gBAJA,EAImB;AACxB,WAAK,UALA,EAKa;AAClB,WAAK,YANA,EAMe;AACpB,WAAK,UAPA,EAOa;AAClB,WAAK,IARA,EAQO;AACZ,WAAK,WATA,EASc;AACnB,WAAK,MAVA,EAUS;AACd,WAAK,cAXA,CAWiB;AAXjB,OAAP;AAaD;AAED;;;;;;;4BAIQ;AACN,aAAO,kBAAP;AACD;;;;;AAGH;;;;;;;IAGM,kB;;;AACL;;;AAGC,gCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,gBAAL,GAAyB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAvD;AAEA;;AACA,SAAK,iBAAL,GAA0B,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAxD;AACD;AAED;;;;;;;yCAGqB;AACnB,aAAO,KAAK,gBAAZ;AACD;AAED;;;;;;uCAGmB,K,EAAO;AACxB,WAAK,gBAAL,GAAwB,KAAxB;AACD;AAED;;;;;;0CAGsB;AACpB,aAAO,KAAK,iBAAZ;AACD;AAED;;;;;;wCAGoB,K,EAAO;AACzB,WAAK,iBAAL,GAAyB,KAAzB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,gBAFA,EAEmB;AACxB,WAAK,iBAHA,CAGoB;AAHpB,OAAP;AAKD;AAED;;;;;;;4BAIQ;AACN,aAAO,oBAAP;AACD;;;;;AAGH;;;;;;;IAGM,gB;;;AACL;;;AAGC,8BAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,QAAL,GAAiB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAX,IAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,SAA/B,GAA4C,IAA5C,GAAmD,IAC/D,gBAD+D,CAC9C,IAAI,CAAC,CAAD,CAD0C,CAAnE;AAGA;;AACA,SAAK,MAAL,GAAe,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA7C;AAEA;;AACA,SAAK,KAAL,GAAc,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAX,IAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,SAA/B,GAA4C,IAA5C,GAAmD,IAC5D,kBAD4D,CACzC,IAAI,CAAC,CAAD,CADqC,CAAhE;AAGA;;AACA,SAAK,OAAL,GAAgB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAX,IAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,SAA/B,GAA4C,IAA5C,GAAmD,IAC9D,WAD8D,CAClD,IAAI,CAAC,CAAD,CAD8C,CAAlE;AAED;AAED;;;;;;;iCAGa;AACX,aAAO,KAAK,QAAZ;AACD;AAED;;;;;;+BAGW,K,EAAO;AAChB,WAAK,QAAL,GAAgB,KAAhB;AACD;AAED;;;;;;+BAGW;AACT,aAAO,KAAK,MAAZ;AACD;AAED;;;;;;6BAGS,K,EAAO;AACd,WAAK,MAAL,GAAc,KAAd;AACD;AAED;;;;;;8BAGU;AACR,aAAO,KAAK,KAAZ;AACD;AAED;;;;;;4BAGQ,K,EAAO;AACb,WAAK,KAAL,GAAa,KAAb;AACD;AAED;;;;;;gCAGY;AACV,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;8BAGU,K,EAAO;AACf,WAAK,OAAL,GAAe,KAAf;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,OAAd,EAAhB,GAA0C,EAFrC,EAEyC;AAC9C,WAAK,MAHA,EAGS;AACd,WAAK,KAAL,GAAa,KAAK,KAAL,CAAW,OAAX,EAAb,GAAoC,EAJ/B,EAImC;AACxC,WAAK,OAAL,GAAe,KAAK,OAAL,CAAa,OAAb,EAAf,GAAwC,EALnC,CAKuC;AALvC,OAAP;AAOD;AAED;;;;;;;4BAIQ;AACN,aAAO,kBAAP;AACD;;;;;AAGH;;;;;;;IAGM,oB;;;AACL;;;AAGC,kCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,IAAL,GAAa,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA3C;AACD;AAED;;;;;;;6BAGS;AACP,aAAO,KAAK,IAAZ;AACD;AAED;;;;;;2BAGO,K,EAAO;AACZ,WAAK,IAAL,GAAY,KAAZ;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,IAFA,CAEO;AAFP,OAAP;AAID;AAED;;;;;;;4BAIQ;AACN,aAAO,sBAAP;AACD;;;;;AAGH;;;;;;;IAGM,W;;;AACL;;;AAGC,yBAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,gBAAL,GAAyB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAvD;AAEA;;AACA,SAAK,kBAAL,GAA2B,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAzD;AAEA;;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AAEA;;AACA,SAAK,IAAL,GAAa,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA3C;AACD;AAED;;;;;;;yCAGqB;AACnB,aAAO,KAAK,gBAAZ;AACD;AAED;;;;;;uCAGmB,K,EAAO;AACxB,WAAK,gBAAL,GAAwB,KAAxB;AACD;AAED;;;;;;2CAGuB;AACrB,aAAO,KAAK,kBAAZ;AACD;AAED;;;;;;yCAGqB,K,EAAO;AAC1B,WAAK,kBAAL,GAA0B,KAA1B;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;6BAGS;AACP,aAAO,KAAK,IAAZ;AACD;AAED;;;;;;2BAGO,K,EAAO;AACZ,WAAK,IAAL,GAAY,KAAZ;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,gBAFA,EAEmB;AACxB,WAAK,kBAHA,EAGqB;AAC1B,WAAK,UAJA,EAIa;AAClB,WAAK,IALA,CAKO;AALP,OAAP;AAOD;AAED;;;;;;;4BAIQ;AACN,aAAO,aAAP;AACD;;;;;AAGH;;;;;;;IAGM,oB;;;AACL;;;AAGC,kCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,SAAL,GAAkB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAhD;AAEA;;AACA,SAAK,MAAL,GAAe,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA7C;AACD;AAED;;;;;;;kCAGc;AACZ,aAAO,KAAK,SAAZ;AACD;AAED;;;;;;gCAGY,K,EAAO;AACjB,WAAK,SAAL,GAAiB,KAAjB;AACD;AAED;;;;;;+BAGW;AACT,aAAO,KAAK,MAAZ;AACD;AAED;;;;;;6BAGS,K,EAAO;AACd,WAAK,MAAL,GAAc,KAAd;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,SAFA,EAEY;AACjB,WAAK,MAHA,CAGS;AAHT,OAAP;AAKD;AAED;;;;;;;4BAIQ;AACN,aAAO,sBAAP;AACD;;;;;AAGH;;;;;;;IAGM,mB;;;AACL;;;AAGC,iCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AACD;AAED;;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,UAFA,CAEa;AAFb,OAAP;AAID;AAED;;;;;;;4BAIQ;AACN,aAAO,qBAAP;AACD;;;;;AAGH;;;;;;;IAGM,mB;;;AACL;;;AAGC,iCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,IAAL,GAAa,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA3C;AAEA;;AACA,SAAK,OAAL,GAAgB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA9C;AAEA;;AACA,SAAK,QAAL,GAAiB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA/C;AAEA;;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AAEA;;AACA,SAAK,aAAL,GAAsB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAApD;AACD;AAED;;;;;;;6BAGS;AACP,aAAO,KAAK,IAAZ;AACD;AAED;;;;;;2BAGO,K,EAAO;AACZ,WAAK,IAAL,GAAY,KAAZ;AACD;AAED;;;;;;gCAGY;AACV,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;8BAGU,K,EAAO;AACf,WAAK,OAAL,GAAe,KAAf;AACD;AAED;;;;;;iCAGa;AACX,aAAO,KAAK,QAAZ;AACD;AAED;;;;;;+BAGW,K,EAAO;AAChB,WAAK,QAAL,GAAgB,KAAhB;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;sCAGkB;AAChB,aAAO,KAAK,aAAZ;AACD;AAED;;;;;;oCAGgB,K,EAAO;AACrB,WAAK,aAAL,GAAqB,KAArB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,IAFA,EAEO;AACZ,WAAK,OAHA,EAGU;AACf,WAAK,QAJA,EAIW;AAChB,WAAK,UALA,EAKa;AAClB,WAAK,aANA,CAMgB;AANhB,OAAP;AAQD;AAED;;;;;;;4BAIQ;AACN,aAAO,qBAAP;AACD;;;;;AAGH;;;;;;;IAGM,e;;;AACL;;;AAGC,6BAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AACD;AAED;;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,UAFA,CAEa;AAFb,OAAP;AAID;AAED;;;;;;;4BAIQ;AACN,aAAO,iBAAP;AACD;;;;;AAGH;;;;;;;IAGM,iB;;;AACL;;;AAGC,+BAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,UAAL,GAAmB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAAjD;AACD;AAED;;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;iCAGa,K,EAAO;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,UAFA,CAEa;AAFb,OAAP;AAID;AAED;;;;;;;4BAIQ;AACN,aAAO,mBAAP;AACD;;;;;AAGH;;;;;;;IAGM,yB;;;AACL;;;AAGC,uCAAuB;AAAA,QAAX,IAAW,uEAAJ,EAAI;;AAAA;;AAErB;AACA,SAAK,OAAL,GAAgB,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAZ,GAAoB,IAApB,GAA2B,IAAI,CAAC,CAAD,CAA9C;AACD;AAED;;;;;;;gCAGY;AACV,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;8BAGU,K,EAAO;AACf,WAAK,OAAL,GAAe,KAAf;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CACL,KAAK,KAAL,EADK,EACU;AACf,WAAK,OAFA,CAEU;AAFV,OAAP;AAID;AAED;;;;;;;4BAIQ;AACN,aAAO,2BAAP;AACD;;;;;;;AAGH,IAAM,SAAS,GAAG;AAChB,4BAA0B,sBADV;AAEhB,+BAA6B,yBAFb;AAGhB,sBAAoB,gBAHJ;AAIhB,wBAAsB,kBAJN;AAKhB,sBAAoB,gBALJ;AAMhB,0BAAwB,oBANR;AAOhB,iBAAe,WAPC;AAQhB,0BAAwB,oBARR;AAShB,yBAAuB,mBATP;AAUhB,yBAAuB,mBAVP;AAWhB,qBAAmB,eAXH;AAYhB,uBAAqB,iBAZL;AAahB,+BAA6B;AAbb,CAAlB;AAgBA;;;;;;AAKA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB;AACA,MAAM,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAD,CAAP,GAAa,IAA7B;;AACA,MAAI,GAAJ,EAAS;AACP,QAAM,IAAI,GAAG,SAAS,CAAC,GAAD,CAAtB;;AACA,QAAI,IAAJ,EAAU;AACR,aAAO,IAAI,IAAJ,CAAS,IAAT,CAAP;AACD;AACF;;AACD,QAAM,IAAI,KAAJ,CAAU,gCAAgC,IAA1C,CAAN;AACD;AAED;;;;;;;AAKA,SAAS,QAAT,CAAkB,WAAlB,EAA+B;AAC7B,MAAM,OAAO;AAAG;AAAyB,MAAI,WAAJ,EAAzC;AACA,SAAO,OAAO,CAAC,KAAR,EAAP;AACD;;;;;;;;;;ACpmCD;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,IAAM,YAAY,GAAG;AACnB,EAAA,OAAO,EAAE;AADU,CAArB;;IAIa,gB;;;AACX;;;AAGA,4BAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,OAAL;AAAe;AAAmC,4BAChD,KAAK,IAAL,CAAU,MAAV,GAAmB,QAD6B,EAEhD,QAFgD,EAGhD,EAHgD,CAAlD;AAMA,mCAAmB,KAAK,OAAxB,EAAiC,YAAjC;AAEA;;AACA,SAAK,IAAL,GAAY,qBAAM,gBAAN,CAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EAAtB;AAEA,SAAK,KAAL,GAAa,sBAAO;AAClB,MAAA,aAAa,EAAE,KAAK;AADF,KAAP,CAAb;AAIA;;AACA,SAAK,WAAL,GAAmB,KAAnB;AAEA;;;;AAGA,SAAK,QAAL,GAAgB,IAAI,8BAAJ,EAAhB;AAEA,SAAK,QAAL,CAAc,gBAAd,CAA+B,sBAA/B;AAEA;;AACA,SAAK,aAAL,GAAqB,IAArB;AAEA;;AACA,SAAK,WAAL,GAAmB,IAAnB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AACA,SAAK,aAAL,CAAmB,qBAAnB,CACE,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CADF;AAGD;AAED;;;;;;;qCAGiB,a,EAAe;AAC9B,WAAK,QAAL,CAAc,gBAAd,CAA+B,aAA/B;AACD;AAED;;;;;;uCAGmB;AACjB;AAAO;AAAuB,aAAK,QAAL,CAAc,gBAAd;AAA9B;AACD;AAED;;;;;;6BAGS;AACP,aAAO,KAAK,QAAL,CAAc,MAAd,EAAP;AACD;AAED;;;;;;2BAGO,G,EAAK;AACV,WAAK,QAAL,CAAc,MAAd,CAAqB,GAArB;AACD;AAED;;;;;;8BAGU,M,EAAQ;AAChB,UAAI,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,YAAM,SAAS,GAAG,GAAG,MAAH,CAAU,KAAK,QAAL,CAAc,YAAd,EAAV,CAAlB;AACA,QAAA,MAAM,CAAC,OAAP,CAAe,UAAA,KAAK,EAAI;AACtB,cAAI,SAAS,CAAC,OAAV,CAAkB,KAAlB,KAA4B,CAAC,CAAjC,EAAoC;AAClC,YAAA,SAAS,CAAC,IAAV,CAAe,KAAf;AACD;AACF,SAJD;AAKA,aAAK,QAAL,CAAc,YAAd,CAA2B,SAA3B;AACD;AACF;AAED;;;;;;iCAGa;AACX,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;;sCAIkB;AAChB,aAAO,KAAK,IAAL,CAAU,MAAV,GAAmB,QAAnB,CAA4B,MAAnC;AACD;AAED;;;;;;;mCAIe;AACb,aAAO,KAAK,IAAL,CAAU,MAAV,GAAmB,QAAnB,CAA4B,QAAnC;AACD;AAED;;;;;;kCAGc;AACZ,UAAM,SAAS,GAAG,2BAAiB,KAAK,eAAL,EAAjB,CAAlB;AACA,WAAK,QAAL,CAAc,kBAAd,CAAiC,mBAAS,KAAK,YAAL,EAAT,EAA8B,MAA/D;AACA,UAAM,QAAQ,GAAG,SAAS,CAAC,cAAD,CAA1B;AACA,UAAM,MAAM,GAAG,SAAS,CAAC,YAAD,CAAxB;AACA,UAAM,MAAM,GAAG,SAAS,CAAC,YAAD,CAAxB;;AACA,UAAI,QAAJ,EAAc;AACZ,aAAK,QAAL,CAAc,cAAd,CAA6B,QAA7B;AACD;;AACD,UAAI,MAAJ,EAAY;AACV,aAAK,QAAL,CAAc,YAAd,CAA2B,MAA3B;AACD;;AACD,UAAI,MAAJ,EAAY;AACV,aAAK,QAAL,CAAc,YAAd,CAA2B,MAA3B;AACD;;AACD,WAAK,QAAL,CAAc,gBAAd,CAA+B,8BAA/B;AACA,WAAK,SAAL,CAAe,mCAAiB,KAAK,IAAL,CAAU,MAAV,EAAjB,CAAf;AACD;AAED;;;;;;4BAGQ;AAAA;;AACN,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB;AACA,aAAK,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,KAAK,UAAL,EAAhC;AACA,aAAK,aAAL,GAAqB,KAAK,cAAL,CAClB,UADkB,CACP,KAAK,OADE,EACO,KAAK,IADZ,EACkB,KAAK,KADvB,EAElB,IAFkB,CAEb,UAAA,IAAI,EAAI;AACZ,UAAA,KAAI,CAAC,WAAL;;AACA,iBAAO,IAAI,CAAC,SAAL,GAAiB,IAAjB,CAAsB;AAAA,mBAAM,IAAN;AAAA,WAAtB,CAAP;AACD,SALkB,CAArB;AAMD;;AACD,aAAO,KAAK,aAAZ;AACD;AAED;;;;;;kCAGc,Y,EAAc;AAC1B,WAAK,QAAL,CAAc,aAAd,CAA4B,YAA5B;AACD;AAED;;;;;4BAEQ;AACN,WAAK,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,KAAK,UAAL,EAAhC;AACD;AAED;;;;;;iCAGa;AACX,aAAO,KAAK,QAAZ;AACD;AAED;;;;;;;mCAIe;AACb,aAAO,KAAK,WAAZ;AACD;AAED;;;;;;;sCAIkB,K,EAAO;AACvB,UAAM,IAAI,GAAG,IAAI,gCAAJ,EAAb;AACA,MAAA,IAAI,CAAC,kBAAL,CAAwB,KAAK,CAAC,eAA9B;AACA,MAAA,IAAI,CAAC,mBAAL,CAAyB,KAAK,CAAC,gBAA/B;AAEA,UAAM,OAAO,GAAG,IAAI,8BAAJ,EAAhB;AACA,MAAA,OAAO,CAAC,QAAR,CAAiB,KAAK,CAAC,SAAvB;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,KAAK,QAAxB;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,IAAhB;;AACA,UAAI,KAAK,CAAC,oBAAN,YAAsC,yBAA1C,EAAuD;AACrD,QAAA,OAAO,CAAC,SAAR,CAAkB,KAAK,CAAC,oBAAxB;AACD,OAXsB,CAWrB;;;AACF,aAAO,OAAP;AACD;AAED;;;;;;gDAG4B;AAC1B,aAAO,KAAK,KAAL,CAAW,MAAX,GAAoB,kBAApB,KAA2C,IAAlD;AACD;AAED;;;;;;;0CAIsB,K,EAAO;AAC3B;;;;;;AAMA,aACE,KAAK,CAAC,SAAN,KAAoB,6BAAe,oBAAnC,IACA,KAAK,CAAC,eAAN,KAA0B,8BAAgB,UAF5C;AAID;AAED;;;;;;;uCAImB,K,EAAO;AAAA;;AACxB;AACA;AACA,UAAI,KAAK,CAAC,SAAN,KAAoB,6BAAe,wBAAvC,EAAiE;AAC/D;AACD;;AAED,UACE,uCAAmB,gBAAnB,CAAoC,KAApC,KACA,CAAC,KAAK,yBAAL,EADD,IAEA,CAAC,KAAK,qBAAL,CAA2B,KAA3B,CAHH,EAIE;AACA;AACD;;AACD,WAAK,WAAL,GAAmB,KAAK,KAAL,GAAa,IAAb,CAAkB,UAAA,IAAI,EAAI;AAC3C,YAAM,OAAO,GAAG,MAAI,CAAC,iBAAL,CAAuB,KAAvB,CAAhB;;AACA,QAAA,MAAI,CAAC,WAAL,GAAmB,IAAnB;AACA,QAAA,IAAI,CAAC,OAAL,CAAa,OAAb;AACD,OAJkB,CAAnB;AAKD;;;;;;;;;;;;;;;;ACpRH;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;AAGA;AACA,IAAM,cAAc,GAAG;AACrB,QAAM,uBADe;AAErB,QAAM,iBAFe;AAGrB,QAAM,uBAHe;AAIrB,QAAM,uBAJe;AAKrB,cAAY,uBALS;AAMrB,aAAW,uBANU;AAOrB,QAAM,uBAPe;AAQrB,QAAM,yBARe;AASrB,QAAM,4BATe;AAUrB,QAAM,qBAVe;AAWrB,QAAM,YAXe;AAYrB,QAAM,eAZe;AAarB,QAAM,uBAbe;AAcrB,QAAM,sBAde;AAerB,QAAM,oBAfe;AAgBrB,QAAM,qBAhBe;AAiBrB,QAAM,yBAjBe;AAkBrB,WAAS,qBAlBY;AAmBrB,QAAM,uBAnBe;AAoBrB,QAAM,wBApBe;AAqBrB,QAAM,iBArBe;AAsBrB,QAAM,qBAtBe;AAuBrB,QAAM,0BAvBe;AAwBrB,WAAS;AAxBY,CAAvB;AA2BA;;;;;;;;;;;AAUO,IAAI,YAAJ;AAEP;;;;;;;;IAKa,S;;;AACX;;;;AAIA,qBAAY,GAAZ,EAAiB,wBAAjB,EAA2C;AAAA;;AACzC;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,yBAAL,GAAiC,wBAAjC;AACD;AAED;;;;;;2BAEO;AACL,UAAM,IAAI,GAAG,KAAK,IAAL,CAAU,OAAV,EAAb;;AACA,UAAI,CAAC,IAAL,EAAW;AACT;AACD;;AAED,UAAM,GAAG,GAAG,yBAAZ;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,aAAL,uBAAiC,GAAjC,SAAjB;;AACA,UAAI,QAAJ,EAAc;AACZ;AACD,OAVI,CAYL;;;AACA,MAAA,IAAI,CAAC,WAAL,CACE,wBAAc,KAAK,IAAL,CAAU,MAAV,GAAmB,QAAjC,EAA2C,MAA3C,EAAmD;AACjD,eAAO,YAD0C;AAEjD,gBAAQ,UAFyC;AAGjD,gBAAQ;AAHyC,OAAnD,CADF;AAOD;AAED;;;;;;;;2BAKO,iB,EAAmB,Q,EAAU;AAClC,UAAM,MAAM,GAAG,wBAAc,KAAK,IAAL,CAAU,MAAV,GAAmB,QAAjC,EAA2C,QAA3C,EAAqD,EAArD,CAAf;AACA,aAAO,KAAK,MAAL,CAAY,MAAZ,EAAoB,iBAApB,EAAuC,QAAvC,CAAP;AACD;AAED;;;;;;;;;2BAMO,M,EAAQ,iB,EAAmB,Q,EAAU;AAC1C,UAAM,OAAO,GAAG,KAAK,wBAAL,CACd,MADc,EAEd,iBAFc,EAGd,QAHc,EAId,OAJF;AAMA,UAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAArB;AACA,MAAA,MAAM,CAAC,SAAP,CAAiB,GAAjB,sBAAmC,KAAnC;AACA,MAAA,MAAM,CAAC,YAAP,CAAoB,MAApB,EAA4B,QAA5B;;AACA,UAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,QAAA,MAAM,CAAC,YAAP,CAAoB,MAApB,EAA4B,OAAO,CAAC,MAAD,CAAnC;AACD;;AACD,MAAA,MAAM,CAAC,YAAP,CAAoB,OAApB,EAA6B,eAAI,cAAJ,EAAoB,MAApB,KAA+B,EAA5D;AACA,WAAK,YAAL,CAAkB,6BAAe,qBAAjC;AAEA,aAAO,MAAP;AACD;AAED;;;;;;;iCAIa,S,EAAW,gB,EAAkB;AACxC,WAAK,yBAAL,CAA+B,IAA/B,CAAoC,UAAA,iBAAiB,EAAI;AACvD,QAAA,iBAAiB,CAAC,YAAlB,GAAiC,WAAjC,CAA6C,SAA7C,EAAwD,gBAAxD;AACD,OAFD;AAGD;AAED;;;;;;;;;gCAMY,iB,EAAmB;AAC7B,UAAM,OAAO;AACX;AAA6F,MAAA,iBAAiB,IAC9G,OAAO,iBAAP,IAA4B,UADiE,GAEzF,iBAFyF,GAGzF;AAAC,iBAAS,sBAAM;AAAhB,OAJN;AAMA,UAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAArB;;AACA,UAAI,KAAK,KAAK,sBAAM,KAAhB,IAAyB,KAAK,KAAK,sBAAM,IAA7C,EAAmD;AACjD,QAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,sBAAM,KAAzB;AACD;;AACD,aAAO,OAAP;AACD;AAED;;;;;;;;;;iCAOa,iB,EAAmB,Q,EAAU;AACxC;AACE;AAAmD,SAAC,OAAO,iBAAP,IACpD,UADoD,GAEhD,iBAFgD,GAGhD,IAH+C,KAGtC;AAJf;AAMD;AAED;;;;;;;;;6CAMyB,M,EAAQ,iB,EAAmB,W,EAAa;AAAA;;AAC/D,UAAM,OAAO,GAAG,KAAK,WAAL,CAAiB,iBAAjB,CAAhB;AACA,UAAM,QAAQ,GAAG,KAAK,YAAL,CAAkB,iBAAlB,EAAqC,WAArC,CAAjB;;AACA,UAAM,QAAQ,GAAG,SAAX,QAAW,CAAA,KAAK,EAAI;AACxB,QAAA,KAAI,CAAC,YAAL,CAAkB,6BAAe,uBAAjC,EAA0D,IAA1D;;AACA,YAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,OALD;;AAMA,MAAA,MAAM,CAAC,gBAAP,CAAwB,OAAxB,EAAiC,QAAjC;AACA,aAAO;AAAC,QAAA,OAAO,EAAP,OAAD;AAAU,QAAA,QAAQ,EAAR;AAAV,OAAP;AACD;AAED;;;;;;;;;;sCAOkB,I,EAAM,M,EAAQ,iB,EAAmB,Q,EAAU;AAC3D,UAAM,MAAM,GAAG,KAAK,wBAAL,CACb,MADa,EAEb,iBAFa,EAGb,QAHa,CAAf,CAD2D,CAM3D;;AACA,MAAA,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,kBAArB;AACA,aAAO,IAAI,0CAAJ,CACL,IADK,EAEL,MAFK,EAGL,MAAM,CAAC,OAHF,EAIL,MAAM,CAAC,QAJF,EAKL,KALK,EAAP;AAMD;;;;;;;;;;;;;;;;ACpNH;;;;;;;;AAEA;AACA,IAAM,UAAU,GAAG;AACjB,EAAA,YAAY,EAAE,CADG;AAEjB,EAAA,iBAAiB,EAAE,CAFF;AAGjB,EAAA,gBAAgB,EAAE,CAHD;AAIjB,EAAA,aAAa,EAAE,CAJE;AAKjB,EAAA,aAAa,EAAE,CALE;AAMjB,EAAA,aAAa,EAAE,CANE;AAOjB,EAAA,YAAY,EAAE,CAPG;AAQjB,EAAA,aAAa,EAAE;AARE,CAAnB;AAWA;;;IAEa,S;;;AACX;;AAEA,uBAAc;AAAA;;AACZ;AACA,SAAK,UAAL,GAAkB,EAAlB;AACA;;AACA,SAAK,aAAL,GAAqB,EAArB;AACD;AAED;;;;;;;8CAG0B,Q,EAAU;AAClC,WAAK,YAAL,CAAkB,UAAU,CAAC,YAA7B,EAA2C,QAA3C;AACD;AAED;;;;;;gDAG4B,O,EAAS;AACnC,aAAO,KAAK,QAAL,CACL,UAAU,CAAC,YADN,EAEL,OAAO,CAAC,IAAR,CAAa,UAAA,GAAG;AAAA,eAAI,GAAG,CAAC,KAAJ,EAAJ;AAAA,OAAhB,CAFK,CAAP;AAID;AAED;;;;;;qDAGiC;AAC/B,aAAO,CAAC,CAAC,KAAK,aAAL,CAAmB,UAAU,CAAC,YAA9B,CAAT;AACD;AAED;;;;;;sCAGkB,Q,EAAU;AAC1B,WAAK,YAAL,CAAkB,UAAU,CAAC,aAA7B,EAA4C,QAA5C;AACD;AAED;;;;;;;wCAIoB,O,EAAS;AAC3B,aAAO,KAAK,QAAL,CAAc,UAAU,CAAC,aAAzB,EAAwC,OAAxC,CAAP;AACD;AAED;;;;;;sCAGkB,Q,EAAU;AAC1B,WAAK,YAAL,CAAkB,UAAU,CAAC,aAA7B,EAA4C,QAA5C;AACD;AAED;;;;;;0CAGsB;AACpB,aAAO,KAAK,QAAL,CAAc,UAAU,CAAC,aAAzB,EAAwC,IAAxC,CAAP;AACD;AAED;;;;;wCAEoB;AAClB,WAAK,cAAL,CAAoB,UAAU,CAAC,aAA/B;AACD;AAED;;;;;;sCAGkB,Q,EAAU;AAC1B,WAAK,YAAL,CAAkB,UAAU,CAAC,aAA7B,EAA4C,QAA5C;AACD;AAED;;;;;;0CAGsB;AACpB,aAAO,KAAK,QAAL,CAAc,UAAU,CAAC,aAAzB,EAAwC,IAAxC,CAAP;AACD;AAED;;;;;;6CAGyB;AACvB,aAAO,CAAC,CAAC,KAAK,aAAL,CAAmB,UAAU,CAAC,aAA9B,CAAT;AACD;AAED;;;;;;0CAGsB,Q,EAAU;AAC9B,WAAK,YAAL,CAAkB,UAAU,CAAC,iBAA7B,EAAgD,QAAhD;AACD;AAED;;;;;;8CAG0B;AACxB,aAAO,KAAK,QAAL,CAAc,UAAU,CAAC,iBAAzB,EAA4C,IAA5C,CAAP;AACD;AAED;;;;;;kDAG8B;AAC5B,aAAO,CAAC,CAAC,KAAK,UAAL,CAAgB,UAAU,CAAC,iBAA3B,CAAT;AACD;AAED;;;;;;2CAGuB,Q,EAAU;AAC/B;AAGA,WAAK,YAAL,CAAkB,UAAU,CAAC,gBAA7B,EAA+C,QAA/C;AACD;AAED;;;;;;8CAG0B,Q,EAAU;AAClC;AAGA,WAAK,YAAL,CAAkB,UAAU,CAAC,gBAA7B,EAA+C,QAA/C;AACD;AAED;;;;;;yCAGqB,Q,EAAU;AAC7B,WAAK,YAAL,CAAkB,UAAU,CAAC,gBAA7B,EAA+C,QAA/C;AACD;AAED;;;;;;;2CAIuB,e,EAAiB;AACtC,aAAO,KAAK,QAAL,CACL,UAAU,CAAC,gBADN,EAEL,eAAe,CAAC,IAAhB,CAAqB,UAAA,GAAG;AAAA,eAAI,GAAG,CAAC,KAAJ,EAAJ;AAAA,OAAxB,CAFK,CAAP;AAID;AAED;;;;;;gDAG4B;AAC1B,aAAO,CAAC,CAAC,KAAK,aAAL,CAAmB,UAAU,CAAC,gBAA9B,CAAT;AACD;AAED;;;;;;qCAGiB,Q,EAAU;AACzB,WAAK,YAAL,CAAkB,UAAU,CAAC,YAA7B,EAA2C,QAA3C;AACD;AAED;;;;;;;;uCAKmB,I,EAAiB;AAAA,UAAX,IAAW,uEAAJ,EAAI;AAClC,aAAO,KAAK,QAAL,CAAc,UAAU,CAAC,YAAzB,EAAuC;AAC5C,QAAA,IAAI,EAAJ,IAD4C;AAE5C,QAAA,IAAI,EAAJ;AAF4C,OAAvC,CAAP;AAID;AAED;;;;;;sCAGkB,Q,EAAU;AAC1B,WAAK,YAAL,CAAkB,UAAU,CAAC,aAA7B,EAA4C,QAA5C;AACD;AAED;;;;;;;;wCAKoB,I,EAAiB;AAAA,UAAX,IAAW,uEAAJ,EAAI;AACnC,aAAO,KAAK,QAAL,CAAc,UAAU,CAAC,aAAzB,EAAwC;AAC7C,QAAA,IAAI,EAAJ,IAD6C;AAE7C,QAAA,IAAI,EAAJ;AAF6C,OAAxC,CAAP;AAID;AAED;;;;;;;;iCAKa,E,EAAI,Q,EAAU;AACzB,UAAI,KAAK,UAAL,CAAgB,EAAhB,CAAJ,EAAyB;AACvB;AAGD;;AACD,WAAK,UAAL,CAAgB,EAAhB,IAAsB,QAAtB,CANyB,CAOzB;;AACA,UAAI,EAAE,IAAI,KAAK,aAAf,EAA8B;AAC5B,aAAK,gBAAL,CAAsB,EAAtB,EAA0B,QAA1B,EAAoC,KAAK,aAAL,CAAmB,EAAnB,CAApC;AACD;AACF;AAED;;;;;;;;;6BAMS,E,EAAI,I,EAAM;AACjB,WAAK,aAAL,CAAmB,EAAnB,IAAyB,IAAzB;AACA,UAAM,QAAQ,GAAG,KAAK,UAAL,CAAgB,EAAhB,CAAjB;;AACA,UAAI,QAAJ,EAAc;AACZ,aAAK,gBAAL,CAAsB,EAAtB,EAA0B,QAA1B,EAAoC,IAApC;AACD;;AACD,aAAO,CAAC,CAAC,QAAT;AACD;AAED;;;;;;;mCAIe,E,EAAI;AACjB,UAAI,EAAE,IAAI,KAAK,aAAf,EAA8B;AAC5B,eAAO,KAAK,aAAL,CAAmB,EAAnB,CAAP;AACD;AACF;AAED;;;;;;;;;qCAMiB,E,EAAI,Q,EAAU,I,EAAM;AAAA;;AACnC;AACA,MAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAM;AAC3B,QAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,EAApB;AACD,OAHD;AAID;;;;;;;;;;;;;;;;ACxQH;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;;;AAMA,SAAS,uBAAT,CAAiC,SAAjC,EAA4C,KAA5C,EAAmD;AACjD,SAAO,0BAA0B,SAA1B,GAAsC,GAAtC,GAA4C,KAA5C,GAAoD,GAA3D;AACD;AAED;;;;;;AAIA,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,MAAI,CAAC,qBAAS,KAAT,CAAL,EAAsB;AACpB,UAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,MAAI,CAAC,wBAAY,4BAAZ,EAA4B,KAAK,CAAC,SAAlC,CAAL,EAAmD;AACjD,UAAM,IAAI,KAAJ,CAAU,uBAAuB,CAAC,WAAD,EAAc,KAAK,CAAC,SAApB,CAAjC,CAAN;AACD;;AAED,MAAI,CAAC,wBAAY,6BAAZ,EAA6B,KAAK,CAAC,eAAnC,CAAL,EAA0D;AACxD,UAAM,IAAI,KAAJ,CACJ,uBAAuB,CAAC,iBAAD,EAAoB,KAAK,CAAC,eAA1B,CADnB,CAAN;AAGD;;AAED,MACE,CAAC,qBAAS,KAAK,CAAC,oBAAf,CAAD,IACA,KAAK,CAAC,oBAAN,IAA8B,IAFhC,EAGE;AACA,UAAM,IAAI,KAAJ,CACJ,uBAAuB,CACrB,sBADqB,EAErB,KAAK,CAAC,oBAFe,CADnB,CAAN;AAMD;;AAED,MAAI,KAAK,CAAC,gBAAN,IAA0B,IAA1B,IAAkC,CAAC,sBAAU,KAAK,CAAC,gBAAhB,CAAvC,EAA0E;AACxE,UAAM,IAAI,KAAJ,CACJ,uBAAuB,CAAC,kBAAD,EAAqB,KAAK,CAAC,gBAA3B,CADnB,CAAN;AAGD;AACF;AAED;;;IACa,kB;;;;;;AACX;;;;qCAIwB,K,EAAO;AAC7B,aACE,KAAK,CAAC,eAAN,KAA0B,8BAAgB,iBAA1C,IACA,KAAK,CAAC,eAAN,KAA0B,8BAAgB,gBAD1C,IAEA,KAAK,CAAC,eAAN,KAA0B,8BAAgB,UAH5C;AAKD;AAED;;;;;;;AAIA,8BAAY,iBAAZ,EAA+B;AAAA;;AAC7B;AACA,SAAK,UAAL,GAAkB,EAAlB;AAEA;;AACA,SAAK,UAAL,GAAkB,EAAlB;AAEA;;AACA,SAAK,WAAL,GAAmB,IAAnB;AAEA;;AACA,SAAK,eAAL,GAAuB,iBAAvB;AACD;AAED;;;;;;;0CAGsB,Q,EAAU;AAC9B,UAAI,CAAC,uBAAW,QAAX,CAAL,EAA2B;AACzB,cAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,WAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB;AACD;AAED;;;;;;0CAGsB,Q,EAAU;AAC9B,UAAI,CAAC,uBAAW,QAAX,CAAL,EAA2B;AACzB,cAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,WAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB;AACD;AAED;;;;;;6BAGS,K,EAAO;AAAA;;AACd,MAAA,aAAa,CAAC,KAAD,CAAb;AACA,WAAK,WAAL,GAAmB,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACjD,aAAK,IAAI,QAAQ,GAAG,CAApB,EAAuB,QAAQ,GAAG,KAAI,CAAC,UAAL,CAAgB,MAAlD,EAA0D,QAAQ,EAAlE,EAAsE;AACpE,cAAI;AACF,gBAAI,KAAI,CAAC,UAAL,CAAgB,QAAhB,EAA0B,KAA1B,MAAqC,oCAAa,YAAtD,EAAoE;AAClE,qBAAO,OAAO,CAAC,OAAR,EAAP;AACD;AACF,WAJD,CAIE,OAAO,CAAP,EAAU;AACV,0BAAI,CAAJ;AACD;AACF;;AACD,aAAK,IAAI,QAAQ,GAAG,CAApB,EAAuB,QAAQ,GAAG,KAAI,CAAC,UAAL,CAAgB,MAAlD,EAA0D,QAAQ,EAAlE,EAAsE;AACpE,cAAI;AACF,YAAA,KAAI,CAAC,UAAL,CAAgB,QAAhB,EAA0B,KAA1B;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,0BAAI,CAAJ;AACD;AACF;;AACD,eAAO,OAAO,CAAC,OAAR,EAAP;AACD,OAlBkB,CAAnB;AAmBD;AAED;;;;;;;;;gCAMY,S,EAAyD;AAAA,UAA9C,gBAA8C,uEAA3B,KAA2B;AAAA,UAApB,WAAoB,uEAAN,IAAM;AACnE,WAAK,QAAL,CAAc;AACZ,QAAA,SAAS,EAAT,SADY;AAEZ,QAAA,eAAe,EAAE,8BAAgB,UAFrB;AAGZ,QAAA,gBAAgB,EAAhB,gBAHY;AAIZ,QAAA,oBAAoB,EAAE;AAJV,OAAd;AAMD;;;;;;;;;;;;;;;;AChJH;;AACA;;AAIA;;AACA;;AACA;;;;;;;;AAEA;;;IAGa,iB;;;AACX;;;;AAIA,6BAAY,IAAZ,EAAkB,OAAlB,EAA2B;AAAA;;AACzB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA,QAAM,UAAU,GAAI,OAAO,IAAI,OAAO,CAAC,UAApB,IAAmC,IAAtD;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,sBAAN,CAHyB,EAIzB,sBAAO;AACL,mBAAa,IAAI,CAAC,UAAL,GAAkB,YAAlB,EADR;AAEL,uBAAiB,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EAFZ;AAGL,qBAAe,2BAAY,eAHtB;AAIL,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,SAJhC;AAKL,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,IALhC;AAML,oBAAc;AANT,KAAP,CAJyB;AAYzB;AAAqB,QAZI,CAA3B;AAcD;AAED;;;;;;;uCAGmB,Q,EAAU;AAC3B,UAAI,QAAQ,CAAC,qBAAT,EAAJ,EAAsC;AACpC,aAAK,KAAL,CAAW,SAAX,GAAuB,mBAAvB,CAA2C;AACzC,UAAA,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAT;AADwB,SAA3C;AAGD;AACF;AAED;;;;;;kCAGc,Q,EAAU;AACtB,UAAM,GAAG,GAAG,QAAQ,CAAC,MAAT,EAAZ;AACA,UAAM,SAAS,GAAG,QAAQ,CAAC,UAAT,EAAlB;;AACA,UAAI,GAAJ,EAAS;AACP,YAAI,SAAJ,EAAe;AACb;AAAM;AAAwD,UAAA,mBAAmB,GAAG;AAChF,YAAA,KAAK,EAAE,GADyE;AAEhF,YAAA,OAAO,EAAE;AAFuE,WAApF;AAIA,cAAI,qBAAJ,CACE,KAAK,KADP,EAEE,mBAFF,EAGE,2BAAY,eAHd,EAIE,KAJF;AAKD,SAVD,MAUO;AACL,cAAI,qBAAJ,CAAiB,KAAK,KAAtB,EAA6B,GAA7B,EAAkC,2BAAY,eAA9C,EAA+D,KAA/D;AACD;AACF;AACF;AAED;;;;;;;4BAIQ;AAAA;;AACN;AACA,WAAK,KAAL,CACG,SADH,GAEG,kBAFH,CAEsB,iCAAkB,yBAFxC;AAGA,WAAK,mBAAL,CAAyB,QAAzB,CAAkC,YAAM;AACtC,QAAA,KAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAEuB,iCAAkB,yBAFzC;AAGD,OAJD;AAKA,WAAK,mBAAL,CAAyB,EAAzB,CACE,uCADF,EAEE,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAFF;AAIA,WAAK,mBAAL,CAAyB,EAAzB,CACE,iCADF,EAEE,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAFF;AAKA,aAAO,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAAP;AACD;;;;;;;;;;;;;;;;AC9GH;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;IAIa,mB;;;AACX;;;;AAIA,+BAAY,IAAZ,EAAkB,OAAlB,EAA2B;AAAA;;AACzB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAA3B;AAEA;;AACA,SAAK,YAAL,GAAoB,IAApB;AAEA;;AACA,QAAM,cAAc,GAAG;AACrB,MAAA,YAAY,EAAE,IADO;AAErB,MAAA,OAAO,EAAE;AAFY,KAAvB;AAIA;;AACA,SAAK,QAAL,GAAgB,MAAM,CAAC,MAAP,CAAc,cAAd,EAA8B,OAAO,IAAI,EAAzC,CAAhB;AACD;AAED;;;;;;;;4BAIQ;AAAA;;AACN,UAAM,YAAY,GAAG,KAAK,QAAL,CAAc,YAAnC,CADM,CAGN;AACA;AACA;;AACA,UAAI,CAAC,YAAD,IAAiB,CAAC,YAAY,CAAC,uBAAb,CAAqC,QAArC,CAAtB,EAAsE;AACpE,cAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACD,OARK,CAUN;;;AACA,WAAK,KAAL,CACG,SADH,GAEG,kBAFH,CAEsB,iCAAkB,kCAFxC;AAIA,WAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,gBAAN,CAHyB,EAIzB,sBAAO;AACL,yBAAiB,KAAK,KAAL,CAAW,UAAX,GAAwB,gBAAxB,EADZ;AAEL,qBAAa,KAAK,KAAL,CAAW,UAAX,GAAwB,YAAxB,EAFR;AAGL,wBAAiB,YAAY,IAAI,YAAY,CAAC,GAA9B,IAAsC,IAHjD;AAIL,mBAAW,KAAK,QAAL,CAAc;AAJpB,OAAP,CAJyB;AAUzB;AAAqB,UAVI,CAA3B;AAaA,WAAK,YAAL,GAAoB,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAApB;AACA,aAAO,KAAK,mBAAL,CAAyB,YAAzB,GAAwC,IAAxC,CACL,UAAA,MAAM,EAAI;AACR;AACA,eAAO,KAAI,CAAC,sBAAL;AACL;AAAwB,QAAA,MAAM,CAAC,IAD1B,CAAP;AAGD,OANI,EAOL,UAAA,MAAM,EAAI;AACR,YAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,UAAA,KAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAGI,iCAAkB,kCAHtB;AAKD,SAND,MAMO;AACL,UAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;AACD;;AACD,cAAM,MAAN;AACD,OAlBI,CAAP;AAoBD;AAED;;;;;;;;2CAKuB,I,EAAM;AAC3B,WAAK,KAAL,CAAW,mBAAX,GAAiC,qBAAjC,GAD2B,CAG3B;;AACA,UAAM,eAAe,GAAG,IAAI,CAAC,cAAD,CAA5B;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,SAAD,CAApB;AACA,UAAM,WAAW,GAAG,IAAI,CAAC,aAAD,CAAxB;AACA,UAAM,YAAY,GAAG,KAAK,KAAL,CAClB,mBADkB,GAElB,iBAFkB,CAEA;AAAC,8BAAsB;AAAvB,OAFA,CAArB;AAGA,UAAM,QAAQ,GAAG,IAAI,kBAAJ,CACf,OADe;AAEf;AAAwB,UAAI,cAAJ,GAAgB,MAAhB,CAAuB,OAAvB,CAFT,CAAjB;AAIA,UAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAD,CAAJ,GACrB,IAAI,CAAC,kBAAD,CAAJ,CAAyB,GAAzB,CACE,UAAA,EAAE;AAAA,eAAI,IAAI,+BAAJ,CAAiB,EAAE,CAAC,MAAD,CAAnB,EAA6B,EAAE,CAAC,WAAD,CAA/B,CAAJ;AAAA,OADJ,CADqB,GAIrB,CACE;AACA,UAAI,+BAAJ,CACE,IAAI,CAAC,cAAD,CAAJ,CAAqB,MAArB,CADF,EAEE,IAAI,CAAC,cAAD,CAAJ,CAAqB,WAArB,CAFF,CAFF,CAJJ,CAd2B,CA0B3B;AACA;;AACA,UAAM,YAAY,GAAG,IAAI,wBAAJ,CAAoB,KAAK,KAAzB,CAArB;AACA,UAAM,eAAe,GAAG,YAAY,CAAC,QAAb,CAAsB,IAAtB,CAA2B,YAA3B,CAAxB;AAEA,UAAM,QAAQ,GAAG,IAAI,wDAAJ,CACf,YADe,EAEf,QAFe,EAGf,gBAHe,EAIf,eAJe,CAAjB;AAOA,WAAK,KAAL,CACG,YADH,GAEG,WAFH,CAEe,6BAAe,2BAF9B,EAE2D,IAF3D,EAtC2B,CA0C3B;;AACA,MAAA,YAAY,CAAC,KAAb,CACE,IAAI,oCAAJ,CACE,EADF,EACM;AACJ,MAAA,gBAAgB,CAAC,CAAD,CAFlB,EAGE,QAHF,EAIE,YAJF,EAKE,WALF,EAME;AAAA,eAAM,OAAO,CAAC,OAAR,EAAN;AAAA,OANF,CAM0B;AAN1B,OADF;AAUA,aAAO,QAAP;AACD;;;;;;;;;;;;;;;;;;;;;;AClLH;;;;;;;;;;;;;;;;AAgBA;IACa,O;;;;;;;;;;AACX;;;0BAGM,CAAE;AAER;;;;;;0BAGM,CAAE;AAER;;;;;;6BAGS,CAAE;AAEX;;;;;;iCAGa,CAAE;AAEf;;;;;;iCAGa,CAAE;AAEf;;;;;;gCAGY,CAAE;AAEd;;;;;;oCAGgB,CAAE;AAElB;;;;;;0CAGsB,CAAE;AAExB;;;;;;gCAGY,CAAE;AAEd;;;;;;8BAGU,CAAE;AAEZ;;;;;;gCAGY,CAAE;AAEd;;;;;;8BAGU,CAAE;AAEZ;;;;;;mCAGe,CAAE;;;;;;;;;;;;;;;;ACjEnB;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,UAAU,GAAG,sBAAnB;AACA,IAAM,iBAAiB,GAAG,OAA1B;AACA,IAAM,gBAAgB,GAAG,MAAzB;AACA,IAAM,2BAA2B,GAAG,cAApC;AAEA;;;IAEa,mB;;;AACX;;;;;;AAMA,+BAAY,GAAZ,EAAiB,UAAjB,EAA6B,OAA7B,EAAsC,IAAtC,EAA4C;AAAA;;AAC1C;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,WAAL,GAAmB,UAAnB;AAEA;;AACA,SAAK,cAAL,GAAsB,KAAK,WAAL,CAAiB,gBAAjB,EAAtB;AAEA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AAEA;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,cAAJ,EAAlB;AAEA;;AACA,SAAK,gBAAL,GAAwB,IAAxB;AAEA;;AACA,SAAK,gBAAL,GAAwB,CAAxB;AAEA;;AACA,SAAK,sBAAL,GAA8B,KAA9B;AAEA;;AACA,SAAK,QAAL,GAAgB,IAAI,CAAC,OAAL,EAAhB;AAEA;;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,SAAL,EAAzB;AAEA;;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,MAAL,EAAf;AACD;AAED;;;;;;;0BAGM,c,EAAgB;AACpB,WAAK,gBAAL,GAAwB,IAAxB;AACA,WAAK,gBAAL,GAAwB,IAAI,CAAC,GAAL,CACtB,KAAK,gBADiB,EAEtB,cAAc,GAAG,CAAH,GAAO,CAFC,CAAxB;;AAIA,UAAI,cAAJ,EAAoB;AAClB,aAAK,QAAL,CAAc,MAAd,CAAqB,gBAArB;AACA,aAAK,QAAL,CAAc,MAAd,CAAqB,2BAArB;AACD;AACF;AAED;;;;;;4BAGQ;AACN,WAAK,gBAAL,GAAwB,IAAxB;AACA,WAAK,gBAAL,GAAwB,CAAxB;AACA,WAAK,uBAAL;AACA,WAAK,QAAL,CAAc,MAAd,CAAqB,gBAArB;AACA,WAAK,QAAL,CAAc,MAAd,CAAqB,iBAArB;AACA,WAAK,QAAL,CAAc,MAAd,CAAqB,2BAArB;AACD;AAED;;;;;;;sCAIkB;AAChB,aAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,MAA1B;AACD;AAED;;;;;;;oCAIgB,oB,EAAsB;AAAA;;AACpC,UAAI,CAAC,KAAK,gBAAV,EAA4B;AAC1B,aAAK,gBAAL,GAAwB,KAAK,oBAAL,CAA0B,oBAA1B,CAAxB;AACD;;AACD,aAAO,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,UAAA,QAAQ,EAAI;AAC5C,YAAI,QAAQ,CAAC,YAAT,IAAyB,IAA7B,EAAmC;AACjC,UAAA,KAAI,CAAC,iBAAL,CAAuB,aAAvB,CAAqC,QAAQ,CAAC,YAA9C;AACD;;AACD,eAAO,QAAP;AACD,OALM,CAAP;AAMD;AAED;;;;;;;;yCAKqB,G,EAAK,Y,EAAc;AACtC,UAAM,YAAY,GAAG,KAAK,wBAAL,CACnB,GADmB;AAEnB;AAAwB,UAFL,EAGnB,YAHmB,CAArB;;AAKA,UAAI,YAAY,IAAI,YAAY,CAAC,WAAb,EAApB,EAAgD;AAC9C,aAAK,QAAL,CAAc,GAAd,CAAkB,gBAAlB,EAAoC,GAApC;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;yCAKqB,oB,EAAsB;AAAA;;AACzC,aAAO,KAAK,6BAAL,CAAmC,oBAAnC,EAAyD,IAAzD,CACL,UAAA,YAAY,EAAI;AACd,QAAA,MAAI,CAAC,sBAAL,CAA4B,YAA5B;;AACA,eAAO,YAAP;AACD,OAJI,CAAP;AAMD;AAED;;;;;;;;kDAK8B,oB,EAAsB;AAAA;;AAClD,aAAO,OAAO,CAAC,GAAR,CAAY,CACjB,KAAK,QAAL,CAAc,GAAd,CAAkB,gBAAlB,CADiB,EAEjB,KAAK,QAAL,CAAc,GAAd,CAAkB,2BAAlB,CAFiB,CAAZ,EAGJ,IAHI,CAGC,UAAA,YAAY,EAAI;AACtB,YAAM,GAAG,GAAG,YAAY,CAAC,CAAD,CAAxB;AACA,YAAM,IAAI,GAAG,YAAY,CAAC,CAAD,CAAzB,CAFsB,CAGtB;;AACA,YAAI,GAAG,IAAI,CAAC,oBAAZ,EAAkC;AAChC,cAAM,MAAM,GAAG,MAAI,CAAC,wBAAL,CACb,GADa;AAEb;AAAwB,cAFX,EAGb,mBAAmB,CAAC,IAAD,CAHN,CAAf;;AAKA,cAAI,MAAM,IAAI,MAAM,CAAC,WAAP,EAAd,EAAoC;AAClC;AACA,YAAA,MAAI,CAAC,gBAAL,GAAwB,CAAxB;AACA,mBAAO,MAAP;AACD;AACF,SAfqB,CAgBtB;;;AACA,eAAO,MAAI,CAAC,kBAAL,CAAwB,oBAAxB,EAA8C,IAA9C,CAAmD,UAAA,IAAI,EAAI;AAChE;AACA,cAAI,IAAI,IAAI,IAAI,CAAC,WAAL,EAAR,IAA8B,IAAI,CAAC,GAAvC,EAA4C;AAC1C,YAAA,MAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,gBAAlB,EAAoC,IAAI,CAAC,GAAzC;AACD;;AACD,iBAAO,IAAP;AACD,SANM,CAAP;AAOD,OA3BM,CAAP;AA4BD;AAED;;;;;;;;uCAKmB,oB,EAAsB;AAAA;;AACvC;AACA,UAAI,eAAe,GAAG,KAAK,gBAA3B;AACA,WAAK,gBAAL,GAAwB,CAAxB;;AACA,UAAM,OAAO,GAAG,SAAV,OAAU,GAAM;AACpB,QAAA,eAAe;AACf,eAAO,MAAI,CAAC,MAAL,CAAY,oBAAZ,EAAkC,IAAlC,CAAuC,UAAA,YAAY,EAAI;AAC5D,cAAI,YAAY,CAAC,WAAb,MAA8B,eAAe,IAAI,CAArD,EAAwD;AACtD,mBAAO,YAAP;AACD;;AACD,iBAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,YAAA,MAAI,CAAC,IAAL,CAAU,UAAV,CAAqB,YAAM;AACzB,cAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AACD,aAFD,EAEG,GAFH;AAGD,WAJM,CAAP;AAKD,SATM,CAAP;AAUD,OAZD;;AAaA,aAAO,OAAO,EAAd;AACD;AAED;;;;;;kCAGc,K,EAAO;AACnB,WAAK,QAAL,CAAc,GAAd,CAAkB,iBAAlB,EAAqC,KAAK,GAAG,GAAH,GAAS,GAAnD;AACD;AAED;;;;;4CAEwB;AACtB,WAAK,sBAAL,GAA8B,IAA9B;AACD;AAED;;;;;8CAE0B;AACxB,WAAK,sBAAL,GAA8B,KAA9B;AACD;AAED;;;;;;;;;sCAMkB,I,EAAM;AACtB,UAAM,YAAY,GAAG,IAAI,CAAC,cAAD,CAAzB;;AACA,UAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,aAAK,QAAL,CAAc,MAAd,CAAqB,2BAArB;AACD,OAFD,MAEO;AACL,aAAK,QAAL,CAAc,GAAd,CAAkB,2BAAlB,EAA+C,MAAM,CAAC,YAAD,CAArD;AACD;;AACD,UAAM,UAAU,GAAG,IAAI,CAAC,oBAAD,CAAvB;AACA,UAAM,oBAAoB,GAAG,IAAI,CAAC,sBAAD,CAAjC;;AACA,UAAI,UAAJ,EAAgB;AACd,YAAM,YAAY,GAAG,KAAK,wBAAL,CACnB,UADmB;AAEnB;AAAwB,aAFL,EAGnB,YAHmB,EAInB,oBAJmB,CAArB;;AAMA,YAAI,YAAJ,EAAkB;AAChB,iBAAO,YAAP;AACD;AACF,OAVD,MAUO;AACL,YAAM,iBAAiB,GAAG,IAAI,CAAC,cAAD,CAA9B;;AACA,YAAI,iBAAJ,EAAuB;AACrB,iBAAO,KAAK,mBAAL,CACL,EADK,EAEL,iBAFK,EAGL,YAHK,EAIL,oBAJK,CAAP;AAMD;AACF,OA7BqB,CA8BtB;;;AACA,aAAO,KAAK,mBAAL,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC,YAAjC,CAAP;AACD;AAED;;;;;;;;;;;6CASE,G,EACA,iB,EACA,Y,EACA,oB,EACA;AACA,UAAI;AACF,YAAM,GAAG,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,GAAvB,CAAZ;;AACA,YAAI,iBAAJ,EAAuB;AACrB,cAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,cAAM,GAAG,GAAG,GAAG,CAAC,KAAD,CAAf;;AACA,cAAI,UAAU,CAAC,GAAD,CAAV,GAAkB,IAAlB,GAAyB,GAA7B,EAAkC;AAChC,mBAAO,IAAP;AACD;AACF;;AACD,YAAM,iBAAiB,GAAG,GAAG,CAAC,cAAD,CAA7B;AACA,eACG,iBAAiB,IAChB,KAAK,mBAAL,CACE,GADF,EAEE,iBAFF,EAGE,YAHF,EAIE,oBAJF,CADF,IAOA,IARF;AAUD,OApBD,CAoBE,OAAO,CAAP,EAAU;AACV;AACA,aAAK,IAAL,CAAU,UAAV,CAAqB,YAAM;AACzB,gBAAM,CAAN;AACD,SAFD;AAGD;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;;;;wCAQoB,G,EAAK,I,EAAM,Y,EAAc,oB,EAAsB;AACjE,aAAO,IAAI,0BAAJ,CACL,UADK,EAEL,GAFK,EAGL,0BAAY,iBAAZ,CAA8B,IAA9B,CAHK,EAIL,KAAK,WAAL,CAAiB,YAAjB,EAJK,EAKL,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CALK,EAML,YANK,EAOL,oBAPK,CAAP;AASD;AAED;;;;;;;2CAIuB,Y,EAAc;AACnC;AACA;AACA,UAAM,iBAAiB,GAAG,KAAK,sBAA/B;AACA,WAAK,sBAAL,GAA8B,KAA9B;;AACA,UAAI,iBAAJ,EAAuB;AACrB;AACD,OAPkC,CASnC;;;AACA,WAAK,KAAL,CACG,SADH,GAEG,2BAFH,CAE+B,OAAO,CAAC,OAAR,CAAgB,YAAhB,CAF/B,EAVmC,CAcnC;;AACA,WAAK,eAAL,CAAqB,YAArB;AACD;AAED;;;;;;;;oCAKgB,Y,EAAc;AAAA;;AAC5B,UAAM,WAAW,GAAG,YAAY,CAAC,qBAAb,EAApB;;AACA,UAAI,CAAC,WAAL,EAAkB;AAChB,eAAO,OAAO,CAAC,OAAR,EAAP;AACD,OAJ2B,CAK5B;AACA;;;AACA,aAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,iBAAlB,EAAqC,IAArC,CAA0C,UAAA,KAAK,EAAI;AACxD,YAAI,KAAK,IAAI,GAAb,EAAkB;AAChB;AACA;AACD;;AACD,YAAI,WAAJ,EAAiB;AACf,UAAA,MAAI,CAAC,UAAL,CAAgB,WAAhB;AACD;AACF,OARM,CAAP;AASD;AAED;;;;;;;+BAIW,W,EAAa;AACtB,UAAM,MAAM,GAAG,WAAW,CAAC,MAAZ,IAAsB,QAArC;AACA,aAAO,IAAI,YAAJ,CACL,KAAK,KADA,EAEL,qBAAM,cAAN,CAFK,EAGL,sBAAO;AACL,yBAAiB,KAAK,cADjB;AAEL,kBAAU;AAFL,OAAP,CAHK,EAOL,IAPK,EAAP;AAQD;AAED;;;;;;;yBAIK,Y,EAAc;AACjB,UAAI,YAAY,CAAC,qBAAb,EAAJ,EAA0C;AACxC,aAAK,aAAL,CAAmB,IAAnB;AACD;AACF;AAED;;;;;;;;2BAKO,oB,EAAsB;AAAA;;AAC3B,UAAI,GAAG,GACL,kBACA,kBAAkB,CAAC,KAAK,cAAN,CADlB,GAEA,eAHF;;AAIA,UAAI,oBAAJ,EAA0B;AACxB;AACA,QAAA,GAAG,IAAI,YAAY,kBAAkB,CAAC,oBAAD,CAArC;AACD;;AACD,aAAO,KAAK,QAAL,CACJ,qBADI,CACkB,2BAAW,GAAX,CADlB,EAEJ,IAFI,CAEC,UAAA,IAAI;AAAA,eAAI,MAAI,CAAC,iBAAL,CAAuB,IAAvB,CAAJ;AAAA,OAFL,CAAP;AAGD;;;;;AAGH;;;;;;;;;;;AAOA,SAAS,mBAAT,CAA6B,KAA7B,EAAoC;AAClC,UAAQ,KAAR;AACE,SAAK,MAAL;AACE,aAAO,IAAP;;AACF,SAAK,OAAL;AACE,aAAO,KAAP;;AACF;AACE,aAAO,SAAP;AANJ;AAQD;;;;;;;;;;;AC/aD;;AACA;;;;;;AAEA;AACA,IAAM,8BAA8B,uEACjC,iBAAM,kBAD2B,EACN,6BAAe,kBADT,0CAEjC,iBAAM,aAF2B,EAEX,6BAAe,aAFJ,0CAGjC,iBAAM,iBAH2B,EAGP,6BAAe,iBAHR,0CAIjC,iBAAM,iCAJ2B,EAKhC,6BAAe,iCALiB,0CAMjC,iBAAM,qBAN2B,EAMH,6BAAe,qBANZ,0CAOjC,iBAAM,2BAP2B,EAQhC,6BAAe,2BARiB,0CASjC,iBAAM,wBAT2B,EASA,6BAAe,uBATf,0CAUjC,iBAAM,YAV2B,EAUZ,6BAAe,YAVH,yBAApC;AAaA;;AACA,IAAM,8BAA8B,uEACjC,6BAAe,OADkB,EACR,IADQ,0CAEjC,6BAAe,kBAFkB,EAEG,iBAAM,kBAFT,0CAGjC,6BAAe,aAHkB,EAGF,iBAAM,aAHJ,0CAIjC,6BAAe,iBAJkB,EAIE,iBAAM,iBAJR,0CAKjC,6BAAe,2BALkB,EAKY,IALZ,0CAMjC,6BAAe,mBANkB,EAMI,IANJ,0CAOjC,6BAAe,gBAPkB,EAOC,IAPD,0CAQjC,6BAAe,uBARkB,EAQQ,iBAAM,wBARd,0CASjC,6BAAe,sBATkB,EASO,IATP,0CAUjC,6BAAe,2BAVkB,EAUY,IAVZ,0CAWjC,6BAAe,iCAXkB,EAYhC,iBAAM,iCAZ0B,0CAajC,6BAAe,2BAbkB,EAchC,iBAAM,2BAd0B,0CAejC,6BAAe,qBAfkB,EAeM,iBAAM,qBAfZ,0CAgBjC,6BAAe,oBAhBkB,EAgBK,IAhBL,0CAiBjC,6BAAe,YAjBkB,EAiBH,iBAAM,YAjBH,yBAApC;AAoBA;;;;;;AAKO,SAAS,8BAAT,CAAwC,eAAxC,EAAyD;AAC9D,SAAO,8BAA8B,CAAC,eAAD,CAArC;AACD;AAED;;;;;;;AAKO,SAAS,8BAAT,CAAwC,cAAxC,EAAwD;AAC7D,SAAO,8BAA8B,CAAC,cAAD,CAArC;AACD;;;;;;;;;;ACtED;;;;;;;;;;;;;;;;AAgBA;;;AAGO,IAAM,eAAe,GAAG;AAC7B;;;;AAIA,EAAA,QAAQ,EAAE,UALmB;;AAO7B;;;;AAIA,EAAA,WAAW,EAAE,aAXgB;;AAa7B;;;;AAIA,EAAA,oBAAoB,EAAE,sBAjBO;;AAmB7B;;;;AAIA,EAAA,aAAa,EAAE,eAvBc;;AAyB7B;;;AAGA,EAAA,UAAU,EAAE,YA5BiB;;AA8B7B;;;AAGA,EAAA,QAAQ,EAAE,UAjCmB;;AAmC7B;;;AAGA,EAAA,MAAM,EAAE;AAtCqB,CAAxB;;;;;;;;;;;;;;ACHP;;AACA;;AAjBA;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;AAGA,IAAM,SAAS,GAAG;AAChB,EAAA,UAAU,EAAE,GADI;AAEhB,EAAA,OAAO,EAAE;AAFO,CAAlB;AAKA;;;;;AAIA,IAAI,iBAAiB,GAAG,eAAxB;AAEA;;;;;AAIA,IAAI,aAAa,GAAG,IAApB;AAEA;;;;;AAIO,SAAS,8BAAT,CAAwC,CAAxC,EAA2C;AAChD,EAAA,iBAAiB,GAAG,CAApB;AACA,EAAA,aAAa,GAAG,IAAhB;AACD;AAED;;;;;;;AAKA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,MAAI,CAAC,aAAL,EAAoB;AAClB,IAAA,aAAa,GAAG,EAAhB;AACA,QAAI,wBAAwB,GAAG,iBAA/B;;AACA,QAAI;AACF,UAAM,KAAK,GAAG,2BAAiB,GAAG,CAAC,QAAJ,CAAa,IAA9B,CAAd;AACA,UAAM,wBAAwB,GAAG,KAAK,CAAC,iBAAD,CAAtC;;AACA,UAAI,wBAAJ,EAA8B;AAC5B,QAAA,wBAAwB,IAAI,MAAM,wBAAlC;AACD;AACF,KAND,CAME,OAAO,CAAP,EAAU;AACV;AACA,yBAAW,UAAX,CAAsB,CAAtB;AACD,KAZiB,CAclB;AACA;;;AACA,IAAA,wBAAwB,CAAC,KAAzB,CAA+B,GAA/B,EAAoC,OAApC,CAA4C,UAAA,CAAC,EAAI;AAC/C,MAAA,CAAC,GAAG,CAAC,CAAC,IAAF,EAAJ;;AACA,UAAI,CAAC,CAAL,EAAQ;AACN;AACD;;AACD,UAAI;AACF,QAAA,kBAAkB,CAAC,GAAD,EAAM,aAAN,EAAqB,CAArB,CAAlB;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,2BAAW,UAAX,CAAsB,CAAtB;AACD;AACF,KAXD;AAYD;;AACD,SAAO,aAAP;AACD;AAED;;;;;;;AAKA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC,aAAjC,EAAgD,IAAhD,EAAsD;AACpD;AACA;AACA,MAAI,YAAJ;AACA,MAAI,QAAJ;AACA,MAAI,OAAO,GAAG,KAAd;AACA,MAAM,EAAE,GAAG,IAAI,CAAC,OAAL,CAAa,GAAb,CAAX;;AACA,MAAI,EAAE,IAAI,CAAC,CAAX,EAAc;AACZ,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,QAAQ,GAAG,GAAX;AACA,IAAA,OAAO,GAAG,KAAV;AACD,GAJD,MAIO;AACL,IAAA,YAAY,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,EAAlB,EAAsB,IAAtB,EAAf;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,EAAE,GAAG,CAApB,CAAP;;AACA,QAAI,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,MAAL,GAAc,CAA7B,KAAmC,SAAS,CAAC,OAAjD,EAA0D;AACxD,MAAA,OAAO,GAAG,IAAV;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,IAAI,CAAC,MAAL,GAAc,CAAhC,CAAP;AACD;;AACD,IAAA,QAAQ,GAAG,QAAQ,CAAC,IAAD,EAAO,EAAP,CAAnB;AACD;;AACD,MAAI,KAAK,CAAC,QAAD,CAAT,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,GAtBmD,CAwBpD;;;AACA,MAAI,EAAJ;;AACA,MAAI,QAAQ,GAAG,EAAf,EAAmB;AACjB;AACA,IAAA,EAAE,GAAG,IAAL;AACD,GAHD,MAGO,IAAI,QAAQ,GAAG,CAAf,EAAkB;AACvB;AACA,IAAA,EAAE,GAAG,KAAL;AACD,GAHM,MAGA,IAAI,GAAG,CAAC,cAAR,EAAwB;AAC7B;AACA;AACA;AACA;AACA,IAAA,OAAO,GAAG,OAAO,IAAI,QAAQ,IAAI,EAAjC;;AACA,QAAI;AACF;AACA,UAAM,UAAU,GACd,4BACA,YADA,GAEA,GAFA,GAGA,QAHA,IAIC,OAAO,GAAG,GAAH,GAAS,EAJjB,CADF;AAMA,UAAI,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,cAAJ,CAAmB,OAAnB,CAA2B,UAA3B,CAAD,CAA9B;;AACA,UAAI,CAAC,SAAL,EAAgB;AACd;AACA,YAAI,GAAG,CAAC,IAAJ,CAAS,MAAT,KAAoB,GAApB,IAA2B,QAAQ,IAAI,OAAO,GAAG,CAAH,GAAO,CAAlB,CAAvC,EAA6D;AAC3D,cAAM,YAAY,GAAG,OAAO,GAAG,GAAG,CAAC,IAAJ,CAAS,MAAT,MAAqB,GAAxB,GAA8B,IAA1D;AACA,UAAA,SAAS,GAAG,YAAY,GAAG,SAAS,CAAC,UAAb,GAA0B,SAAS,CAAC,OAA5D;AACA,UAAA,GAAG,CAAC,cAAJ,CAAmB,OAAnB,CAA2B,UAA3B,EAAuC,SAAvC;AACD;AACF;;AACD,MAAA,EAAE,GAAG,CAAC,CAAC,SAAP;;AACA,UAAI,SAAS,IAAI,SAAS,CAAC,OAA3B,EAAoC;AAClC,QAAA,YAAY,GAAG,OAAO,YAAtB;AACD;AACF,KArBD,CAqBE,OAAO,CAAP,EAAU;AACV;AACA,MAAA,EAAE,GAAG,KAAL;;AACA,yBAAW,UAAX,CAAsB,CAAtB;AACD;AACF,GAhCM,MAgCA;AACL,IAAA,EAAE,GAAG,KAAL;AACD;;AAED,EAAA,aAAa,CAAC,YAAD,CAAb,GAA8B,EAA9B;AACD;AAED;;;;;;AAIA,SAAS,cAAT,CAAwB,CAAxB,EAA2B;AACzB;AACA,SAAO,CAAC,IAAI,SAAS,CAAC,UAAf,GACH,SAAS,CAAC,UADP,GAEH,CAAC,IAAI,SAAS,CAAC,OAAf,GACA,SAAS,CAAC,OADV,GAEA,IAJJ;AAKD;AAED;;;;;;;;AAMO,SAAS,cAAT,CAAwB,GAAxB,EAA6B,YAA7B,EAA2C;AAChD,SAAO,cAAc,CAAC,GAAD,CAAd,CAAoB,YAApB,KAAqC,KAA5C;AACD;AAED;;;;;;;;;AAOO,SAAS,aAAT,CAAuB,GAAvB,EAA4B,YAA5B,EAA0C,EAA1C,EAA8C;AACnD,EAAA,cAAc,CAAC,GAAD,CAAd,CAAoB,YAApB,IAAoC,EAApC;AACD;AAED;;;;;AAGO,SAAS,gBAAT,CAA0B,GAA1B,EAA+B;AACpC,MAAM,aAAa,GAAG,cAAc,CAAC,GAAD,CAApC;AACA,MAAM,WAAW,GAAG,EAApB;;AACA,OAAK,IAAM,UAAX,IAAyB,aAAzB,EAAwC;AACtC,QAAI,aAAa,CAAC,UAAD,CAAjB,EAA+B;AAC7B,MAAA,WAAW,CAAC,IAAZ,CAAiB,UAAjB;AACD;AACF;;AACD,SAAO,WAAP;AACD;;;;;;;;;;AC1ND;;;;;;;;AAEA;;;IAGa,O;;;;;;;;;;AACX;;;;0CAIsB,S,EAAW,CAAE;AAEnC;;;;;;;;0BAKM,S,EAAW,U,EAAY,CAAE;;;;;AAGjC;;;;;;;IAGa,U;;;AACX;;;AAGA,sBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,IAAI,QAAJ,CAAQ,GAAR,CAAZ;AACD;AAED;;;;;0CACsB,G,EAAK;AACzB,UAAM,IAAI;AAAG;AAA2C;AACtD,QAAA,MAAM,EAAE,KAD8C;AAEtD,QAAA,OAAO,EAAE;AAAC,oBAAU;AAAX,SAF6C;AAGtD,QAAA,WAAW,EAAE;AAHyC,OAAxD;AAKA,aAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,GAAhB,EAAqB,IAArB,EAA2B,IAA3B,CAAgC,UAAA,QAAQ;AAAA,eAAI,QAAQ,CAAC,IAAT,EAAJ;AAAA,OAAxC,CAAP;AACD;AAED;;;;0BACM,G,EAAK,I,EAAM;AACf,aAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,GAAhB,EAAqB,IAArB,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;AC7DH;;;;;;;;;;;;;;;;AAgBA;;IAEa,O;;;AACX;;;AAGA,mBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,OAAR,EAAlB;AACD;AAED;;;;;;;;0BAIM,Q,EAAU;AAAA;;AACd,UAAM,IAAI,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAb;AACA,aAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,YAAM;AAChC,YAAM,KAAK,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,IAAvB,EAA6B,IAA7B,CAAd;;AACA,YAAI,KAAK,CAAC,QAAV,EAAoB;AAClB;AACD;;AACD,YAAM,GAAG,GAAG,KAAI,CAAC,IAAL,CAAU,MAAV,GAAmB,QAAnB,CAA4B,aAA5B,CAA0C,KAA1C,CAAZ;;AACA,QAAA,GAAG,CAAC,GAAJ,GACE,qDACA,SADA,GAEA,kBAAkB,CAAC,MAAM,CAAC,KAAD,CAAP,CAFlB,GAGA,UAHA,GAIA,kBAAkB,CAAC,6BAAD,CAJlB,GAKA,QALA,IAMC,KAAK,CAAC,UAAN,IAAoB,CANrB,IAOA,SAPA,GAQA,kBAAkB,CAAC,KAAK,CAAC,KAAP,CATpB,CANgC,CAgBhC;;AACA,QAAA,KAAK,CAAC,QAAN,GAAiB,IAAjB;AACD,OAlBM,CAAP;AAmBD;;;;;AAGH;;;;;;;;AAIA,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AAClC,MAAI,KAAK,GAAG,IAAZ;AACA,MAAI,OAAO,GAAG,EAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,QAAM,GAAG,GAAG,SAAS,CAAC,CAAD,CAArB;;AACA,QAAI,GAAG,YAAY,KAAf,IAAwB,CAAC,KAA7B,EAAoC;AAClC,MAAA,KAAK,GAAG,yBAAyB,CAAC,GAAD,CAAjC;AACD,KAFD,MAEO;AACL,UAAI,OAAJ,EAAa;AACX,QAAA,OAAO,IAAI,GAAX;AACD;;AACD,MAAA,OAAO,IAAI,GAAX;AACD;AACF;;AAED,MAAI,CAAC,KAAL,EAAY;AACV,IAAA,KAAK,GAAG,IAAI,KAAJ,CAAU,OAAV,CAAR;AACD,GAFD,MAEO,IAAI,OAAJ,EAAa;AAClB,IAAA,KAAK,CAAC,OAAN,GAAgB,OAAO,GAAG,IAAV,GAAiB,KAAK,CAAC,OAAvC;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;AAKA,SAAS,yBAAT,CAAmC,KAAnC,EAA0C;AACxC,MAAM,eAAe,GAAG,MAAM,CAAC,wBAAP,CAAgC,KAAhC,EAAuC,SAAvC,CAAxB;;AACA,MAAI,eAAe,IAAI,eAAe,CAAC,QAAvC,EAAiD;AAC/C,WAAO,KAAP;AACD;;AAJuC,MAMjC,OANiC,GAMf,KANe,CAMjC,OANiC;AAAA,MAMxB,KANwB,GAMf,KANe,CAMxB,KANwB;AAOxC,MAAM,CAAC,GAAG,IAAI,KAAJ,CAAU,OAAV,CAAV,CAPwC,CAQxC;;AACA,OAAK,IAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,IAAA,CAAC,CAAC,IAAD,CAAD,GAAU,KAAK,CAAC,IAAD,CAAf;AACD,GAXuC,CAYxC;;;AACA,EAAA,CAAC,CAAC,KAAF,GAAU,KAAV;AACA,SAAO,CAAP;AACD;;;;;;;;;;ACzFD;;AACA;;AAKA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,eAAe,GAAG,UAAxB;AAEA;;;;IAGa,Y;;;AACX;;;AAGA,wBAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,UAAL,EAAnB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AACD;AAED;;;;;;;;;4BAKmB;AAAA,UAAb,MAAa,uEAAJ,EAAI;AACjB,WAAK,KAAL,CAAW,SAAX,GAAuB,kBAAvB,CAA0C,iCAAkB,YAA5D;;AACA,UAAM,aAAa,GACjB,KAAK,KAAL,CAAW,MAAX,GAAoB,cAApB,IAAsC,8BAAe,QADvD;;AAEA,UAAM,IAAI,GAAG,MAAM,CAAC,WAAP,GACT,sBAAO;AACL,yBAAiB,KAAK,WAAL,CAAiB,gBAAjB,EADZ;AAEL,uBAAe,MAAM,CAAC;AAFjB,OAAP,CADS,GAKT,sBAAO;AACL,yBAAiB,KAAK,WAAL,CAAiB,gBAAjB;AADZ,OAAP,CALJ;AAQA,UAAM,MAAM,GAAG,KAAK,cAAL,CAAoB,IAApB,CACb,eADa,EAEb,qBAAM,gBAAN,CAFa,EAGb,aAAa,GAAG,MAAH,GAAY,QAHZ,EAIb,IAJa,EAKb,EALa,CAAf;AAOA,WAAK,KAAL,CAAW,YAAX,GAA0B,WAA1B,CAAsC,6BAAe,eAArD;AACA,WAAK,cAAL,CAAoB,WAApB,CAAgC,MAAM,IAAI,MAAM,CAAC,SAAjD;AACA,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;;;;AAGH;;;;;;;IAGa,gB;;;;;;AACX;;;qCAGwB,I,EAAM;AAC5B;;;;AAIA,eAAS,OAAT,CAAiB,IAAjB,EAAuB;AACrB,QAAA,IAAI,CAAC,mBAAL,GAA2B,qBAA3B;AACA,QAAA,IAAI,CAAC,SAAL,GAAiB,mBAAjB;AACA,QAAA,IAAI,CAAC,aAAL,GAAqB,WAArB;AACA,YAAM,OAAO,GAAG,yCACd,IADc,EAEd,yBAFc;AAGd;AAA4B,aAHd;AAId;AAA2B,aAJb,CAAhB;AAMA,eAAO,OAAO,CAAC,IAAR,CACL,UAAA,QAAQ,EAAI;AACV,UAAA,IAAI,CACD,YADH,GAEG,WAFH,CAEe,6BAAe,oBAF9B,EAEoD,IAFpD;AAGA,cAAM,IAAI,GAAG,IAAI,gBAAJ,CAAqB,IAArB,EAA2B,QAA3B,CAAb;AACA,UAAA,IAAI,CAAC,KAAL;AACD,SAPI,EAQL,UAAA,MAAM,EAAI;AACR,cAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,YAAA,IAAI,CACD,YADH,GAEG,WAFH,CAEe,6BAAe,kBAF9B,EAEkD,IAFlD;AAGA,YAAA,IAAI,CACD,SADH,GAEG,mBAFH,CAEuB,iCAAkB,YAFzC;AAGD,WAPD,MAOO;AACL;AACA,YAAA,IAAI,CACD,YADH,GAEG,WAFH,CAEe,6BAAe,oBAF9B,EAEoD,IAFpD;AAGD;AACF,SAtBI,CAAP;AAwBD;;AACD,MAAA,IAAI,CAAC,UAAL,GAAkB,QAAlB,CAA2B,eAA3B,EAA4C,OAA5C;AACD;AAED;;;;;;;AAIA,4BAAY,IAAZ,EAAkB,QAAlB,EAA4B;AAAA;;AAAA;;AAC1B;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,oBAAL,GAA4B,IAAI,CAAC,mBAAL,EAA5B;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,SAAL,EAAlB;AAEA,QAAM,KAAK,GAAI,QAAQ,IAAI,QAAQ,CAAC,OAAD,CAArB,IAAmC,GAAjD;AACA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,oBAAN,EAA4B,QAAQ,KAApC,CAHyB,EAIzB,sBAAO;AACL,mBAAa,IAAI,CAAC,UAAL,GAAkB,YAAlB,EADR;AAEL,uBAAiB,IAAI,CAAC,UAAL,GAAkB,gBAAlB;AAFZ,KAAP,CAJyB;AAQzB;AAAqB,QARI,CAA3B;AAWA;;AACA,SAAK,iBAAL,GAAyB,IAAzB;AAEA;;AACA,SAAK,gBAAL,GAAwB,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC7C,MAAA,KAAI,CAAC,iBAAL,GAAyB,OAAzB;AACD,KAFuB,CAAxB;AAGD;AAED;;;;;;;;4BAIQ;AAAA;;AACN,UAAM,OAAO,GAAG,KAAK,mBAAL,CAAyB,qBAAzB,CACd,yBADc;AAEd;AAA4B,UAFd;AAGd;AAA2B,UAHb,CAAhB;AAKA,MAAA,OAAO,CACJ,IADH,CACQ,UAAA,QAAQ,EAAI;AAChB,QAAA,MAAI,CAAC,SAAL,CAAe,QAAf;AACD,OAHH,WAIS,UAAA,MAAM,EAAI;AACf;AACA,QAAA,UAAU,CAAC,YAAM;AACf,gBAAM,MAAN;AACD,SAFS,CAAV;AAGD,OATH,EAUG,IAVH,CAUQ,YAAM;AACV;AACA,QAAA,MAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,MAAI,CAAC,mBAAtC;AACD,OAbH;AAcA,WAAK,KAAL,CACG,YADH,GAEG,WAFH,CAEe,6BAAe,oBAF9B,EAEoD,IAFpD;AAGA,WAAK,KAAL,CACG,YADH,GAEG,WAFH,CAEe,6BAAe,yBAF9B,EAEyD,IAFzD;AAGA,aAAO,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAAP;AACD;AAED;;;;;;;8BAIU,Q,EAAU;AAClB,WAAK,KAAL,CACG,YADH,GAEG,WAFH,CAEe,6BAAe,2BAF9B,EAE2D,IAF3D;AAGA,WAAK,UAAL,CAAgB,mBAAhB;AACA,WAAK,UAAL,CAAgB,iBAAhB;AACA,WAAK,oBAAL,CAA0B,aAA1B,CAAwC,IAAxC;AACA,WAAK,oBAAL,CAA0B,uBAA1B;AACA,WAAK,oBAAL,CAA0B,KAA1B,CAAiC,QAAQ,IAAI,QAAQ,CAAC,SAAD,CAArB,IAAqC,KAArE;;AACA,UAAI,QAAQ,IAAI,QAAQ,CAAC,cAAD,CAAxB,EAA0C;AACxC,aAAK,oBAAL,CAA0B,oBAA1B,CAA+C,QAAQ,CAAC,cAAD,CAAvD;AACD;;AACD,WAAK,iBAAL;AACD;AAED;;;;mCACe;AACb,aAAO,KAAK,gBAAZ;AACD;;;;;AAGH;;;;;;;;;IAKa,Y;;;AACX;;;;AAIA,wBAAY,IAAZ,EAAkB,QAAlB,EAA4B;AAAA;;AAC1B;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,SAAL,GAAiB,QAAjB;AAEA;;AACA,SAAK,eAAL,GAAuB,IAAvB;AAEA;;AACA,SAAK,YAAL,GAAoB,IAApB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAA3B;AACD;AAED;;;;;;;;wCAIoB;AAClB,aAAO,KAAK,eAAZ;AACD;AAED;;;;;;gCAGY;AACV,WAAK,cAAL,CAAoB,YAApB,CAAiC,KAAK,mBAAtC;AACD;AAED;;;;;;;;4CAKwB,M,EAAQ;AAAA;;AAC9B;AACA,WAAK,SAAL;AACA,UAAI,YAAJ;AACA,UAAI,WAAW,GAAG,IAAlB;;AACA,UAAI,MAAM,CAAC,QAAD,CAAV,EAAsB;AACpB;AACA,aAAK,cAAL,CAAoB,WAApB;AACA,aAAK,KAAL,CAAW,SAAX,GAAuB,kBAAvB,CAA0C,iCAAkB,YAA5D;AACA,QAAA,WAAW,GAAG,IAAI,gBAAJ,CAAqB,KAAK,KAA1B,EAAiC,MAAjC,CAAd;AACA,QAAA,YAAY,GAAG,WAAW,CAAC,KAAZ,EAAf;AACD,OAND,MAMO;AACL,QAAA,YAAY,GAAG,OAAO,CAAC,MAAR,CAAe,+BAAkB,KAAK,IAAvB,EAA6B,YAA7B,CAAf,CAAf;AACD;;AACD,UAAM,eAAe,GAAG,YAAY,CAAC,IAAb,CAAkB,YAAM;AAC9C,QAAA,MAAI,CAAC,KAAL,CAAW,SAAX,GAAuB,mBAAvB;;AACA,eAAO,WAAW,CAAC,YAAZ,EAAP;AACD,OAHuB,CAAxB;AAKA,aAAO,eAAe,CAAC,IAAhB,CAAqB,YAAM;AAChC,eAAO,IAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;;;;uCAImB,Q,EAAU;AAAA;;AAC3B,UAAI,CAAC,QAAD,IAAa,CAAC,QAAQ,CAAC,YAAT,EAAlB,EAA2C;AACzC;AACD;;AACD,WAAK,eAAL,GAAuB,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5C,QAAA,OAAO,CAAC,MAAI,CAAC,SAAL,EAAD,CAAP;AACD,OAFsB,EAGpB,IAHoB,CAGf,UAAA,OAAO,EAAI;AACf,YAAM,WAAW,GAAG,IAAI,kCAAJ,EAApB;;AACA,YAAI,OAAO,IAAI,OAAO,CAAC,KAAvB,EAA8B;AAC5B,cAAI,OAAO,CAAC,QAAZ,EAAsB;AACpB,kBAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD,WAFD,MAEO;AACL,YAAA,WAAW,CAAC,QAAZ,CAAqB,OAAO,CAAC,KAA7B;AACD;AACF,SAND,MAMO,IAAI,OAAO,IAAI,OAAO,CAAC,QAAvB,EAAiC;AACtC,UAAA,WAAW,CAAC,WAAZ,CAAwB,OAAO,CAAC,QAAhC;AACD,SAFM,MAEA;AACL,gBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,QAAA,MAAI,CAAC,mBAAL,CAAyB,OAAzB,CAAiC,WAAjC;AACD,OAjBoB,WAkBd,UAAA,MAAM,EAAI;AACf;AACA,QAAA,MAAI,CAAC,SAAL;;AACA,cAAM,MAAN;AACD,OAtBoB,CAAvB;AAuBD;AAED;;;;AAGA;;;;;;;4BAIQ;AAAA;;AACN,UAAM,UAAU,GAAG,KAAK,cAAL,CAAoB,mBAApB,CAAwC;AACzD,sBAAc;AAD2C,OAAxC,CAAnB;AAGA,WAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,iBAAN,CAHyB,EAIzB,UAJyB;AAKzB;AAAqB,WALI;AAMzB;AAA0B,UAND,CAA3B;AAQA,WAAK,mBAAL,CAAyB,EAAzB,CACE,iCADF,EAEE,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAFF;AAKA,WAAK,YAAL,GAAoB,KAAK,cAAL,CAAoB,QAApB,CAClB,KAAK,mBADa;AAElB;AAAa,UAFK,CAApB;AAIA,WAAK,KAAL,CACG,YADH,GAEG,WAFH,CAEe,6BAAe,gCAF9B;AAGA;;AACA,aAAO,KAAK,mBAAL,CACJ,qBADI,CAEH,yBAFG;AAGH;AAA4B,UAHzB;AAIH;AAA2B,UAJxB,EAMJ,IANI,CAMC,UAAA,MAAM,EAAI;AACd,eAAO,MAAI,CAAC,uBAAL,CAA6B,MAA7B,CAAP;AACD,OARI,WASE,UAAA,MAAM,EAAI;AACf;AACA,QAAA,MAAI,CAAC,SAAL,GAFe,CAGf;;;AACA,YAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,UAAA,MAAI,CAAC,KAAL,CACG,YADH,GAEG,WAFH,CAGI,6BAAe,mCAHnB,EAII,IAJJ;;AAMA,UAAA,MAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAEuB,iCAAkB,YAFzC;;AAGA,iBAAO,KAAP;AACD;;AACD,cAAM,MAAN;AACD,OA1BI,CAAP;AA2BD;;;;;;;;;;;;;;;;ACtYH;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;IAGa,M;;;AACX;;;AAGA,kBAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AACD;AAED;;;;;0CACsB,K,EAAO,Y,EAAc;AACzC,UAAI,CAAC,wBAAY,4BAAZ,EAA+B,KAA/B,CAAL,EAA4C;AAC1C,cAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,UACE,CAAC,6BAAkB,UAAlB,IAAgC,KAAhC,IACC,6BAAkB,eAAlB,IAAqC,KADvC,KAEA,CAAC,YAHH,EAIE;AACA,cAAM,IAAI,KAAJ,CACJ,iDACE,kCAFE,CAAN;AAID;;AACD,UAAI,YAAY,IAAI,CAAC,qBAAS,YAAT,CAArB,EAA6C;AAC3C,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,UAAI,cAAc,GAAG,IAArB;;AACA,UAAI,YAAJ,EAAkB;AAChB,QAAA,cAAc,GAAG,IAAI,CAAC,SAAL,CAAe,YAAf,CAAjB;AACD;;AACD,WAAK,aAAL,CAAmB,QAAnB,CAA4B;AAC1B,QAAA,SAAS,EAAE,6BAAe,wBADA;AAE1B,QAAA,eAAe,EAAE,8BAAgB,gBAFP;AAG1B,QAAA,gBAAgB,EAAE,IAHQ;AAI1B,QAAA,oBAAoB,EAAE;AACpB,UAAA,KAAK,EAAL,KADoB;AAEpB,UAAA,cAAc,EAAd;AAFoB;AAJI,OAA5B;AASD;AAED;;;;8BACU,S,EAAW;AACnB,UAAI,IAAI,GAAG,IAAX;;AACA,UACE,CAAC,wBAAY,gBAAZ,EAAmB,SAAS,CAAC,IAA7B,CAAD,IACA,CAAC,sDAA+B,SAAS,CAAC,IAAzC,CAFH,EAGE;AACA,cAAM,IAAI,KAAJ,CAAU,iCAAiC,SAAS,CAAC,IAA3C,GAAkD,GAA5D,CAAN;AACD;;AAED,UAAI,SAAS,CAAC,IAAd,EAAoB;AAClB,YAAI,CAAC,qBAAS,SAAS,CAAC,IAAnB,CAAL,EAA+B;AAC7B,gBAAM,IAAI,KAAJ,CAAU,kCAAkC,SAAS,CAAC,IAA5C,GAAmD,GAA7D,CAAN;AACD,SAFD,MAEO;AACL,UAAA,IAAI,GAAG,EAAP;AACA,UAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,SAAS,CAAC,IAA9B;AACD;AACF;;AAED,UAAI,sBAAU,SAAS,CAAC,MAApB,CAAJ,EAAiC;AAC/B,YAAI,CAAC,IAAL,EAAW;AACT,UAAA,IAAI,GAAG,EAAP;AACD;;AACD,QAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB;AAAC,uBAAa,SAAS,CAAC;AAAxB,SAApB;AACD,OALD,MAKO,IAAI,SAAS,CAAC,MAAV,IAAoB,IAAxB,EAA8B;AACnC,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,WAAK,aAAL,CAAmB,QAAnB,CAA4B;AAC1B,QAAA,SAAS,EAAE,sDAA+B,SAAS,CAAC,IAAzC,CADe;AAE1B,QAAA,eAAe,EAAE,8BAAgB,gBAFP;AAG1B,QAAA,gBAAgB,EAAE,SAAS,CAAC,MAHF;AAI1B,QAAA,oBAAoB,EAAE;AAJI,OAA5B;AAMD;;;;;;;;;;;;;;;;AClFH;;AACA;;AACA;;;;;;;;IAEa,oB;;;AACX;;;AAGA,gCAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,gBAAL,GAAwB,IAAxB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,cAAN,CAHyB,EAIzB,sBAAO;AACL,MAAA,aAAa,EAAE,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EADV;AAEL,MAAA,SAAS,EAAE,IAAI,CAAC,UAAL,GAAkB,YAAlB,EAFN;AAGL;AACA,MAAA,WAAW,EAAE,KAJR,CAKL;;AALK,KAAP,CAJyB;AAWzB;AAAqB,QAXI,CAA3B;AAaD;AAED;;;;;;;;4BAIQ;AAAA;;AACN,WAAK,KAAL,CACG,SADH,GAEG,kBAFH,CAEsB,iCAAkB,uBAFxC;AAIA,WAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,QAApB,CACtB,KAAK,mBADiB,CAAxB;AAIA,aAAO,KAAK,mBAAL,CAAyB,YAAzB,GAAwC,IAAxC,CACL,YAAM;AACJ;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;AACD,OAJI,EAKL,UAAA,MAAM,EAAI;AACR,QAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;;AACA,cAAM,MAAN;AACD,OARI,CAAP;AAUD;;;;;;;;;;;;;;;;AC/DH;;AACA;;AACA;;AACA;;;;;;;;IAEa,c;;;AACX;;;AAGA,0BAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,gBAAL,GAAwB,IAAxB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,cAAN,CAHyB,EAIzB,sBAAO;AACL,MAAA,aAAa,EAAE,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EADV;AAEL,MAAA,SAAS,EAAE,IAAI,CAAC,UAAL,GAAkB,YAAlB,EAFN;AAGL;AACA,MAAA,WAAW,EAAE,IAJR,CAKL;;AALK,KAAP,CAJyB;AAWzB;AAAqB,QAXI,CAA3B;AAaD;AAED;;;;;;;;4BAIQ;AAAA;;AACN,WAAK,KAAL,CACG,SADH,GAEG,kBAFH,CAEsB,iCAAkB,iBAFxC;AAIA,WAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,QAApB,CACtB,KAAK,mBADiB,CAAxB;AAIA,aAAO,KAAK,mBAAL,CAAyB,YAAzB,GAAwC,IAAxC,CACL,YAAM;AACJ;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;AACD,OAJI,EAKL,UAAA,MAAM,EAAI;AACR,YAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,UAAA,KAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAEuB,iCAAkB,iBAFzC;AAGD,SAJD,MAIO;AACL,UAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;AACD;;AACD,cAAM,MAAN;AACD,OAdI,CAAP;AAgBD;;;;;;;;;;;;;;;;ACtEH;;;;;;;;IAEa,S;;;AACX;;;;AAIA,qBAAY,MAAZ,EAAoB,OAApB,EAA6B;AAAA;;AAC3B;AACA,SAAK,OAAL,GAAe,MAAf;AAEA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AACD;AAED;;;;;;;;gCAImD;AAAA,UAAzC,SAAyC,uEAA7B,KAAK,OAAL,CAAa,YAAb,EAA6B;;AACjD,UAAI,CAAC,SAAL,EAAgB;AACd,cAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,aAAO,KAAK,MAAL,CAAY,SAAZ,CAAP;AACD;AAED;;;;;;;;2BAKO,S,EAAW;AAChB,UAAM,GAAG,GAAG,0BACV,kBACE,kBAAkB,CAAC,KAAK,OAAL,CAAa,gBAAb,EAAD,CADpB,GAEE,SAFF,GAGE,SAHF,GAIE,kBAAkB,CAAC,SAAD,CALV,CAAZ,CADgB,CAQhB;;AACA,aAAO,KAAK,QAAL,CAAc,qBAAd,CAAoC,GAApC,EAAyC,IAAzC,CAA8C,UAAA,IAAI,EAAI;AAC3D,eAAO,IAAI,CAAC,QAAD,CAAJ,IAAkB,EAAzB;AACD,OAFM,CAAP;AAGD;;;;;;;;;;;;;;;;AC3CH;;AACA;;AAOA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;AAIA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,SAAO,IAAI,yBAAJ,CAAgB,MAAS,GAAT,CAAhB,CAAP;AACD;AAED;;;;;;AAIA,IAAM,oBAAoB,GAAG,IAA7B,C,CAEA;;AACA,IAAM,QAAQ,GAAG,GAAjB;AAEA;;;;IAGa,U;;;AACX;;;;AAIA,sBAAY,IAAZ,EAAkB,OAAlB,EAA2B;AAAA;;AACzB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AAEA,QAAI,UAAU,GAAG,OAAO,IAAI,OAAO,CAAC,UAApC;;AACA,QAAI,UAAU,IAAI,SAAlB,EAA6B;AAC3B,MAAA,UAAU,GAAG,KAAb,CAD2B,CACP;AACrB;;AAED,QAAM,SAAS,GAAG;AAChB,mBAAa,IAAI,CAAC,UAAL,GAAkB,YAAlB,EADG;AAEhB,uBAAiB,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EAFD;AAGhB,oBAAc,IAAI,CAAC,SAAL,GAAiB,2BAAjB,EAHE;AAIhB,qBAAe,2BAAY,YAJX;AAKhB,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,SALrB;AAMhB,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,IANrB;AAOhB,oBAAc,UAPE;AAQhB,0BAAoB,IAAI,CACrB,SADiB,GAEjB,UAFiB,GAGjB,OAHiB;AARJ,KAAlB;AAcA,SAAK,aAAL,GAAqB,SAAS,CAAC,yBAAD,CAAT,IAAwC,SAA7D;;AAEA,QAAI,OAAO,IAAI,OAAO,CAAC,MAAvB,EAA+B;AAC7B,MAAA,SAAS,CAAC,QAAD,CAAT,GAAsB,OAAO,CAAC,MAA9B;AACD;;AAED,QAAI,SAAS,CAAC,QAAD,CAAb,EAAyB;AACvB,uBAAO,SAAS,CAAC,MAAD,CAAhB,EAA0B,yCAA1B,EADuB,CAGvB;;AACA,UAAI,OAAO,GAAG,SAAS,CAAC,MAAD,CAAvB;AACA;AAAM;AAAsB,MAAA,MAAM,GAAG,SAAS,CAAC,QAAD,CAA9C;AACA,MAAA,OAAO,GAAG,OAAO,CAAC,MAAR,CAAe,UAAA,GAAG;AAAA,eAAI,GAAG,KAAK,MAAZ;AAAA,OAAlB,CAAV;AAEA,uBACE,OAAO,CAAC,MAAR,GAAiB,CADnB,EAEE,gDAFF;AAIA,MAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,OAApB;AACD,KAtDwB,CAwDzB;;;AACA,QAAI,SAAS,CAAC,MAAD,CAAT,IAAqB,SAAS,CAAC,MAAD,CAAT,CAAkB,MAAlB,KAA6B,CAAtD,EAAyD;AACvD,UAAM,GAAG,GAAG,SAAS,CAAC,MAAD,CAAT,CAAkB,CAAlB,CAAZ;AACA;AAAM;AAAgC,MAAA,OAAM,GAAG,SAAS,CAAC,QAAD,CAAxD,CAFuD,CAGvD;AACA;AACA;;AACA,UAAI,OAAJ,EAAY;AACV,YAAI,qBAAJ,CAAiB,KAAK,KAAtB,EAA6B;AAC3B,UAAA,KAAK,EAAE,GADoB;AAE3B,UAAA,MAAM,EAAN,OAF2B;AAG3B,UAAA,uBAAuB,EAAE,KAAK;AAHH,SAA7B,EAIG,KAJH;AAKA;AACD;AACF;AAED;;;AACA,SAAK,KAAL,GAAa,SAAS,CAAC,MAAD,CAAT,IAAqB,CAAC,QAAD,CAAlC;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,eAAN,CAHyB,EAIzB,sBAAO,SAAP,CAJyB;AAKzB;AAAqB,QALI,CAA3B;AAOD;AAED;;;;;;;;kCAIc,Q,EAAU;AACtB,UAAM,GAAG,GAAG,QAAQ,CAAC,MAAT,EAAZ;AACA,UAAM,MAAM,GAAG,QAAQ,CAAC,SAAT,EAAf;;AACA,UAAI,GAAJ,EAAS;AACP,YAAI,MAAJ,EAAY;AACV,eAAK,KAAL,CAAW,SAAX,GAAuB,MAAvB,CAA8B,MAA9B;AACD;;AACD,aAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,qBADjB,EAEE,IAFF,EAGE,cAAc,CAAC,GAAD,CAHhB;AAKA,YAAI,wBAAJ;;AACA,YAAI,MAAJ,EAAY;AACV,UAAA,wBAAwB,GAAG,EAA3B;AACA,UAAA,wBAAwB,CAAC,OAAD,CAAxB,GAAoC,GAApC;AACA,UAAA,wBAAwB,CAAC,QAAD,CAAxB,GAAqC,MAArC;AACD,SAJD,MAIO;AACL,UAAA,wBAAwB,GAAG,GAA3B;AACD;;AACD,YAAI,qBAAJ,CAAiB,KAAK,KAAtB,EAA6B,wBAA7B,EAAuD,KAAvD;AACD;AACF;AAED;;;;;;;uCAImB,Q,EAAU;AAC3B,UAAI,QAAQ,CAAC,qBAAT,EAAJ,EAAsC;AACpC,aAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,yBADjB,EAEE,IAFF;AAIA,aAAK,KAAL,CAAW,SAAX,GAAuB,mBAAvB,CAA2C;AACzC,UAAA,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAT;AADwB,SAA3C;AAGD;AACF;AAED;;;;;;;qCAIiB,Q,EAAU;AACzB,UAAI,QAAQ,CAAC,SAAT,EAAJ,EAA0B;AACxB,aAAK,KAAL,CAAW,SAAX,GAAuB,uBAAvB;AACD;AACF;AAED;;;;;;;4BAIQ;AAAA;;AACN,UAAI,KAAK,mBAAT,EAA8B;AAC5B;AACA;AACA;AACA,aAAK,KAAL,CAAW,SAAX,GAAuB,kBAAvB,CAA0C,iCAAkB,WAA5D,EAAyE;AACvE,UAAA,IAAI,EAAE,KAAK,KAD4D;AAEvE,UAAA,MAAM,EAAE;AAF+D,SAAzE;AAIA,aAAK,mBAAL,CAAyB,QAAzB,CAAkC,YAAM;AACtC,UAAA,KAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAEuB,iCAAkB,WAFzC;AAGD,SAJD;AAKA,aAAK,mBAAL,CAAyB,EAAzB,CACE,iCADF,EAEE,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAFF;AAIA,aAAK,mBAAL,CAAyB,EAAzB,CACE,uCADF,EAEE,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAFF;AAIA,aAAK,mBAAL,CAAyB,EAAzB,CACE,uCADF,EAEE,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAFF;AAKA,aAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,iBADjB,EAEE,IAFF,EAGE,cAAc,CAAC,KAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB,CAAD,CAHhB;AAMA,eAAO,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAAP;AACD;;AACD,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;;;;AAGH;;;;;;;IAGa,mB;;;AACX;;;;AAIA,+BAAY,IAAZ,EAAkB,OAAlB,EAA2B;AAAA;;AACzB;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,IAAI,CAAC,GAAL,EADyB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,gBAAN,CAHyB,EAIzB,sBAAO;AACL,uBAAiB,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EADZ;AAEL,mBAAa,IAAI,CAAC,UAAL,GAAkB,YAAlB,EAFR;AAGL,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,SAHhC;AAIL,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,IAJhC;AAKL,oBAAc;AALT,KAAP,CAJyB;AAWzB;AAAqB,SAXI,CAA3B;AAaD;AAED;;;;;;;;4BAIQ;AAAA;;AACN;AACA,WAAK,KAAL,CACG,SADH,GAEG,kBAFH,CAEsB,iCAAkB,qBAFxC;AAGA,WAAK,mBAAL,CAAyB,QAAzB,CAAkC,YAAM;AACtC,QAAA,MAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAEuB,iCAAkB,qBAFzC;AAGD,OAJD;AAKA,WAAK,mBAAL,CAAyB,EAAzB,CACE,+BADF,EAEE,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B,CAFF;AAKA,WAAK,mBAAL,CAAyB,YAAzB,GAAwC,IAAxC,CACE,UAAA,MAAM,EAAI;AACR,YAAM,IAAI,GAAG,MAAM,CAAC,IAApB;AACA,YAAM,QAAQ,GAAG,IAAI,+BAAJ,EAAjB;;AACA,YAAI,IAAI,CAAC,WAAD,CAAR,EAAuB;AACrB,UAAA,QAAQ,CAAC,YAAT,CAAsB,IAAtB;AACD;;AACD,QAAA,MAAI,CAAC,oBAAL,CAA0B,QAA1B;AACD,OARH,EASE,UAAA,MAAM,EAAI;AACR,QAAA,MAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,MAAI,CAAC,mBAAtC;;AACA,cAAM,MAAN;AACD,OAZH;AAcA,WAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,+BADjB;AAGA,aAAO,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAAP;AACD;AAED;;;;;;;yCAIqB,Q,EAAU;AAC7B,UAAI,QAAQ,CAAC,YAAT,EAAJ,EAA6B;AAC3B,YAAM,OAAO,GAAG,KAAK,QAAL,IAAiB,EAAjC;;AACA,YAAI,OAAO,CAAC,UAAR,IAAsB,SAA1B,EAAqC;AACnC,UAAA,OAAO,CAAC,UAAR,GAAqB,oBAArB;AACD;;AACD,aAAK,aAAL,CAAmB,WAAnB,CAA+B,6BAAe,kBAA9C,EAAkE,IAAlE;AACA,YAAI,UAAJ,CAAe,KAAK,KAApB,EAA2B,OAA3B,EAAoC,KAApC;AACD;AACF;;;;;AAGH;;;;;;;;IAIa,c;;;AACX;;;;AAIA,0BAAY,IAAZ,EAAgC;AAAA,QAAd,OAAc,uEAAJ,EAAI;;AAAA;;AAC9B;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,mBAAN,CAHyB,EAIzB,sBAAO;AACL,uBAAiB,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EADZ;AAEL,mBAAa,IAAI,CAAC,UAAL,GAAkB,YAAlB,EAFR;AAGL,oBAAc,IAAI,CAAC,SAAL,GAAiB,2BAAjB,EAHT;AAIL,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,SAJhC;AAKL,cAAS,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,IALhC;AAML,oBAAc;AANT,KAAP,CAJyB;AAYzB;AAAqB,SAZI,CAA3B;AAcD;AAED;;;;;;;;uCAImB,Q,EAAU;AAC3B,UAAI,QAAQ,CAAC,qBAAT,EAAJ,EAAsC;AACpC,aAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,yBADjB,EAEE,IAFF;AAIA,aAAK,KAAL,CAAW,SAAX,GAAuB,mBAAvB,CAA2C;AACzC,UAAA,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAT;AADwB,SAA3C;AAGD;AACF;AAED;;;;;;;4BAIQ;AAAA;;AACN;AACA,WAAK,KAAL,CACG,SADH,GAEG,kBAFH,CAEsB,iCAAkB,gBAFxC;AAGA,WAAK,mBAAL,CAAyB,QAAzB,CAAkC,YAAM;AACtC,QAAA,MAAI,CAAC,KAAL,CACG,SADH,GAEG,mBAFH,CAEuB,iCAAkB,gBAFzC;AAGD,OAJD,EALM,CAWN;;AACA,WAAK,mBAAL,CAAyB,EAAzB,CACE,uCADF,EAEE,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAFF,EAZM,CAiBN;;AACA,WAAK,mBAAL,CAAyB,YAAzB,GAAwC,IAAxC,CAA6C,UAAA,MAAM,EAAI;AACrD,YAAI,MAAM,CAAC,IAAP,CAAY,YAAZ,CAAJ,EAA+B;AAC7B,cAAM,OAAO,GAAG,MAAI,CAAC,QAAL,IAAiB,EAAjC;;AACA,cAAI,OAAO,CAAC,UAAR,IAAsB,SAA1B,EAAqC;AACnC,YAAA,OAAO,CAAC,UAAR,GAAqB,oBAArB;AACD;;AACD,UAAA,MAAI,CAAC,aAAL,CAAmB,WAAnB,CAA+B,6BAAe,kBAA9C,EAAkE,IAAlE;;AACA,cAAI,UAAJ,CAAe,MAAI,CAAC,KAApB,EAA2B,OAA3B,EAAoC,KAApC;AACA;AACD;;AACD,YAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAJ,EAA2B;AACzB,UAAA,MAAI,CAAC,KAAL,CAAW,SAAX,GAAuB,uBAAvB,GADyB,CAEzB;;;AACA,UAAA,MAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,MAAI,CAAC,mBAAtC;;AACA;AACD;AACF,OAhBD;AAkBA,WAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,qDADjB;AAIA,aAAO,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAAP;AACD;;;;;;;;;;;;;;;;;ACtaH;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAM,cAAc,GAAG,SAAvB;AACA,IAAM,qBAAqB,GAAG,MAA9B;AAEA,IAAM,oBAAoB,GAAG,yBAA7B;AAEA;;;;;;AAKO,IAAI,aAAJ;AAEP;;;;;;AAIO,IAAM,UAAU,GAAG;AACxB,gBAAc,wBADU;AAExB,aAAW;AAFa,CAAnB;AAKP;;;;AACA,SAAS,SAAT,GAAqB;AACnB,SAAO,UAAU,CAAC,kBAAD,CAAjB;AACD;AAED;;;AACA,SAAS,MAAT,GAAkB;AAChB,SAAO,wBAAS,UAAU,CAAC,kBAAD,CAAV,GAAiC,cAA1C,CAAP;AACD;AAED;;;AACA,SAAS,aAAT,GAAyB;AACvB,SAAO,UAAU,CAAC,kBAAD,CAAV,GAAiC,4BAAxC;AACD;AAED;;;;IAEa,S;;;AACX;;;AAGA,qBAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,QAAL,GAAgB,iCAAe,KAAK,IAApB,EAA0B,iCAAgB,QAA1C,IACZ,IAAI,qBAAJ,CACE,KAAK,IADP,EAEE,KAAK,cAFP,EAGE;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,gBAAjB,EAJF,CADY,GAOZ,IAAI,mBAAJ,CACE,KAAK,IADP,EAEE,KAAK,cAFP,EAGE,KAAK,cAHP,CAPJ;AAYD;AAED;;;;;;;+BAGW,G,EAAK;AACd,MAAA,GAAG,CAAC,QAAJ,CAAa,MAAM,EAAnB;AACA,MAAA,GAAG,CAAC,QAAJ,CACE,gEADF;AAGA,MAAA,GAAG,CAAC,QAAJ,CAAa,iDAAb;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,0BAAf;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,+BAAf;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,yBAAf;AACD;AAED;;;;;;8BAGU;AACR;AACA,aAAO,KAAK,QAAL,CAAc,OAAd,EAAP;AACD;AAED;;;;;;;0BAIM,c,EAA8B;AAAA,UAAd,OAAc,uEAAJ,EAAI;AAClC,WAAK,QAAL,CAAc,KAAd,CAAoB,cAApB,EAAoC,OAApC;AACD;AAED;;;;;;+BAGW,Q,EAAU;AACnB,WAAK,QAAL,CAAc,UAAd,CAAyB,QAAzB;AACD;;;;;AAGH;;;;;;;;IAIM,mB;;;;;;;;;;AACJ;;;8BAGU,CAAE;AAEZ;;;;;;;0BAIM,oB,EAAsB,a,EAAe,CAAE;AAE7C;;;;;;+BAGW,c,EAAgB,CAAE;;;;;AAG/B;;;;;IAGM,mB;;;AACJ;;;;;AAKA,+BAAY,GAAZ,EAAiB,aAAjB,EAAgC,aAAhC,EAA+C;AAAA;;AAC7C;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,cAAL,GAAsB,aAAtB;AACA;;AACA,SAAK,cAAL,GAAsB,aAAtB;AACD;AAED;;;;;8BACU;AACR,aAAO,KAAP;AACD;AAED;;;;0BACM,c,EAAgB,O,EAAS;AAC7B,UAAM,MAAM,GAAG,KAAK,cAAL,CAAoB,IAApB,CACb,qBADa,EAEb,MAAM,EAFO,EAGb,OAAO,CAAC,aAAR,GAAwB,MAAxB,GAAiC,QAHpB,EAIb,sBAAO,cAAP,CAJa,EAKb,EALa,CAAf;AAOA,WAAK,cAAL,CAAoB,WAApB,CAAiC,MAAM,IAAI,MAAM,CAAC,SAAlB,IAAgC,IAAhE;AACD;AAED;;;;+BACW,Q,EAAU;AAAA;;AACnB,UAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAA,IAAI,EAAI;AAC/B,QAAA,KAAI,CAAC,cAAL,CAAoB,WAApB;;AACA,QAAA,QAAQ,CAAC,KAAI,CAAC,oBAAL,CAA0B,IAA1B,CAAD,CAAR;AACD,OAHD;;AAIA,WAAK,cAAL,CAAoB,QAApB,CAA6B,qBAA7B,EAAoD,gBAApD;AACA,WAAK,cAAL,CAAoB,QAApB,CAA6B,cAA7B,EAA6C,gBAA7C;AACD;AAED;;;;;;;;yCAKqB,I,EAAM;AAAA;;AACzB;AACA,aAAO,IAAI,CAAC,YAAL,GAAoB,IAApB,CAAyB,UAAA,MAAM,EAAI;AACxC,YAAI,MAAM,CAAC,MAAP,IAAiB,SAAS,EAA9B,EAAkC;AAChC,gBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,YAAM,IAAI;AAAG;AAAwB,QAAA,MAAM,CAAC,IAA5C;;AACA,YAAI,IAAI,CAAC,+BAAD,CAAR,EAA2C;AACzC;AACA,cAAM,GAAG,GAAG,IAAI,QAAJ,CAAQ,MAAI,CAAC,IAAb,CAAZ;AACA,cAAM,GAAG,GAAG,aAAa,EAAzB;AACA,cAAM,IAAI;AAAG;AAA2C;AACtD,YAAA,MAAM,EAAE,MAD8C;AAEtD,YAAA,OAAO,EAAE;AAAC,wBAAU;AAAX,aAF6C;AAGtD,YAAA,WAAW,EAAE,SAHyC;AAItD,YAAA,IAAI,EAAE,IAAI,CAAC,+BAAD,CAJ4C;AAKtD,YAAA,IAAI,EAAE;AALgD,WAAxD;AAOA,iBAAO,GAAG,CACP,KADI,CACE,GADF,EACO,IADP,EAEJ,IAFI,CAEC,UAAA,QAAQ;AAAA,mBAAI,QAAQ,CAAC,IAAT,EAAJ;AAAA,WAFT,EAGJ,IAHI,CAGC,UAAA,QAAQ,EAAI;AAChB,gBAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,IAAlB,CAAlB;AACA,mBAAO,SAAS,CAAC,+BAAD,CAAhB;AACA,mBAAO,MAAM,CAAC,MAAP,CAAc,SAAd,EAAyB,QAAzB,CAAP;AACD,WAPI,CAAP;AAQD,SAxBuC,CAyBxC;;;AACA,YAAI,MAAM,CAAC,cAAP,IAAyB,MAAM,CAAC,aAApC,EAAmD;AACjD,iBAAO,IAAP;AACD;;AACD,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA9BM,CAAP;AA+BD;;;;;AAGH;;;;;;;IAKa,qB;;;AACX;;;;;AAKA,iCAAY,GAAZ,EAAiB,aAAjB,EAAgC,mBAAhC,EAAqD;AAAA;;AACnD;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,cAAL,GAAsB,aAAtB;AAEA;;AACA,SAAK,iBAAL,GAAyB,IAAzB;AAEA;;AACA,SAAK,QAAL,GAAgB,IAAhB;AAEA;;AACA,SAAK,SAAL,GAAiB,IAAjB;AAEA;;AACA,SAAK,uBAAL,GAA+B,IAAI,sBAAJ,CAA2B,KAAK,IAAhC,CAA/B;AAEA;;AACA,SAAK,OAAL,GAAe,KAAK,aAAL,CACb;AACE,MAAA,WAAW,EAAE,kBADf;AAEE,WAAK;AACH,uBAAe,KAAK,uBAAL,CAA6B,UAA7B;AADZ;AAFP,KADa,EAOb,mBAPa,EAQb,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CARa,CAAf,CAnBmD,CA8BnD;;AACA,SAAK,uBAAL,CAA6B,OAA7B;AACD;AAED;;;;;;;;;;;kCAOc,O,EAAS,mB,EAAqB,O,EAAS;AACnD;AACA;AACA,uCAAoB,oBAApB,GAA2C,mBAA3C;AACA,aAAO,IAAI,gCAAJ,CACL,OADK,EAEL,OAFK;AAGL;AAAgB,WAHX,EAIL,KAAK,cAAL,CAAoB,2BAApB,EAJK,CAAP;AAMD;AAED;;;;8BACU;AACR,aAAO,OAAP;AACD;AAED;;;;0BACM,c,EAAgB,O,EAAS;AAAA;;AAC7B,WAAK,QAAL,GAAgB,cAAhB;;AAEA,UAAI,OAAO,CAAC,aAAZ,EAA2B;AACzB,QAAA,cAAc,GAAG,MAAM,CAAC,MAAP,CAAc,cAAd,EAA8B;AAC7C,2BAAiB,OAAO,CAAC,aAAR,IAAyB;AADG,SAA9B,CAAjB;AAGD;;AACD,MAAA,gBAAgB,CACd,cADc,EAEd,eAFc,EAGd;AACA;AACA,WAAK,IAAL,IAAa,KAAK,IAAL,EAAb,IACE;AACA,OAAC,iCAAe,KAAK,IAApB,EAA0B,iCAAgB,WAA1C,CAPW,CAAhB,CAR6B,CAiB7B;;AACA,WAAK,uBAAL,CAA6B,WAA7B,CAAyC,UAAA,QAAQ,EAAI;AACnD,YAAI,QAAJ,EAAc;AACZ,UAAA,gBAAgB,CAAC,cAAD,EAAiB,kBAAjB,EAAqC,QAArC,CAAhB;AACD;;AACD,QAAA,MAAI,CAAC,OAAL,CAAa,eAAb,CAA6B,cAA7B;AACD,OALD;AAMD;AAED;;;;+BACW,Q,EAAU;AAAA;;AACnB,WAAK,iBAAL,GAAyB,QAAzB;AACA,UAAM,QAAQ,GAAG,KAAK,SAAtB;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAM;AAC3B,cAAI,QAAJ,EAAc;AACZ,YAAA,QAAQ,CAAC,MAAI,CAAC,gBAAL,CAAsB,QAAtB,EAAgC,MAAI,CAAC,QAArC,CAAD,CAAR;AACD;AACF,SAJD;AAKD;AACF;AAED;;;;;;;oCAIgB,e,EAAiB;AAC/B,WAAK,SAAL,GAAiB,eAAjB;;AACA,UAAI,KAAK,iBAAT,EAA4B;AAC1B,aAAK,iBAAL,CACE,KAAK,gBAAL,CAAsB,KAAK,SAA3B,EAAsC,KAAK,QAA3C,CADF;AAGD;AACF;AAED;;;;;;;;;qCAMiB,Q,EAAU,O,EAAS;AAAA;;AAClC,aAAO,QAAQ,CACZ,IADI,EAEH;AACA;AACA;AACA,gBAAA,GAAG,EAAI;AACL,YAAI,OAAJ,EAAa;AACX,UAAA,GAAG,CAAC,gBAAD,CAAH,GAAwB,OAAxB;AACD;;AACD,eAAO,GAAP;AACD,OAVE,WAYE,UAAA,MAAM,EAAI;AACf,YAAI,QAAO,MAAP,KAAiB,QAAjB,IAA6B,MAAM,CAAC,YAAD,CAAN,IAAwB,UAAzD,EAAqE;AACnE,iBAAO,OAAO,CAAC,MAAR,CAAe,+BAAkB,MAAI,CAAC,IAAvB,CAAf,CAAP;AACD;;AACD,eAAO,OAAO,CAAC,MAAR,CAAe,MAAf,CAAP;AACD,OAjBI,CAAP;AAkBD;AAED;;;;;;;2BAIO;AACL;AACA,aAAO,KAAK,IAAL,CAAU,GAAjB;AACD;;;;;AAGH;;;;;;;;;AAMA,IAAI,uBAAJ;AAEA;;;;;;;;;;;IAUa,sB;;;AACX;;;AAGA,kCAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,YAAL,GAAoB,KAApB;AAEA;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,YAAL,GAAoB,IAApB;AACD;AAED;;;;;;;;;8BAKU;AACR,aAAO,KAAK,gBAAL,CAAsB,YAAM,CAAE,CAA9B,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;gCAkBY,Q,EAAU;AAAA;;AACpB,WAAK,gBAAL,CAAsB,UAAA,IAAI,EAAI;AAC5B,YAAI,IAAJ,EAAU;AACR,cAAI;AACF,YAAA,MAAI,CAAC,IAAL,CAAU,YAAV,CAAuB,OAAvB,CAA+B,oBAA/B,EAAqD,IAAI,CAAC,GAA1D;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA;AACA;AACA,YAAA,IAAI,GAAG,IAAP;AACD;AACF;;AACD,QAAA,QAAQ,CAAE,IAAI,IAAI,IAAI,CAAC,QAAd,IAA2B,IAA5B,CAAR;AACD,OAZD;AAaD;AAED;;;;;;;iCAIa;AACX,UAAI;AACF,eACG,KAAK,IAAL,CAAU,YAAV,IACC,KAAK,IAAL,CAAU,YAAV,CAAuB,OAAvB,CAA+B,oBAA/B,CADF,IAEA,IAHF;AAKD,OAND,CAME,OAAO,CAAP,EAAU;AACV,eAAO,IAAP;AACD;AACF;AAED;;;;;;;;qCAKiB,Q,EAAU;AACzB,WAAK,WAAL;;AACA,UAAI,KAAK,YAAT,EAAuB;AACrB;AACA,QAAA,QAAQ,CAAC,KAAK,KAAN,CAAR;AACD,OAHD,MAGO,IAAI,KAAK,YAAT,EAAuB;AAC5B;AACA,aAAK,YAAL,CAAkB,IAAlB,CAAuB,UAAA,IAAI;AAAA,iBAAI,QAAQ,CAAC,IAAD,CAAZ;AAAA,SAA3B;AACD;;AACD,aAAO,KAAK,YAAZ;AACD;AAED;;;;;;kCAGc;AAAA;;AACZ;AACA,UAAI,KAAK,YAAL,IAAqB,KAAK,YAA9B,EAA4C;AAC1C;AACD,OAJW,CAMZ;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAM,MAAM,GAAG,KAAK,IAAL,CAAU,MAAzB;;AACA,UACE,KAAK,IAAL,CAAU,YAAV,IACA,MADA,IAEA,MAAM,CAAC,eAFP,IAGA,MAAM,CAAC,MAHP,IAIA,MAAM,CAAC,MAAP,CAAc,MALhB,EAME;AACA,aAAK,YAAL,GAAoB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACnD;AACA,cAAM,QAAQ,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAjB;AACA,UAAA,MAAM,CAAC,eAAP,CAAuB,QAAvB,EAHmD,CAKnD;;AACA,cAAM,GAAG,GAAG,IAAI,CAAC,0BAAc,QAAd,CAAD,CAAhB,CANmD,CAQnD;;AACA,UAAA,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB;AAAC,YAAA,IAAI,EAAE;AAAP,WAArB,EAAwC,0BAAc,GAAd,CAAxC,EAA4D,IAA5D,CACE,UAAA,MAAM,EAAI;AACR,gBAAM,QAAQ,GAAG,IAAI,CACnB,0BACE,IAAI,UAAJ;AAAe;AAA6B,YAAA,MAA5C,CADF,CADmB,CAArB;AAKA,YAAA,OAAO,CAAC;AAAC,cAAA,GAAG,EAAH,GAAD;AAAM,cAAA,QAAQ,EAAR;AAAN,aAAD,CAAP;AACD,WARH,EASE,UAAA,MAAM,EAAI;AACR,YAAA,MAAM,CAAC,MAAD,CAAN;AACD,WAXH;AAaD,SAtBmB,WAuBX,YAAM;AACX;AACA;AACA,iBAAO,IAAP;AACD,SA3BiB,EA4BjB,IA5BiB,CA4BZ,UAAA,IAAI,EAAI;AACZ,UAAA,MAAI,CAAC,YAAL,GAAoB,IAApB;AACA,UAAA,MAAI,CAAC,KAAL,GAAa,IAAb;AACA,iBAAO,IAAP;AACD,SAhCiB,CAApB;AAiCD,OAxCD,MAwCO;AACL;AACA,aAAK,YAAL,GAAoB,IAApB;AACA,aAAK,KAAL,GAAa,IAAb;AACD;AACF;;;;;AAGH;;;;;;;;;AAKA,SAAS,gBAAT,CAA0B,cAA1B,EAA0C,KAA1C,EAAiD,KAAjD,EAAwD;AACtD,EAAA,cAAc,CAAC,GAAD,CAAd,GAAsB,MAAM,CAAC,MAAP,CAAc,cAAc,CAAC,GAAD,CAAd,IAAuB,EAArC,sBACnB,KADmB,EACX,KADW,EAAtB;AAGD,C,CAED;;;AACO,SAAS,yBAAT,GAAqC;AAC1C,SAAO,qBAAP;AACD;;;;;;;;;;;;;ACljBD;;AAIA;;AAEA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA;;;;AAIO,IAAM,8BAA8B,GAAG;AAC5C;AACA;AACA;AACA,mCAAiC;AAJW,CAAvC;;AAOA,IAAM,iBAAiB,GAAG;AAC/B,UAAQ,CADuB;AAE/B,cAAY;AAFmB,CAA1B;AAKP;;;;;;;AAIA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,SAAO,IAAI,yBAAJ,CAAgB,MAAS,GAAT,CAAhB,CAAP;AACD;AAED;;;;;IAGa,Y;;;AACX;;;;;AAKA,wBACE,IADF,EAEE,wBAFF,EAIE;AAAA,QADA,WACA,uEADc,2BAAY,YAC1B;;AAAA;;AACA;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,SAAL,EAAlB;AAEA;;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,UAAL,EAAnB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,oBAAL,GACE,OAAO,wBAAP,IAAmC,QAAnC,GACI;AAAC,eAAS;AAAV,KADJ,GAEI,wBAHN;AAKA;;AACA,SAAK,YAAL,GAAoB,WAApB;AAEA;;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,SAAL,EAAzB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB,CA1BA,CA4BA;;AACA,SAAK,aAAL,GAAqB,KAAK,oBAAL,CAA0B,uBAA/C;AACA,SAAK,aAAL,GAAqB,CAArB;;AACA,QAAI,KAAK,aAAT,EAAwB;AACtB,WAAK,aAAL,GAAqB,8BAA8B,CAAC,KAAK,aAAN,CAAnD;AACD,KAFD,MAEO,IAAI,KAAK,oBAAL,CAA0B,MAA9B,EAAsC;AAC3C,WAAK,aAAL,GACE,8BAA8B,CAAC,+BAAD,CADhC;AAED,KApCD,CAsCA;;;AACA,SAAK,mBAAL,GAA2B,KAA3B;AACA,SAAK,cAAL,GAAsB,CAAtB;;AACA,QAAI,KAAK,oBAAL,CAA0B,OAA9B,EAAuC;AACrC,WAAK,cAAL,GAAsB,iBAAiB,CAAC,UAAD,CAAvC;AACA,aAAO,KAAK,oBAAL,CAA0B,OAAjC;AACD;AACF;AAED;;;;;;;;4BAIQ;AACN,UAAM,GAAG,GAAG,KAAK,oBAAjB,CADM,CAEN;;AACA,UAAM,iBAAiB,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAlB,EAAuB;AAC/C,yBAAiB,KAAK,WAAL,CAAiB,gBAAjB;AAD8B,OAAvB,CAA1B;;AAIA,UAAI,KAAK,aAAT,EAAwB;AACtB,QAAA,iBAAiB,CAAC,uBAAlB,GAA4C,KAAK,aAAjD;AACD;;AAED,UAAI,KAAK,cAAT,EAAyB;AACvB,QAAA,iBAAiB,CAAC,iBAAlB,GAAsC,KAAK,cAA3C;AACD,OAbK,CAeN;;;AACA,WAAK,KAAL,CAAW,SAAX,GAAuB,kBAAvB,CAA0C,iCAAkB,SAA5D,EAAuE,GAAvE;;AACA,UAAI,GAAG,CAAC,MAAR,EAAgB;AACd,aAAK,iBAAL,CAAuB,MAAvB,CAA8B,GAAG,CAAC,MAAlC;AACD;;AACD,WAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,2BADjB,EAEE,IAFF,EAGE,cAAc,CAAC,GAAG,CAAC,KAAL,CAHhB;AAKA,WAAK,UAAL,CAAgB,KAAhB,CACE;AACE,sBAAc,CADhB;AAEE,iCAAyB,CAAC,MAAD,CAF3B;AAGE,uBAAe,kBAHjB;AAIE,2BAAmB,mBAJrB;AAKE,eAAO,iBALT;AAME,aAAK;AACH,yBAAe,IAAI,CAAC,GAAL,EADZ;AAEH,yBAAe,KAAK;AAFjB;AANP,OADF,EAYE;AACE,QAAA,aAAa,EACX,KAAK,KAAL,CAAW,MAAX,GAAoB,cAApB,IAAsC,8BAAe;AAFzD,OAZF;AAiBA,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;;;;AAGH;;;;;;;IAGa,e;;;;;;AACX;;;qCAGwB,I,EAAM;AAC5B;AACA,UAAM,YAAY,GAAG,IAAI,CAAC,YAAL,EAArB;AAEA,MAAA,IAAI,CAAC,SAAL,GAAiB,UAAjB,CAA4B,UAAA,UAAU,EAAI;AACxC,QAAA,IAAI,CAAC,mBAAL,GAA2B,qBAA3B;AACA,YAAM,IAAI,GAAG,IAAI,eAAJ,CAAoB,IAApB,CAAb;AACA,YAAM,OAAO,GAAG,mBAAmB,CACjC,IADiC,EAEjC,UAFiC,EAGjC,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAHiC,CAAnC;AAKA,QAAA,IAAI,CAAC,SAAL,GAAiB,sBAAjB,CAAwC,OAAxC;AACA,eAAO,OAAO,CAAC,IAAR,CACL,UAAA,QAAQ,EAAI;AACV,cAAM,GAAG,GAAG,4BAA4B,CAAC,QAAQ,CAAC,YAAV,CAAxC;AACA,UAAA,IAAI,CAAC,SAAL,GAAiB,MAAjB,CAAwB,GAAG,IAAI,EAA/B;AACA,UAAA,YAAY,CAAC,WAAb,CACE,6BAAe,uBADjB,EAEE,IAFF,EAGE,cAAc,CAAC,GAAG,IAAI,EAAR,CAHhB;AAKA,UAAA,IAAI,CAAC,KAAL,CAAW,QAAX;AACD,SAVI,EAWL,UAAA,MAAM,EAAI;AACR,cAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,YAAA,IAAI,CAAC,SAAL,GAAiB,mBAAjB,CAAqC,iCAAkB,SAAvD;AACA,YAAA,IAAI,CACD,YADH,GAEG,WAFH,CAEe,6BAAe,4BAF9B,EAE4D,IAF5D;AAGD,WALD,MAKO;AACL,YAAA,IAAI,CACD,YADH,GAEG,WAFH,CAEe,6BAAe,oBAF9B,EAEoD,KAFpD;AAGA,YAAA,IAAI,CAAC,OAAL,GAAe,KAAf,CAAqB,YAArB,EAAmC,MAAnC;AACD;;AACD,gBAAM,MAAN;AACD,SAxBI,CAAP;AA0BD,OAnCD;AAoCD;AAED;;;;;;AAGA,2BAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAA3B;AAEA;;AACA,SAAK,SAAL,GAAiB,IAAjB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAArB;AAEA;;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,SAAL,EAAzB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AAEA;;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;AAED;;;;;;;;;0BAKM,Q,EAAU;AAAA;;AACd,WAAK,IAAL,GAAY,4BAA4B,CAAC,QAAQ,CAAC,YAAV,CAAxC;AACA,WAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,0BADjB,EAEE,IAFF,EAGE,cAAc,CAAC,KAAK,IAAL,IAAa,EAAd,CAHhB;AAKA,WAAK,KAAL,CAAW,mBAAX,GAAiC,KAAjC,CAAuC,IAAvC;AACA,WAAK,SAAL,GAAiB,QAAjB;AACA,UAAM,IAAI,GAAG;AACX,yBAAiB,KAAK,KAAL,CAAW,UAAX,GAAwB,gBAAxB,EADN;AAEX,uBAAe,KAAK,SAAL,CAAe,aAAf,CAFJ;AAGX,gCAAwB,CAAC,CAAC,KAAK,SAAL,CAAe,QAAf;AAHf,OAAb,CATc,CAcd;;AACA,UAAI,QAAQ,CAAC,QAAT,IAAqB,QAAQ,CAAC,YAAlC,EAAgD;AAC9C,QAAA,IAAI,CAAC,SAAD,CAAJ,GAAkB,QAAQ,CAAC,QAAT,CAAkB,OAApC;AACA,aAAK,KAAL,CACG,mBADH,GAEG,oBAFH,CAEwB,QAAQ,CAAC,YAAT,CAAsB,GAF9C;AAGD,OALD,MAKO;AACL,QAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,QAAQ,CAAC,QAAT,IAAqB,QAAQ,CAAC,QAAT,CAAkB,KAA3D;AACD;;AACD,WAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,mBAAN,CAHyB,EAIzB,sBAAO,IAAP,CAJyB;AAKzB;AAAqB,UALI,CAA3B;AAQA,WAAK,mBAAL,CAAyB,EAAzB,CACE,kCADF,EAEE,KAAK,2BAAL,CAAiC,IAAjC,CAAsC,IAAtC,CAFF;AAKA,WAAK,mBAAL,CAAyB,YAAzB,GAAwC,IAAxC,CAA6C,YAAM;AACjD;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;AACD,OAHD;AAIA,WAAK,aAAL,GAAqB,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,mBAAlC,CAArB;AACA,aAAO,KAAK,aAAZ;AACD;AAED;;;;;;;gDAI4B,Q,EAAU;AACpC,UAAM,GAAG,GAAG,QAAQ,CAAC,MAAT,EAAZ;;AACA,UAAI,GAAJ,EAAS;AACP,aAAK,KAAL,CAAW,mBAAX,GAAiC,oBAAjC,CAAsD,GAAtD;AACD;AACF;AAED;;;;;;+BAGW;AAAA;;AACT,WAAK,aAAL,CAAmB,WAAnB,CACE,6BAAe,sBADjB,EAEE,IAFF,EAGE,cAAc,CAAC,KAAK,IAAL,IAAa,EAAd,CAHhB;AAKA,WAAK,KAAL,CAAW,mBAAX,GAAiC,uBAAjC;AACA,WAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAM;AAC5B,YAAM,wBAAwB,GAAG,IAAI,oCAAJ,EAAjC;AACA,QAAA,wBAAwB,CAAC,WAAzB,CAAqC,IAArC;;AACA,QAAA,MAAI,CAAC,mBAAL,CAAyB,OAAzB,CAAiC,wBAAjC;AACD,OAJD;AAKA,aAAO,KAAK,mBAAL,CACJ,YADI,YAEE,YAAM,CACX;AACD,OAJI,EAKJ,IALI,CAKC,YAAM;AACV,QAAA,MAAI,CAAC,aAAL,CAAmB,WAAnB,CACE,6BAAe,2BADjB,EAEE,IAFF,EAGE,cAAc,CAAC,MAAI,CAAC,IAAL,IAAa,EAAd,CAHhB;;AAKA,QAAA,MAAI,CAAC,KAAL,CAAW,mBAAX,GAAiC,aAAjC,CAA+C,IAA/C;AACD,OAZI,CAAP;AAaD;;;;;AAGH;;;;;;;;;;AAMA,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,UAAnC,EAA+C,eAA/C,EAAgE;AAC9D,SAAO,UAAU,CAAC,IAAX,CAAgB,UAAA,IAAI,EAAI;AAC7B;AACA;AACA;AACA;AAEA,QAAM,SAAS,GAAG,IAAI,CAAC,SAAL,GAAiB,YAAjB,EAAlB;AACA,QAAI,SAAS,GAAG,6BAAe,OAA/B;AACA,QAAI,WAAW,GAAG,SAAlB;;AACA,QAAI,QAAO,IAAP,MAAgB,QAAhB,IAA4B,CAAC,IAAI,CAAC,qBAAD,CAArC,EAA8D;AAC5D;AACA;AACA;AACA;AACA;AACA,MAAA,WAAW,GAAG,IAAI,yBAAJ,EAAd;AACA,MAAA,WAAW,CAAC,YAAZ,CAAyB,SAAzB;AACA,MAAA,SAAS,GAAG,6BAAe,mBAA3B;AACD,KATD,MASO;AACL,UAAM,OAAO,GAAG,IAAI,CAAC,SAAL,GAAiB,gBAAjB,EAAhB;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,qBAAD,CAApB;;AAEA,UAAI,CAAC,SAAL,EAAgB;AACd;AACA;AACA;AACA,QAAA,IAAI,CAAC,SAAL,GAAiB,gBAAjB,CAAkC,OAAlC;AACA,QAAA,SAAS,GAAG,6BAAe,+BAA3B;AACD,OAND,MAMO;AACL,YAAI,OAAO,KAAK,OAAhB,EAAyB;AACvB;AACA,UAAA,SAAS,GAAG,6BAAe,mBAA3B;AACD,SAHD,MAGO;AACL;AACA;AACA,UAAA,WAAW,GAAG,IAAI,yBAAJ,EAAd;AACA,UAAA,WAAW,CAAC,oBAAZ,CAAiC,OAAjC;AACA,UAAA,SAAS,GAAG,6BAAe,mBAA3B;AACD;AACF;AACF;;AACD,IAAA,IAAI,CAAC,YAAL,GAAoB,WAApB,CAAgC,SAAhC,EAA2C,IAA3C,EAAiD,WAAjD;AACA,WAAO,yBAAyB,CAAC,IAAD,EAAO,IAAP,EAAa,eAAb,CAAhC;AACD,GA3CM,CAAP;AA4CD;AAED;;;;;;;;AAMO,SAAS,yBAAT,CAAmC,IAAnC,EAAyC,IAAzC,EAA+C,eAA/C,EAAgE;AACrE,MAAI,OAAO,GAAG,IAAd;AACA,MAAI,GAAG,GAAG,IAAV;AACA,MAAI,WAAW,GAAG,2BAAY,YAA9B;AACA,MAAI,MAAM,GAAG,IAAb;;AAEA,MAAI,IAAJ,EAAU;AACR,QAAI,OAAO,IAAP,IAAe,QAAnB,EAA6B;AAC3B,MAAA,GAAG;AAAG;AAAuB,MAAA,IAA7B;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAM,IAAI;AAAG;AAAwB,MAAA,IAArC;;AACA,UAAI,qBAAqB,IAAzB,EAA+B;AAC7B,QAAA,OAAO;AAAG;AAAwB,QAAA,IAAI,CAAC,iBAAD,CAAtC;AACD,OAFD,MAEO,IAAI,kCAAkC,IAAtC,EAA4C;AACjD,QAAA,GAAG,GAAG,IAAI,CAAC,8BAAD,CAAV;AACD;;AACD,UAAI,oBAAoB,IAAxB,EAA8B;AAC5B,QAAA,MAAM,GAAG,CAAC,IAAI,CAAC,gBAAD,CAAJ,CAAuB,KAAvB,KAAiC,EAAlC,EAAsC,QAAtC,CAAT;AACA,QAAA,WAAW,GACT,CAAC,IAAI,CAAC,gBAAD,CAAJ,CAAuB,GAAvB,KAA+B,EAAhC,EAAoC,aAApC,KACA,2BAAY,YAFd;AAGD;AACF;AACF;;AACD,MAAI,GAAG,IAAI,CAAC,OAAZ,EAAqB;AACnB,IAAA,GAAG,GAAG,IAAI,CAAC,GAAD,CAAV;;AACA,QAAI,GAAJ,EAAS;AACP,UAAM,MAAM,GAAG,qBAAU,GAAV,CAAf;AACA,MAAA,OAAO,GAAG,MAAM,CAAC,iBAAD,CAAhB;AACD;AACF;;AACD,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,EAAA,GAAG,GAAG,IAAI,CAAC,SAAL;AAAe;AAA4B,EAAA,OAA3C,CAAN;AACA,SAAO,IAAI,oCAAJ,CACL,GADK,EAEL,iBAAiB,CAAC,OAAD,CAFZ,EAGL,aAAa,CAAC,OAAD,CAHR,EAIL,iBAAiB,CAAC,IAAD,EAAO,OAAP,CAJZ,EAKL,WALK,EAML,eANK,EAOL,MAPK,CAAP;AASD;AAED;;;;;;AAIA,SAAS,iBAAT,CAA2B,OAA3B,EAAoC;AAClC,MAAM,GAAG,GAAG,OAAO,CAAC,cAAD,CAAnB;AACA,MAAM,SAAS,GAAG,OAAO,CAAC,uBAAD,CAAzB;AACA,SAAO,IAAI,+BAAJ,CAAiB,GAAjB,EAAsB,SAAtB,CAAP;AACD;AAED;;;;;;;AAKO,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AACrC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,MAAM,GAAG;AAAG;AAAwB,MAAI,cAAJ,GAAgB,MAAhB,CAAuB,OAAvB,CAApC;AACA,SAAO,IAAI,kBAAJ,CAAa,OAAb,EAAsB,GAAtB,CAAP;AACD;AAED;;;;;;;;AAMO,SAAS,iBAAT,CAA2B,IAA3B,EAAiC,OAAjC,EAA0C;AAC/C,MAAI,OAAO,CAAC,oBAAD,CAAX,EAAmC;AACjC,WAAO,IAAI,CAAC,mBAAL,GAA2B,iBAA3B,CAA6C,OAA7C,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;AAIA,SAAS,4BAAT,CAAsC,YAAtC,EAAoD;AAClD;AACE;AAAwB,yCACtB,YAAY,CAAC,GADS,EAEtB,WAFsB,KAGnB;AAJP;AAMD;;;;;;;;;;AC3eD;;AAKA;;AACA;;AACA;;;;;;;;AAEA;;;IAGa,gB;;;AACX;;;;;;;;AAQA,4BAAY,GAAZ,EAAiB,IAAjB,EAAuB,OAAvB,EAAgC;AAAA;;AAC9B;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,KAAL,GAAa,IAAb;AACA;;AACA,SAAK,cAAL,GAAsB,KAAK,KAAL,CAAW,UAAX,GAAwB,gBAAxB,EAAtB;AACA;;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AACA;;AACA,SAAK,QAAL,GAAgB,CAAhB;AAEA,SAAK,KAAL,CACG,YADH,GAEG,qBAFH,CAEyB,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAFzB;AAGD;AAED;;;;;;;;yCAIqB;AACnB,aAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,MAA1B;AACD;AAED;;;;;;;;mCAKe;AACb,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB;AACA,YAAM,SAAS,GAAG,KAAK,kBAAL,GAA0B,KAA1B,CAChB,iCADgB,CAAlB,CAFmB,CAKnB;AACA;;AACA,aAAK,SAAL,GAAiB,SAAS,IAAI,kBAAkB,CAAC,SAAS,CAAC,GAAV,EAAD,CAAhD;AACD;;AACD,aAAO,KAAK,SAAZ;AACD;AAED;;;;;;;;mCAKe,G,EAAK;AAClB,MAAA,GAAG,GAAG,GAAG,GAAG,cAAN,GAAuB,KAAK,QAAlC;AACA,UAAM,QAAQ,GAAG,KAAK,YAAL,EAAjB;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,GAAG,GAAG,GAAG,GAAG,UAAN,GAAmB,QAAzB;AACD;;AACD,MAAA,GAAG,GAAG,GAAG,GAAG,OAAN,GAAgB,KAAK,IAAL,CAAU,QAAV,CAAmB,QAAzC;AACA,aAAO,GAAP;AACD;AAED;;;;;;;0CAIsB,K,EAAO,c,EAAgB;AAC3C,UAAM,IAAI;AAAG;AAA2C;AACtD,QAAA,MAAM,EAAE,KAD8C;AAEtD,QAAA,WAAW,EAAE;AAFyC,OAAxD;AAIA,UAAI,SAAS,GAAG,KAAK,cAAL,GAAsB,GAAtB,GAA4B,KAA5C;;AACA,UAAI,cAAJ,EAAoB;AAClB,QAAA,SAAS,GAAG,SAAS,GAAG,GAAZ,GAAkB,kBAAkB,CAAC,cAAD,CAAhD;AACD;;AACD,UAAM,GAAG,GAAG,sBAAO,sBAAP,IAAiC,kBAAkB,CAAC,SAAD,CAA/D;AACA,aAAO,KAAK,QAAL,CAAc,KAAd,CAAoB,KAAK,cAAL,CAAoB,GAApB,CAApB,EAA8C,IAA9C,CAAP;AACD;AAED;;;;;;;;+BAKW,K,EAAO,O,EAAS;AACzB,UAAM,IAAI;AAAG;AAA2C;AACtD,QAAA,MAAM,EAAE,KAD8C;AAEtD,QAAA,WAAW,EAAE;AAFyC,OAAxD;AAIA,UAAI,SAAS,GAAG,KAAK,cAAL,GAAsB,GAAtB,GAA4B,KAA5C;;AACA,UAAI,OAAJ,EAAa;AACX,QAAA,SAAS,GAAG,SAAS,GAAG,GAAZ,GAAkB,kBAAkB,CAAC,OAAD,CAAhD;AACD;;AACD,UAAM,GAAG,GAAG,sBAAO,sBAAP,IAAiC,kBAAkB,CAAC,SAAD,CAA/D;AACA,aAAO,KAAK,QAAL,CAAc,KAAd,CAAoB,KAAK,cAAL,CAAoB,GAApB,CAApB,EAA8C,IAA9C,CAAP;AACD;AAED;;;;;;;uCAImB,K,EAAO;AACxB;;;;AAIA,UACE,CAAC,KAAK,KAAL,CAAW,MAAX,GAAoB,gBAArB,IACA,KAAK,CAAC,eAAN,KAA0B,8BAAgB,iBAF5C,EAGE;AACA;AACD;;AAED,UAAI,KAAK,CAAC,SAAN,KAAoB,6BAAe,wBAAvC,EAAiE;AAC/D,aAAK,qBAAL,CACE,KAAK,CAAC,oBAAN,CAA2B,OAA3B,CADF,EAEE,KAAK,CAAC,oBAAN,CAA2B,gBAA3B,CAFF;AAIA;AACD;;AACD,UAAM,SAAS,GAAG,sDAA+B,KAAK,CAAC,SAArC,CAAlB;;AACA,UAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACD;;AACD,UAAI,oBAAoB,GAAG,KAAK,CAAC,oBAAjC,CAvBwB,CAwBxB;;AACA,UAAI,oBAAoB,YAAY,yBAApC,EAAiD;AAC/C,QAAA,oBAAoB,GAAG,SAAvB;AACD;;AACD,UAAI,sBAAU,KAAK,CAAC,gBAAhB,CAAJ,EAAuC;AACrC,YAAI,CAAC,qBAAS,oBAAT,CAAL,EAAqC;AACnC,UAAA,oBAAoB,GAAG,EAAvB;AACD;;AACD,QAAA,oBAAoB,CAAC,WAAD,CAApB,GAAoC,KAAK,CAAC,gBAA1C;AACD;;AACD,WAAK,UAAL,CACE,SADF,EAEE,IAAI,CAAC,SAAL;AAAe;AAA4B,MAAA,oBAA3C,CAFF;AAID;AAED;;;;;;;6CAIyB,Q,EAAU;AACjC,UAAI,YAAY;AAAG;AAAuD,QAA1E;;AACA,UAAI,CAAC,QAAQ,CAAC,QAAD,CAAb,EAAyB;AACvB,QAAA,YAAY;AAAG;AAAuD;AACpE,UAAA,MAAM,EAAE;AAAC,YAAA,EAAE,EAAE;AAAL,WAD4D;AAEpE,UAAA,IAAI,EAAE;AAAC,YAAA,KAAK,EAAE;AAAR;AAF8D,SAAtE;AAIA,eAAO,YAAP;AACD;;AACD,UAAM,MAAM,GAAG,QAAQ,CAAC,QAAD,CAAvB;AACA,UAAI,YAAY,GAAG,SAAnB;;AACA,UAAI,MAAM,CAAC,IAAD,CAAV,EAAkB;AAChB,YAAM,MAAM,GAAG,QAAQ,CAAC,QAAD,CAAvB;AACA,QAAA,YAAY,GAAG,EAAf;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,cAAM,MAAM,GAAG,MAAM,CAAC,CAAD,CAArB;AACA,cAAM,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,OAAD,CAA5B;AACA,cAAI,WAAW,SAAf;;AACA,cAAI,WAAJ,EAAiB;AACf,gBAAM,KAAK;AAAG;AAA6C;AACzD,cAAA,KAAK,EAAE,MAAM,CAAC,OAAD,CAD4C;AAEzD,cAAA,QAAQ,EAAE,MAAM,CAAC,YAAD,CAAN,IAAwB;AAFuB,aAA3D;AAIA,YAAA,WAAW;AAAG;AAA4C;AACxD,cAAA,OAAO,EAAE,MAAM,CAAC,SAAD,CADyC;AAExD,cAAA,KAAK,EAAE;AAFiD,aAA1D;AAID,WATD,MASO;AACL,YAAA,WAAW;AAAG;AAA4C;AACxD,cAAA,OAAO,EAAE,MAAM,CAAC,SAAD,CADyC;AAExD,cAAA,KAAK,EAAE,MAAM,CAAC,eAAD;AAF2C,aAA1D;AAID;;AACD,UAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;AACD;;AACD,YAAI,YAAJ,EAAkB;AAChB,UAAA,YAAY;AAAG;AAAuD;AACpE,YAAA,MAAM,EAAE;AAAC,cAAA,EAAE,EAAE;AAAL,aAD4D;AAEpE,YAAA,IAAI,EAAE;AAAC,cAAA,MAAM,EAAE;AAAT;AAF8D,WAAtE;AAID;;AACD,eAAO,YAAP;AACD;;AACD,MAAA,YAAY;AAAG;AAAuD;AACpE,QAAA,MAAM,EAAE;AAAC,UAAA,EAAE,EAAE;AAAL,SAD4D;AAEpE,QAAA,IAAI,EAAE;AAAC,UAAA,KAAK,EAAE,QAAQ,CAAC,OAAD;AAAhB;AAF8D,OAAtE;AAIA,aAAO,YAAP;AACD;AACD;;;;;;;;kCAKc,Q,EAAU,I,EAAM;AAAA;;AAC5B,UAAM,IAAI;AAAG;AAA2C;AACtD,QAAA,MAAM,EAAE,KAD8C;AAEtD,QAAA,WAAW,EAAE;AAFyC,OAAxD;AAIA,UAAM,GAAG,GACP,sBAAO,uBAAP,IACA,KAAK,cADL,GAEA,QAFA,GAGA,IAHA,GAIA,OAJA,GAKA,QANF;AAOA,aAAO,KAAK,QAAL,CACJ,KADI,CACE,KAAK,cAAL,CAAoB,GAApB,CADF,EAC4B,IAD5B,EAEJ,IAFI,CAEC,UAAA,MAAM;AAAA,eAAI,MAAM,CAAC,IAAP,EAAJ;AAAA,OAFP,EAGJ,IAHI,CAGC,UAAA,QAAQ,EAAI;AAChB,eAAO,KAAI,CAAC,wBAAL,CAA8B,QAA9B,CAAP;AACD,OALI,CAAP;AAMD;;;;;;;;;;;;;;;;;;AC5OH;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;IAGa,U;;;AACX;;;;;;;;;AASA,sBAAY,GAAZ,EAAiB,IAAjB,EAAuB,OAAvB,EAAgC;AAAA;;AAC9B;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;;AACA,SAAK,iBAAL,GAAyB,IAAI,kCAAJ,CAAqB,GAArB,EAA0B,IAA1B,EAAgC,OAAhC,CAAzB;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,CAAC,YAAL,EAArB;AACD;AAED;;;;;0CACsB,K,EAAO,Y,EAAc;AACzC,UAAI,CAAC,MAAM,CAAC,MAAP,CAAc,4BAAd,EAAiC,QAAjC,CAA0C,KAA1C,CAAL,EAAuD;AACrD,cAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,UACE,CAAC,6BAAkB,UAAlB,IAAgC,KAAhC,IACC,6BAAkB,eAAlB,IAAqC,KADvC,KAEA,CAAC,YAHH,EAIE;AACA,cAAM,IAAI,KAAJ,CACJ,iDACE,kCAFE,CAAN;AAID;;AACD,UAAI,YAAY,IAAI,CAAC,qBAAS,YAAT,CAArB,EAA6C;AAC3C,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,UAAI,cAAc,GAAG,IAArB;;AACA,UAAI,YAAJ,EAAkB;AAChB,QAAA,cAAc,GAAG,IAAI,CAAC,SAAL,CAAe,YAAf,CAAjB;AACD;;AACD,WAAK,iBAAL,CAAuB,qBAAvB,CAA6C,KAA7C,EAAoD,cAApD;AACD;AAED;;;;kCACc,I,EAAM;AAClB,UAAI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,cAA5B,EAA4C,QAA5C,CAAqD,IAArD,CAAb,EAAyE;AACvE,cAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACD,UAAI,CAAC,IAAL,EAAW;AACT,QAAA,IAAI,GAAG,aAAa,CAAC,cAAd,CAA6B,OAApC;AACD;;AACD,aAAO,KAAK,iBAAL,CAAuB,aAAvB,CACL,KAAK,IAAL,CAAU,QAAV,CAAmB,QADd,EAEL,IAFK,CAAP;AAID;AAED;;;;8BACU,S,EAAW;AACnB,UAAM,cAAc,GAAG,sDAA+B,SAAS,CAAC,IAAzC,CAAvB;AACA,UAAI,IAAI,GAAG,IAAX;;AACA,UAAI,CAAC,wBAAY,gBAAZ,EAAmB,SAAS,CAAC,IAA7B,CAAD,IAAuC,CAAC,cAA5C,EAA4D;AAC1D,cAAM,IAAI,KAAJ,CAAU,iCAAiC,SAAS,CAAC,IAA3C,GAAkD,GAA5D,CAAN;AACD;;AAED,UAAI,SAAS,CAAC,IAAd,EAAoB;AAClB,YAAI,CAAC,qBAAS,SAAS,CAAC,IAAnB,CAAL,EAA+B;AAC7B,gBAAM,IAAI,KAAJ,CAAU,kCAAkC,SAAS,CAAC,IAA5C,GAAmD,GAA7D,CAAN;AACD,SAFD,MAEO;AACL,UAAA,IAAI,GAAG,EAAP;AACA,UAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,SAAS,CAAC,IAA9B;AACD;AACF;;AAED,UAAI,sBAAU,SAAS,CAAC,MAApB,CAAJ,EAAiC;AAC/B,YAAI,CAAC,IAAL,EAAW;AACT,UAAA,IAAI,GAAG,EAAP;AACD;;AACD,QAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB;AAAC,uBAAa,SAAS,CAAC;AAAxB,SAApB;AACD,OALD,MAKO,IAAI,SAAS,CAAC,MAAV,IAAoB,IAAxB,EAA8B;AACnC,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,WAAK,aAAL,CAAmB,QAAnB,CAA4B;AAC1B,QAAA,SAAS,EAAE,cADe;AAE1B,QAAA,eAAe,EAAE,8BAAgB,iBAFP;AAG1B,QAAA,gBAAgB,EAAE,SAAS,CAAC,MAHF;AAI1B,QAAA,oBAAoB,EAAE;AAJI,OAA5B;AAMD;;;;;;;;;;;;;;;;;;;;;ACrGH;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AACA;;AACA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;AAGA,IAAM,YAAY,GAAG,KAArB;AACA,IAAM,mBAAmB,GAAG,eAA5B,C,CAA6C;;AAE7C;;;;;AAIA,IAAI,gBAAJ;AAEA;;;;;;;AAMO,SAAS,UAAT,GAAsB;AAC3B,mBAAO,gBAAP,EAAyB,qBAAzB;AACA,SAAO,gBAAP;AACD;AAED;;;;;;AAIO,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAClC;AACA,MAAI,GAAG,CAAC,YAAD,CAAH,IAAqB,CAAC,oBAAQ,GAAG,CAAC,YAAD,CAAX,CAA1B,EAAsD;AACpD;AACD,GAJiC,CAMlC;;;AACA,MAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,GAAZ,CAAhB,CAPkC,CASlC;;AACA,MAAM,aAAa,GAAG,mBAAmB,CAAC,OAAD,CAAzC;AAEA;;;;;AAIA,WAAS,sBAAT,CAAgC,QAAhC,EAA0C;AACxC,QAAI,CAAC,QAAL,EAAe;AACb;AACD;;AAED,IAAA,OAAO,CAAC,SAAR,GAAoB,IAApB,CAAyB,YAAM;AAC7B,MAAA,QAAQ,CAAC,aAAD,CAAR;AACD,KAFD;AAGD,GAxBiC,CA0BlC;;;AACA,MAAM,gBAAgB,GAAG,GAAG,MAAH,CACvB,GAAG,CAAC,YAAD,CADoB,EAEvB,GAAG,CAAC,mBAAD,CAFoB,CAAzB;AAIA,EAAA,gBAAgB,CAAC,OAAjB,CAAyB,sBAAzB,EA/BkC,CAiClC;AACA;;AACA,EAAA,GAAG,CAAC,YAAD,CAAH,GAAoB,GAAG,CAAC,mBAAD,CAAH,GAA2B;AAC7C,IAAA,IAAI,EAAE;AADuC,GAA/C,CAnCkC,CAuClC;;AACA,EAAA,gBAAgB,GAAG,OAAnB,CAxCkC,CA0ClC;;AACA,EAAA,OAAO,CAAC,8BAAR;AACD;AAED;;;;;IAGa,O;;;AACX;;;AAGA,mBAAY,GAAZ,EAAiB;AAAA;;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,IAAL,GAAY,qBAAW,GAAX,CAAZ;AAEA;;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,OAAR,EAAd;AAEA;;AACA,SAAK,uBAAL,GAA+B,IAA/B;AAEA;;AACA,SAAK,OAAL,GAAe,EAAf;AAEA;;AACA,SAAK,UAAL,GAAkB,KAAlB;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAA3B;AAEA;;AACA,SAAK,kBAAL,GAA0B,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC/C,MAAA,KAAI,CAAC,mBAAL,GAA2B,OAA3B;AACD,KAFyB,CAA1B;AAIA;;AACA,SAAK,mBAAL,GAA2B,IAA3B;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,oBAAJ,CAAc,KAAK,IAAnB,EAAyB,KAAK,kBAA9B,CAAlB;AACA,SAAK,UAAL,CAAgB,IAAhB,GAhCe,CAgCS;AACzB;AAED;;;;;;;gCAGY;AACV,aAAO,KAAK,MAAZ;AACD;AAED;;;;;;;;gCAKY,M,EAAQ;AAAA;;AAClB,UAAI,CAAC,KAAK,UAAN,IAAoB,MAAxB,EAAgC;AAC9B,aAAK,UAAL,GAAkB,IAAlB;AACA;;AACA,YAAI,iBAAJ;;AACA,YAAI,KAAK,uBAAT,EAAkC;AAChC,UAAA,iBAAiB,GAAG,OAAO,CAAC,OAAR,CAClB,IAAI,sBAAJ,CAAe,KAAK,uBAApB;AAA6C;AAAa,eAA1D,CADkB,CAApB;AAGD,SAJD,MAIO;AACL,eAAK,mBAAL,GAA2B,IAAI,sCAAJ,CAAuB,KAAK,IAA5B,CAA3B;AACA,UAAA,iBAAiB,GAAG,KAAK,mBAAL,CACjB,aADiB,GAEjB,IAFiB,CAEZ,UAAA,MAAM,EAAI;AACd,YAAA,MAAI,CAAC,mBAAL,GAA2B,IAA3B;AACA,mBAAO,MAAP;AACD,WALiB,CAApB;AAMD;;AACD,QAAA,iBAAiB,CAAC,IAAlB,CACE,UAAA,UAAU,EAAI;AACZ,UAAA,MAAI,CAAC,mBAAL,CACE,IAAI,iBAAJ,CACE,MAAI,CAAC,IADP,EAEE,UAFF;AAGE;AAAa;AAAC,YAAA,aAAa,EAAE,MAAI,CAAC;AAArB,WAHf,EAIE,MAAI,CAAC,OAJP,CADF;;AAQA,UAAA,MAAI,CAAC,mBAAL,GAA2B,IAA3B;AACD,SAXH,EAYE,UAAA,MAAM,EAAI;AACR,UAAA,MAAI,CAAC,mBAAL,CAAyB,OAAO,CAAC,MAAR,CAAe,MAAf,CAAzB;;AACA,UAAA,MAAI,CAAC,mBAAL,GAA2B,IAA3B;AACD,SAfH;AAiBD,OAlCD,MAkCO,IAAI,MAAM,IAAI,KAAK,mBAAnB,EAAwC;AAC7C,aAAK,mBAAL,CAAyB,KAAzB;AACD;;AACD,aAAO,KAAK,kBAAZ;AACD;AAED;;;;;;;;;;qDAOiC;AAC/B,UAAM,OAAO,GAAG,wCAAe,KAAK,IAAL,CAAU,QAAzB,CAAhB;AACA,yBAAS,OAAT,EAAkB,MAAlB;;AACA,UAAI,OAAO,IAAI,QAAf,EAAyB;AACvB;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAK,KAAL,EAAP;AACD;AAED;;;;yBACK,sB,EAAwB;AAC3B,uBAAO,CAAC,KAAK,UAAb,EAAyB,oBAAzB;AACA,WAAK,uBAAL,GAA+B,sBAA/B;AACD;AAED;;;;8BACU,M,EAAQ;AAChB;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,OAAnB,EAA4B,MAA5B;AACA,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,SAAR,CAAkB,MAAlB,CAAJ;AAAA,OAApC,CAAP;AACD;AAED;;;;4BACQ;AACN,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,KAAR,EAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;4BACQ;AACN,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,KAAR,EAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;4BACQ;AACN,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,KAAR,EAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;oCACgB,oB,EAAsB;AACpC,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,eAAR,CAAwB,oBAAxB,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;8CAC0B,Q,EAAU;AAClC,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,yBAAR,CAAkC,QAAlC,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;8BACU,O,EAAS;AACjB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,SAAR,CAAkB,OAAlB,CAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;+BACW,O,EAAS;AAClB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;qCACiB,O,EAAS;AACxB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,gBAAR,CAAyB,OAAzB,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;wCACoB,O,EAAS;AAC3B,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,mBAAR,CAA4B,OAA5B,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;mCACe,O,EAAS;AACtB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,cAAR,CAAuB,OAAvB,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;4CACwB,O,EAAS;AAC/B,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,uBAAR,CAAgC,OAAhC,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;8CAC0B,c,EAAgB;AACxC,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,yBAAR,CAAkC,cAAlC,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;gDAC4B,Q,EAAU;AACpC,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,2BAAR,CAAoC,QAApC,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;2CACuB,Q,EAAU;AAC/B,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,sBAAR,CAA+B,QAA/B,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;8BACU,G,EAAK;AACb,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;uCACmB,mB,EAAqB;AACtC,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,kBAAR,CAA2B,mBAA3B,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;8CAC0B,Q,EAAU;AAClC,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,yBAAR,CAAkC,QAAlC,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;yCACqB,Q,EAAU;AAC7B,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,oBAAR,CAA6B,QAA7B,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;+BACW,wB,EAA0B;AACnC,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,UAAR,CAAmB,wBAAnB,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;oDACgC,O,EAAS;AACvC,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,+BAAR,CAAwC,OAAxC,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;sCACkB,Q,EAAU;AAC1B,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,iBAAR,CAA0B,QAA1B,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;sCACkB,Q,EAAU;AAC1B,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,iBAAR,CAA0B,QAA1B,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;kCACyB;AAAA,UAAb,MAAa,uEAAJ,EAAI;AACvB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,WAAR,CAAoB,MAApB,CAAJ;AAAA,OAAnC,CAAP;AACD;AAED;;;;qCACiB,Q,EAAU;AACzB,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,gBAAR,CAAyB,QAAzB,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;sCACkB,Q,EAAU;AAC1B,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,UAAA,OAAO;AAAA,eACzC,OAAO,CAAC,iBAAR,CAA0B,QAA1B,CADyC;AAAA,OAApC,CAAP;AAGD;AAED;;;;qCACiB,+B,EAAiC;AAChD,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO,EAAI;AAC5C,eAAO,OAAO,CAAC,gBAAR,CAAyB,+BAAzB,CAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;sCACkB;AAChB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO,EAAI;AAC5C,eAAO,OAAO,CAAC,eAAR,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;4CACwB;AACtB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO,EAAI;AAC5C,eAAO,OAAO,CAAC,qBAAR,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;iCACa,iB,EAAmB,Q,EAAU;AACxC,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,iBAAvB,EAA0C,QAA1C,CAAP;AACD;AAED;;;;sCACkB,M,EAAQ,iB,EAAmB,Q,EAAU;AACrD,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eACxC,OAAO,CAAC,iBAAR,CAA0B,MAA1B,EAAkC,iBAAlC,EAAqD,QAArD,CADwC;AAAA,OAAnC,CAAP;AAGD;AAED;;;;iCACa,M,EAAQ,iB,EAAmB,Q,EAAU;AAChD,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,MAAvB,EAA+B,iBAA/B,EAAkD,QAAlD,CAAP;AACD;AAED;;;;0CACsB;AACpB,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO,EAAI;AAC5C,eAAO,OAAO,CAAC,mBAAR,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;gCACY;AACV,aAAO,KAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,SAAR,EAAJ;AAAA,OAAnC,CAAP;AACD;;;;;AAGH;;;;;;;;IAIa,iB;;;AACX;;;;;;;;;AASA,6BAAY,QAAZ,EAAsB,UAAtB,EAAkC,MAAlC,EAA0C,MAA1C,EAAkD;AAAA;;AAAA;;AAChD,IAAA,MAAM,GAAG,MAAM,IAAI,EAAnB;AACA,IAAA,MAAM,CAAC,aAAP,GAAuB,MAAM,CAAC,aAAP,IAAwB,OAAO,CAAC,OAAR,EAA/C;AAEA;;AACA,SAAK,aAAL,GAAqB,IAAI,sCAAJ,CAAuB,MAAM,CAAC,aAA9B,CAArB;AAEA;;AACA,SAAK,IAAL,GAAY,qBAAW,QAAX,CAAZ;AAEA;;AACA,SAAK,IAAL,GAAY,KAAK,IAAL,CAAU,MAAV,EAAZ;AAEA;;AACA,SAAK,OAAL,GAAe,mCAAf;;AAEA,QAAI,wBAAc,KAAK,IAAnB,CAAJ,EAA8B;AAC5B;AACA;AACA,WAAK,OAAL,CAAa,cAAb,GAA8B,8BAAe,QAA7C;AACD;;AACD,QAAI,MAAJ,EAAY;AACV,WAAK,UAAL,CAAgB,MAAhB;AACD;AAED;;;AACA,SAAK,WAAL,GAAmB,UAAnB;AAEA;;AACA,SAAK,eAAL,GAAuB,KAAK,IAAL,CAAU,SAAV,EAAvB;AAEA;;AACA,SAAK,QAAL,GAAgB,IAAI,gBAAJ,CAAY,KAAK,IAAjB,CAAhB;AAEA;;AACA,SAAK,QAAL,GAAgB,MAAM,CAAC,OAAP,IAAkB,IAAI,mBAAJ,CAAe,KAAK,IAApB,CAAlC;AAEA;;AACA,SAAK,QAAL,GAAgB,IAAI,gBAAJ,CAAY,KAAK,IAAjB,CAAhB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,4BAAJ,CAAkB,KAAK,IAAvB,CAAtB;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,oBAAJ,EAAlB,CA5CgD,CA8ChD;AACA;;AACA;;AACA,SAAK,cAAL,GAAsB,IAAI,yBAAJ,CAAkB,IAAlB,CAAtB;AAEA;;AACA,SAAK,iBAAL,GAAyB,IAAI,kCAAJ,CAAqB,IAArB,CAAzB;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,oBAAJ,CAAc,IAAd,CAAlB;AAEA;;AACA,SAAK,OAAL,GAAe,IAAI,cAAJ,CAAW,IAAX,CAAf;AAEA;;AACA,SAAK,oBAAL,GAA4B,IAAI,wCAAJ,CAC1B,KAAK,IADqB,EAE1B,KAAK,WAFqB,EAG1B,KAAK,QAHqB,EAI1B,IAJ0B,CAIrB;AAJqB,KAA5B;AAOA;;AACA,SAAK,iBAAL,GAAyB,IAAI,sBAAJ,CACvB,KAAK,IADkB,EAEvB,IAFuB,EAEjB;AACN,SAAK,QAHkB,CAAzB,CArEgD,CA2EhD;;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,oBAAJ,CAAc,KAAK,WAAnB,EAAgC,KAAK,QAArC,CAAlB;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAI,oBAAJ,CAAc,KAAK,IAAnB,EAAyB,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAzB,CAAlB;AAEA,QAAM,UAAU,GAAG,IAAI,sBAAJ,CAAe,KAAK,IAAL,CAAU,QAAzB,CAAnB;AAEA,IAAA,UAAU,CAAC,QAAX,CAAoB,qBAApB;;AACA,uCAAiB,gBAAjB,CAAkC,IAAlC;;AACA,6BAAgB,gBAAhB,CAAiC,IAAjC;;AACA,SAAK,UAAL,CAAgB,UAAhB,CAA2B,UAA3B;AAEA,+BAAiB,KAAK,IAAtB,EAA4B,WAA5B,EA1FgD,CA4FhD;;AACA,SAAK,cAAL,CAAoB,eAApB,CAAoC,UAAA,KAAK,EAAI;AAC3C,MAAA,MAAI,CAAC,iBAAL,CAAuB,SAAvB,CAAiC,CAAC,UAAD,CAAjC;;AACA,MAAA,MAAI,CAAC,aAAL,CAAmB,WAAnB,CACE,6BAAe,oBADjB,EAEE,KAFF;;AAIA,MAAA,MAAI,CAAC,QAAL,CAAc,KAAd,CAAoB,gBAApB,EAAsC,KAAtC;AACD,KAPD;AAQD;AAED;;;;;0BACM;AACJ,aAAO,KAAK,IAAZ;AACD;AAED;;;;0BACM;AACJ,aAAO,KAAK,IAAZ;AACD;AAED;;;;iCACa;AACX,aAAO,KAAK,WAAZ;AACD;AAED;;;;8BACU;AACR,aAAO,KAAK,QAAZ;AACD;AAED;;;;iCACa;AACX,aAAO,KAAK,cAAZ;AACD;AAED;;;;gCACY;AACV,aAAO,KAAK,UAAZ;AACD;AAED;;;;oCACgB;AACd,aAAO,KAAK,cAAZ;AACD;AAED;;;;0CACsB;AACpB,aAAO,KAAK,oBAAZ;AACD;AAED;;;;gCACY;AACV,aAAO,KAAK,UAAZ;AACD;AAED;;;;8BACU;AACR,aAAO,KAAK,QAAZ;AACD;AAED;;;;gCACY;AACV,aAAO,KAAK,iBAAZ;AACD;AAED;;;;2BACO,CAEN,C,CADC;;AAGF;;;;8BACU,M,EAAQ;AAChB;AACA,WAAK,UAAL,CAAgB,MAAhB;AACD;AAED;;;;;;;+BAIW,M,EAAQ;AAAA;;AACjB;AACA,UAAI,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,YAAM,CAAC,GAAG,MAAM,CAAC,CAAD,CAAhB;;AACA,gBAAQ,CAAR;AACE,eAAK,gBAAL;AACE,gBAAI,CAAC,IAAI,8BAAe,IAApB,IAA4B,CAAC,IAAI,8BAAe,QAApD,EAA8D;AAC5D,cAAA,KAAK,GAAG,6BAA6B,CAArC;AACD;;AACD;;AACF,eAAK,aAAL;AACE,YAAA,CAAC,CAAC,OAAF,CAAU,UAAA,UAAU;AAAA,qBAAI,gCAAc,MAAI,CAAC,IAAnB,EAAyB,UAAzB,EAAqC,IAArC,CAAJ;AAAA,aAApB;AACA;;AACF,eAAK,eAAL;AACE,gBAAI,CAAC,IAAI,6BAAc,OAAnB,IAA8B,CAAC,IAAI,6BAAc,WAArD,EAAkE;AAChE,cAAA,KAAK,GAAG,6BAA6B,CAArC;AACD;;AACD;;AACF,eAAK,oBAAL;AACE,gBAAI,CAAC,sBAAU,CAAV,CAAL,EAAmB;AACjB,cAAA,KAAK,GAAG,uCAAuC,CAA/C;AACD;;AACD;;AACF,eAAK,kBAAL;AACE,gBAAI,CAAC,sBAAU,CAAV,CAAL,EAAmB;AACjB,cAAA,KAAK,GAAG,qCAAqC,CAA7C;AACD;;AACD;;AACF;AACE,YAAA,KAAK,GAAG,8BAA8B,CAAtC;AAzBJ;AA2BD,OAhCgB,CAiCjB;;;AACA,uBAAO,CAAC,KAAR,EAAe,KAAK,IAAI,SAAxB,EAlCiB,CAmCjB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,OAAnB,EAA4B,MAA5B;AACD;AAED;;;;6BACS;AACP,aAAO,KAAK,OAAZ;AACD;AAED;;;;4BACQ;AACN,WAAK,oBAAL,CAA0B,KAA1B;AACA,WAAK,cAAL,CAAoB,WAApB;AACD;AAED;;;;4BACQ;AACN,WAAK,oBAAL,CAA0B,KAA1B;AACA,WAAK,cAAL,CAAoB,WAApB;AACD;AAED;;;;4BACQ;AACN;AACA,UAAI,CAAC,KAAK,WAAL,CAAiB,YAAjB,EAAD,IAAoC,CAAC,KAAK,WAAL,CAAiB,QAAjB,EAAzC,EAAsE;AACpE,eAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AACD,WAAK,eAAL;AACD;AAED;;;;oCACgB,oB,EAAsB;AAAA;;AACpC,aAAO,KAAK,oBAAL,CACJ,eADI,CACY,oBADZ,EAEJ,IAFI,CAEC,UAAA,YAAY,EAAI;AACpB;AACA,YAAI,YAAJ,EAAkB;AAChB,cAAI;AACF,gBAAM,IAAI,GAAG,YAAY,CAAC,YAAb,CAA0B,GAA1B,CACX,UAAA,WAAW;AAAA,qBAAI,WAAW,CAAC,MAAZ,MAAwB,2BAA5B;AAAA,aADA,CAAb;;AAGA,gBAAI,IAAI,CAAC,MAAL,GAAc,CAAlB,EAAqB;AACnB,cAAA,MAAI,CAAC,iBAAL,CAAuB,MAAvB,CAA8B,IAAI,CAAC,IAAL,CAAU,GAAV,CAA9B;AACD;AACF,WAPD,CAOE,OAAO,EAAP,EAAW,CAAE;AAChB;;AACD,eAAO,YAAY,CAAC,KAAb,EAAP;AACD,OAfI,CAAP;AAgBD;AAED;;;;8CAC0B,Q,EAAU;AAClC,WAAK,UAAL,CAAgB,yBAAhB,CAA0C,QAA1C;AACD;AAED;;;;8BACU,O,EAAS;AACjB,aAAO,KAAK,UAAL,CAAgB,SAAhB,CAA0B,OAAO,IAAI,OAAO,CAAC,SAA7C,CAAP;AACD;AAED;;;;+BACW,O,EAAS;AAAA;;AAClB,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,YAAM,YAAY,GAChB,sEACA,4CAFF;AAGA,yBAAO,OAAO,GAAG,CAAC,OAAO,CAAC,QAAD,CAAX,GAAwB,IAAtC,EAA4C,YAA5C;AACA,YAAM,IAAI,GAAG,IAAI,sBAAJ,CAAe,MAAf,EAAqB,OAArB,CAAb;AACA,eAAO,IAAI,CAAC,KAAL,EAAP;AACD,OAPM,CAAP;AAQD;AAED;;;;qCACiB,O,EAAS;AAAA;;AACxB,uBACE,iCAAe,KAAK,IAApB,EAA0B,iCAAgB,oBAA1C,CADF,EAEE,mBAFF;AAIA,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,YAAM,YAAY,GAChB,uEACA,sCAFF;AAGA,yBAAO,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,QAAD,CAAZ,GAAyB,KAAvC,EAA8C,YAA9C;AACA,YAAM,IAAI,GAAG,IAAI,sBAAJ,CAAe,MAAf,EAAqB,OAArB,CAAb;AACA,eAAO,IAAI,CAAC,KAAL,EAAP;AACD,OAPM,CAAP;AAQD;AAED;;;;wCACoB,O,EAAS;AAAA;;AAC3B,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,YAAM,IAAI,GAAG,IAAI,+BAAJ,CAAwB,MAAxB,EAA8B,OAA9B,CAAb;AACA,eAAO,IAAI,CAAC,KAAL,EAAP;AACD,OAHM,CAAP;AAID;AAED;;;;mCACe,O,EAAS;AAAA;;AACtB,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,YAAM,IAAI,GAAG,IAAI,0BAAJ,CAAmB,MAAnB,EAAyB,OAAzB,CAAb;AACA,eAAO,IAAI,CAAC,KAAL,EAAP;AACD,OAHM,CAAP;AAID;AAED;;;;4CACwB,O,EAAS;AAAA;;AAC/B,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,YAAM,IAAI,GAAG,IAAI,oCAAJ,CAAsB,OAAtB,EAA4B,OAA5B,CAAb;AACA,eAAO,IAAI,CAAC,KAAL,EAAP;AACD,OAHM,CAAP;AAID;AAED;;;;8CAC0B,c,EAAgB;AAAA;;AACxC,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,YAAM,IAAI,GAAG,IAAI,0DAAJ,CAAiC,OAAjC,EAAuC,cAAvC,CAAb;AACA,eAAO,IAAI,CAAC,KAAL,EAAP;AACD,OAHM,CAAP;AAID;AAED;;;;sCACkB,Q,EAAU;AAC1B,WAAK,UAAL,CAAgB,iBAAhB,CAAkC,QAAlC;AACD;AAED;;;;sCACkB,Q,EAAU;AAC1B,WAAK,UAAL,CAAgB,iBAAhB,CAAkC,QAAlC;AACD;AAED;;;;kCACyB;AAAA;;AAAA,UAAb,MAAa,uEAAJ,EAAI;AACvB,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,8BAAJ,CAAiB,OAAjB,EAAuB,KAAvB,CAA6B,MAA7B,CAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;qCACiB,+B,EAAiC;AAAA;;AAChD,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,8BAAJ,CAAiB,OAAjB,EAAuB,+BAAvB,EAAwD,KAAxD,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;sCACkB;AAAA;;AAChB,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,8BAAJ,CAAmB,OAAnB,EAAyB,KAAzB,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;4CACwB;AAAA;;AACtB,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,0CAAJ,CAAyB,OAAzB,EAA+B,KAA/B,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;gDAC4B,Q,EAAU;AACpC,WAAK,UAAL,CAAgB,qBAAhB,CAAsC,QAAtC;AACD;AAED;;;;2CACuB,Q,EAAU;AAC/B,WAAK,UAAL,CAAgB,sBAAhB,CAAuC,QAAvC;AACD;AAED;;;;yCACqB,Q,EAAU;AAC7B,WAAK,UAAL,CAAgB,oBAAhB,CAAqC,QAArC;AACD;AAED;;;;8BACU,G,EAAK;AAAA;;AACb,UAAM,YAAY,GAChB,kEACA,qEAFF;AAGA,uBAAO,OAAO,GAAP,KAAe,QAAtB,EAAgC,YAAhC;AACA,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,qBAAJ,CAAiB,OAAjB,EAAuB,GAAvB,EAA4B,KAA5B,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;uCACmB,mB,EAAqB;AAAA;;AACtC,uBACE,iCAAe,KAAK,IAApB,EAA0B,iCAAgB,oBAA1C,CADF,EAEE,mBAFF;AAIA,UAAM,YAAY,GAChB,qEACA,kEAFF;AAGA,uBACE,mBAAmB,GAAG,mBAAmB,CAAC,QAAD,CAAtB,GAAmC,KADxD,EAEE,YAFF;AAIA,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,qBAAJ,CAAiB,OAAjB,EAAuB,mBAAvB,EAA4C,KAA5C,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;8CAC0B,Q,EAAU;AAClC,WAAK,UAAL,CAAgB,yBAAhB,CAA0C,QAA1C;AACD;AAED;;;;+BACW,wB,EAA0B;AAAA;;AACnC,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,qBAAJ,CACL,OADK,EAEL,wBAFK,EAGL,2BAAY,eAHP,EAIL,KAJK,EAAP;AAKD,OANM,CAAP;AAOD;AAED;;;;oDACgC,O,EAAS;AAAA;;AACvC,aAAO,KAAK,eAAL,CAAqB,IAArB,CAA0B,YAAM;AACrC,eAAO,IAAI,wCAAJ,CAAwB,OAAxB,EAA8B,OAAO,IAAI,IAAzC,EAA+C,KAA/C,EAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;qCACiB,Q,EAAU;AACzB,WAAK,UAAL,CAAgB,gBAAhB,CAAiC,QAAjC;AACD;AAED;;;;sCACkB,Q,EAAU;AAC1B,WAAK,UAAL,CAAgB,iBAAhB,CAAkC,QAAlC;AACD;AAED;;;;iCACa,iB,EAAmB,Q,EAAU;AACxC;AACA,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,iBAAvB,EAA0C,QAA1C,CAAP;AACD;AAED;;;;iCACa,M,EAAQ,iB,EAAmB,Q,EAAU;AAChD;AACA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,MAAvB,EAA+B,iBAA/B,EAAkD,QAAlD;AACD;AAED;;;;sCACkB,M,EAAQ,iB,EAAmB,Q,EAAU;AACrD,uBACE,iCAAe,KAAK,IAApB,EAA0B,iCAAgB,QAA1C,CADF,EAEE,mBAFF;AAIA,WAAK,UAAL,CAAgB,iBAAhB,CACE,IADF,EAEE,MAFF,EAGE,iBAHF,EAIE,QAJF;AAMD;AAED;;;;0CACsB;AACpB,aAAO,OAAO,CAAC,OAAR,CAAgB,KAAK,iBAArB,CAAP;AACD;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,aAAZ;AACD;AAED;;;;gCACY;AACV,aAAO,OAAO,CAAC,OAAR,CAAgB,KAAK,OAArB,CAAP;AACD;;;;;AAGH;;;;;;;;AAIA,SAAS,mBAAT,CAA6B,OAA7B,EAAsC;AACpC;AAAO;AAA+B;AACpC,MAAA,IAAI,EAAE,OAAO,CAAC,IAAR,CAAa,IAAb,CAAkB,OAAlB,CAD8B;AAEpC,MAAA,SAAS,EAAE,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAuB,OAAvB,CAFyB;AAGpC,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAH6B;AAIpC,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAJ6B;AAKpC,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAL6B;AAMpC,MAAA,eAAe,EAAE,OAAO,CAAC,eAAR,CAAwB,IAAxB,CAA6B,OAA7B,CANmB;AAOpC,MAAA,WAAW,EAAE,OAAO,CAAC,WAAR,CAAoB,IAApB,CAAyB,OAAzB,CAPuB;AAQpC,MAAA,eAAe,EAAE,OAAO,CAAC,eAAR,CAAwB,IAAxB,CAA6B,OAA7B,CARmB;AASpC,MAAA,qBAAqB,EAAE,OAAO,CAAC,qBAAR,CAA8B,IAA9B,CAAmC,OAAnC,CATa;AAUpC,MAAA,SAAS,EAAE,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAuB,OAAvB,CAVyB;AAWpC,MAAA,UAAU,EAAE,OAAO,CAAC,UAAR,CAAmB,IAAnB,CAAwB,OAAxB,CAXwB;AAYpC,MAAA,gBAAgB,EAAE,OAAO,CAAC,gBAAR,CAAyB,IAAzB,CAA8B,OAA9B,CAZkB;AAapC,MAAA,cAAc,EAAE,OAAO,CAAC,cAAR,CAAuB,IAAvB,CAA4B,OAA5B,CAboB;AAcpC,MAAA,mBAAmB,EAAE,OAAO,CAAC,mBAAR,CAA4B,IAA5B,CAAiC,OAAjC,CAde;AAepC,MAAA,uBAAuB,EAAE,OAAO,CAAC,uBAAR,CAAgC,IAAhC,CAAqC,OAArC,CAfW;AAgBpC,MAAA,yBAAyB,EAAE,OAAO,CAAC,yBAAR,CAAkC,IAAlC,CAAuC,OAAvC,CAhBS;AAiBpC,MAAA,SAAS,EAAE,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAuB,OAAvB,CAjByB;AAkBpC,MAAA,kBAAkB,EAAE,OAAO,CAAC,kBAAR,CAA2B,IAA3B,CAAgC,OAAhC,CAlBgB;AAmBpC,MAAA,UAAU,EAAE,OAAO,CAAC,UAAR,CAAmB,IAAnB,CAAwB,OAAxB,CAnBwB;AAoBpC,MAAA,+BAA+B,EAAE,OAAO,CAAC,+BAAR,CAAwC,IAAxC,CAC/B,OAD+B,CApBG;AAuBpC,MAAA,yBAAyB,EAAE,OAAO,CAAC,yBAAR,CAAkC,IAAlC,CAAuC,OAAvC,CAvBS;AAwBpC,MAAA,iBAAiB,EAAE,OAAO,CAAC,iBAAR,CAA0B,IAA1B,CAA+B,OAA/B,CAxBiB;AAyBpC,MAAA,iBAAiB,EAAE,OAAO,CAAC,iBAAR,CAA0B,IAA1B,CAA+B,OAA/B,CAzBiB;AA0BpC,MAAA,2BAA2B,EAAE,OAAO,CAAC,2BAAR,CAAoC,IAApC,CAC3B,OAD2B,CA1BO;AA6BpC,MAAA,oBAAoB,EAAE,OAAO,CAAC,oBAAR,CAA6B,IAA7B,CAAkC,OAAlC,CA7Bc;AA8BpC,MAAA,sBAAsB,EAAE,OAAO,CAAC,sBAAR,CAA+B,IAA/B,CAAoC,OAApC,CA9BY;AA+BpC,MAAA,yBAAyB,EAAE,OAAO,CAAC,yBAAR,CAAkC,IAAlC,CAAuC,OAAvC,CA/BS;AAgCpC,MAAA,gBAAgB,EAAE,OAAO,CAAC,gBAAR,CAAyB,IAAzB,CAA8B,OAA9B,CAhCkB;AAiCpC,MAAA,iBAAiB,EAAE,OAAO,CAAC,iBAAR,CAA0B,IAA1B,CAA+B,OAA/B,CAjCiB;AAkCpC,MAAA,gBAAgB,EAAE,OAAO,CAAC,gBAAR,CAAyB,IAAzB,CAA8B,OAA9B,CAlCkB;AAmCpC,MAAA,YAAY,EAAE,OAAO,CAAC,YAAR,CAAqB,IAArB,CAA0B,OAA1B,CAnCsB;AAoCpC,MAAA,YAAY,EAAE,OAAO,CAAC,YAAR,CAAqB,IAArB,CAA0B,OAA1B,CApCsB;AAqCpC,MAAA,iBAAiB,EAAE,OAAO,CAAC,iBAAR,CAA0B,IAA1B,CAA+B,OAA/B,CArCiB;AAsCpC,MAAA,mBAAmB,EAAE,OAAO,CAAC,mBAAR,CAA4B,IAA5B,CAAiC,OAAjC,CAtCe;AAuCpC,MAAA,SAAS,EAAE,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAuB,OAAvB;AAvCyB;AAAtC;AAyCD;AAED;;;;;;AAIO,SAAS,+BAAT,GAA2C;AAChD,SAAO,4BAAP;AACD;AAED;;;;;;AAIO,SAAS,yBAAT,GAAqC;AAC1C,SAAO,gBAAP;AACD;AAED;;;AACO,SAAS,qBAAT,GAAiC;AACtC,SAAO,QAAP;AACD;;;;;;;;;;;;;;;;;ACngCD;;AAhBA;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOO,IAAM,UAAU,GAAG;AACxB,aAAW,CADa;AAExB,SAAO,OAFiB;AAER;AAChB,UAAQ,QAHgB,CAGN;;AAHM,CAAnB;AAMP;;;;;;AAGO,SAAS,QAAT,GAAoB;AACzB,SAAO,mBAAS,YAAT,EAAuB,MAA9B;AACD;AAED;;;;;;AAIO,SAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,SAAO,4BAA4B,GAAnC;AACD;AAED;;;;;;AAIO,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC1B,SAAO,gBAAgB,GAAvB;AACD;AAED;;;;;;;AAKO,SAAS,KAAT,CAAe,GAAf,EAAiC;AAAA,MAAb,MAAa,uEAAJ,EAAI;AACtC;AACA,EAAA,GAAG,GAAG,QAAQ,CAAC,eAAe,MAAf,GAAwB,cAAxB,GAAyC,GAA1C,CAAd,CAFsC,CAItC;;AACA,MAAM,KAAK,GAAG,2BAAiB,IAAI,CAAC,QAAL,CAAc,IAA/B,CAAd;AACA,MAAM,SAAS,GAAG,KAAK,CAAC,eAAD,CAAvB;;AACA,MAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,IAAA,GAAG,GAAG,wBAAc,GAAd,EAAmB,QAAnB,EAA6B,SAA7B,CAAN;AACD;;AAED,SAAO,GAAP;AACD;AAED;;;;;;AAIO,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AAC5B,SAAO,wBAAc,GAAd,EAAmB,GAAnB,EAAwB,UAAU,CAAC,iBAAD,CAAlC,CAAP;AACD;AAED;;;;;;AAIO,SAAS,MAAT,CAAgB,IAAhB,EAAsB;AAC3B,SAAO,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB;AACzB,eAAW;AADc,GAApB,CAAP;AAGD;AAED;;;;;;;AAKO,SAAS,UAAT,CAAoB,QAApB,EAA8B;AACnC,MAAI,MAAM,GAAG,UAAU,CAAC,QAAD,CAAvB;;AACA,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,IAAA,MAAM,GAAG,CAAT;AACD;;AACD,MAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAO,GAAP;AACD;;AACD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,SAAO,MAAM,CAAC,MAAM,IAAI,CAAV,GAAc,GAAd,GAAoB,IAAI,CAAC,KAAL,CAAW,GAAG,GAAG,MAAjB,CAArB,CAAb;AACD;;;;;;;;;;AC1FD;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,IAAM,gBAAgB,GAAG;AACvB,iBAAe,GADQ;AAEvB,eAAa;AAFU,CAAzB;AAKA;;;;AAGO,IAAM,KAAK,GAAG;AACnB,EAAA,KAAK,EAAE,OADY;AAEnB,EAAA,IAAI,EAAE;AAFa,CAAd;AAKP;;;;;;IAGa,0B;;;AACX;;;;;;AAMA,sCAAY,IAAZ,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C;AAAA;;AAC3C;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,IAAL,GAAY,KAAK,IAAL,CAAU,QAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,OAAL;AAAe;AAAmC,4BAChD,KAAK,IAD2C,EAEhD,QAFgD,EAGhD,gBAHgD,CAAlD;AAMA;;AACA,SAAK,OAAL,GAAe,MAAf;AAEA;;AACA,SAAK,QAAL,GAAgB,OAAhB;AAEA;;AACA,SAAK,SAAL,GAAiB,QAAjB;AAEA;;AACA,SAAK,IAAL,GAAY,qBAAM,iBAAN,CAAZ;AAEA,QAAM,iBAAiB,GAAG;AACxB,mBAAa,KAAK,KAAL,CAAW,UAAX,GAAwB,YAAxB,EADW;AAExB,uBAAiB,KAAK,KAAL,CAAW,UAAX,GAAwB,gBAAxB,EAFO;AAGxB,eAAU,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,KAAhC,IAA0C,OAH3B;AAIxB,cAAS,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,IAAhC,IAAyC;AAJzB,KAA1B;AAMA,QAAM,gBAAgB,GAAG,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,gBAAxD;;AACA,QAAI,gBAAJ,EAAsB;AACpB,MAAA,iBAAiB,CAAC,kBAAD,CAAjB,GAAwC,gBAAxC;AACD;AAED;;;AACA,SAAK,KAAL,GAAa,sBAAO,iBAAP,CAAb;AACD;AAED;;;;;;;yCAGqB,e,EAAiB;AACpC,UAAI,eAAe,IAAI,eAAe,CAAC,YAAhB,EAAvB,EAAuD;AACrD,YAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,gBAAM,IAAI,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,aAAK,SAAL;AACA;AACD;AACF;AAED;;;;;;;4BAIQ;AAAA;;AACN,qCAAmB,KAAK,OAAxB,EAAiC;AAC/B,mBAAW,CADoB;AAE/B,oBAAY,UAFmB;AAG/B,eAAO,CAHwB;AAI/B,kBAAU,CAJqB;AAK/B,gBAAQ,CALuB;AAM/B,kBAAU,MANqB;AAO/B,iBAAS,CAPsB;AAQ/B,iBAAS;AARsB,OAAjC;AAUA,WAAK,OAAL,CAAa,WAAb,CAAyB,KAAK,OAA9B;AACA,UAAM,IAAI,GAAG,KAAK,cAAL,CAAoB,mBAApB,CAAwC,KAAK,KAA7C,CAAb;AACA,WAAK,cAAL,CAAoB,UAApB,CAA+B,KAAK,OAApC,EAA6C,KAAK,IAAlD,EAAwD,IAAxD,EAA8D,IAA9D,CAAmE,UAAA,IAAI,EAAI;AACzE,QAAA,IAAI,CAAC,EAAL,CAAQ,6BAAR,EAAyB,KAAI,CAAC,oBAAL,CAA0B,IAA1B,CAA+B,KAA/B,CAAzB;AACD,OAFD;AAGA,aAAO,KAAK,OAAZ;AACD;;;;;;;;;;;;;;;;;;;;;;AC9HH;;;;;;;;;;;;;;;AAgBA,IAAM,MAAM,GAAG,sBAAf;;IAEa,O;;;AACX;;;AAGA,mBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,OAAL,GAAe,EAAf;AACD;AAED;;;;;;;;wBAII,G,EAAK;AAAA;;AACP,UAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAL,EAAwB;AACtB,aAAK,OAAL,CAAa,GAAb,IAAoB,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AACzC,cAAI,KAAI,CAAC,IAAL,CAAU,cAAd,EAA8B;AAC5B,gBAAI;AACF,cAAA,OAAO,CAAC,KAAI,CAAC,IAAL,CAAU,cAAV,CAAyB,OAAzB,CAAiC,UAAU,CAAC,GAAD,CAA3C,CAAD,CAAP;AACD,aAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,cAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,WAPD,MAOO;AACL,YAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,SAXmB,CAApB;AAYD;;AACD,aAAO,KAAK,OAAL,CAAa,GAAb,CAAP;AACD;AAED;;;;;;;;wBAKI,G,EAAK,K,EAAO;AAAA;;AACd,WAAK,OAAL,CAAa,GAAb,IAAoB,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAApB;AACA,aAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,YAAI,MAAI,CAAC,IAAL,CAAU,cAAd,EAA8B;AAC5B,cAAI;AACF,YAAA,MAAI,CAAC,IAAL,CAAU,cAAV,CAAyB,OAAzB,CAAiC,UAAU,CAAC,GAAD,CAA3C,EAAkD,KAAlD;AACD,WAFD,CAEE,OAAO,CAAP,EAAU,CACV;AACD;AACF;;AACD,QAAA,OAAO;AACR,OATM,CAAP;AAUD;AAED;;;;;;;2BAIO,G,EAAK;AAAA;;AACV,aAAO,KAAK,OAAL,CAAa,GAAb,CAAP;AACA,aAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,YAAI,MAAI,CAAC,IAAL,CAAU,cAAd,EAA8B;AAC5B,cAAI;AACF,YAAA,MAAI,CAAC,IAAL,CAAU,cAAV,CAAyB,UAAzB,CAAoC,UAAU,CAAC,GAAD,CAA9C;AACD,WAFD,CAEE,OAAO,CAAP,EAAU,CACV;AACD;AACF;;AACD,QAAA,OAAO;AACR,OATM,CAAP;AAUD;;;;;AAGH;;;;;;;;AAIA,SAAS,UAAT,CAAoB,GAApB,EAAyB;AACvB,SAAO,MAAM,GAAG,GAAT,GAAe,GAAtB;AACD;;;;;;;;;;AChFD;;AACA;;AACA;;;;;;;;AAEA,IAAM,cAAc,GAAG,6BAAvB;;IAEa,4B;;;AACX;;;;AAIA,wCAAY,IAAZ,EAAkB,cAAlB,EAAkC;AAAA;;AAChC;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,aAAL,EAAtB;AAEA;;AACA,SAAK,gBAAL,GAAwB,IAAxB;AAEA;;AACA,SAAK,eAAL,GAAuB,cAAc,IAAI,OAAO,CAAC,MAAR,CAAe,cAAf,CAAzC;AAEA;;AACA,SAAK,mBAAL,GAA2B,IAAI,sCAAJ,CACzB,KAAK,IADoB,EAEzB,KAAK,cAFoB,EAGzB,qBAAM,kCAAN,CAHyB,EAIzB,sBAAO;AACL,MAAA,aAAa,EAAE,IAAI,CAAC,UAAL,GAAkB,gBAAlB,EADV;AAEL,MAAA,SAAS,EAAE,IAAI,CAAC,UAAL,GAAkB,YAAlB;AAFN,KAAP,CAJyB;AAQzB;AAAqB,QARI;AASzB;AAA0B,QATD,CAA3B;AAWD;AAED;;;;;;;;4BAIQ;AAAA;;AACN,WAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,QAApB,CACtB,KAAK,mBADiB,CAAxB;AAIA,aAAO,KAAK,eAAL,CAAqB,IAArB,CACL,UAAA,OAAO,EAAI;AACT;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;;AACA,eAAO,OAAP;AACD,OALI,EAML,UAAA,MAAM,EAAI;AACR,QAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAI,CAAC,mBAAtC;;AACA,cAAM,MAAN;AACD,OATI,CAAP;AAWD;;;;;;;;;;;;;;;;AChEH;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;AACA,IAAM,gBAAgB,GAAG;AACvB,iBAAe,GADQ;AAEvB,eAAa;AAFU,CAAzB;AAKA;;;;IAGa,kB;;;;;AACX;;;;;;;;AAQA,8BACE,GADF,EAEE,aAFF,EAGE,GAHF,EAIE,IAJF,EAOE;AAAA;;AAAA,QAFA,cAEA,uEAFiB,KAEjB;AAAA,QADA,mBACA,uEADsB,KACtB;;AAAA;;AACA;AAEA;;AACA,UAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,UAAK,IAAL,GAAY,MAAK,IAAL,CAAU,QAAtB;AAEA;;AACA,UAAK,OAAL;AAAe;AAAmC,4BAChD,MAAK,IAD2C,EAEhD,QAFgD,EAGhD,gBAHgD,CAAlD;AAMA;;AACA,UAAK,cAAL,GAAsB,aAAtB;AAEA;;AACA,UAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,UAAK,KAAL,GAAa,IAAI,IAAI,EAArB;AAEA;;AACA,UAAK,eAAL,GAAuB,cAAvB;AAEA;;AACA,UAAK,oBAAL,GAA4B,mBAA5B;AAEA;;AACA,UAAK,KAAL,GAAa,IAAb;AAEA;;;;;AAIA,UAAK,aAAL,GAAqB,IAArB;AAEA;;;;;AAIA,UAAK,YAAL,GAAoB,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AACzC,YAAK,aAAL,GAAqB,OAArB;AACD,KAFmB,CAApB;AA5CA;AA+CD;AAED;;;;;iCACa;AACX,aAAO,KAAK,OAAZ;AACD;AAED;;;;yBACK,M,EAAQ;AAAA;;AACX,aAAO,KAAK,cAAL,CACJ,UADI,CACO,KAAK,OADZ,EACqB,KAAK,IAD1B,EACgC,KAAK,KADrC,EAEJ,IAFI,CAEC,UAAA,IAAI;AAAA,eAAI,MAAI,CAAC,qBAAL,CAA2B,IAA3B,EAAiC,MAAjC,CAAJ;AAAA,OAFL,CAAP;AAGD;AAED;;;;;;;qCAIiB;AACf,aAAO,KAAK,eAAZ;AACD;AAED;;;;;;;0CAIsB;AACpB,aAAO,KAAK,oBAAZ;AACD;AAED;;;;;;;;0CAKsB,I,EAAM,M,EAAQ;AAAA;;AAClC,WAAK,KAAL,GAAa,IAAb;AACA,WAAK,aAAL,CAAmB,IAAnB;AAEA,WAAK,KAAL,CAAW,eAAX,CAA2B,UAAA,MAAM,EAAI;AACnC,QAAA,MAAM,CAAC,UAAP,CAAkB,MAAlB,EAAwB,MAAxB;AACD,OAFD;AAIA,aAAO,KAAK,KAAL,CAAW,SAAX,EAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,aAAO,KAAK,YAAZ;AACD;AAED;;;;;;;;uBAKG,O,EAAS,Q,EAAU;AACpB,WAAK,eAAL,GAAuB,IAAvB,CAA4B,UAAA,IAAI,EAAI;AAClC,QAAA,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,QAAjB;AACD,OAFD;AAGD;AAED;;;;;;4BAGQ,O,EAAS;AACf,WAAK,eAAL,GAAuB,IAAvB,CAA4B,UAAA,IAAI,EAAI;AAClC,QAAA,IAAI,CAAC,OAAL,CAAa,OAAb;AACD,OAFD;AAGD;AAED;;;;;;;mCAIe;AACb,aAAO,KAAK,eAAL,GAAuB,IAAvB,CAA4B,UAAA,IAAI;AAAA,eAAI,IAAI,CAAC,YAAL,EAAJ;AAAA,OAAhC,CAAP;AACD;AAED;;;;;;;;;;0CAQE,a,EACA,qB,EACA,oB,EACA;AACA,aAAO,KAAK,eAAL,GAAuB,IAAvB,CAA4B,UAAA,IAAI,EAAI;AACzC,eAAO,yCACL,IADK,EAEL,aAFK,EAGL,qBAHK,EAIL,oBAJK,CAAP;AAMD,OAPM,CAAP;AAQD;AAED;;;;;;;mCAIe;AACb,aAAO,KAAK,YAAL,EAAP;AACD;AAED;;;;;;6BAGS,Q,EAAU;AACjB,WAAK,YAAL,YAA0B,UAAA,MAAM,EAAI;AAClC,YAAI,2BAAc,MAAd,CAAJ,EAA2B;AACzB,UAAA,QAAQ;AACT;;AACD,cAAM,MAAN;AACD,OALD;AAMD;AAED;;;;8BACU;AACR,UAAI,KAAK,KAAT,EAAgB;AACd,aAAK,KAAL,CAAW,OAAX;AACD;AACF;;;;EAhMqC,U;;;;;;;;;;;;ACfxC;;;;;;;;AAEA;;;;;IAKa,W;;;AACX;;;AAGA,uBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,iBAAL,GAAyB,wBACvB,KAAK,IADkB,EAEvB,uBAFuB,EAGvB,EAHuB,CAAzB;AAMA;;AACA,SAAK,QAAL,GAAgB,wBAAc,KAAK,IAAnB,EAAyB,aAAzB,EAAwC,EAAxC,CAAhB;AACA,SAAK,iBAAL,CAAuB,WAAvB,CAAmC,KAAK,QAAxC;AAEA,SAAK,iBAAL,CAAuB,KAAvB,CAA6B,WAA7B,CAAyC,SAAzC,EAAoD,MAApD,EAA4D,WAA5D,EAfe,CAiBf;;AACA,SAAK,sBAAL;AACD;AAED;;;;;;;;iCAIa;AACX,aAAO,KAAK,iBAAZ;AACD;AAED;;;;;;2BAGO;AACL,WAAK,iBAAL,CAAuB,KAAvB,CAA6B,cAA7B,CAA4C,SAA5C;AACD;AAED;;;;;;2BAGO;AACL,WAAK,iBAAL,CAAuB,KAAvB,CAA6B,WAA7B,CAAyC,SAAzC,EAAoD,MAApD,EAA4D,WAA5D;AACD;AAED;;;;;;;;6CAKyB;AACvB,UAAM,gBAAgB,GAAG,KAAK,QAA9B;AAEA,UAAM,4BAA4B,GAAG,wBACnC,KAAK,IAD8B,EAEnC,qBAFmC,EAGnC,EAHmC,CAArC;AAKA,MAAA,gBAAgB,CAAC,WAAjB,CAA6B,4BAA7B;AAEA,UAAM,8BAA8B,GAAG,wBACrC,KAAK,IADgC,EAErC,mBAFqC,EAGrC,EAHqC,CAAvC;AAKA,MAAA,4BAA4B,CAAC,WAA7B,CAAyC,8BAAzC;AACD;;;;;;;;;;;;;;;;AC3EH;;AACA;;AACA;;;;;;;;AAEA;AACO,IAAM,oBAAoB,GAAG;AAClC,YAAU;AADwB,CAA7B;AAIP;;;;;;;AAKO,IAAI,YAAJ;AAEP;;;AACA,IAAM,gBAAgB,GAAG;AACvB,iBAAe,GADQ;AAEvB,eAAa,IAFU;AAGvB,WAAS;AAHc,CAAzB;AAMA;;;;IAGa,K;;;AACX;;;;;AAKA,iBAAY,IAAZ,EAAkB,GAAlB,EAAuB,IAAvB,EAA6B;AAAA;;AAAA;;AAC3B;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,EAAZ;AAEA;;AACA,SAAK,cAAL,GAAsB,IAAI,CAAC,UAAL,EAAtB;AAEA;;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,KAAL,GAAa,IAAb;AAEA;;AACA,SAAK,UAAL,GAAkB,IAAlB;AAEA;;AACA,SAAK,OAAL;AAAe;AAAmC,4BAChD,KAAK,IAAL,CAAU,MAAV,GAAmB,QAD6B,EAEhD,QAFgD,EAGhD,gBAHgD,CAAlD;AAMA,mCAAmB,KAAK,OAAxB,EAAiC,oBAAjC;AAEA;;AACA,SAAK,MAAL,GAAc,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AACnC,MAAA,KAAI,CAAC,OAAL,CAAa,MAAb,GAAsB,OAAtB;AACD,KAFa,CAAd;AAGD;AAED;;;;;;;;iCAIa;AACX,aAAO,KAAK,OAAZ;AACD;AAED;;;;;;;2BAIO;AACL,WAAK,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,KAAK,OAArC,EADK,CAC0C;;AAC/C,aAAO,KAAK,WAAL,EAAP;AACD;AAED;;;;;;kCAGc;AAAA;;AACZ,UAAM,oBAAoB,GAAG,CAA7B;AACA,aAAO,KAAK,cAAL,CACJ,UADI,CACO,KAAK,OADZ,EACqB,KAAK,IAD1B,EACgC,KAAK,KADrC,EAEJ,IAFI,CAEC,UAAA,IAAI,EAAI;AACZ,eAAO,IAAI,CAAC,SAAL,EAAP;AACD,OAJI,EAKJ,IALI,CAKC,YAAM;AACV,gCAAY,MAAI,CAAC,OAAjB,EAA0B,CAAC,QAAD,CAA1B;;AAEA,QAAA,MAAI,CAAC,QAAL,CAAc,YAAM;AAClB,yCAAmB,MAAI,CAAC,OAAxB,EAAiC;AAC/B,yBAAa,kBADkB;AAE/B,uBAAW,CAFoB;AAG/B,0BAAc;AAHiB,WAAjC;AAKA,iBAAO,2BACL,MAAI,CAAC,OADA,EAEL;AACE,yBAAa,eADf;AAEE,uBAAW,CAFb;AAGE,0BAAc;AAHhB,WAFK,EAOL,GAPK,EAQL,UARK,CAAP;AAUD,SAhBD,EAHU,CAqBV;;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,MAAV,GAAmB,UAAnB,CAA8B,YAAM;AAClC,UAAA,MAAI,CAAC,KAAL;AACD,SAFD,EAEG,CAAC,oBAAoB,GAAG,CAAxB,IAA6B,IAFhC;AAGD,OA9BI,CAAP;AA+BD;AAED;;;;;;;;6BAKS,Q,EAAU;AAAA;;AACjB,UAAM,IAAI,GAAG,KAAK,UAAL,IAAmB,OAAO,CAAC,OAAR,EAAhC;AACA,aAAQ,KAAK,UAAL,GAAkB,IAAI,CAC3B,IADuB,CAEtB,YAAM;AACJ,eAAO,QAAQ,EAAf;AACD,OAJqB,EAKtB,YAAM,CACJ;AACD,OAPqB,EASvB,IATuB,CASlB,YAAM;AACV,QAAA,MAAI,CAAC,UAAL,GAAkB,IAAlB;AACD,OAXuB,CAA1B;AAYD;AAED;;;;;;;4BAIQ;AAAA;;AACN,aAAO,KAAK,QAAL,CAAc,YAAM;AACzB;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,MAAV,GAAmB,UAAnB,CAA8B,YAAM;AAClC,UAAA,MAAI,CAAC,IAAL,CAAU,OAAV,GAAoB,WAApB,CAAgC,MAAI,CAAC,OAArC;;AACA,iBAAO,OAAO,CAAC,OAAR,EAAP;AACD,SAHD,EAGG,GAHH;;AAKA,eAAO,2BACL,MAAI,CAAC,OADA,EAEL;AACE,uBAAa,kBADf;AAEE,qBAAW,CAFb;AAGE,wBAAc;AAHhB,SAFK,EAOL,GAPK,EAQL,UARK,CAAP;AAUD,OAjBM,CAAP;AAkBD;;;;;;;;;;;;;;;;AClLH;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOO,SAAS,oBAAT,CACL,IADK,EAEL,aAFK,EAGL,qBAHK,EAIL,oBAJK,EAKL;AACA,SAAO,IAAI,CAAC,YAAL,GAAoB,IAApB,CAAyB,UAAA,MAAM,EAAI;AACxC,QACE,MAAM,CAAC,MAAP,IAAiB,aAAjB,IACC,qBAAqB,IAAI,CAAC,MAAM,CAAC,cADlC,IAEC,oBAAoB,IAAI,CAAC,MAAM,CAAC,aAHnC,EAIE;AACA,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,WAAO,MAAM,CAAC,IAAd;AACD,GATM,CAAP;AAUD;;;;;;;;;;ACvBD;;AAhBA;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAQO,SAAS,UAAT,CAAoB,EAApB,EAAwB,KAAxB,EAA+B,cAA/B,EAA+C,KAA/C,EAAsD;AAC3D,MAAM,GAAG,GAAG,EAAE,CAAC,aAAH,CAAiB,WAA7B;AACA,MAAM,uBAAuB,GAAG,EAAE,CAAC,KAAH,CAAS,UAAT,IAAuB,EAAvD;AACA,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,IAAA,GAAG,CAAC,UAAJ,CAAe,YAAM;AACnB,MAAA,GAAG,CAAC,UAAJ,CAAe,OAAf,EAAwB,cAAxB;AACA,UAAM,EAAE,aAAM,cAAN,gBAA0B,KAA1B,CAAR;AACA,qCACE,EADF,EAEE,MAAM,CAAC,MAAP,CACE;AACE,0CAA2B,EAA3B,uBAA0C,EAA1C;AADF,OADF,EAIE,KAJF,CAFF;AASD,KAZD;AAaD,GAdM,EAcJ,IAdI,CAcC,YAAM;AACZ,mCAAmB,EAAnB,EAAuB;AACrB,oBAAc;AADO,KAAvB;AAGD,GAlBM,CAAP;AAmBD;;;;;;;;;;;;;;;AChCD;;AAhBA;;;;;;;;;;;;;;;;AAkBA;;;;AAIA,IAAM,mBAAmB,GAAG;AAAC,OAAK,GAAN;AAAW,OAAK,GAAhB;AAAqB,OAAK;AAA1B,CAA5B;AAEA;;;;;AAIA,IAAM,mBAAmB,GAAG;AAAC,OAAK,GAAN;AAAW,OAAK;AAAhB,CAA5B;AAEA;;;;;;;;AAOO,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AACjC,MAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,GAAG,CAAC,MAAnB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,QAAM,QAAQ,GAAG,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAjB;AACA,qBAAO,QAAQ,IAAI,GAAnB,EAAwB,qCAAxB;AACA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,QAAX;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;AAKO,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AACnC;AACA;AACA,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,KAAK,CAAC,MAAhB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,CAAC,YAAP,CAAoB,KAAK,CAAC,CAAD,CAAzB,CAAX;AACD;;AACD,SAAO,KAAK,CAAC,IAAN,CAAW,EAAX,CAAP;AACD;AAED;;;;;;;AAKO,SAAS,cAAT,CAAwB,KAAxB,EAA+B;AACpC,MAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACtC,WAAO,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,MAAzB,CAAgC,KAAhC,CAAP;AACD;;AACD,MAAM,WAAW,GAAG,aAAa,CAAC,IAAI,UAAJ,CAAe,KAAK,CAAC,MAAN,IAAgB,KAA/B,CAAD,CAAjC;AACA,SAAO,kBAAkB,CAAC,MAAM,CAAC,WAAD,CAAP,CAAzB;AACD;AAED;;;;;;;AAKO,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AACrC,MAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACtC,WAAO,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,MAAzB,CAAgC,MAAhC,CAAP;AACD;;AACD,SAAO,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAD,CAAnB,CAAT,CAApB;AACD;AAED;;;;;;;;AAMO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAJ,CAAY,QAAZ,EAAsB,UAAA,EAAE;AAAA,WAAI,mBAAmB,CAAC,EAAD,CAAvB;AAAA,GAAxB,CAAD,CAApB;AACA,SAAO,aAAa,CAAC,OAAD,CAApB;AACD;AAED;;;;;;;;AAMO,SAAS,wBAAT,CAAkC,KAAlC,EAAyC;AAC9C,MAAM,GAAG,GAAG,aAAa,CAAC,KAAD,CAAzB;AACA,SAAO,IAAI,CAAC,GAAD,CAAJ,CAAU,OAAV,CAAkB,OAAlB,EAA2B,UAAA,EAAE;AAAA,WAAI,mBAAmB,CAAC,EAAD,CAAvB;AAAA,GAA7B,CAAP;AACD;;;;;;;;;;;;;AC3GD;;;;;;;;;;;;;;;;AAgBA;;;;AAIA,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B;AAAO;AAAuB,IAAA,GAAG,CAAC,YAAD;AAAjC;AACD;AAED;;;;;;;AAKO,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AACnC,MAAM,UAAU,GAAG,aAAa,CAAC,GAAD,CAAhC;AACA,SAAO,UAAU,IAAI,SAAd,IAA2B,UAAU,IAAI,eAAhD;AACD;AAED;;;;;;;AAKA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,SAAO,aAAa,CAAC,GAAD,CAAb,IAAsB,UAA7B;AACD;AAED;;;;;;;AAKO,SAAS,eAAT,CAAyB,GAAzB,EAA8B,QAA9B,EAAwC;AAC7C,EAAA,eAAe,CAAC,GAAD,EAAM,eAAN,EAAuB,QAAvB,CAAf;AACD;AAED;;;;;;;;AAMA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD;AAC/C,MAAI,KAAK,GAAG,OAAO,CAAC,GAAD,CAAnB;;AACA,MAAI,KAAJ,EAAW;AACT,IAAA,QAAQ,CAAC,GAAD,CAAR;AACD,GAFD,MAEO;AACL,QAAM,aAAa,GAAG,SAAhB,aAAgB,GAAM;AAC1B,UAAI,OAAO,CAAC,GAAD,CAAX,EAAkB;AAChB,YAAI,CAAC,KAAL,EAAY;AACV,UAAA,KAAK,GAAG,IAAR;AACA,UAAA,QAAQ,CAAC,GAAD,CAAR;AACD;;AACD,QAAA,GAAG,CAAC,mBAAJ,CAAwB,kBAAxB,EAA4C,aAA5C;AACD;AACF,KARD;;AASA,IAAA,GAAG,CAAC,gBAAJ,CAAqB,kBAArB,EAAyC,aAAzC;AACD;AACF;AAED;;;;;;;AAKO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AACrC,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,IAAA,eAAe,CAAC,GAAD,EAAM,OAAN,CAAf;AACD,GAFM,CAAP;AAGD;AAED;;;;;;;AAKO,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AACxC,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,IAAA,eAAe,CAAC,GAAD,EAAM,kBAAN,EAA0B,OAA1B,CAAf;AACD,GAFM,CAAP;AAGD;;;;;;;;;;;;;;;;;;AChFD;;AACA;;AAjBA;;;;;;;;;;;;;;;;AAmBA;AACO,IAAM,cAAc,GAAG;AAC5B,SAAO,YADqB;AAE5B,UAAQ;AAFoB,CAAvB;AAKP;;;AACO,IAAM,SAAS,GAAG,UAAlB;AAEP;;;AACO,IAAM,wBAAwB,GAAG,4BAAjC;AAEP;;;;;;;;;AAMO,SAAS,sBAAT,CAAgC,OAAhC,EAAyC,UAAzC,EAAqD;AAC1D,OAAK,IAAM,IAAX,IAAmB,UAAnB,EAA+B;AAC7B,QAAI,IAAI,IAAI,OAAZ,EAAqB;AACnB,4BACE,OADF;AAEE;AACC,MAAA,UAAU,CAAC,IAAD,CAHb;AAKD,KAND,MAMO;AACL,MAAA,OAAO,CAAC,YAAR,CACE,IADF;AAEE;AAAsC,MAAA,UAAU,CAAC,IAAD,CAFlD;AAID;AACF;;AACD,SAAO,OAAP;AACD;AAED;;;;;;;;;;AAQO,SAAS,aAAT,CAAuB,GAAvB,EAA4B,OAA5B,EAAqC,UAArC,EAAiD,OAAjD,EAA0D;AAC/D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAJ,CAAkB,OAAlB,CAAhB;AACA,EAAA,sBAAsB,CAAC,OAAD,EAAU,UAAV,CAAtB;;AACA,MAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,QAAI,OAAO,OAAP,IAAkB,QAAtB,EAAgC;AAC9B,MAAA,OAAO,CAAC,WAAR,GAAsB,OAAtB;AACD,KAFD,MAEO,IAAI,OAAO,CAAC,QAAZ,EAAsB;AAC3B,MAAA,OAAO,CAAC,WAAR,CAAoB,OAApB;AACD,KAFM,MAEA,IAAI,YAAY,OAAhB,EAAyB;AAC9B,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,QAAA,OAAO,CAAC,WAAR,CAAoB,OAAO,CAAC,CAAD,CAA3B;AACD;AACF,KAJM,MAIA;AACL,uBAAO,KAAP,EAAc,yBAAd,EAAyC,OAAzC;AACD;AACF;;AACD,SAAO,OAAP;AACD;AAED;;;;;;AAIO,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AACrC,MAAI,OAAO,CAAC,aAAZ,EAA2B;AACzB,IAAA,OAAO,CAAC,aAAR,CAAsB,WAAtB,CAAkC,OAAlC;AACD;AACF;AAED;;;;;;AAIO,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AACrC,EAAA,MAAM,CAAC,WAAP,GAAqB,EAArB;AACD;AAED;;;;;;;;AAMO,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,SAA/B,EAA0C;AAC/C,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,MAAJ,GAAa,QAAd,EAAwB,OAAxB,EAAiC;AACjE,YAAQ;AADyD,GAAjC,CAAlC;AAGA,EAAA,YAAY,CAAC,WAAb,GAA2B,SAA3B;AACA,EAAA,GAAG,CAAC,OAAJ,GAAc,WAAd,CAA0B,YAA1B;AACA,SAAO,YAAP;AACD;AAED;;;;;;;;;;;AASO,SAAS,0BAAT,CAAoC,OAApC,EAA6C,QAA7C,EAAuD;AAC5D,MAAI,cAAc,GAAG,OAArB;;AACA,KAAG;AACD,QAAI,cAAc,CAAC,WAAnB,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF,GAJD,QAKE,CAAC,cAAc,GAAG,cAAc,CAAC,UAAjC,KACA,cAAc,IAAI,QANpB;;AAQA,SAAO,KAAP;AACD;AAED;;;;;;;;AAMO,SAAS,WAAT,CAAqB,IAArB,EAA2B;AAChC;AACA;AACA;AACA,MAAI,iBAAiB,IAArB,EAA2B;AACzB,WAAO,IAAI,CAAC,aAAD,CAAX;AACD,GAN+B,CAOhC;;;AACA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAL,IAAsB,IAAI,CAAC,aAAL,CAAmB,eAAtD;AACA,SAAQ,IAAI,IAAI,IAAI,CAAC,QAAL,CAAc,IAAd,CAAT,IAAiC,KAAxC;AACD;AAED;;;;;;AAIO,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AACjC,MAAM,GAAG,GAAG,GAAG,CAAC,SAAhB;AACA,SAAO,QAAQ,IAAR,CAAa,GAAG,IAAI,GAAG,CAAC,SAAxB,CAAP;AACD;;;;;;;;;;;;AClJD;;;;;;;;AAEA;;;;;;AAMO,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AACnC,SAAO,iCAAa,KAAb,CAAP;AACD;AAED;;;;;;;;;AAOO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,OAAhC,EAAyC;AAC9C,SAAO,qCAAiB,GAAjB,EAAsB,OAAtB,CAAP;AACD;AAED;;;;;IAGa,U;;;;;;;;;;AACX;;;+BAGkB,K,EAAO;AACvB,MAAA,UAAU,CAAC,YAAM;AACf,cAAM,KAAN;AACD,OAFS,CAAV;AAGD;;;;;;;;;;;;;;;;AClDH;;;;;;;;;;;;;;;;AAgBA;;;;;AAKO,SAAS,GAAT,CAAa,GAAb,EAAkB,aAAlB,EAAiC;AACtC,MAAM,IAAI,GAAG,CAAC,aAAD,GACT,EADS,GAET,OAAO,aAAP,IAAwB,QAAxB,GACA,aADA,GAEA,aAAa,CAAC,IAAd,IACC,aAAa,CAAC,aAAd,IACC,aAAa,CAAC,aAAd,CAA4B,eAA5B,CAA4C,IANlD;AAOA,MAAI,MAAM,GAAG,CAAE,IAAI,IAAI,IAAI,CAAC,WAAL,EAAT,IAAgC,IAAjC,EAAuC,OAAvC,CAA+C,IAA/C,EAAqD,GAArD,CAAb;;AACA,SAAO,MAAP,EAAe;AACb,QAAI,MAAM,IAAI,GAAd,EAAmB;AACjB,aAAO,GAAG,CAAC,MAAD,CAAV;AACD;;AACD,QAAM,IAAI,GAAG,MAAM,CAAC,WAAP,CAAmB,GAAnB,CAAb;AACA,IAAA,MAAM,GAAG,IAAI,IAAI,CAAC,CAAT,GAAa,MAAM,CAAC,SAAP,CAAiB,CAAjB,EAAoB,IAApB,CAAb,GAAyC,EAAlD;AACD,GAfqC,CAgBtC;;;AACA,SAAO,GAAG,CAAC,IAAD,CAAV;AACD;;;;;;;;;;;;;;AClBD;;;;AAEA;;;;;AAKO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAC1C,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAAb;;AACA,OAAK,IAAM,CAAX,IAAgB,GAAhB,EAAqB;AACnB,QAAI,CAAC,cAAc,CAAC,GAAD,EAAM,CAAN,CAAnB,EAA6B;AAC3B;AACD;;AACD,QAAM,CAAC,GAAG,GAAG,CAAC,CAAD,CAAb;AACA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,qBAAS,CAAT,IAAc,sBAAsB,CAAC,CAAD,CAApC,GAA0C,CAApD;AACD;;AACD;AAAO;AAA4B,IAAA;AAAnC;AACD;AAED;;;;;;;;;;;;AAUO,SAAS,eAAT,CAAyB,GAAzB,EAA8B,IAA9B,EAAoC;AACzC;AACA,MAAI,IAAI,IAAI,GAAZ,EAAiB;AACf,WAAO,GAAP;AACD,GAJwC,CAKzC;;;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;AACA,MAAI,KAAK,GAAG,GAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,QAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;;AACA,QAAI,CAAC,IAAL,EAAW;AACT,MAAA,KAAK,GAAG,SAAR;AACA;AACD;;AACD,QACE,CAAC,qBAAS,KAAT,CAAD,IACA,KAAK,CAAC,IAAD,CAAL,KAAgB,SADhB,IAEA,CAAC,cAAc,CAAC,KAAD,EAAQ,IAAR,CAHjB,EAIE;AACA,MAAA,KAAK,GAAG,SAAR;AACA;AACD;;AACD,IAAA,KAAK,GAAG,KAAK,CAAC,IAAD,CAAb;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;;;AAOO,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAC9B;AAAO;AAA4B,IAAA,IAAI,CAAC,KAAL;AAAW;AAAuB,IAAA,IAAlC;AAAnC;AACD;AAED;;;;;;;;;;;AASO,SAAS,YAAT,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AAC3C,MAAI;AACF,WAAO,SAAS,CAAC,IAAD,CAAhB;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,CAAD,CAAR;AACD;;AACD,WAAO,SAAP;AACD;AACF;AAED;;;;;;;AAKA,SAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC;AAChC,MAAI,GAAG,IAAI,IAAP,IAAe,QAAO,GAAP,KAAc,QAAjC,EAA2C;AACzC,WAAO,KAAP;AACD;;AACD,SAAO,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC;AACL;AAAwB,EAAA,GADnB,EAEL,GAFK,CAAP;AAID;AAED;;;;;;;;;AAOO,SAAS,yBAAT,CAAmC,UAAnC,EAA+C,YAA/C,EAA6D;AAClE,MAAM,IAAI,GAAG,YAAY,CAAC,UAAD,CAAzB;AACA,SAAQ,IAAI,IAAI,IAAI,CAAC,YAAD,CAAb,IAAgC,IAAvC;AACD;;;;;;;;;;ACrHD;;AACA;;;;;;;;AAEA;;;;;;;;AAQA,IAAI,mBAAJ;AAEA;;;;IAGa,S;;;AACX,uBAAc;AAAA;AAAE;AAEhB;;;;;;;;;2BAKO,Y,EAAc;AACnB,aAAO,KAAK,eAAL,CAAqB,YAArB,EAAmC,OAA1C;AACD;AAED;;;;;;;;oCAKgB,Y,EAAc;AAC5B;;AACA;;;AAGA,eAAS,YAAT,GAAwB;AACtB,cAAM,IAAI,KAAJ,4BAA6B,YAA7B,QAAN;AACD,OAP2B,CAS5B;AACA;AACA;;;AACA,UAAM,KAAK,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,CAAd;;AACA,UAAI,KAAK,CAAC,MAAN,IAAgB,CAApB,EAAuB;AACrB,QAAA,YAAY;AACb;;AACD,UAAM,eAAe,GAAG,mCAAuB,KAAK,CAAC,CAAD,CAA5B,CAAxB;AACA,UAAM,gBAAgB,GAAG,mCAAuB,KAAK,CAAC,CAAD,CAA5B,CAAzB;AACA,aAAO;AACL,QAAA,MAAM,EAAE,wBAAa,2BAAe,eAAf,CAAb,EAA8C,YAA9C,CADH;AAEL,QAAA,OAAO,EAAE,wBAAa,2BAAe,gBAAf,CAAb,EAA+C,YAA/C,CAFJ;AAGL,QAAA,UAAU,YAAK,KAAK,CAAC,CAAD,CAAV,cAAiB,KAAK,CAAC,CAAD,CAAtB,CAHL;AAIL,QAAA,GAAG,EAAE,KAAK,CAAC,CAAD;AAJL,OAAP;AAMD;;;;;;;;;;;ACzEH;;;;;;;;;;;;;;;;AAgBA;;;;;AAKA;AAEA,SAAS,QAAT,CAAkB,QAAlB,EAA4B;AAC1B,MAAI,cAAc,IAAd,CAAmB,IAAI,CAAC,QAAL,CAAc,IAAjC,CAAJ,EAA4C;AAC1C,QAAM,OAAO,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAhB;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,iBAAhB;AACA,IAAA,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,OAAf;AACD;AACF;AAED;;;;;AAGA,SAAS,GAAT,CAAa,QAAb,EAAuB;AACrB,EAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,CAAkB,OAAlB,EAA2B,SAA3B;AACD;AAED;;;;;AAGA,SAAS,IAAT,CAAc,QAAd,EAAwB;AACtB,EAAA,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,OAAnB,EAA4B,SAA5B;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,MAAT,CAAgB,eAAhB,EAAiC,OAAjC,EAA0C,QAA1C,EAAoD;AAClD,MAAI,YAAJ;;AACA,MAAI,CAAC,eAAL,EAAsB;AACpB,IAAA,OAAO,GAAG,OAAO,IAAI,kBAArB;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,KAAR,CAAc,IAAd,CAArB;AACA,QAAM,KAAK,GAAG,YAAY,CAAC,KAAb,EAAd;AACA,QAAI,SAAS,GAAG,KAAhB;AACA,QAAM,YAAY,GAAG,EAArB;AACA,IAAA,cAAc,CAAC,YAAD,EAAe,KAAf,CAAd;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,UAAM,GAAG,GAAG,SAAS,CAAC,CAAD,CAArB;;AACA,UAAI,GAAG,IAAI,GAAG,CAAC,OAAf,EAAwB;AACtB,QAAA,YAAY,GAAG,GAAf;AACD;;AACD,UAAM,YAAY,GAAG,YAAY,CAAC,KAAb,EAArB;AACA,MAAA,YAAY,CAAC,IAAb,CAAkB,GAAlB;AACA,MAAA,cAAc,CAAC,YAAD,EAAe,YAAY,CAAC,IAAb,EAAf,CAAd;AACA,MAAA,SAAS,IAAI,QAAQ,CAAC,GAAD,CAAR,GAAgB,YAA7B;AACD;;AACD,QAAM,CAAC,GAAG,IAAI,KAAJ,CAAU,SAAV,CAAV;AACA,IAAA,CAAC,CAAC,UAAF,GAAe,IAAf;AACA,IAAA,CAAC,CAAC,iBAAF,GAAsB,YAAtB;AACA,IAAA,CAAC,CAAC,YAAF,GAAiB,YAAjB;AACA,UAAM,CAAN;AACD;;AACD,SAAO,eAAP;AACD;AAED;;;;;;AAIA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,GAA/B,EAAoC;AAClC,MAAI,GAAG,IAAI,EAAX,EAAe;AACb,IAAA,KAAK,CAAC,IAAN,CAAW,GAAX;AACD;AACF;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB;AACA,MAAI,GAAG,IAAI,GAAG,CAAC,QAAJ,IAAgB,CAA3B,EAA8B;AAC5B,WAAO,GAAG,CAAC,OAAJ,CAAY,WAAZ,MAA6B,GAAG,CAAC,EAAJ,GAAS,MAAM,GAAG,CAAC,EAAnB,GAAwB,EAArD,CAAP;AACD;;AACD;AAAO;AAAuB,IAAA;AAA9B;AACD;;AAED,MAAM,CAAC,OAAP,GAAiB;AACf,EAAA,MAAM,EAAN,MADe;AAEf,EAAA,QAAQ,EAAR,QAFe;AAGf,EAAA,IAAI,EAAJ,IAHe;AAIf,EAAA,GAAG,EAAH;AAJe,CAAjB;;;;;;;;;;;AC9GA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQO,SAAS,GAAT,CAAa,OAAb,EAAsB;AAC3B,MAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAAZ;;AACA,MAAI,OAAJ,EAAa;AACX,IAAA,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,OAAnB;AACD;;AACD,SAAO,GAAP;AACD;AAED;;;;;;;;;;AAQO,SAAS,WAAT,CAAqB,KAArB,EAA4B,SAA5B,EAAuC;AAC5C,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAM,GAAG,GAAG,KAAK,CAAC,MAAN,IAAgB,CAA5B;;AACA,MAAI,GAAG,GAAG,CAAV,EAAa;AACX,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,UAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;;AACA,UAAI,SAAS,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAb,EAAgC;AAC9B,eAAO,KAAP;AACD;AACF;AACF;;AACD,SAAO,IAAP;AACD;;;;;;;;;;ACtCD;;;;;;;;IAEa,U;;;AACX;;;AAGA,sBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AACD;AAED;;;;;;;+BAGW,G,EAAK;AACd,WAAK,IAAL,CAAU,GAAV,EAAe,YAAf;AACD;AAED;;;;;;gCAGY,G,EAAK;AACf,WAAK,IAAL,CAAU,GAAV,EAAe,cAAf;AACD;AAED;;;;;;6BAGS,G,EAAK;AACZ,WAAK,IAAL,CAAU,GAAV,EAAe,qBAAf;AACD;AAED;;;;;;;4BAIQ,G,EAAK,E,EAAI;AACf,WAAK,IAAL,CAAU,GAAV,EAAe,oBAAf,EAAqC,EAArC;AACD;AAED;;;;;;;;;yBAMK,G,EAAK,G,EAAK,E,EAAI;AACjB;AACA,UAAM,MAAM,GAAG,wBAAc,KAAK,IAAnB,EAAyB,MAAzB,EAAiC;AAC9C,eAAO,GADuC;AAE9C,gBAAQ;AAFsC,OAAjC,CAAf;;AAIA,UAAI,EAAJ,EAAQ;AACN,QAAA,MAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,EAA1B;AACD;;AACD,WAAK,IAAL,CAAU,IAAV,CAAe,WAAf,CAA2B,MAA3B;AACD;;;;;;;;;;;;;;;;ACxEH;;;;;;;;;;;;;;;;AAgBA;;;;;;AAMO,SAAS,aAAT,CAAuB,OAAvB,EAAgC,MAAhC,EAAwC;AAC7C;AACA,MAAM,GAAG,GACP,MAAM,GAAG,GAAT,GACI,IAAI,UAAJ,CAAe,OAAf,CADJ,GAEI,MAAM,GAAG,KAAT,GACA,IAAI,WAAJ,CAAgB,OAAhB,CADA,GAEA,IAAI,WAAJ,CAAgB,OAAhB,CALN;;AAOA,MAAI,MAAM,IAAI,MAAM,CAAC,eAArB,EAAsC;AACpC,IAAA,MAAM,CAAC,eAAP,CAAuB,GAAvB;;AACA,SAAK,IAAI,CAAC,GAAG,GAAG,CAAC,MAAJ,GAAa,CAA1B,EAA6B,CAAC,GAAG,CAAC,CAAlC,EAAqC,CAAC,EAAtC,EAA0C;AACxC,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,GAAS,MAAlB;AACD;AACF,GALD,MAKO;AACL;AACA,SAAK,IAAI,EAAC,GAAG,GAAG,CAAC,MAAJ,GAAa,CAA1B,EAA6B,EAAC,GAAG,CAAC,CAAlC,EAAqC,EAAC,EAAtC,EAA0C;AACxC,MAAA,GAAG,CAAC,EAAD,CAAH,GAAS,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,MAA3B,CAAT;AACD;AACF;;AAED,SAAO,GAAP;AACD;;;;;;;;;;;;;;;;AC5BD;;AAhBA;;;;;;;;;;;;;;;AAkBA,IAAM,KAAK,GAAG,kBAAd;AAEA;;;;;;AAKA,SAAS,WAAT,CAAqB,MAArB,EAA6B,SAA7B,EAAwC;AACtC,SAAO,SAAS,CAAC,WAAV,EAAP;AACD;AAED;;;;;;;AAKO,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AACpC,SAAO,IAAI,CAAC,OAAL,CAAa,WAAb,EAA0B,WAA1B,CAAP;AACD;AAED;;;;;;AAIO,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AACpC,SAAO,IAAI,CAAC,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAP;AACD;AAED;;;;;;;;AAMO,SAAS,QAAT,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC;AACvC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,MAArC;AACA,SAAO,KAAK,IAAI,CAAT,IAAc,MAAM,CAAC,OAAP,CAAe,MAAf,EAAuB,KAAvB,KAAiC,KAAtD;AACD;AAED;;;;;;;;AAMO,SAAS,UAAT,CAAoB,MAApB,EAA4B,MAA5B,EAAoC;AACzC,MAAI,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,SAAO,MAAM,CAAC,WAAP,CAAmB,MAAnB,EAA2B,CAA3B,KAAiC,CAAxC;AACD;AAED;;;;;;;;;;;;;;;;AAcO,SAAS,cAAT,CAAwB,QAAxB,EAAkC,MAAlC,EAA6D;AAAA,MAAnB,aAAmB,uEAAH,CAAG;;AAAA,6BACzD,CADyD;AAEhE,QAAI,OAAO,GAAG,CAAd;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,cAAjB,EAAiC,UAAC,EAAD,EAAK,CAAL,EAAW;AACrD,MAAA,OAAO;AACP,aAAO,MAAM,CAAC,CAAD,CAAb;AACD,KAHU,CAAX;;AAIA,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;AAT+D;;AAClE,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAApB,EAAmC,CAAC,EAApC,EAAwC;AAAA,qBAA/B,CAA+B;;AAAA,0BAOpC;AAEH;;AACD,SAAO,QAAP;AACD;AAED;;;;;;;;;AAOO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAChC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAnB;AACA,MAAI,IAAI,GAAG,IAAX;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC/B,IAAA,IAAI,GAAI,IAAI,GAAG,EAAR,GAAc,GAAG,CAAC,UAAJ,CAAe,CAAf,CAArB;AACD,GAL+B,CAMhC;;;AACA,SAAO,MAAM,CAAC,IAAI,KAAK,CAAV,CAAb;AACD;AAED;;;;;;;AAKA,SAAS,SAAT,CAAmB,CAAnB,EAAsB;AACpB,SAAO,KAAK,CAAE,CAAC,GAAG,GAAL,GAAY,GAAb,CAAZ;AACD;AAED;;;;;;;AAKA,SAAS,wBAAT,GAAoC;AAClC,MAAM,OAAO,GAAG,IAAI,CAAC,GAAL,GAAW,QAAX,CAAoB,EAApB,CAAhB;AACA,SAAO,OAAO,CAAC,SAAR,CAAkB,OAAO,CAAC,MAAR,GAAiB,CAAnC,EAAsC,WAAtC,EAAP;AACD;AAED;;;;;;;AAKO,SAAS,OAAT,GAAmB;AACxB,MAAI,IAAI,GAAG,wBAAwB,KAAK,GAAxC;AACA,MAAI,MAAM,GAAG,CAAb;AACA,MAAM,KAAK,GAAG,2BAAc,EAAd,EAAkB,EAAlB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B,YAAQ,CAAR;AACE,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACE,QAAA,IAAI,IAAI,GAAR;AACA;;AACF,WAAK,EAAL;AACE,QAAA,IAAI,IAAI,GAAR;AACA;;AACF,WAAK,EAAL;AACE,QAAA,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,EAAP,CAAN,CAAjB;AACA;;AACF;AACE,QAAA,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAP,CAAN,CAAb;AACA;AAdJ;AAgBD;;AACD,SAAO,IAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;ACjJD;;AACA;;AAlBA;;;;;;;;;;;;;;;AAgBA;;AAIA;AACA,IAAI,iBAAJ;AAEA;;AACA,IAAM,cAAc,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,KAArB,EAA4B,KAA5B,EAAmC,IAAnC,EAAyC,GAAzC,EAA8C,GAA9C,CAAvB;AAEA;;;;;;;;AAOO,IAAM,aAAa,GAAG;AAC3B,mBAAiB,QADU;AAE3B,eAAa,MAFc;AAG3B,iBAAe,QAHY;AAI3B,gBAAc,MAJa;AAK3B,wBAAsB,MALK;AAM3B,yBAAuB,QANI;AAO3B,qBAAmB,YAPQ;AAQ3B,sBAAoB,MARO;AAS3B,oBAAkB,GATS;AAU3B,gBAAc,MAVa;AAW3B,YAAU,MAXiB;AAY3B,qBAAmB,UAZQ;AAa3B,YAAU,GAbiB;AAc3B,gBAAc,YAda;AAe3B,iBAAe,MAfY;AAgB3B,kBAAgB,MAhBW;AAiB3B,kBAAgB,MAjBW;AAkB3B,wBAAsB,MAlBK;AAmB3B,kBAAgB,KAnBW;AAoB3B,iBAAe,iBApBY;AAqB3B,WAAS,MArBkB;AAsB3B,WAAS,iBAtBkB;AAuB3B,qBAAmB,MAvBQ;AAwB3B,kBAAgB,MAxBW;AAyB3B,iBAAe,SAzBY;AA0B3B,gBAAc,QA1Ba;AA2B3B,uBAAqB,iBA3BM;AA4B3B,uBAAqB,MA5BM;AA6B3B,uBAAqB,GA7BM;AA8B3B,iBAAe,MA9BY;AA+B3B,kBAAgB,MA/BW;AAgC3B,aAAW,MAhCgB;AAiC3B,uBAAqB,MAjCM;AAkC3B,mBAAiB,MAlCU;AAmC3B,YAAU,MAnCiB;AAoC3B,eAAa,SApCc;AAqC3B,aAAW,OArCgB;AAsC3B,iBAAe,MAtCY;AAuC3B,YAAU,MAvCiB;AAwC3B,UAAQ,MAxCmB;AAwCX;AAChB,eAAa,YAzCc;AAyCA;AAC3B,WAAS,MA1CkB;AA2C3B,iBAAe,cA3CY;AA4C3B,mBAAiB,GA5CU;AA6C3B,UAAQ,MA7CmB;AA8C3B,eAAa,QA9Cc;AA+C3B,iBAAe,EA/CY;AAgD3B,YAAU,MAhDiB;AAiD3B,aAAW,QAjDgB;AAkD3B,qBAAmB,MAlDQ;AAmD3B,iBAAe,EAnDY;AAmDR;AACnB,eAAa,MApDc;AAqD3B,qBAAmB,QArDQ;AAsD3B,mBAAiB,QAtDU;AAuD3B,kBAAgB,MAvDW;AAwD3B,oBAAkB,QAxDS;AAyD3B,oBAAkB,oBAzDS;AA0D3B,gBAAc,MA1Da;AA2D3B,iBAAe,QA3DY;AA4D3B,UAAQ,MA5DmB;AA6D3B,oBAAkB,MA7DS;AA8D3B,gBAAc,MA9Da;AA+D3B,qBAAmB,MA/DQ;AAgE3B,eAAa,MAhEc;AAiE3B,oBAAkB,MAjES;AAkE3B,gBAAc,GAlEa;AAmE3B,qBAAmB,GAnEQ;AAoE3B,eAAa,GApEc;AAqE3B,oBAAkB,QArES;AAsE3B,gBAAc,MAtEa;AAsEL;AACtB,qBAAmB,MAvEQ;AAuEA;AAC3B,iBAAe,MAxEY;AAwEJ;AACvB,mBAAiB,WAzEU;AAyEG;AAC9B,aAAW,GA1EgB;AA2E3B,WAAS,GA3EkB;AA4E3B,aAAW,GA5EgB;AA6E3B,aAAW,MA7EgB;AA8E3B,qBAAmB,MA9EQ;AA+E3B,mBAAiB,QA/EU;AAgF3B,cAAY,SAhFe;AAiF3B,aAAW,GAjFgB;AAkF3B,UAAQ,EAlFmB;AAmF3B,iBAAe,MAnFY;AAoF3B,oBAAkB,MApFS;AAqF3B,cAAY,QArFe;AAsF3B,YAAU,EAtFiB;AAuF3B,YAAU,MAvFiB;AAwF3B,WAAS,GAxFkB;AAyF3B,qBAAmB,MAzFQ;AA0F3B,cAAY,GA1Fe;AA0FV;AACjB,kBAAgB,MA3FW;AA4F3B,gBAAc,OA5Fa;AA6F3B,qBAAmB,MA7FQ;AA8F3B,iBAAe,OA9FY;AA+F3B,0BAAwB,MA/FG;AAgG3B,qBAAmB,MAhGQ;AAiG3B,iBAAe,GAjGY;AAkG3B,sBAAoB,OAlGO;AAmG3B,mBAAiB,MAnGU;AAoG3B,oBAAkB,MApGS;AAqG3B,iBAAe,MArGY;AAsG3B,sBAAoB,MAtGO;AAuG3B,oBAAkB,MAvGS;AAwG3B,6BAA2B,MAxGA;AAyG3B,SAAO,MAzGoB;AA0G3B,kBAAgB,MA1GW;AA2G3B,eAAa,MA3Gc;AA4G3B,gBAAc,iBA5Ga;AA6G3B,kBAAgB,QA7GW;AA8G3B,iBAAe,MA9GY;AA+G3B,mBAAiB,MA/GU;AAgH3B,oBAAkB,UAhHS;AAiH3B,gBAAc,SAjHa;AAkH3B,iBAAe,QAlHY;AAmH3B,YAAU,GAnHiB;AAoH3B,gBAAc,QApHa;AAqH3B,kBAAgB,GArHW;AAsH3B,eAAa,QAtHc;AAuH3B,kBAAgB,eAvHW;AAwH3B,UAAQ,GAxHmB;AAyH3B,aAAW;AAzHgB,CAAtB;AA4HP;;;AACO,IAAM,cAAc,GACzB,qDADK;AAGP;;;;;;;;AAKO,SAAS,oBAAT,CAA8B,SAA9B,EAAyC;AAC9C,SAAO,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,WAApB,KAAoC,SAAS,CAAC,KAAV,CAAgB,CAAhB,CAA3C;AACD;AAED;;;;;;;;;;AAQA,SAAS,wBAAT,CAAkC,KAAlC,EAAyC,SAAzC,EAAoD;AAClD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAAc,CAAC,MAAnC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C,QAAM,YAAY,GAAG,cAAc,CAAC,CAAD,CAAd,GAAoB,SAAzC;;AACA,QAAI,KAAK,CAAC,YAAD,CAAL,KAAwB,SAA5B,EAAuC;AACrC,aAAO,YAAP;AACD;AACF;;AACD,SAAO,EAAP;AACD;AAED;;;;;;;;;;;;;AAWO,SAAS,uBAAT,CAAiC,KAAjC,EAAwC,SAAxC,EAAmD,WAAnD,EAAgE;AACrE,MAAI,wBAAW,SAAX,EAAsB,IAAtB,CAAJ,EAAiC;AAC/B;AACA,WAAO,SAAP;AACD;;AACD,MAAI,CAAC,iBAAL,EAAwB;AACtB,IAAA,iBAAiB,GAAG,kBAApB;AACD;;AACD,MAAI,YAAY,GAAG,iBAAiB,CAAC,SAAD,CAApC;;AACA,MAAI,CAAC,YAAD,IAAiB,WAArB,EAAkC;AAChC,IAAA,YAAY,GAAG,SAAf;;AACA,QAAI,KAAK,CAAC,SAAD,CAAL,KAAqB,SAAzB,EAAoC;AAClC,UAAM,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAAtC;AACA,UAAM,oBAAoB,GAAG,wBAAwB,CAAC,KAAD,EAAQ,SAAR,CAArD;;AAEA,UAAI,KAAK,CAAC,oBAAD,CAAL,KAAgC,SAApC,EAA+C;AAC7C,QAAA,YAAY,GAAG,oBAAf;AACD;AACF;;AACD,QAAI,CAAC,WAAL,EAAkB;AAChB,MAAA,iBAAiB,CAAC,SAAD,CAAjB,GAA+B,YAA/B;AACD;AACF;;AACD,SAAO,YAAP;AACD;AAED;;;;;;;;AAMO,SAAS,kBAAT,CAA4B,OAA5B,EAAqC,MAArC,EAA6C;AAClD,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,IAAA,OAAO,CAAC,KAAR,CAAc,WAAd,CACE,uBAAuB,CAAC,MAAD,EAAS,CAAT,CADzB,EAEE,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,EAFF,EAGE,WAHF;AAKD;AACF;AAED;;;;;;;;;;AAQO,SAAS,QAAT,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD,WAAnD,EAAgE;AACrE,MAAM,YAAY,GAAG,uBAAuB,CAC1C,OAAO,CAAC,KADkC,EAE1C,QAF0C,EAG1C,WAH0C,CAA5C;;AAKA,MAAI,YAAJ,EAAkB;AAChB,IAAA,OAAO,CAAC,KAAR,CAAc,YAAd;AAA8B;AAAuB,IAAA,KAAK,GACtD,KAAK,GAAG,KAD8C,GAEtD,KAFJ;AAGD;AACF;AAED;;;;;;;;;AAOO,SAAS,QAAT,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC,WAArC,EAAkD;AACvD,MAAM,YAAY,GAAG,uBAAuB,CAC1C,OAAO,CAAC,KADkC,EAE1C,QAF0C,EAG1C,WAH0C,CAA5C;;AAKA,MAAI,CAAC,YAAL,EAAmB;AACjB,WAAO,SAAP;AACD;;AACD,SAAO,OAAO,CAAC,KAAR,CAAc,YAAd,CAAP;AACD;AAED;;;;;;;;AAMO,SAAS,SAAT,CAAmB,OAAnB,EAA4B,MAA5B,EAAoC;AACzC,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,IAAA,QAAQ,CAAC,OAAD,EAAU,CAAV,EAAa,MAAM,CAAC,CAAD,CAAnB,CAAR;AACD;AACF;AAED;;;;;;;AAKO,SAAS,MAAT,CAAgB,OAAhB,EAAyB,OAAzB,EAAkC;AACvC,MAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,IAAA,OAAO,GAAG,QAAQ,CAAC,OAAD,EAAU,SAAV,CAAR,IAAgC,MAA1C;AACD;;AACD,EAAA,QAAQ,CAAC,OAAD,EAAU,SAAV,EAAqB,OAAO,GAAG,EAAH,GAAQ,MAApC,CAAR;AACD;AAED;;;;;;;AAKO,SAAS,EAAT,CAAY,KAAZ,EAAmB;AACxB,SAAO,KAAK,GAAG,IAAf;AACD;AAED;;;;;;;AAKO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,gCAAqB,KAArB;AACD;;AACD,8BAAqB,EAAE,CAAC,KAAD,CAAvB;AACD;AAED;;;;;;;;AAMO,SAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB;AAC9B,MAAI,OAAO,CAAP,IAAY,QAAhB,EAA0B;AACxB,IAAA,CAAC,GAAG,EAAE,CAAC,CAAD,CAAN;AACD;;AACD,MAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,+BAAoB,CAApB;AACD;;AACD,MAAI,OAAO,CAAP,IAAY,QAAhB,EAA0B;AACxB,IAAA,CAAC,GAAG,EAAE,CAAC,CAAD,CAAN;AACD;;AACD,6BAAoB,CAApB,eAA0B,CAA1B;AACD;AAED;;;;;;;AAKO,SAAS,KAAT,CAAe,KAAf,EAAsB;AAC3B,yBAAgB,KAAhB;AACD;AAED;;;;;;;;;AAOO,SAAS,oBAAT,CAA8B,SAA9B,EAAyC;AAC9C,SAAO,SAAS,CAAC,OAAV,CACL,qCADK,EAEL,eAFK,CAAP;AAID;AAED;;;;;;;;;;AAQO,SAAS,aAAT,CAAuB,GAAvB,EAA4B,EAA5B,EAAgC;AACrC,MAAM,KAAK;AAAG;AAAqC,EAAA,GAAG,CAAC,gBAAJ,CAAqB,EAArB,CAAnD;AACA;AAAO;AAAwC,IAAA,KAAD,IAAW;AAAzD;AACD;AAED;;;;;;;AAKO,SAAS,WAAT,CAAqB,OAArB,EAA8B,UAA9B,EAA0C;AAC/C,MAAM,QAAQ,GAAG,EAAjB;AACA,EAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,IAAI,EAAI;AACzB,IAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,IAAjB;AACD,GAFD;AAGA,EAAA,SAAS,CAAC,OAAD,EAAU,QAAV,CAAT;AACD;AAED;;;;;;;AAKO,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AACtC,EAAA,kBAAkB,CAAC,OAAD,EAAU,aAAV,CAAlB;AACD;;;;;;;;;;;;;;;;;ACjZD;;;;;;;;;;;;;;;;AAgBA;AACA,IAAM,SAAS,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAnC;AAEA;;;;;;AAKA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,SAAO,SAAS,CAAC,IAAV,CAAe,KAAf,CAAP;AACD;AAED;;;;;;;AAKO,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC7B,SAAO,KAAK,CAAC,OAAN,CAAc,KAAd,CAAP;AACD;AAED;;;;;;;;AAMO,SAAS,OAAT,CAAiB,SAAjB,EAA4B;AACjC,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,EAAP;AACD;;AACD,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,SAAS,CAAC,MAApB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,SAAS,CAAC,CAAD,CAApB;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;AAKO,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AAC9B,SAAO,QAAQ,CAAC,KAAD,CAAR,KAAoB,iBAA3B;AACD;AAED;;;;;;;;;AAOO,SAAS,cAAT,CAAwB,KAAxB,EAA+B;AACpC,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,QAAQ,CAAC,KAAD,CAA5C;AACD;AAED;;;;;;;AAKO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC,SAAO,QAAQ,CAAC,KAAD,CAAR,KAAoB,mBAA3B;AACD;AAED;;;;;;;;;;AAQO,SAAS,WAAT,CAAqB,OAArB,EAA8B,CAA9B,EAAiC;AACtC,OAAK,IAAM,CAAX,IAAgB,OAAhB,EAAyB;AACvB,QAAI,OAAO,CAAC,CAAD,CAAP,KAAe,CAAnB,EAAsB;AACpB,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;AAED;;;;;;AAIO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC,SAAO,KAAK,KAAK,IAAV,IAAkB,OAAO,KAAP,KAAiB,UAA1C;AACD;AAED;;;;;;AAIO,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,SAAO,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,KAAnC;AACD;;;;;;;;;;;;;;AClGD;;AAhBA;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;AAaA,IAAI,WAAJ;AAEA;;;;;AAIA,IAAI,CAAJ;AAEA;;;;;;;AAMA,IAAI,KAAJ;AAEA;;;;;;;AAMO,SAAS,oBAAT,CAA8B,MAA9B,EAAsC;AAC3C,MAAM,CAAC,GAAG,EAAV;;AACA,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,QAAM,CAAC,GAAG,MAAM,CAAC,CAAD,CAAhB;;AACA,QAAI,CAAC,IAAI,IAAT,EAAe;AACb;AACD,KAFD,MAEO,IAAI,oBAAQ,CAAR,CAAJ,EAAgB;AACrB,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,MAAtB,EAA8B,CAAC,EAA/B,EAAmC;AACjC,YAAM,EAAE;AAAG;AAAuB,QAAA,CAAC,CAAC,CAAD,CAAnC;AACA,QAAA,CAAC,CAAC,IAAF,WAAU,kBAAkB,CAAC,CAAD,CAA5B,cAAmC,kBAAkB,CAAC,EAAD,CAArD;AACD;AACF,KALM,MAKA;AACL,UAAM,GAAE;AAAG;AAAuB,MAAA,CAAlC;AACA,MAAA,CAAC,CAAC,IAAF,WAAU,kBAAkB,CAAC,CAAD,CAA5B,cAAmC,kBAAkB,CAAC,GAAD,CAArD;AACD;AACF;;AACD,SAAO,CAAC,CAAC,IAAF,CAAO,GAAP,CAAP;AACD;AAED;;;;;;;;;;AAQO,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AAC5B,MAAI,CAAC,CAAL,EAAQ;AACN,IAAA,CAAC;AAAG;AAAmC,IAAA,IAAI,CAAC,QAAL,CAAc,aAAd,CAA4B,GAA5B,CAAvC;AACA,IAAA,KAAK,GAAG,IAAI,CAAC,QAAL,KAAkB,IAAI,CAAC,QAAL,GAAgB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAlC,CAAR;AACD;;AAED,MAAM,SAAS,GAAG,KAAK,CAAC,GAAD,CAAvB;;AACA,MAAI,SAAJ,EAAe;AACb,WAAO,SAAP;AACD;;AAED,MAAM,IAAI,GAAG,aAAa,CAAC,CAAD,EAAI,GAAJ,CAA1B;AAEA,SAAQ,KAAK,CAAC,GAAD,CAAL,GAAa,IAArB;AACD;AAED;;;;;;;;;AAOA,SAAS,aAAT,CAAuB,CAAvB,EAA0B,GAA1B,EAA+B;AAC7B,EAAA,CAAC,CAAC,IAAF,GAAS,GAAT,CAD6B,CAG7B;AACA;;AACA,MAAI,CAAC,CAAC,CAAC,QAAP,EAAiB;AACf,IAAA,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAX;AACD;AAED;;;AACA,MAAM,IAAI,GAAG;AACX,IAAA,IAAI,EAAE,CAAC,CAAC,IADG;AAEX,IAAA,QAAQ,EAAE,CAAC,CAAC,QAFD;AAGX,IAAA,IAAI,EAAE,CAAC,CAAC,IAHG;AAIX,IAAA,QAAQ,EAAE,CAAC,CAAC,QAJD;AAKX,IAAA,IAAI,EAAE,CAAC,CAAC,IAAF,IAAU,GAAV,GAAgB,EAAhB,GAAqB,CAAC,CAAC,IALlB;AAMX,IAAA,QAAQ,EAAE,CAAC,CAAC,QAND;AAOX,IAAA,MAAM,EAAE,CAAC,CAAC,MAPC;AAQX,IAAA,IAAI,EAAE,CAAC,CAAC,IARG;AASX,IAAA,MAAM,EAAE,EATG,CASC;;AATD,GAAb,CAV6B,CAsB7B;AACA;;AACA,MAAI,IAAI,CAAC,QAAL,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC5B,IAAA,IAAI,CAAC,QAAL,GAAgB,MAAM,IAAI,CAAC,QAA3B;AACD,GA1B4B,CA4B7B;AACA;;;AACA,MACG,IAAI,CAAC,QAAL,IAAiB,OAAjB,IAA4B,IAAI,CAAC,IAAL,IAAa,EAA1C,IACC,IAAI,CAAC,QAAL,IAAiB,QAAjB,IAA6B,IAAI,CAAC,IAAL,IAAa,GAF7C,EAGE;AACA,IAAA,IAAI,CAAC,IAAL,GAAY,EAAZ;AACA,IAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,QAAjB;AACD,GApC4B,CAsC7B;AACA;;;AACA,MAAI,CAAC,CAAC,MAAF,IAAY,CAAC,CAAC,MAAF,IAAY,MAA5B,EAAoC;AAClC,IAAA,IAAI,CAAC,MAAL,GAAc,CAAC,CAAC,MAAhB;AACD,GAFD,MAEO,IAAI,IAAI,CAAC,QAAL,IAAiB,OAAjB,IAA4B,CAAC,IAAI,CAAC,IAAtC,EAA4C;AACjD,IAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,IAAnB;AACD,GAFM,MAEA;AACL,IAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,QAAL,GAAgB,IAAhB,GAAuB,IAAI,CAAC,IAA1C;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;AAKO,SAAS,gBAAT,CAA0B,KAA1B,EAAiC;AACtC,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACD,SAAO,CAAC,QAAQ,IAAR,CAAa,KAAb,IAAsB,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAtB,GAAuC,KAAxC,EACJ,KADI,CACE,GADF,EAEJ,MAFI,CAEG,UAAC,MAAD,EAAS,KAAT,EAAmB;AACzB,QAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAb;AACA,QAAM,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAZ,CAA9B;AACA,QAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAZ,CAAhC;;AACA,QAAI,GAAJ,EAAS;AACP,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,KAAd;AACD;;AACD,WAAO,MAAP;AACD,GAVI,EAUF,EAVE,CAAP;AAWD;AAED;;;;;;;;;AAOO,SAAS,aAAT,CAAuB,GAAvB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C;AAC/C,MAAM,UAAU,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAnB;AACA,MAAM,aAAa,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAtB;AACA,MAAI,QAAQ,GAAG,EAAf;;AACA,MAAI,aAAa,IAAI,CAAC,CAAtB,EAAyB;AACvB,IAAA,QAAQ,GAAG,GAAG,CAAC,SAAJ,CAAc,aAAd,CAAX;AACA,IAAA,GAAG,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,aAAjB,CAAN;AACD;;AACD,MAAI,UAAU,IAAI,CAAC,CAAnB,EAAsB;AACpB,IAAA,GAAG,IAAI,GAAP;AACD,GAFD,MAEO,IAAI,UAAU,GAAG,GAAG,CAAC,MAAJ,GAAa,CAA9B,EAAiC;AACtC,IAAA,GAAG,IAAI,GAAP;AACD;;AACD,EAAA,GAAG,IAAI,kBAAkB,CAAC,KAAD,CAAlB,GAA4B,GAA5B,GAAkC,kBAAkB,CAAC,KAAD,CAA3D;AACA,SAAO,GAAG,GAAG,QAAb;AACD;AAED;;;;;;;AAKO,SAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAD,CAA7B;AACA,SAAO,YAAY,CAAC,MAAb,GAAsB,YAAY,CAAC,QAAnC,GAA8C,YAAY,CAAC,MAAlE;AACD;;;;;;;;;;;;AC/LD;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;AAcO,IAAI,YAAJ;AAEP;;;AACA,IAAM,eAAe,GAAG,CAAC,KAAD,EAAQ,MAAR,CAAxB;AAEA;;AACA,IAAM,kBAAkB,GAAG;AACzB,EAAA,QAAQ,EAAE,CADe;AAEzB,EAAA,IAAI,EAAE;AAFmB,CAA3B;AAKA;;;;IAGa,G;;;AACX;;;AAGA,eAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,GAAL,GAAW,GAAX;AACD;AAED;;;;;;;;;;;;;2BASO,K,EAAO,I,EAAM;AAClB;AACA,uBAAO,OAAO,KAAP,IAAgB,QAAvB,EAAiC,wBAAjC,EAA2D,KAA3D,EAFkB,CAGlB;AACA;;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,WAAnB;AACA,uBACE,KAAK,KAAK,SAAV,IAAuB,KAAK,IAAI,SAAhC,IAA6C,KAAK,IAAI,MADxD,EAEE,2CAFF,EAGE,KAHF,EANkB,CAWlB;AACA;AACA;;AACA,UAAI,IAAI,CAAC,YAAL,IAAqB,UAAzB,EAAqC;AACnC,eAAO,aAAa,CAAC,KAAD,EAAQ,IAAR,CAApB;AACD;;AACD,aAAO,CAAC,KAAK,GAAL,CAAS,KAAT,IAAkB,aAAnB,EAAkC,KAAlC,CAAwC,IAAxC,EAA8C,SAA9C,CAAP;AACD;AAED;;;;;;;;0BAKM,K,EAAO,I,EAAM;AACjB;AACA,MAAA,IAAI,GAAG,SAAS,CAAC,IAAD,CAAhB;AACA,aAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,IAAnB,EACJ,IADI,CAEH,UAAA,QAAQ;AAAA,eAAI,QAAJ;AAAA,OAFL,EAGH,UAAA,MAAM,EAAI;AACR,YAAM,YAAY,GAAG,mBAAS,KAAT,EAAgB,MAArC;AACA,cAAM,IAAI,KAAJ,gCACoB,YADpB,aAEJ,MAAM,IAAI,MAAM,CAAC,OAFb,CAAN;AAID,OATE,EAWJ,IAXI,CAWC,UAAA,QAAQ;AAAA,eAAI,aAAa,CAAC,QAAD,CAAjB;AAAA,OAXT,CAAP;AAYD;;;;;AAGH;;;;;;;;;;AAMA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AAChC,MAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO,KAAP;AACD;;AACD,EAAA,MAAM,GAAG,MAAM,CAAC,WAAP,EAAT;AAEA,mBACE,eAAe,CAAC,QAAhB,CAAyB,MAAzB,CADF,EAEE,6CAFF,EAGE,eAAe,CAAC,IAAhB,CAAqB,IAArB,CAHF,EAIE,MAJF;AAOA,SAAO,MAAP;AACD;AAED;;;;;;;;;AAOA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAC/B,EAAA,IAAI,GAAG,IAAI;AAAI;AAA6B,IAA5C;AACA,EAAA,IAAI,CAAC,MAAL,GAAc,gBAAgB,CAAC,IAAI,CAAC,MAAN,CAA9B;AACA,EAAA,IAAI,CAAC,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,EAA/B;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,IAAI,CAAC,OAAL,CAAa,QAAb,IAAyB,MAAzB;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;AAaO,SAAS,aAAT,CAAuB,KAAvB,EAA8B,IAA9B,EAAoC;AACzC,SAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC3C,QAAM,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAL,IAAe,KAAhB,EAAuB,KAAvB,CAA5B;;AAEA,QAAI,IAAI,CAAC,WAAL,IAAoB,SAAxB,EAAmC;AACjC,MAAA,GAAG,CAAC,eAAJ,GAAsB,IAAtB;AACD;;AAED,QAAI,IAAI,CAAC,YAAL,IAAqB,kBAAzB,EAA6C;AAC3C,MAAA,GAAG,CAAC,YAAJ,GAAmB,IAAI,CAAC,YAAxB;AACD;;AAED,QAAI,IAAI,CAAC,OAAT,EAAkB;AAChB,MAAA,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,OAAjB,EAA0B,OAA1B,CAAkC,UAAS,MAAT,EAAiB;AACjD,QAAA,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAA6B,IAAI,CAAC,OAAL,CAAa,MAAb,CAA7B;AACD,OAFD;AAGD;;AAED,IAAA,GAAG,CAAC,kBAAJ,GAAyB,YAAM;AAC7B,UAAI,GAAG,CAAC,UAAJ;AAAiB;AAAsB,OAA3C,EAA8C;AAC5C;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,GAAb,IAAoB,GAAG,CAAC,MAAJ,GAAa,GAArC,EAA0C;AACxC,QAAA,GAAG,CAAC,kBAAJ,GAAyB,IAAzB;AACA,QAAA,MAAM,CAAC,IAAI,KAAJ,+BAAiC,GAAG,CAAC,MAArC,EAAD,CAAN;AACA;AACD,OAR4B,CAU7B;AACA;AACA;;;AACA,UAAI,GAAG,CAAC,UAAJ;AAAkB;AAAe,OAArC,EAAwC;AACtC,QAAA,OAAO,CAAC,IAAI,aAAJ,CAAkB,GAAlB,CAAD,CAAP;AACD;AACF,KAhBD;;AAiBA,IAAA,GAAG,CAAC,OAAJ,GAAc,YAAM;AAClB,MAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,iBAAV,CAAD,CAAN;AACD,KAFD;;AAGA,IAAA,GAAG,CAAC,OAAJ,GAAc,YAAM;AAClB,MAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,iBAAV,CAAD,CAAN;AACD,KAFD;;AAIA,QAAI,IAAI,CAAC,MAAL,IAAe,MAAnB,EAA2B;AACzB,MAAA,GAAG,CAAC,IAAJ,CAAS,IAAI,CAAC,IAAd;AACD,KAFD,MAEO;AACL,MAAA,GAAG,CAAC,IAAJ;AACD;AACF,GA9CM,CAAP;AA+CD;AAED;;;;;;;;AAMA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,MAAM,GAAG,GAAG,IAAI,cAAJ,EAAZ;;AACA,MAAI,qBAAqB,GAAzB,EAA8B;AAC5B,IAAA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,GAAjB,EAAsB,IAAtB;AACD,GAFD,MAEO;AACL,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,SAAO,GAAP;AACD;AAED;;;;;;AAIA,SAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,SAAO,MAAM,IAAI,GAAV,IAAkB,MAAM,IAAI,GAAV,IAAiB,MAAM,GAAG,GAAnD;AACD;AAED;;;;;;;;AAMO,SAAS,aAAT,CAAuB,QAAvB,EAAiC;AACtC,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,QAAI,QAAQ,CAAC,EAAb,EAAiB;AACf,aAAO,OAAO,CAAC,QAAD,CAAd;AACD;;AAH2B,QAKrB,MALqB,GAKX,QALW,CAKrB,MALqB;AAM5B,QAAM,GAAG,GAAG,IAAI,KAAJ,sBAAwB,MAAxB,EAAZ;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,WAAW,CAAC,MAAD,CAA3B,CAP4B,CAQ5B;AACA;;AACA,IAAA,GAAG,CAAC,QAAJ,GAAe,QAAf;AACA,UAAM,GAAN;AACD,GAZM,CAAP;AAaD;AAED;;;;;;;IAKa,a;;;AACX;;;AAGA,yBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,MAAL,GAAc,KAAK,IAAL,CAAU,MAAxB;AAEA;;AACA,SAAK,EAAL,GAAU,KAAK,MAAL,IAAe,GAAf,IAAsB,KAAK,MAAL,GAAc,GAA9C;AAEA;;AACA,SAAK,OAAL,GAAe,IAAI,oBAAJ,CAAyB,GAAzB,CAAf;AAEA;;AACA,SAAK,QAAL,GAAgB,KAAhB;AAEA;;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;AAED;;;;;;;;4BAIQ;AACN,uBAAO,CAAC,KAAK,QAAb,EAAuB,mBAAvB;AACA,aAAO,IAAI,aAAJ,CAAkB,KAAK,IAAvB,CAAP;AACD;AAED;;;;;;;;iCAKa;AACX,uBAAO,CAAC,KAAK,QAAb,EAAuB,mBAAvB;AACA,WAAK,QAAL,GAAgB,IAAhB;AACA,aAAO,OAAO,CAAC,OAAR,CAAgB,KAAK,IAAL,CAAU,YAA1B,CAAP;AACD;AAED;;;;;;;;2BAKO;AACL,aAAO,KAAK,UAAL,EAAP;AACD;AAED;;;;;;;2BAIO;AACL;AAAO;AAAsC,aAAK,UAAL,GAAkB,IAAlB,CAC3C,eAD2C;AAA7C;AAGD;AAED;;;;;;;;gCAKY;AACV,uBAAO,CAAC,KAAK,QAAb,EAAuB,mBAAvB;AACA,WAAK,QAAL,GAAgB,IAAhB;AACA,uBACE,KAAK,IAAL,CAAU,WADZ,EAEE,mDACE,iCAHJ;AAKA;AAAO;AAAoC,QAAA,OAAO,CAAC,OAAR,CACzC,iBAAO,KAAK,IAAL,CAAU,WAAjB,CADyC;AAA3C;AAGD;AAED;;;;;;;;kCAKc;AACZ;AAAO;AAAuC,aAAK,UAAL,GAAkB,IAAlB,CAC5C,qBAD4C;AAA9C;AAGD;;;;;AAGH;;;;;;;;IAIa,oB;;;AACX;;;AAGA,gCAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AACD;AAED;;;;;;;;wBAII,I,EAAM;AACR,aAAO,KAAK,IAAL,CAAU,iBAAV,CAA4B,IAA5B,CAAP;AACD;AAED;;;;;;;wBAII,I,EAAM;AACR,aAAO,KAAK,IAAL,CAAU,iBAAV,CAA4B,IAA5B,KAAqC,IAA5C;AACD;;;;;;;;;;;;;;;;AC/XH;;;;;;;;;;;;;;;;AAiBA,IAAM,WAAW,GAAG,UAApB;AAEA,IAAM,SAAS,GAAG,EAAlB;AAEA;;;;;;;AAKA,SAAS,CAAC,WAAV,GAAwB;AACtB,EAAA,KAAK,EAAE,OADe;AAEtB,EAAA,OAAO,EAAE,SAFa;AAGtB,EAAA,UAAU,EAAE,YAHU;AAItB,EAAA,OAAO,EAAE,SAJa;AAKtB,EAAA,IAAI,EAAE,MALgB;AAMtB,EAAA,GAAG,EAAE;AANiB,CAAxB;AASA;;;;;;AAKA,SAAS,CAAC,aAAV,GAA0B;AACxB,EAAA,IAAI,EAAE,MADkB;AAExB,EAAA,cAAc,EAAE,gBAFQ;AAGxB,EAAA,GAAG,EAAE;AAHmB,CAA1B;AAMA;;;;;;AAKA,SAAS,CAAC,UAAV,GAAuB;AACrB,EAAA,cAAc,EAAE,gBADK;AAErB,EAAA,QAAQ,EAAE;AAFW,CAAvB;AAKA;;;;;;AAKA,SAAS,CAAC,cAAV,GAA2B;AACzB,EAAA,QAAQ,EAAE,UADe;AAEzB,EAAA,eAAe,EAAE;AAFQ,CAA3B;AAKA;;;;;;AAKA,SAAS,CAAC,gBAAV,GAA6B;AAC3B,EAAA,SAAS,EAAE,WADgB;AAE3B,EAAA,KAAK,EAAE,OAFoB;AAG3B,EAAA,mBAAmB,EAAE;AAHM,CAA7B;AAMA;;;;;;AAKA,SAAS,CAAC,UAAV,GAAuB;AACrB,EAAA,KAAK,EAAE,OADc;AAErB,EAAA,IAAI,EAAE;AAFe,CAAvB;AAKA;;;;;;AAKA,SAAS,CAAC,WAAV,GAAwB;AACtB,EAAA,OAAO,EAAE,SADa;AACD;AACrB,EAAA,KAAK,EAAE,OAFe;AAGtB,EAAA,KAAK,EAAE;AAHe,CAAxB;AAMA;;;;;;AAKA,SAAS,CAAC,EAAV,GAAe;AACb,EAAA,sBAAsB,EAAE;AADX,CAAf;AAIA;;AACA,SAAS,CAAC,kBAAV,GAA+B,6BAA/B;AAEA;;AACA,SAAS,CAAC,0BAAV,GACI,SAAS,CAAC,kBAAV,GAA+B,sBADnC;AAGA;;AACA,SAAS,CAAC,8BAAV,GACI,SAAS,CAAC,kBAAV,GAA+B,0BADnC;AAIA,SAAS,CAAC,YAAV,GAAyB,kBAAzB;AACA,SAAS,CAAC,6BAAV,aACO,SAAS,CAAC,YADjB;AAEA,SAAS,CAAC,sBAAV,aAAsC,SAAS,CAAC,YAAhD;AACA,SAAS,CAAC,yBAAV,aAAyC,SAAS,CAAC,YAAnD;AACA,SAAS,CAAC,kBAAV,aAAkC,SAAS,CAAC,YAA5C;AAEA,SAAS,CAAC,YAAV,gBACG,SAAS,CAAC,kBADb,ufAgBe,WAhBf,gGAqBK,SAAS,CAAC,kBArBf,4IA2BG,SAAS,CAAC,sBA3Bb;AAwCA,SAAS,CAAC,mBAAV,gBACG,SAAS,CAAC,yBADb,mjBAoBa,WApBb,iFAwBK,SAAS,CAAC,yBAxBf,kDA4BG,SAAS,CAAC,6BA5Bb;AAkCA,SAAS,CAAC,gCAAV,GACI,2EADJ;AAGA,SAAS,CAAC,0BAAV,GAAuC;AACrC,QAAM,GAD+B;AAErC,QAAM,GAF+B;AAGrC,QAAM,GAH+B;AAIrC,QAAM,GAJ+B;AAKrC,QAAM,GAL+B;AAMrC,QAAM,GAN+B;AAOrC,QAAM,GAP+B;AAQrC,QAAM,GAR+B;AASrC,QAAM,GAT+B;AAUrC,QAAM,GAV+B;AAWrC,QAAM,GAX+B;AAYrC,QAAM,GAZ+B;AAarC,QAAM,GAb+B;AAcrC,QAAM,GAd+B;AAerC,QAAM,GAf+B;AAgBrC,QAAM,GAhB+B;AAiBrC,QAAM,GAjB+B;AAkBrC,QAAM,GAlB+B;AAmBrC,QAAM,GAnB+B;AAoBrC,QAAM,GApB+B;AAqBrC,QAAM;AArB+B,CAAvC;AAwBA;;;;;;AAKA,SAAS,CAAC,aAAV,GAA0B,eAA1B;AAEA;;;;;;AAKA,SAAS,CAAC,iBAAV,GAA8B,aAA9B;AAEA,SAAS,CAAC,YAAV,gBACG,SAAS,CAAC,iBADb,qXAeG,SAAS,CAAC,iBAfb,yGAqBG,SAAS,CAAC,iBArBb,wDAyBG,SAAS,CAAC,iBAzBb,kEA8BG,SAAS,CAAC,iBA9Bb,mHAkCG,SAAS,CAAC,iBAlCb,oHAsCG,SAAS,CAAC,iBAtCb,kEA0CG,SAAS,CAAC,iBA1Cb,iEA8CG,SAAS,CAAC,iBA9Cb,+DAkDG,SAAS,CAAC,iBAlDb,0FAsDG,SAAS,CAAC,iBAtDb;AA2DA,SAAS,CAAC,4CAAV,GAAyD,qBAAzD;AAEA,SAAS,CAAC,qBAAV,GAAkC,iBAAlC;AAEA,SAAS,CAAC,mBAAV,GACI,+DACA,mEADA,GAEA,qGAFA,GAGA,uEAHA,GAIA,0EAJA,GAKA,uEALA,GAMA,yEANA,GAOA,0EAPA,GAQA,qEARA,GASA,kEATA,GAUA,0EAVA,GAWA,uEAXA,GAYA,uEAZA,GAaA,wEAbA,GAcA,kEAdA,GAeA,2EAfA,GAgBA,oEAhBA,GAiBA,gEAjBA,GAkBA,0EAlBA,GAmBA,iEAnBA,GAoBA,qEApBA,GAqBA,2EArBA,GAsBA,qEAtBA,GAuBA,0EAvBA,GAwBA,mEAxBA,GAyBA,sEAzBA,GA0BA,sEA1BA,GA2BA,kEA3BA,GA4BA,yEA5BA,GA6BA,qEA7BA,GA8BA,2EA9BA,GA+BA,kEA/BA,GAgCA,oEAhCA,GAiCA,sEAjCA,GAkCA,qEAlCA,GAmCA,6DAnCA,GAoCA,yDApCA,GAqCA,8DArCA,GAsCA,sEAtCA,GAuCA,uEAvCA,GAwCA,sCAzCJ;AA2CA,SAAS,CAAC,qBAAV,gBACG,SAAS,CAAC,qBADb;AAYA,SAAS,CAAC,4BAAV,GAAyC,wBAAzC;AAEA,SAAS,CAAC,4BAAV,iFAEG,SAAS,CAAC,4BAFb,sHASG,SAAS,CAAC,4BATb,2DAaG,SAAS,CAAC,4BAbb,kEAkBG,SAAS,CAAC,4BAlBb;AAwBA;;;;;;AAKA,SAAS,CAAC,2BAAV,GAAwC,oBAAxC;AAEA,SAAS,CAAC,kCAAV,kBACK,SAAS,CAAC,2BADf,0gBAoBK,SAAS,CAAC,2BApBf,kEAwBK,SAAS,CAAC,2BAxBf;AA8BA;;;;;;AAKA,SAAS,CAAC,cAAV,GAA2B,aAA3B;;;;;;;;;;;AC1ZA;;AAjBA;;;;;;;;;;;;;;;;;AAmBA;;;;;AAKA,SAAS,gBAAT,CAA0B,SAA1B,EAAqC;AACnC,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAArB;AACA,EAAA,YAAY,CAAC,IAAb,GAAoB,UAApB;AACA,EAAA,YAAY,CAAC,WAAb,GAA2B,SAA3B;AACA,EAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,YAA1B;AACA,SAAO,YAAP;AACD;AAED;;;;;;;AAKA,SAAS,YAAT,CAAsB,eAAtB,EAAuC;AACrC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAlB;AACA,EAAA,SAAS,CAAC,SAAV,CAAoB,GAApB,CAAwB,qBAAU,sBAAlC;AACA,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAxB;AACA,EAAA,eAAe,CAAC,SAAhB,CAA0B,GAA1B,CAA8B,iBAA9B;AACA;;AACA,MAAM,MAAM;AACR;AAAmC,EAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CADvC;AAEA,EAAA,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,eAArB;AACA,EAAA,MAAM,CAAC,YAAP,CAAoB,aAApB,EAAmC,GAAnC;AACA,EAAA,MAAM,CAAC,YAAP,CAAoB,WAApB,EAAiC,IAAjC;AACA,EAAA,eAAe,CAAC,WAAhB,CAA4B,MAA5B;AACA,EAAA,SAAS,CAAC,WAAV,CAAsB,eAAtB;AACA,EAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B;AACA,SAAO;AAAC,iBAAa,SAAd;AAAyB,cAAU;AAAnC,GAAP;AACD;;;;;;;;;;ACnCD;;;;;;;;AAEA,IAAM,WAAW,GAAG,UAApB;;IAGM,Q;;;AAEJ;;;AAGA,oBAAY,GAAZ,EAAiB;AAAA;;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AAEA;;AACA,SAAK,QAAL,GAAgB,GAAG,CAAC,aAAJ,CAAkB,qBAAU,aAA5B,CAAhB;AACA,IAAA,kBAAkB,CAAC,KAAK,QAAN,EAAgB;AAChC,iBAAW,WADqB;AAEhC,iBAAW,MAFqB;AAGhC,kBAAY,OAHoB;AAIhC,aAAO,CAJyB;AAKhC,eAAS,CALuB;AAMhC,gBAAU,CANsB;AAOhC,cAAQ,CAPwB;AAQhC,0BAAoB;AARY,KAAhB,CAAlB;AAWA;;AACA,SAAK,YAAL,GAAoB,IAApB;AAEA,SAAK,QAAL,CAAc,gBAAd,CAA+B,OAA/B,EAAwC,YAAM;AAC5C,UAAI,KAAI,CAAC,YAAT,EAAuB;AACrB,YAAI;AACF,UAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB;AACD,SAFD,CAEE,OAAO,CAAP,EAAU,CACV;AACD;AACF;AACF,KARD;AASD;AAED;;;;;;;;;yBAKK,W,EAAa;AAChB,WAAK,YAAL,GAAoB,WAAW,IAAI,IAAnC;AACA,WAAK,IAAL,CAAU,IAAV,CAAe,WAAf,CAA2B,KAAK,QAAhC;AACA,MAAA,kBAAkB,CAAC,KAAK,QAAN,EAAgB;AAChC,mBAAW,OADqB;AAEhC,mBAAW;AAFqB,OAAhB,CAAlB;AAIA,aAAO,UAAU,CAAC,KAAK,QAAN,EAAgB;AAC/B,mBAAW;AADoB,OAAhB,EAEd,GAFc,EAET,UAFS,CAAjB;AAGD;AAED;;;;;;;2BAIO;AAAA;;AACL,WAAK,YAAL,GAAoB,IAApB;;AACA,UAAI,CAAC,KAAK,QAAL,CAAc,aAAnB,EAAkC;AAChC;AACA;AACA;AACD;;AACD,aAAO,UAAU,CAAC,KAAK,QAAN,EAAgB;AAC/B,mBAAW;AADoB,OAAhB,EAEd,GAFc,EAET,UAFS,CAAV,CAEa,IAFb,CAEkB,YAAM;AAC7B,QAAA,kBAAkB,CAAC,MAAI,CAAC,QAAN,EAAgB;AAAC,qBAAW;AAAZ,SAAhB,CAAlB;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,IAAV,CAAe,WAAf,CAA2B,MAAI,CAAC,QAAhC;AACD,OALM,CAAP;AAMD;;;;;AAIH;;;;;;;;;;;;;;AAUA,SAAS,kBAAT,CAA4B,OAA5B,EAAqC,MAArC,EAA6C;AAC3C,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,IAAA,OAAO,CAAC,KAAR,CAAc,WAAd,CAA0B,CAA1B,EAA6B,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,EAA7B,EAAmD,WAAnD;AACD;AACF;AAGD;;;;;;;;;;AAQA,SAAS,UAAT,CAAoB,EAApB,EAAwB,KAAxB,EAA+B,cAA/B,EAA+C,KAA/C,EAAsD;AACpD,MAAM,GAAG,GAAG,EAAE,CAAC,aAAH,CAAiB,WAA7B;AACA,MAAM,uBAAuB,GAAG,EAAE,CAAC,KAAH,CAAS,UAAT,IAAuB,EAAvD;AACA,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5B,IAAA,GAAG,CAAC,UAAJ,CAAe,YAAM;AACnB,MAAA,GAAG,CAAC,UAAJ,CAAe,OAAf,EAAwB,cAAxB;AACA,UAAM,EAAE,aAAM,cAAN,gBAA0B,KAA1B,CAAR;AACA,MAAA,kBAAkB,CAAC,EAAD,EAAK,MAAM,CAAC,MAAP,CAAc;AACnC,0CAA2B,EAA3B,uBAA0C,EAA1C;AADmC,OAAd,EAEpB,KAFoB,CAAL,CAAlB;AAGD,KAND;AAOD,GARM,EAQJ,IARI,CAQC,YAAM;AACZ;AACA,IAAA,kBAAkB,CAAC,EAAD,EAAK,MAAM,CAAC,MAAP,CAAc;AACnC,oBAAc;AADqB,KAAd,EAEpB,KAFoB,CAAL,CAAlB;AAGD,GAbM,CAAP;AAcD;;;;;;;;;;ACzHD;;AACA;;;;;;;;AAEA;;;;;AAKA;AACA,IAAM,oBAAoB,GAAG;AAC3B,EAAA,eAAe,EAAE,CADU;AAE3B,EAAA,gBAAgB,EAAE,CAFS;AAG3B,EAAA,uBAAuB,EAAE,CAHE;AAI3B,EAAA,yBAAyB,EAAE,CAJA;AAK3B,EAAA,iBAAiB,EAAE,CALQ;AAM3B,EAAA,8BAA8B,EAAE,CANL;AAO3B,EAAA,uBAAuB,EAAE,EAPE;AAQ3B,EAAA,oBAAoB,EAAE,EARK;AAS3B,EAAA,gCAAgC,EAAE,EATP;AAU3B,EAAA,oCAAoC,EAAE,CAVX;AAW3B,EAAA,gCAAgC,EAAE,CAXP;AAY3B,EAAA,mCAAmC,EAAE,CAZV;AAa3B,EAAA,gCAAgC,EAAE;AAbP,CAA7B;AAgBA;;;;;;;AAKA,IAAM,mBAAmB,GAAG;AAC1B,EAAA,YAAY,EAAE,CADY;AAE1B,EAAA,MAAM,EAAE,CAFkB;AAG1B,EAAA,KAAK,EAAE,CAHmB;AAI1B,EAAA,QAAQ,EAAE,CAJgB;AAK1B,EAAA,cAAc,EAAE,CALU;AAM1B,EAAA,eAAe,EAAE;AANS,CAA5B;AASA;;;;;;;AAKA,IAAM,eAAe,GAAG;AACtB,EAAA,kBAAkB,EAAE,CADE;AAEtB,EAAA,cAAc,EAAE,CAFM;AAGtB,EAAA,eAAe,EAAE,CAHK;AAItB,EAAA,mBAAmB,EAAE,CAJC;AAKtB,EAAA,sBAAsB,EAAE,CALF;AAMtB,EAAA,uBAAuB,EAAE,CANH;AAOtB,EAAA,YAAY,EAAE;AAPQ,CAAxB;AAUA;;;;;;;AAKA,IAAM,WAAW,GAAG;AAClB,EAAA,eAAe,EAAE,CADC;AAElB,EAAA,qBAAqB,EAAE;AAFL,CAApB;AAKA;;;;;;;AAKA,IAAI,MAAM,GAAG,IAAb;AAEA;;AACA,IAAI,kBAAkB,GAAG,IAAzB;AAEA;;AACA,IAAI,WAAW,GAAG,IAAlB;AAEA;;AACA,IAAI,mBAAmB,GAAG,IAA1B;AAEA;;AACA,IAAI,YAAY,GAAG,IAAI,CAAC,GAAL,EAAnB;AAEA;;AACA,IAAI,mBAAmB,GAAG,IAA1B;AAEA;;AACA,IAAI,aAAY,GAAG,KAAnB;AAEA;;AACA,IAAI,MAAM,GAAG,EAAb;;IAEM,c;;;;;;;;;;AACJ;;;;2BAIc;AACZ,UAAI,MAAJ,EAAY;AACV;AACD;;AACD,UAAM,WAAW;AACb;AAAgC,MAAA,MAAM,CAAC,gBAAD,CAAP,IAA8B,EADjE;AAEA,MAAA,WAAW,GAAG,WAAW,CAAC,WAAZ,IAA2B,qBAAU,WAAV,CAAsB,UAA/D;AACA,MAAA,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAT,CAPY,CAQZ;AACA;AACA;;AACA,MAAA,MAAM,CAAC,GAAP,GAAa,cAAc,CAAC,aAAf,CACL,MAAM,CAAC,QAAP,CAAgB,MADX,EAEL,WAAW,CAAC,YAAZ,IAA4B,WAAW,CAAC,YAAZ,CAAyB,UAFhD,CAAb;AAGA,MAAA,cAAc,CAAC,WAAf,CAA2B;AACzB,qBAAa,oBAAoB,CAAC,uBADT;AAEzB,gCAAwB,IAAI,CAAC,GAAL;AAFC,OAA3B;AAIA,MAAA,MAAM,CAAC,MAAP,GAAgB,GAAhB;AACA,MAAA,MAAM,CAAC,KAAP,GAAe,GAAf;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,OAAb,GAAuB,MAAvB;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,UAAb,GAA0B,QAA1B;;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB,YAAW;AACzB,QAAA,cAAc,CAAC,WAAf,CAA2B;AACzB,uBAAa,oBAAoB,CAAC,gCADT;AAEzB,kCAAwB,IAAI,CAAC,GAAL;AAFC,SAA3B;AAIA,QAAA,cAAc,CAAC,YAAf;AACD,OAND,CAtBY,CA6BZ;AACA;AACA;;;AACA,UAAI,QAAQ,CAAC,IAAb,EAAmB;AACjB,QAAA,cAAc,CAAC,WAAf;AACD,OAFD,MAEO;AACL,QAAA,QAAQ,CAAC,gBAAT,CACI,kBADJ,EACwB;AAAA,iBAAM,cAAc,CAAC,WAAf,EAAN;AAAA,SADxB;AAED;AACF;AAED;;;;;;;kCAIqB;AACnB,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,MAA1B;AACA,MAAA,kBAAkB,GAAG,IAAI,wCAAJ,CAAuB,MAAM,CAAC,aAA9B,CAArB;AACD;AAED;;;;;;;;;;;;2CAUI,I,EAAM,S,EAAW,Y,EAAc,e,EAAiB;AAClD,eAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,YAAI,KAAK,CAAC,IAAN,CAAW,YAAX,CAAJ,EAA8B;AAC5B,UAAA,eAAe,CAAC,KAAD,CAAf,CAD4B,CAE5B;AACA;;AACA,UAAA,cAAc,CAAC,2BAAf,CAA2C,QAA3C;AACD;AACF;;AAED,MAAA,cAAc,CAAC,wBAAf,CAAwC,QAAxC;AAEA,UAAM,eAAe,GAAG,MAAM,CAAC,MAAP,CAAc;AAAC,qBAAa;AAAd,OAAd,EAAwC,IAAxC,CAAxB;AACA,MAAA,cAAc,CAAC,WAAf,CAA2B,eAA3B;AACD;AAED;;;;;;;;;6CAMgC,Q,EAAU;AACxC,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,QAAnC;AACD;AAED;;;;;;;;;gDAMmC,Q,EAAU;AAC3C,MAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC;AACD;AAED;;;;;;;;gCAKmB,I,EAAM;AACvB,UAAI,CAAC,aAAL,EAAmB;AACjB,QAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACA;AACD;;AACD,UAAM,eAAe,GAAG,MAAM,CAAC,MAAP,CACpB;AACE,+BAAuB,mBADzB;AAEE,+BAAuB,mBAFzB;AAGE,wBAAgB;AAHlB,OADoB,EAMpB,IANoB,CAAxB;AAOA,MAAA,kBAAkB,CAAC,WAAnB,CACI,eADJ,EACqB,cAAc,CAAC,gBAAf,EADrB;AAED;AAED;;;;;;;;2CAK8B,I,EAAM;AAClC,MAAA,mBAAmB,GAAG,IAAtB;AACD;AAED;;;;;;;;2CAK8B,K,EAAO;AACnC,MAAA,mBAAmB,GAAG,KAAtB;AACD;AAED;;;;;;;;oCAKuB,gB,EAAkB;AACvC,MAAA,YAAY,GAAG,gBAAf;AACD;AAED;;;;;;;;0CAK6B,c,EAAgB;AAC3C,MAAA,kBAAkB,GAAG,cAArB;AACD;AAED;;;;;;4BAGe;AACb,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB,CAAhB;AACA,MAAA,aAAY,GAAG,KAAf;AACA,MAAA,mBAAmB,GAAG,IAAtB;AACD;AAED;;;;;;;;oCAKuB,M,EAAQ;AAC7B,MAAA,aAAY,GAAG,MAAf;AACD;AAED;;;;;;mCAGsB;AACpB,MAAA,aAAY,GAAG,IAAf;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,UAAS,IAAT,EAAe;AAC5B,QAAA,cAAc,CAAC,WAAf,CAA2B,IAA3B;AACD,OAFD;AAGA,MAAA,MAAM,CAAC,MAAP,GAAgB,CAAhB;AACD;AAED;;;;;;;;gCAKmB;AACjB,aAAO,MAAP;AACD;AAED;;;;;;;6CAIgC;AAC9B,MAAA,cAAc,CAAC,KAAf;AACA,MAAA,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAAT;AACA,MAAA,cAAc,CAAC,YAAf;AACD;AAED;;;;;;;;;uCAM0B;AACxB,UAAI,SAAS,GAAG,aAAhB;;AACA,UAAI,WAAW,IAAI,qBAAU,WAAV,CAAsB,OAAzC,EAAkD;AAChD,QAAA,SAAS,IAAI,UAAb;AACD,OAFD,MAEO,IAAI,WAAW,IAAI,qBAAU,WAAV,CAAsB,OAAzC,EAAkD;AACvD,QAAA,SAAS,IAAI,kBAAb;AACD;;AACD,aAAO,SAAS,GAAG,aAAnB;AACD;AAED;;;;;;;;;;;kCAQqB,M,EAAQ,U,EAAY;AACvC;AACA,UAAM,SAAS,wBAAiB,WAAW,IAAI,qBAAU,WAAV,CAAsB,OAArC,GACvB,kBADuB,GAEvB,WAAW,IAAI,qBAAU,WAAV,CAAsB,OAArC,GAA+C,UAA/C,GAA4D,EAFtD,iDAE+F,MAF/F,uBAAf;AAGA,aAAO,SAAP;AACD;;;;KAGH;;;;AACA,cAAc,CAAC,IAAf;;;;;;;;;;AC5UA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAOA;;AAYA;;;;;;;;AAEA,IAAM,eAAe,GAAG,CACtB,oBADsB,EAEtB,gCAFsB,EAGtB,wCAHsB,EAItB,yCAJsB,EAKtB,gCALsB,EAMtB,qBANsB,CAAxB;AASA;;;;;;;;;;;;;IAYM,mB;;;AACJ;;;;;;;AAOA,+BAAY,cAAZ,EAA4B,iBAA5B,EAA+C,SAA/C,EAA0D,UAA1D,EAAsE;AAAA;;AAAA;;AACpE,SAAK,kBAAL,GAA0B,iBAA1B;AAEA,2CAAuB,cAAvB;AAEA;;AACA,SAAK,8BAAL,GAAsC,IAAtC;AAEA;;AACA,SAAK,YAAL,GACE,cAAc,CAAC,WAAf,IAA8B,qBAAU,WAAV,CAAsB,IADtD;;AAEA,QAAI,CAAC,mBAAmB,CAAC,oBAAzB,EAA+C;AAC7C,MAAA,mBAAmB,CAAC,oBAApB;AACE;AAAuB,WAAK,kBAAL,MACvB,cAAc,CAAC,GAAD,CADS,IAEvB,cAAc,CAAC,GAAD,CAAd,CAAoB,qBAApB,CAFuB,GAGnB,cAAc,CAAC,GAAD,CAAd,CAAoB,qBAApB,CAHmB,GAInB,sCAA0B,KAAK,YAA/B,CALN;AAMD;AAED;;;AACA,SAAK,eAAL,GAAuB,cAAvB;AAEA;;AACA,SAAK,oBAAL,GAA4B,IAAI,2DAAJ,CAC1B,KAAK,YADqB,EAE1B,mBAAmB,CAAC,oBAFM,EAG1B,SAH0B,EAI1B,UAJ0B,EAK1B,cAAc,CAAC,GAAD,CAAd,IAAuB,cAAc,CAAC,GAAD,CAAd,CAAoB,aAApB,CALG,CAA5B;AAQA;;AACA,SAAK,YAAL,GAAoB,8BAAY,eAAhC;AAEA,QAAM,uBAAuB,GAAG,8CAAhC,CAnCoE,CAoCpE;AACA;;AACA;;AACA,SAAK,SAAL,GACE,uBAAuB,IAAI,CAAC,SAA5B,GACI,IAAI,kDAAJ,CAA4B,KAAK,YAAjC,CADJ,GAEI,KAAK,oBAHX;AAKA,SAAK,WAAL,GAAmB,IAAI,uBAAJ,EAAnB;AAEA,SAAK,oBAAL,CAA0B,QAA1B,CAAmC,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAnC;AACA,SAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAxB,EA/CoE,CAiDpE;AACA;;AACA,QAAI,8CAAJ,EAAoC;AAClC,uCAAe,sBAAf,CACE,sCAAoB,eADtB;AAGD,KAJD,MAIO,IAAI,uBAAJ,EAA6B;AAClC,uCAAe,sBAAf,CAAsC,sCAAoB,cAA1D;AACD;;AAED,qCAAe,sBAAf,CACE,mBAAmB,CAAC,oBADtB;;AAGA,qCAAe,WAAf,CAA2B;AACzB,mBAAa,uCAAqB,8BADT;AAEzB,8BAAwB,IAAI,CAAC,GAAL;AAFC,KAA3B;;AAKA,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,UAAA,KAAK;AAAA,aACtC,KAAI,CAAC,mBAAL,CAAyB,KAAzB,CADsC;AAAA,KAAxC;AAGD;AAED;;;;;;;;;;;;iCAQa,mB,EAAqB;AAChC;AACA,UAAI,mBAAJ,EAAyB;AACvB,QAAA,mBAAmB,GAAG,MAAM,CAAC,MAAP,CACpB,EADoB,EAEpB,KAAK,eAFe,EAGpB,mBAHoB,CAAtB;AAKD;;AACD,UAAM,WAAW,GAAG,IAAI,CAAC,GAAL,EAApB;AACA;;AACA,UAAM,YAAY,GAChB,2CACA,4CAA4B,mBAA5B,CAFF;;AAGA,UAAI,YAAJ,EAAkB;AAChB,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,UAAA,mBAAmB,CAAC,qBAApB,CAA0C,cAA1C,EAA0D,YAA1D;;AACA,2CAAe,WAAf,CAA2B;AACzB,yBAAa,uCAAqB,uBADT;AAEzB,qBAAS,kCAAgB;AAFA,WAA3B;;AAIA,UAAA,MAAM,CAAC;AACL,0BAAc,qBAAU,cAAV,CAAyB,eADlC;AAEL,6BAAiB;AAFZ,WAAD,CAAN;AAID,SAVM,CAAP;AAWD;;AAED,UAAM,mBAAmB,GAAG,KAAK,aAAL,CAAmB,mBAAnB,CAA5B;AAEA,MAAA,mBAAmB,CAAC,IAApB,CAAyB,UAAA,QAAQ,EAAI;AACnC,yCAAe,WAAf,CAA2B;AACzB,uBAAa,uCAAqB,uBADT;AAEzB,kCAAwB,WAFC;AAGzB,qCAA2B;AAHF,SAA3B;;AAKA,eAAO,QAAP;AACD,OAPD;AAQA,aAAO,mBAAP;AACD;AAED;;;;;;;;;;;;kCASc,mB,EAAqB;AACjC,UAAI,KAAK,WAAL,CAAiB,YAAjB,CAA8B,mBAA9B,CAAJ,EAAwD;AACtD,eAAO,KAAK,WAAL,CAAiB,YAAjB,CAA8B,mBAA9B,CAAP;AACD;;AACD,UACE,kDACA,CAAC,yBAAyB,CAAC,mBAAD,CAF5B,EAGE;AACA,YAAI,mBAAmB,CAAC,UAApB,IAAkC,CAAtC,EAAyC;AACvC,iBAAO,KAAK,yCAAL,CACL,mBADK,CAAP;AAGD,SAJD,MAIO;AACL;AACA;AACA;AACA;AACA,cAAM,WAAU,GAAG,KAAK,oBAAL,CAA0B,YAA1B,CACjB,mBADiB,CAAnB;;AAGA,cAAM,aAAa,GAAG,KAAK,SAAL,CAAe,YAAf,CAA4B,mBAA5B,CAAtB;;AACA,cACE,sDAAsC,mBAAtC,KACA,CAAC,8CAFH,EAGE;AACA,mBAAO,aAAP;AACD,WAdI,CAeL;AACA;;;AACA,iBAAO,aAAa,CAAC,IAAd,CAAmB;AAAA,mBAAM,WAAN;AAAA,WAAnB,CAAP;AACD;AACF;;AACD,UAAM,UAAU,GAAG,KAAK,oBAAL,CAA0B,YAA1B,CACjB,mBADiB,CAAnB;AAGA,aAAO,UAAP;AACD;AAED;;;;;;;;;;;8DAQ0C,mB,EAAqB;AAC7D,UAAI,cAAc,GAAG,OAAO,CAAC,OAAR,CAAgB;AAAC,kBAAU;AAAX,OAAhB,CAArB;;AACA,UAAI,mBAAmB,CAAC,6BAAxB,EAAuD;AACrD,QAAA,cAAc,GAAG,OAAO,CAAC,OAAR,CAAgB;AAC/B,oBAAU,KADqB;AAE/B,kCAAwB;AAFO,SAAhB,CAAjB;AAID;;AAED,UAAI,aAAa,GAAG,cAApB;;AACA,UACE,0DACE,mBADF,EAEE,qBAAU,UAAV,CAAqB,cAFvB,CADF,EAKE;AACA;AACA;AACA;AACA;AACA;AACA,YAAM;AAAiB;AAAD,UAAuC,IAAI,CAAC,KAAL,CAC3D,IAAI,CAAC,SAAL,CAAe,mBAAf,CAD2D,CAA7D;;AAGA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,gBAAgB,CAAC,qBAAjB,CAAuC,MAA3D,EAAmE,CAAC,EAApE,EAAwE;AACtE,cACE,gBAAgB,CAAC,qBAAjB,CAAuC,CAAvC,EAA0C,IAA1C,IACA,qBAAU,aAAV,CAAwB,IAF1B,EAGE;AACA,YAAA,gBAAgB,CAAC,qBAAjB,CAAuC,CAAvC,EAA0C,UAA1C,CACE,oBADF,IAEI,CAAC,qBAAU,UAAV,CAAqB,cAAtB,CAFJ;AAGD;AACF;;AAED,QAAA,aAAa,GAAG,KAAK,SAAL,CAAe,YAAf,CAA4B,gBAA5B,CAAhB;AACD;;AAED,UAAI,UAAU,GAAG,cAAjB;;AACA,UACE,0DACE,mBADF,EAEE,qBAAU,UAAV,CAAqB,QAFvB,CADF,EAKE;AACA,QAAA,UAAU,GAAG,KAAK,oBAAL,CAA0B,YAA1B,CAAuC,mBAAvC,CAAb;AACD,OA9C4D,CAgD7D;AACA;;;AACA,UAAI,8CAAJ,EAAoC;AAClC,eAAO,aAAa,CAAC,IAAd,CAAmB;AAAA,iBAAM,UAAN;AAAA,SAAnB,CAAP;AACD;;AAED,aAAO,aAAa,CAAC,IAAd,CAAmB,UAAA,YAAY,EAAI;AACxC,YAAI,CAAC,YAAY,IAAI,YAAY,CAAC,QAAD,CAA7B,KAA4C,IAAhD,EAAsD;AACpD,iBAAO,YAAP;AACD;;AACD,eAAO,UAAP;AACD,OALM,CAAP;AAMD;AAED;;;;;;;;;;;;;wCAUoB,kB,EAAoB;AACtC;AACA,UAAM,YAAY,GAChB,2CAA2B,2CAA2B,kBAA3B,CAD7B;;AAEA,UAAI,YAAJ,EAAkB;AAChB,QAAA,mBAAmB,CAAC,qBAApB,CACE,qBADF,EAEE,YAFF;AAIA;AACD;;AACD,WAAK,qBAAL,CAA2B,kBAA3B;;AACA,UACE,kDACA,CAAC,yBAAyB,CAAC,kBAAD,CAF5B,EAGE;AACA,aAAK,SAAL,CAAe,mBAAf,CAAmC,kBAAnC;AACD,OALD,MAKO;AACL;AACA,aAAK,oBAAL,CAA0B,mBAA1B,CAA8C,kBAA9C;AACD;AACF;AAED;;;;;;;;;;;oCAQgB,kB,EAAoB;AAAA;;AAClC,uCAAe,WAAf,CAA2B;AACzB,qBAAa,uCAAqB;AADT,OAA3B;;AAGA,UAAM,YAAY,GAChB,2CAA2B,2CAA2B,kBAA3B,CAD7B;AAEA,WAAK,YAAL,GACE,kBAAkB,IAAI,kBAAkB,CAAC,GAAzC,GACI,8BAAY,qBADhB,GAEI,8BAAY,eAHlB;;AAIA,UAAI,YAAJ,EAAkB;AAChB,aAAK,kBAAL,CACE,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/B,2CAAe,WAAf,CAA2B;AACzB,yBAAa,uCAAqB,yBADT;AAEzB,qBAAS,kCAAgB,eAFA;AAGzB,2BAAe,MAAI,CAAC;AAHK,WAA3B;;AAKA,UAAA,mBAAmB,CAAC,qBAApB,CACE,iBADF,EAEE,YAFF;AAIA,UAAA,MAAM,CAAC;AACL,0BAAc,qBAAU,cAAV,CAAyB,eADlC;AAEL,6BAAiB;AAFZ,WAAD,CAAN;AAID,SAdD,CADF;AAiBA;AACD,OA7BiC,CA+BlC;AACA;AACA;;;AACA,UAAM,gBAAgB,GAAG,oCAAoB,kBAApB,CAAzB;;AACA,UAAI,gBAAJ,EAAsB;AACpB,aAAK,WAAL,CAAiB,eAAjB,CACE,kBADF,EAEE,gBAFF,EAGE,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAHF;AAKA;AACD;;AAED,UAAM,kBAAkB,GAAG,MAAM,CAAC,cAAP,CAAsB,OAAtB,CACzB,qBAAU,0BADe,CAA3B;AAGA,WAAK,8BAAL,GAAsC,IAAI,CAAC,GAAL,EAAtC;AACA,WAAK,qBAAL,CAA2B,kBAA3B,EAhDkC,CAiDlC;AACA;AACA;;AACA,UACG,kDAAkC,kBAAkB,KAAK,MAA1D,IACA,yBAAyB,CAAC,kBAAD,CAF3B,EAGE;AACA,aAAK,oBAAL,CAA0B,eAA1B,CAA0C,kBAA1C;AACD,OALD,MAKO;AACL,aAAK,SAAL,CAAe,eAAf,CAA+B,kBAA/B;AACD;AACF;AAED;;;;;;;;;;;AAWA;;;;;;;mCAO2B;AAAA,UAAd,OAAc,uEAAJ,EAAI;AACzB,UAAM,MAAM,GAAG,IAAf,CADyB,CAEzB;;AACA,UAAM,WAAW,GAAG,IAAI,CAAC,GAAL,EAApB;;AACA,uCAAe,WAAf,CAA2B;AACzB,qBAAa,uCAAqB,iBADT;AAEzB,gCAAwB;AAFC,OAA3B;;AAIA,aAAO,MAAP;AACD;AAED;;;;;;;wCAIoB,C,EAAG;AACrB,UAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B;AACA,YAAI,CAAC,CAAC,IAAF,CAAO,MAAP,MAAmB,gBAAvB,EAAyC;AACvC,2CAAe,WAAf,CAA2B,CAAC,CAAC,IAAF,CAAO,MAAP,CAA3B;AACD;AACF;AACF;AAED;;;;;;;yCAIqB;AACnB,aAAO,eAAe,CAAC,OAAhB,CAAwB,MAAM,CAAC,QAAP,CAAgB,QAAxC,KAAqD,CAAC,CAA7D;AACD;AAED;;;;;;;;;8BAMU,Q,EAAU;AAAA;;AAClB,MAAA,QAAQ,CACL,IADH,CACQ,UAAA,MAAM,EAAI;AACd,yCAAe,WAAf,CAA2B;AACzB,uBAAa,uCAAqB,yBADT;AAEzB,kCAAwB,MAAI,CAAC,8BAFJ;AAGzB,yBAAe,MAAI,CAAC;AAHK,SAA3B;AAKD,OAPH,WAQS,UAAA,MAAM,EAAI;AACf,YAAI,MAAM,CAAC,WAAD,CAAV,EAAyB;AACvB,2CAAe,WAAf,CAA2B;AACzB,yBAAa,uCAAqB,yBADT;AAEzB;AAAS;AAAiC,YAAA,MAAM,CAAC,WAAD,CAFvB;AAGzB,2BAAe,MAAI,CAAC;AAHK,WAA3B;AAKD,SAND,MAMO;AACL;AACA,2CAAe,WAAf,CAA2B;AACzB,yBAAa,uCAAqB,yBADT;AAEzB,qBAAS,kCAAgB,YAFA;AAGzB,2BAAe,MAAI,CAAC;AAHK,WAA3B;AAKD;AACF,OAvBH;AAwBA,WAAK,kBAAL,CAAwB,QAAxB;AACD;AAED;;;;;;;;0CAKsB,kB,EAAoB;AACxC,UAAM,aAAa,GAAG;AACpB,uBAAe,IAAI,CAAC,GAAL,EADK;AAEpB,+BAAuB,mBAAmB,CAAC;AAFvB,OAAtB;AAIA,MAAA,kBAAkB,CAAC,GAAD,CAAlB,GAA0B,kBAAkB,CAAC,GAAD,CAAlB,GACtB,MAAM,CAAC,MAAP,CAAc,aAAd,EAA6B,kBAAkB,CAAC,GAAD,CAA/C,CADsB,GAEtB,aAFJ;AAGA,aAAO,kBAAP;AACD;;;0CA3F4B,O,EAAS,Y,EAAc;AAClD,MAAA,OAAO,CAAC,KAAR,CAAc,wBAAwB,OAAxB,GAAkC,KAAlC,GAA0C,YAAxD;AACD;;;;;AA4FH;;;;AACA,mBAAmB,CAAC,oBAApB;AAEA;;;;;;;AAMA,SAAS,yBAAT,CAAmC,OAAnC,EAA4C;AAC1C,SAAO,CAAC,OAAO,CAAC,GAAD,CAAP,IAAgB,OAAO,CAAC,GAAD,CAAP,CAAa,eAAb,CAAjB,MAAoD,IAA3D;AACD;;;;;;;;;;;;;;;;AC9gBD;;;;;;;;;;;;;;;;;AAiBA;;;;IAIM,+B;;;;;;;;;;AACJ;;;;;;;iCAOa,mB,EAAqB,CAAE;AAEpC;;;;;;;;;;;wCAQoB,kB,EAAoB,CAAE;AAE1C;;;;;;;;;;oCAOgB,kB,EAAoB,CAAE;AAEtC;;;;;;6BAGS,Q,EAAU,CAAE;;;;;;;;;;;;;;;;ACjCvB;;AACA;;;;;;;;AAEA;;;;;IAKM,uB;;;AACJ;;;AAGA,mCAAY,WAAZ,EAAyB;AAAA;;AACvB,SAAK,YAAL,GAAoB,WAApB;AAEA;;AACA,SAAK,SAAL,GAAiB,IAAjB;AACD;AAED;;;;;6BACS,Q,EAAU;AACjB,WAAK,SAAL,GAAiB,QAAjB;AACD;AAED;;;;iCACa,mB,EAAqB;AAChC;AACA,UAAM,cAAc,GAAG,KAAK,qBAAL,CAA2B,mBAA3B,CAAvB;AACA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAA,cAAc,CAAC,cAAf,GACK,IADL,CACU,UAAA,MAAM,EAAI;AACd,UAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,CACI,qBAAU,0BADd,EAC0C,MAAM,CAAC,QAAP,EAD1C;AAEA,cAAM,QAAQ,GAAG;AAAC,sBAAU;AAAX,WAAjB;;AACA,cAAI,mBAAmB,CAAC,UAApB,IAAkC,CAAlC,IACA,mBAAmB,CAAC,6BADxB,EACuD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,YAAA,QAAQ,CAAC,sBAAD,CAAR,GAAmC,MAAnC;AACD;;AACD,UAAA,OAAO,CAAC,QAAD,CAAP;AACD,SAhBL,WAiBW,UAAS,GAAT,EAAc;AACnB,cAAI,MAAM,CAAC,cAAP,CAAsB,OAAtB,CACI,qBAAU,0BADd,CAAJ,EAC+C;AAC7C,YAAA,OAAO,CAAC;AACN,wBAAU,MAAM,CAAC,cAAP,CAAsB,OAAtB,CACI,qBAAU,0BADd,KAC6C;AAFjD,aAAD,CAAP;AAID,WAND,MAMO;AACL,YAAA,OAAO,CAAC;AAAC,wBAAU;AAAX,aAAD,CAAP;AACD;AACF,SA3BL;AA4BD,OA7BM,CAAP;AA8BD;AAED;;;;wCACoB,kB,EAAoB;AACtC;AACA;AACA,WAAK,qBAAL,CACI,kBADJ,EACwB,KAAK,YAD7B,EAEI,kBAAkB,CAAC,eAAnB,CAAmC,YAFvC,EAGI,kBAAkB,CAAC,eAAnB,CAAmC,UAHvC;AAID;AAED;;;;oCACgB,kB,EAAoB;AAClC,WAAK,qCAAL,CAA2C,kBAA3C;AACD;AAED;;;;;;;;;;;;;;0CAWsB,O,EAAS,W,EAAa,Y,EAAc,U,EAAY;AACpE,UAAI,IAAI,GAAG,EAAX;;AACA,UAAI,OAAJ,EAAa;AACX,QAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,OAAf,CAAX,CAAP;AACD,OAJmE,CAMpE;;;AACA,UAAI,CAAC,IAAI,CAAC,YAAD,CAAT,EAAyB;AACvB,QAAA,IAAI,CAAC,YAAD,CAAJ,GAAqB,CAArB;AACD,OATmE,CAWpE;;;AACA,UAAI,IAAI,CAAC,KAAD,CAAR,EAAiB;AACf,QAAA,IAAI,CAAC,uBAAD,CAAJ,GAAgC,CAAC,qBAAU,aAAV,CAAwB,IAAzB,CAAhC;AACD;;AAED,UAAI,WAAW,IAAI,WAAW,IAAI,qBAAU,WAAV,CAAsB,IAAxD,EAA8D;AAC5D,QAAA,IAAI,CAAC,aAAD,CAAJ,GAAsB,WAAtB;AACD;;AAED,UAAM,oBAAoB,GAAG,CAAC;AAC5B,4BAAoB,CAAC,wBAAD,CADQ;AAE5B,gBAAQ;AAFoB,OAAD,CAA7B;AAKA,UAAM,OAAO,GAAG;AACd,iBAAS;AACP,mBAAS,uBADF;AAEP,oBAAU;AACR;AACA;AACA;AACA;AACA,wBAAY,YAAY,IAAI,KALpB;AAMR,qBAAS,UAAU,IAAI;AANf;AAFH;AADK,OAAhB;AAcA,aAAO,IAAI,cAAJ,CAAmB,oBAAnB,EAAyC,OAAzC,CAAP;AACD;AAED;;;;;;;;0DAKsC,kB,EAAoB;AACxD,UAAM,YAAY,GAAI,kBAAkB,CAAC,eAAnB,IACA,kBAAkB,CAAC,eAAnB,CAAmC,YADpC,IAEjB,SAFJ;AAGA,UAAM,UAAU,GAAI,kBAAkB,CAAC,eAAnB,IACA,kBAAkB,CAAC,eAAnB,CAAmC,UADpC,IAEf,SAFJ;AAGA,UAAM,cAAc,GAAG,KAAK,qBAAL,CACnB,kBADmB,EACC,KAAK,YADN,EACoB,YADpB,EACkC,UADlC,CAAvB;AAEA,WAAK,SAAL;AACI;AACC,MAAA,cAAc,CAAC,IAAf,GACK,IADL;AAEQ;;;;AAIA,gBAAC,eAAD,EAAqB;AACnB;AACA,QAAA,eAAe,CAAC,QAAhB,CAAyB,SAAzB;AACA,eAAO,eAAe,CAAC,OAAvB;AACD,OAVT,WAWW,UAAS,GAAT,EAAc;AACnB,QAAA,GAAG,CAAC,YAAD,CAAH,GAAoB,qBAAU,cAAV,CAAyB,QAA7C;AACA,cAAM,GAAN;AACD,OAdL,CAFL;AAiBD;;;;;;;;;;;;;;;;AClKH;;AACA;;AACA;;AACA;;AAKA;;AAKA;;AACA;;;;;;;;AAEA,IAAM,qBAAqB,GAAG,MAA9B;AACA,IAAM,2BAA2B,GAAG,GAApC;AACA,IAAM,6BAA6B,GAAG,GAAtC;AACA,IAAM,+BAA+B,oBAAa,6BAAb,OAArC;AACA,IAAM,YAAY,GAAG,SAArB;AAEA;;;;;;AAKA,IAAM,gBAAgB,GAAG;AACvB,EAAA,MAAM,EAAE,QADe;AAEvB,EAAA,OAAO,EAAE,SAFc;AAGvB,EAAA,MAAM,EAAE;AAHe,CAAzB;AAMA;;;;;;;;;AAQA,IAAI,aAAJ;AAEA;;;;;;IAKM,2B;;;AACJ;;;;;;;;AAQA,uCACE,WADF,EAEE,mBAFF,EAGE,SAHF,EAIE,UAJF,EAKE,WALF,EAME;AAAA;;AACA,SAAK,YAAL,GAAoB,WAApB;AACA;;AAEA;;AACA,SAAK,UAAL,GAAkB,UAAU,IAAI,IAAI,4BAAJ,CAAkB,MAAlB,CAAhC;AACA;;AACA,SAAK,SAAL,GAAiB,IAAI,kBAAJ,CAAa,MAAM,CAAC,QAApB,CAAjB;AACA;;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA;;;;;;;;AAOA,SAAK,kBAAL,GAA0B,IAA1B;AACA;;AACA,SAAK,qBAAL,GAA6B,KAA7B;AACA;;AACA,SAAK,KAAL,GAAa,IAAb;AACA;;AACA,SAAK,uBAAL,GAA+B,IAA/B;AACA;;AACA,SAAK,oBAAL,GAA4B,mBAA5B;AACA;;AACA,SAAK,YAAL,GAAoB,WAAW,IAAI,IAAnC;AAEA;;;;AAGA,SAAK,mBAAL,GAA2B,IAA3B,CAhCA,CAkCA;;AACA,QAAI,IAAJ,EAAU;AACR,8CAAiB,qBAAU,YAA3B;;AACA,UAAI,IAAJ,EAAU;AACR,gDAAiB,qBAAU,mBAA3B;AACD;AACF;AACF;AAED;;;;;6BACS,Q,EAAU;AACjB,UAAI,KAAK,SAAT,EAAoB;AAClB;AACD;;AACD,WAAK,SAAL,GAAiB,QAAjB;AACA,WAAK,UAAL,CAAgB,QAAhB,CACE,qBADF,EAEE,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAFF;AAID;AAED;;;;;;;sCAIkB,I,EAAM;AAAA;;AACtB;AACA,WAAK,SAAL,CAAe,IAAf,GAFsB,CAGtB;;AACA,WAAK,SAAL,CACE,IAAI,CAAC,YAAL,GAAoB,IAApB,CACE,UAAA,MAAM,EAAI;AACR;AACA,YAAI,MAAM,CAAC,MAAP,IAAiB,KAAI,CAAC,UAAL,EAArB,EAAwC;AACtC,gBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,YAAM,IAAI;AAAG;AAA6B,QAAA,MAAM,CAAC,IAAjD;;AACA,YAAI,IAAI,CAAC,+BAAD,CAAR,EAA2C;AACzC,2CAAe,sBAAf,CAAsC,sCAAoB,QAA1D;;AACA,iBAAO,KAAI,CAAC,sBAAL,CACL,IAAI,CAAC,+BAAD,CADC,EAEL,IAFK,CAEA,UAAA,YAAY,EAAI;AACrB;AACA,gBAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,IAAlB,CAAd;AACA,mBAAO,KAAK,CAAC,+BAAD,CAAZ;AACA,mBAAO,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,YAArB,CAAP;AACD,WAPM,CAAP;AAQD,SAhBO,CAiBR;;;AACA,YAAI,CAAC,MAAM,CAAC,cAAR,IAA0B,CAAC,MAAM,CAAC,aAAtC,EAAqD;AACnD,gBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,eAAO,IAAP;AACD,OAvBH,EAwBE,UAAA,KAAK,EAAI;AACP;AACA,YAAM,aAAa,GAAG,KAAK,CAAC,SAAD,CAA3B;AACA,YAAI,aAAa,GAAG,KAAK,CAAC,SAAD,CAAzB;;AACA,YAAI;AACF;AACA;AACA,UAAA,aAAa,GAAG,IAAI,CAAC,KAAL,CACd,aAAa,CAAC,SAAd,CAAwB,YAAY,CAAC,MAArC,CADc,CAAhB;AAGD,SAND,CAME,OAAO,CAAP,EAAU,CAAE;;AACd,YACE,aAAa,CAAC,YAAD,CAAb,IACA,CAAC,iBAAD,EAAoB,wBAApB,EAA8C,OAA9C,CACE,aAAa,CAAC,YAAD,CADf,KAEK,CAAC,CAJR,EAKE;AACA,UAAA,aAAa,GAAG;AACd,0BAAc;AADA,WAAhB;AAGD;;AACD,YAAI,aAAa,IAAI,YAArB,EAAmC;AACjC,UAAA,aAAa,GAAG;AACd,0BAAc;AADA,WAAhB;AAGD;;AACD,eAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AACD,OAnDH,CADF;AAuDD;AAED;;;;;;;;2CAKuB,6B,EAA+B;AAAA;;AACpD;AACA;AACA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAM,GAAG,GAAG,MAAI,CAAC,iBAAL,EAAZ;;AACA,YAAM,GAAG,GAAG,IAAI,cAAJ,EAAZ;AACA,QAAA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,GAAjB,EAAsB,IAAtB;;AACA,YAAI,qBAAqB,GAAzB,EAA8B;AAC5B;AACA;AACA,UAAA,GAAG,CAAC,eAAJ,GAAsB,IAAtB;AACD;;AAED,QAAA,GAAG,CAAC,kBAAJ,GAAyB,YAAM;AAC7B,cAAI,GAAG,CAAC,UAAJ;AAAiB;AAAsB,WAA3C,EAA8C;AAC5C;AACD;;AACD,cAAI,GAAG,CAAC,MAAJ,GAAa,GAAb,IAAoB,GAAG,CAAC,MAAJ,GAAa,GAArC,EAA0C;AACxC,YAAA,GAAG,CAAC,kBAAJ,GAAyB,IAAzB;AACA,YAAA,MAAM,CAAC,IAAI,KAAJ,+BAAiC,GAAG,CAAC,MAArC,EAAD,CAAN;AACA;AACD;;AACD,cAAI,GAAG,CAAC,UAAJ;AAAkB;AAAe,WAArC,EAAwC;AACtC,gBAAI;AACF,cAAA,OAAO,CAAC,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,YAAf,CAAD,CAAP;AACD,aAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,cAAA,MAAM,CAAC,CAAD,CAAN;AACD;AACF;AACF,SAjBD;;AAkBA,QAAA,GAAG,CAAC,OAAJ,GAAc,YAAM;AAClB,UAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,iBAAV,CAAD,CAAN;AACD,SAFD;;AAGA,QAAA,GAAG,CAAC,OAAJ,GAAc,YAAM;AAClB,UAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,iBAAV,CAAD,CAAN;AACD,SAFD,CA/BsC,CAmCtC;;;AACA,QAAA,GAAG,CAAC,IAAJ,CAAS,6BAAT;AACD,OArCM,CAAP;AAsCD;AAED;;;;iCACa,mB,EAAqB;AAAA;;AAChC,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAI,sDAAsC,mBAAtC,CAAJ,EAAgE;AAC9D,UAAA,OAAO,CAAC;AAAC,sBAAU;AAAX,WAAD,CAAP;AACA;AACD;;AACD,YAAM,SAAS,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAnC;AACA,YAAM,QAAQ,GACZ,SAAS,CAAC,OAAV,CAAkB,MAAlB,IAA4B,CAA5B,IACA,SAAS,CAAC,OAAV,CAAkB,gBAAgB,CAAC,MAAnC,IAA6C,CAF/C,CANsC,CAStC;;AACA,YAAI,QAAQ,IAAI,CAAC,IAAjB,EAAuB;AACrB,UAAA,OAAO,CAAC;AAAC,sBAAU;AAAX,WAAD,CAAP;AACA;AACD;;AACD,YAAM,YAAY,GAAG,SAAS,CAAC,OAAV,CAAkB,OAAlB,IAA6B,CAAlD;;AACA,YAAI,YAAJ,EAAkB;AAChB,UAAA,OAAO,CAAC;AAAC,sBAAU;AAAX,WAAD,CAAP;AACA;AACD;;AACD,YAAM,WAAW,GACf,SAAS,CAAC,OAAV,CAAkB,gBAAgB,CAAC,MAAnC,IAA6C,CAA7C,IACA,SAAS,CAAC,OAAV,CAAkB,gBAAgB,CAAC,OAAnC,IAA8C,CAD9C,IAEA,SAAS,CAAC,OAAV,CAAkB,gBAAgB,CAAC,MAAnC,IAA6C,CAH/C;;AAIA,YACE,WAAW,IACX,mBAAmB,CAAC,UAApB,IAAkC,CADlC,IAEA,mBAAmB,CAAC,6BAHtB,EAIE;AACA,UAAA,mBAAmB,CAAC,WAApB,GAAkC,MAAI,CAAC,YAAvC;;AACA,2CAAe,sBAAf,CACE,mBADF,EAEE,uCAAqB,eAFvB,EAGE,sBAHF,EAIE,UAAS,KAAT,EAAgB;AACd,gBAAM,QAAQ,GAAG;AACf,wBAAU;AADK,aAAjB;;AAGA,gBAAI,mBAAmB,CAAC,6BAAxB,EAAuD;AACrD,cAAA,QAAQ,CAAC,sBAAD,CAAR,GACE,KAAK,CAAC,IAAN,CAAW,sBAAX,KAAsC,cADxC;AAED;;AACD,YAAA,OAAO,CAAC,QAAD,CAAP;AACD,WAbH;AAeD,SArBD,MAqBO;AACL,UAAA,OAAO,CAAC;AAAC,sBAAU;AAAX,WAAD,CAAP;AACD;AACF,OA/CM,CAAP;AAgDD;AAED;;;;wCACoB,kB,EAAoB;AACtC;AACA,UAAI,CAAC,IAAL,EAAW;AACT;AACD;;AACD,UAAM,iBAAiB,GAAG,KAAK,aAAL,CAAmB,kBAAnB,CAA1B;AACA,UAAM,kBAAkB,GAAG,KAAK,WAAL,CACzB,iBAAiB,CAAC,WAAD,CADQ,EAEzB,iBAAiB,CAAC,QAAD,CAFQ,EAGzB,kBAHyB,CAA3B;AAKA,WAAK,kBAAL,GAA0B;AACxB,qBAAa,iBAAiB,CAAC,WAAD,CADN;AAExB,kBAAU,iBAAiB,CAAC,QAAD,CAFH;AAGxB,mBAAW,kBAHa;AAIxB,uBAAe;AAJS,OAA1B;AAMD;AAED;;;;oCACgB,kB,EAAoB;AAAA;;AAClC,UAAI,CAAC,kBAAkB,CAAC,GAAxB,EAA6B;AAC3B;AACA,YAAI,CAAC,kBAAkB,CAAC,UAAxB,EAAoC;AAClC,UAAA,kBAAkB,CAAC,UAAnB,GAAgC,CAAhC;AACD;AACF;;AACD,MAAA,kBAAkB,CAAC,WAAnB,GAAiC,KAAK,YAAtC;;AACA,UAAI,IAAJ,EAAU;AACR,yCAAe,sBAAf,CAAsC,sCAAoB,MAA1D,EADQ,CAER;;;AACA,YAAI,iBAAJ;AACA,YAAI,kBAAJ;;AACA,YAAI,KAAK,kBAAT,EAA6B;AAC3B;AACA,UAAA,iBAAiB,GAAG,KAAK,kBAAzB;AACA,UAAA,kBAAkB,GAAG,KAAK,kBAAL,CAAwB,aAAxB,CAArB;AACA,eAAK,kBAAL,GAA0B,IAA1B;AACD,SALD,MAKO;AACL,UAAA,iBAAiB,GAAG,KAAK,aAAL,CAAmB,kBAAnB,CAApB;AACA,UAAA,kBAAkB,GAAG,KAAK,WAAL,CACnB,iBAAiB,CAAC,WAAD,CADE,EAEnB,iBAAiB,CAAC,QAAD,CAFE,EAGnB,kBAHmB,CAArB;AAKD;;AACD,aAAK,oCAAL,CACE,iBAAiB,CAAC,WAAD,CADnB,EAEE,iBAAiB,CAAC,QAAD,CAFnB,EAGE,kBAHF;AAKA,QAAA,OAAO,CAAC,SAAR,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B;;AACA,YAAM,UAAU,GAAG,SAAb,UAAa,CAAA,CAAC,EAAI;AACtB,UAAA,CAAC,CAAC,cAAF;;AACA,UAAA,MAAI,CAAC,kBAAL,CAAwB,iBAAxB;;AACA,UAAA,MAAM,CAAC,mBAAP,CAA2B,UAA3B,EAAuC,UAAvC;AACD,SAJD;;AAKA,QAAA,MAAM,CAAC,gBAAP,CAAwB,UAAxB,EAAoC,UAApC;AACA,YAAM,cAAc,GAAG,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAI;AAC5C,UAAA,MAAI,CAAC,uBAAL,GAA+B,OAA/B;AACD,SAFsB,CAAvB;AAGA,aAAK,SAAL,CAAe,OAAO,CAAC,IAAR,CAAa,CAAC,kBAAD,EAAqB,cAArB,CAAb,CAAf;AACA;AACD;;AACD,uCAAe,sBAAf,CACE,kBAAkB,CAAC,eAAD,CAAlB,GACI,sCAAoB,QADxB,GAEI,sCAAoB,KAH1B;;AAKA,UAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,IAAhB,CACb,qBADa,EAEb,KAAK,kBAAL,EAFa,EAGb,KAAK,cAAL,CAAoB,kBAApB,CAHa,EAIb,kBAJa,EAKb;AAAC,iBAAS,GAAV;AAAe,kBAAU;AAAzB,OALa,CAAf;AAOA,WAAK,SAAL,CAAe,IAAf,CAAoB,MAAM,IAAI,MAAM,CAAC,SAArC;AACD;AAED;;;;;;;;;;mCAOe,kB,EAAoB;AACjC,aAAO,kBAAkB,CAAC,eAAD,CAAlB,GAAsC,MAAtC,GAA+C,aAAtD;AACD;AAED;;;;;;;;;iCAMa;AACX,UAAI,KAAK,YAAL,IAAqB,qBAAU,WAAV,CAAsB,KAA/C,EAAsD;AACpD,eAAO,EAAP;AACD;;AAED,UAAI,UAAJ;;AACA,UAAI,KAAK,YAAL,IAAqB,qBAAU,WAAV,CAAsB,OAA/C,EAAwD;AACtD,QAAA,UAAU,GAAG,qBAAb;AACD,OAFD,MAEO,IAAI,KAAK,YAAL,IAAqB,qBAAU,WAAV,CAAsB,OAA/C,EAAwD;AAC7D,QAAA,UAAU,GAAG,aAAb;AACD,OAFM,MAEA;AACL,QAAA,UAAU,GAAG,KAAb;AACD;;AACD,aAAO,aAAa,UAAb,GAA0B,aAAjC;AACD;AAED;;;;;;;;;mCAMe;AACb,aAAO,KAAK,UAAL,KAAoB,OAA3B;AACD;AAED;;;;;;;;;wCAMoB;AAClB,UAAI,GAAG,GAAG,KAAK,YAAL,KAAsB,uBAAhC;;AACA,UAAI,KAAK,YAAT,EAAuB;AACrB,QAAA,GAAG,IAAI,SAAS,kBAAkB,CAAC,KAAK,YAAN,CAAlC;AACD;;AACD,aAAO,GAAP;AACD;AAED;;;;;;;;;yCAMqB;AACnB;AACA;AACA;AACA,UAAI,KAAK,YAAL,IAAqB,qBAAU,WAAV,CAAsB,GAA/C,EAAoD;AAClD;AACA;AACA,eAAO,SAAP;AACD;;AACD,aAAO,KAAK,YAAL,KAAsB,SAA7B;AACD;AAED;;;;;;;;;;iCAOa,W,EAAa,M,EAAQ;AAChC;AACA;AACA,UAAI,SAAS,uDAAgD,MAAhD,CAAb;;AACA,UACE,WAAW,IAAI,qBAAU,WAAV,CAAsB,OAArC,IACA,WAAW,IAAI,qBAAU,WAAV,CAAsB,OAFvC,EAGE;AACA,QAAA,SAAS,uIAAgI,MAAhI,CAAT;AACD;;AACD,aAAO,SAAP;AACD;AAED;;;;;;;;;;8CAO0B,S,EAAW,M,EAAQ;AAC3C,UAAM,eAAe,GAAG,SAAS,2BAAT,GAAuC,YAA/D;AACA,WAAK,cAAL,CAAoB,MAApB,EAA4B,eAA5B;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB,KAAhB,CAH2C,CAI3C;;AACA,MAAA,UAAU,CAAC,YAAM;AACf,YAAI,SAAS,CAAC,UAAd,EAA0B;AACxB,UAAA,SAAS,CAAC,UAAV,CAAqB,WAArB,CAAiC,SAAjC;AACD;AACF,OAJS,EAIP,2BAJO,CAAV;AAKD;AAED;;;;;;;;kCAKc,kB,EAAoB;AAChC,UAAM,iBAAiB,GAAG,oCACxB,KAAK,kCAAL,CAAwC,kBAAxC,IACI,qBAAU,yBADd,GAEI,qBAAU,kBAHU,CAA1B;AAKA,UAAM,MAAM,GAAG,iBAAiB,CAAC,QAAD,CAAhC;AACA,UAAM,SAAS,GAAG,iBAAiB,CAAC,WAAD,CAAnC;AACA,MAAA,SAAS,CAAC,gBAAV,CACE,OADF,EAEE,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,EAAoC,iBAApC,CAFF,EARgC,CAYhC;;AACA,MAAA,SAAS,CAAC,KAAV,CAAgB,OAAhB,GAA0B,MAA1B;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,OAAb,GAAuB,MAAvB;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB,KAAhB;AACA,UAAM,eAAe,GACnB,SAAS,6BAAT,GAAyC,YAD3C;AAEA,WAAK,cAAL,CAAoB,MAApB,EAA4B,eAA5B;AACA,WAAK,qBAAL,GAA6B,KAA7B;AACA,aAAO,iBAAP;AACD;AAED;;;;;;;;uCAKmB,iB,EAAmB;AACpC,WAAK,cAAL,CAAoB,iBAApB;AACD;AAED;;;;;;;;;wCAMoB,iB,EAAmB;AACrC,UAAI,iBAAiB,CAAC,WAAD,CAAjB,CAA+B,UAAnC,EAA+C;AAC7C;AACA,QAAA,OAAO,CAAC,IAAR;AACD;AACF;AAED;;;;;;;mCAIe,iB,EAAmB;AAChC;AACA,UAAI,iBAAiB,CAAC,WAAD,CAAjB,CAA+B,UAAnC,EAA+C;AAC7C;AACA;AACA;AACA,aAAK,uBAAL,CAA6B,OAAO,CAAC,MAAR,CAAe;AAAC,uBAAa;AAAd,SAAf,CAA7B;AACA,aAAK,yBAAL,CACE,iBAAiB,CAAC,WAAD,CADnB,EAEE,iBAAiB,CAAC,QAAD,CAFnB;AAIA,aAAK,KAAL,IAAc,KAAK,KAAL,CAAW,UAAX,EAAd;AACD;AACF;AAED;;;;;;;;uDAKmC,kB,EAAoB;AACrD,aACE,QACA,kBAAkB,CAAC,GAAD,CADlB,IAEA,kBAAkB,CAAC,GAAD,CAAlB,CAAwB,qBAH1B;AAKD;AAED;;;;;;;;;yDAMqC,S,EAAW,M,EAAQ,kB,EAAoB;AAAA;;AAC1E,MAAA,SAAS,CAAC,KAAV,CAAgB,OAAhB,GAA0B,OAA1B;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,OAAb,GAAuB,OAAvB;AACA,MAAA,UAAU,CAAC,YAAM;AACf;AACA;AACA,QAAA,MAAM,CAAC,MAAP,GAAgB,OAAhB;;AACA,YAAI,MAAI,CAAC,kCAAL,CAAwC,kBAAxC,CAAJ,EAAiE;AAC/D,UAAA,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,qBAAU,6BAA/B;AACD,SANc,CAOf;AACA;;;AACA,QAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAAC,qBAAL,GAA6B,IAA7B,CADe,CAEf;;AACA,cAAI,MAAI,CAAC,mBAAT,EAA8B;AAC5B,YAAA,MAAI,CAAC,cAAL,CAAoB,MAApB,EAA4B,MAAI,CAAC,mBAAL,CAAyB,YAAzB,CAA5B;;AACA,YAAA,MAAM,CAAC,MAAP,GAAgB,MAAI,CAAC,mBAAL,CAAyB,QAAzB,CAAhB;AACA,YAAA,MAAI,CAAC,mBAAL,GAA2B,IAA3B;AACD;AACF,SARS,EAQP,6BARO,CAAV;AASD,OAlBS,EAkBP,CAlBO,CAAV;AAmBD;AAED;;;;;;;;mCAKe,M,EAAQ,e,EAAiB;AACtC,MAAA,MAAM,CAAC,KAAP,CAAa,WAAb,CAAyB,YAAzB,EAAuC,eAAvC,EADsC,CAEtC;;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,WAAb,CAAyB,oBAAzB,EAA+C,eAA/C;AACD;AAED;;;;;;;;;;;;gCASY,S,EAAW,M,EAAQ,kB,EAAoB;AAAA;;AACjD,UAAI,CAAC,kBAAkB,CAAC,GAAxB,EAA6B;AAC3B,YAAI,CAAC,kBAAkB,CAAC,UAAxB,EAAoC;AAClC,UAAA,kBAAkB,CAAC,UAAnB,GAAgC,CAAhC;AACD;AACF;;AACD,MAAA,kBAAkB,CAAC,WAAnB,GAAiC,KAAK,YAAtC;AACA,UAAI,mBAAJ;AACA,UAAM,UAAU,GAAG,KAAK,YAAL,CACjB,KAAK,YADY,EAEjB,MAAM,CAAC,QAAP,CAAgB,MAFC,CAAnB;AAIA,aAAO,KAAK,UAAL,CACJ,UADI,CACO,MADP,EACe,UADf,EAC2B,kBAD3B,EAEJ,IAFI,CAEC,UAAA,IAAI,EAAI;AACZ;AACA,QAAA,MAAI,CAAC,KAAL,GAAa,IAAb;AACA,QAAA,IAAI,CAAC,SAAL,CAAe,UAAA,OAAO,EAAI;AACxB,cAAI,OAAO,CAAC,MAAD,CAAP,KAAoB,QAApB,IAAgC,CAAC,MAAI,CAAC,qBAA1C,EAAiE;AAC/D;AACA,YAAA,MAAI,CAAC,mBAAL,GAA2B;AACzB,wBAAU,OAAO,CAAC,QAAD,CADQ;AAEzB,4BAAc,OAAO,CAAC,YAAD;AAFI,aAA3B;AAIA;AACD,WARuB,CASxB;;;AACA,cAAI,CAAC,mBAAL,EAA0B;AACxB,YAAA,mBAAmB,GAAG,IAAI,CAAC,GAAL,EAAtB;AACD;;AACD,cACE,IAAI,CAAC,GAAL,KACA,mBAAmB,GAAG,6BAFxB,EAGE;AACA,YAAA,MAAI,CAAC,cAAL,CACE,MADF,EAEE,OAAO,CAAC,YAAD,CAAP,GAAwB,IAAxB,GAA+B,+BAFjC;AAID,WARD,MAQO;AACL,YAAA,MAAI,CAAC,cAAL,CAAoB,MAApB,EAA4B,OAAO,CAAC,YAAD,CAAnC;AACD;;AACD,UAAA,MAAM,CAAC,MAAP,GAAgB,OAAO,CAAC,QAAD,CAAvB;AACD,SAzBD;AA0BA;AAAO;AAAkC,UAAA,IAAI,CAAC,YAAL;AAAzC;AACD,OAhCI,EAiCJ,IAjCI;AAkCH;;;;AAIA,gBAAA,MAAM,EAAI;AACR,QAAA,MAAI,CAAC,yBAAL,CAA+B,SAA/B,EAA0C,MAA1C,EADQ,CAER;;;AACA,QAAA,OAAO,CAAC,IAAR;AACA,YAAM,IAAI;AAAG;AAA6B,QAAA,MAAM,CAAC,MAAD,CAAhD;AACA,eAAO,IAAP;AACD,OA5CE,EA6CH,UAAA,KAAK,EAAI;AACP,QAAA,MAAI,CAAC,yBAAL,CAA+B,SAA/B,EAA0C,MAA1C,EADO,CAEP;;;AACA,QAAA,OAAO,CAAC,IAAR;AACA,eAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD,OAlDE,CAAP;AAoDD;;;;;;;;;;;;;;;;;;;;;;AClrBH;;;;;;;;;;;;;;;;;AAiBA;;;;IAIM,kB;;;AACJ,8BAAY,MAAZ,EAAoB;AAAA;;AAClB;AACA,SAAK,OAAL,GAAe,MAAf;AACD;AAED;;;;;;;;;;;gCAOY,O,EAAS,Y,EAAc;AACjC,WAAK,OAAL,CAAa,WAAb,CAAyB,OAAzB,EAAkC,YAAlC;AACD;;;;;;;;;;;;;;;;ACnBH;;AACA;;AACA;;;;;;;;IAEM,U;;;AACJ,wBAAc;AAAA;AAAE;AAEhB;;;;;;;;;;;iCAOa,O,EAAS;AACpB,aAAO,CAAC,CAAC,oCAAoB,OAApB,CAAT;AACD;AAED;;;;;;;;;;;iCAQa,O,EAAS;AACpB;AACA;AACA,UAAI,oCAAoB,OAApB,CAAJ,EAAkC;AAChC,YAAI,OAAO,CAAC,6BAAZ,EAA2C;AACzC,iBAAO,OAAO,CAAC,OAAR,CAAgB;AAAC,sBAAU,IAAX;AAAiB,oCAAwB;AAAzC,WAAhB,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,OAAO,CAAC,OAAR,CAAgB;AAAC,sBAAU;AAAX,WAAhB,CAAP;AACD;AACF;;AACD,YAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;AAED;;;;;;;;;;;;;oCAUgB,kB,EAAoB,gB,EAAkB,gB,EAAkB;AAAA;;AACtE,UAAM,UAAU,GAAG,gBAAgB,CAAC,YAAD,CAAnC;AACA,UAAM,eAAe,GAAG,kBAAkB,CAAC,iBAAD,CAA1C;AACA,UAAM,oBAAoB,GAAG,OACzB,CAAC;AACC;AACA,4BAAoB,CAAC,6CAAD,CAFrB;AAGC,gBAAQ;AACN,gBAAM,iBADA;AAEN,gBAAM,UAAU,CAAC,WAAD,CAFV;AAGN,gBAAM,UAAU,CAAC,wBAAD,CAHV;AAIN,iBAAO,UAAU,CAAC,cAAD,CAJX;AAKN,gBAAM,MALA;AAMN,gBAAM;AANA;AAHT,OAAD,CADyB,GAazB,CAAC;AACC,4BAAoB,CAAC,4BAAD,CADrB;AAEC,gBAAQ;AACN,gBAAM,UAAU,CAAC,UAAD,CADV;AAEN,gBAAM,UAAU,CAAC,WAAD,CAFV;AAGN,gBAAM,UAAU,CAAC,wBAAD,CAHV;AAIN,iBAAO,UAAU,CAAC,cAAD,CAJX;AAKN,gBAAM,UAAU,CAAC,KAAD,CALV;AAMN,gBAAM,eAAe,CAAC,iBAAD;AANf;AAFT,OAAD,CAbJ;;AAyBA,UAAI,UAAU,CAAC,eAAD,CAAd,EAAiC;AAC/B,QAAA,oBAAoB,CAAC,CAAD,CAApB,CAAwB,MAAxB,EAAgC,KAAhC,IAAyC,UAAU,CAAC,eAAD,CAAnD;AACD;;AAED,UAAM,OAAO,GAAG;AACd,iBAAS;AACP,mBAAS,OADF;AAEP,oBAAU;AACR,wBAAY,eAAe,CAAC,cAAD,CADnB;AAER,qBAAS,eAAe,CAAC,YAAD;AAFhB;AAFH,SADK;AAQd,wBAAgB,CAAC;AACf,mBAAS,iBADM;AAEf,oBAAU;AACR,wBAAY,eAAe,CAAC,cAAD,CADnB;AAER,qBAAS,eAAe,CAAC,YAAD;AAFhB;AAFK,SAAD;AARF,OAAhB;AAiBA,UAAI,OAAO,GAAG,IAAI,cAAJ,CAAmB,oBAAnB,EAAyC,OAAzC,CAAd;AAEA,MAAA,gBAAgB,CACZ,KAAK,oBAAL,CAA0B,OAA1B,EACK,IADL,CACU,UAAA,MAAM,EAAI;AACd,YAAI,MAAJ,EAAY;AACV,iBAAO,KAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,KAAI,CAAC,qBAAL,EAAP;AACD;AACF,OAPL,EAQK,IARL,CAQU,UAAA,WAAW,EAAI;AACnB,eAAO,KAAI,CAAC,YAAL,CACH,WADG,EACU,kBADV,EAC8B,gBAD9B,CAAP;AAED,OAXL,WAYW,UAAA,KAAK,EAAI;AACd,QAAA,KAAK,CAAC,YAAD,CAAL,GAAsB,qBAAU,cAAV,CAAyB,QAA/C;AACA,eAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD,OAfL,CADY,CAAhB;AAiBD;AAED;;;;;;;;;;4BAOQ,O,EAAS;AACf,aAAO,OAAO,CAAC,IAAR,GAAe,IAAf,CAAoB,UAAA,eAAe,EAAI;AAC5C,QAAA,eAAe,CAAC,QAAhB,CAAyB,SAAzB;AACA,eAAO,eAAe,CAAC,OAAvB;AACD,OAHM,CAAP;AAID;AAED;;;;;;;;;;;yCAQqB,O,EAAS;AAC5B;AACA,UAAM,WAAW,GACb,MAAM,CAAC,cAAP,CAAsB,OAAtB,CAA8B,qBAAU,8BAAxC,CADJ;;AAEA,UAAI,WAAJ,EAAiB;AACf,eAAO,OAAO,CAAC,OAAR,CAAgB,WAAW,KAAK,MAAhC,CAAP;AACD,OAN2B,CAQ5B;;;AACA,UAAI,CAAC,OAAO,CAAC,cAAb,EAA6B;AAC3B,eAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,UAAI,qBAAqB,GAAG,OAAO,CAAC,cAAR,EAA5B;AAEA,aAAO,qBAAqB,CAAC,IAAtB,CAA2B,UAAA,MAAM,EAAI;AAC1C;AACA;AACA;AACA;AACA,YAAI,MAAJ,EAAY;AACV,UAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,CACI,qBAAU,8BADd,EAC8C,MAAM,CAAC,QAAP,EAD9C;AAED;;AACD,eAAO,MAAP;AACD,OAVM,CAAP;AAWD;AAED;;;;;;;;;4CAMwB;AACtB,MAAA,MAAM,CAAC,QAAP,CAAgB,OAAhB,CACI,OACI,gGADJ,GACwG;AACpG,4FAHR,EADsB,CAI4E;;AAClG,aAAO,OAAO,CAAC,MAAR,CACH;AAAC,wBAAgB;AAAjB,OADG,CAAP;AAED;AAED;;;;;;;;;;;;;;;iCAYa,c,EAAgB,kB,EAAoB,gB,EAAkB;AACjE,UAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,cAAc,CAAC,aAAD,CAAzB,CAApB;;AACA,UAAI,WAAW,CAAC,QAAD,CAAX,KAA0B,SAA9B,EAAyC;AACvC,YAAI,KAAJ;;AACA,gBAAQ,WAAW,CAAC,cAAD,CAAnB;AACE,eAAK,IAAL;AACE;AACA,YAAA,KAAK,GAAG;AACN,2BAAa,kCAAgB,mBADvB;AAEN,8BAAgB;AAFV,aAAR;AAIA;;AACF,eAAK,IAAL;AACE;AACA,YAAA,KAAK,GAAG;AACN,2BAAa,kCAAgB,mBADvB;AAEN,8BAAgB;AAFV,aAAR;AAIA;;AACF,eAAK,IAAL;AACE;AACA,YAAA,KAAK,GAAG;AACN,2BAAa,kCAAgB,cADvB;AAEN,8BACI,6DACA;AAJE,aAAR;AAMA;;AACF;AACE;AACA,YAAA,KAAK,GAAG;AAAC,8BAAgB;AAAjB,aAAR;AA1BJ;;AA4BA,eAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD;;AAED,UAAM,aAAa,GAAG;AACpB,6BAAqB,KADD;AAEpB,oBAAY,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,UAA/B,CAFQ;AAGpB,kBAAU,WAAW,CAAC,QAAD,CAHD;AAIpB,kCACI,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,wBAA/B,CALgB;AAMpB,yBAAiB,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,eAA/B,IACb,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,eAA/B,CADa,GAEb,WAAW,CAAC,OAAD,CARK;AASpB,2BAAmB,kBAAkB,CAAC,iBAAD;AATjB,OAAtB;AAYA,UAAI,WAAW,GAAG;AAChB,sBAAc,kBAAkB,CAAC,YAAD,CADhB;AAEhB,2BAAmB,kBAAkB,CAAC,iBAAD,CAFrB;AAGhB,6BAAqB;AACnB,kBAAQ,gBAAgB,CAAC,MAAD,CADL;AAEnB,8BAAoB;AAClB,oBAAQ,QADU;AAElB,qBAAS;AACP,iCAAmB,MADZ;AAEP;AACA;AACA,2BAAa,EAJN;AAKP,+BAAiB;AALV;AAFS;AAFD;AAHL,OAAlB;AAiBA,aAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD;;;;;;;;;;;;;;;;ACrQH;;;;AAjBA;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA,SAAS,yBAAT,CAAmC,WAAnC,EAAgD;AAC9C,SAAO,uBAAK,QAAL,KAAkB,GAAlB,GAAwB,WAA/B;AACD;;;;;;;;;;;;;;;;;;;ACVD;;AAjBA;;;;;;;;;;;;;;;;;AAmBA;;;AAGA,SAAS,4BAAT,GAAwC;AACtC;AACA,MAAI,OAAO,MAAP,IAAiB,WAAjB,IACA,CAAC,IADL,EACW;AACT,WAAO,KAAP;AACD,GALqC,CAOtC;;;AACA,MAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,KAA3B,CACnB,+CADmB,CAAvB;;AAEA,MAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,WAAO,KAAP;AACD;;AAED,MAAM,aAAa,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,KAA3B,CAAiC,qBAAjC,CAAtB;AACA,SAAO,oBAAoB,MAApB,IAA8B,aAAa,IAAI,IAA/C,IACH,MAAM,CAAC,aAAa,CAAC,CAAD,CAAd,CAAN,IAA4B,EADzB,IAEH,MAAM,CAAC,SAAP,CAAiB,MAAjB,IAA2B,aAF/B;AAGD;AAED;;;;;AAGA,SAAS,4BAAT,GAAwC;AACtC;AACA;AACA,MAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,OAA3B,CAAmC,MAAnC,KAA8C,CAAC,CAA/D;;AACA,MAAI,OAAJ,EAAa;AACX,WAAO,KAAP;AACD;;AACD,MAAI,4BAA4B,EAAhC,EAAoC;AAClC,WAAO,IAAP;AACD;;AAED,MAAM,eAAe,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,KAA3B,CAAiC,UAAjC,CAAxB;AACA,MAAM,aAAa,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,KAA3B,CAAiC,qBAAjC,CAAtB;AACA,SAAO,eAAe,IAAI,IAAnB,IAA2B,oBAAoB,MAA/C,IACH;AACA;AACA,EAAA,MAAM,CAAC,SAAP,CAAiB,MAAjB,IAA2B,aAHxB,IAGyC,aAAa,IAAI,IAH1D,IAIH,MAAM,CAAC,aAAa,CAAC,CAAD,CAAd,CAAN,IAA4B,EAJhC;AAKD;AAED;;;;;;;AAKA,SAAS,qCAAT,CAA+C,mBAA/C,EAAoE;AAClE,MAAI,mBAAmB,CAAC,UAApB,IAAkC,CAAtC,EAAyC;AACvC,QAAM,kBAAkB,GACpB,kCAAkC,CAAC,mBAAD,CADtC;;AAEA,QAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAnB,IAA6B,CAAnD,IACA,kBAAkB,CAAC,CAAD,CAAlB,IAAyB,qBAAU,UAAV,CAAqB,cADlD,EACkE;AAChE,aAAO,IAAP;AACD;AACF;;AACD,SAAO,mBAAmB,CAAC,qBAApB,CAA0C,MAA1C,IAAoD,CAApD,IACH,mBAAmB,CAAC,qBAApB,CAA0C,CAA1C,KACA,qBAAU,aAAV,CAAwB,cAF5B;AAGD;AAED;;;;;;;;AAMA,SAAS,yCAAT,CACI,mBADJ,EACyB,eADzB,EAC0C;AACxC,MAAI,mBAAmB,CAAC,UAApB,IAAkC,CAAtC,EAAyC;AACvC,QAAM,kBAAkB,GACpB,kCAAkC,CAAC,mBAAD,CADtC;;AAEA,QAAI,kBAAkB,IAAI,kBAAkB,CAAC,QAAnB,CAA4B,eAA5B,CAA1B,EAAwE;AACtE,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;;;;;AASA,SAAS,qBAAT,GAAiC;AAC/B,MAAI,MAAM,CAAC,QAAP,CAAgB,QAAhB,CAAyB,QAAzB,CAAkC,qBAAU,cAA5C,CAAJ,EAAiE;AAC/D;AACA,WAAO,IAAP;AACD;;AACD,MAAI,MAAM,CAAC,eAAP,KAA2B,SAA/B,EAA0C;AACxC;AACA;AACA,WAAO,IAAP;AACD;;AACD,SAAO,MAAM,CAAC,eAAP,GACH,IADG,GAEH,qDAFJ;AAGD;AAED;;;;;;;AAKA,SAAS,sBAAT,CAAgC,cAAhC,EAAgD;AAC9C,MAAI,cAAc,CAAC,WAAf,IACA,CAAC,MAAM,CAAC,MAAP,CAAc,qBAAU,WAAxB,EACK,QADL,CACc,cAAc,CAAC,WAD7B,CADL,EAEgD;AAC9C,UAAM,IAAI,KAAJ,CACF,sEACA,4CAFE,CAAN;AAGD;AACF;AAED;;;;;;;;AAMA,SAAS,2BAAT,CAAqC,mBAArC,EAA0D;AACxD,MAAI,CAAC,mBAAL,EAA0B;AACxB,WAAO,kCAAP;AACD,GAFD,MAEO,IAAI,mBAAmB,CAAC,UAApB,IAAkC,CAAtC,EAAyC;AAC9C,QAAI,EAAE,qBAAqB,mBAAvB,CAAJ,EAAiD;AAC/C,aAAO,8BAAP;AACD;;AACD,QAAI,CAAC,mBAAmB,CAAC,qBAArB,IACA,CAAC,KAAK,CAAC,OAAN,CAAc,mBAAmB,CAAC,qBAAlC,CADD,IAEA,mBAAmB,CAAC,qBAApB,CAA0C,MAA1C,IAAoD,CAFxD,EAE2D;AACzD,aAAO,oGAAP;AACD;;AACD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,mBAAmB,CAAC,qBAApB,CAA0C,MAA9D,EAAsE,CAAC,EAAvE,EAA2E;AACzE,UAAI,oBAAoB,GAAG,mBAAmB,CAAC,qBAApB,CAA0C,CAA1C,CAA3B;;AACA,UAAI,oBAAoB,CAAC,MAAD,CAApB,IAAgC,qBAAU,aAAV,CAAwB,IAA5D,EAAkE;AAChE,YAAI,CAAC,oBAAoB,CAAC,YAAD,CAAzB,EAAyC;AACvC,iBAAO,6DAAP;AACD;;AACD,YAAI,mBAAmB,GACnB,oBAAoB,CAAC,YAAD,CAApB,CAAmC,qBAAnC,CADJ;;AAEA,YAAI,CAAC,mBAAD,IAAwB,CAAC,KAAK,CAAC,OAAN,CAAc,mBAAd,CAAzB,IACA,mBAAmB,CAAC,MAApB,IAA8B,CADlC,EACqC;AACnC,iBAAO,+DAAP;AACD;;AACD,YAAI,kBAAkB,GAClB,oBAAoB,CAAC,YAAD,CAApB,CAAmC,oBAAnC,CADJ;;AAEA,YAAI,CAAC,kBAAD,IAAuB,CAAC,KAAK,CAAC,OAAN,CAAc,kBAAd,CAAxB,IACA,kBAAkB,CAAC,MAAnB,IAA6B,CAD7B,IAEA,CAAC,kBAAkB,CAAC,KAAnB,CAAyB,iBAAzB,CAFL,EAEkD;AAChD,iBAAO,sEACH,0DADJ;AAED;AACF;AACF;;AACD,WAAO,IAAP;AACD,GAhCM,MAgCA,IACH,CAAC,mBAAmB,CAAC,qBAArB,IACA,CAAC,KAAK,CAAC,OAAN,CAAc,mBAAmB,CAAC,qBAAlC,CADD,IAEA,mBAAmB,CAAC,qBAApB,CAA0C,MAA1C,IAAoD,CAFpD,IAGA,CAAC,mBAAmB,CAAC,qBAApB,CAA0C,KAA1C,CAAgD,oBAAhD,CAJE,EAIqE;AAC1E,WAAO,uEACH,4BADJ;AAED;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;AAMA,SAAS,oBAAT,CAA8B,aAA9B,EAA6C;AAC3C,SAAO,MAAM,CAAC,MAAP,CAAc,qBAAU,aAAxB,EAAuC,QAAvC,CAAgD,aAAhD,CAAP;AACD;AAED;;;;;;;;AAMA,SAAS,iBAAT,CAA2B,UAA3B,EAAuC;AACrC,SAAO,MAAM,CAAC,MAAP,CAAc,qBAAU,UAAxB,EAAoC,QAApC,CAA6C,UAA7C,CAAP;AACD;AAED;;;;;;;;AAMA,SAAS,0BAAT,CAAoC,kBAApC,EAAwD;AACtD,MAAI,CAAC,kBAAL,EAAyB;AACvB,WAAO,iCAAP;AACD;;AACD,MAAI,kBAAkB,CAAC,GAAvB,EAA4B;AAC1B,WAAO,gCAAgC,CAAC,kBAAkB,CAAC,GAApB,CAAvC;AACD,GAFD,MAEO,IAAI,CAAC,kBAAkB,CAAC,eAAxB,EAAyC;AAC9C,WAAO,8BAAP;AACD,GAFM,MAEA,IAAI,CAAC,kBAAkB,CAAC,eAAnB,CAAmC,YAAxC,EAAsD;AAC3D,WAAO,8CAAP;AACD,GAFM,MAEA,IACH,CAAC,kBAAkB,CAAC,eAAnB,CAAmC,gBAApC,IACA,CAAC,MAAM,CAAC,MAAP,CAAc,qBAAU,gBAAxB,EACK,QADL,CACc,kBAAkB,CAAC,eAAnB,CAAmC,gBADjD,CAFE,EAGkE;AACvE,WAAO,8DACH,2CADJ;AAED,GANM,MAMA,IACH,kBAAkB,CAAC,eAAnB,CAAmC,gBAAnC,KACI,qBADJ,IAEA,CAAC,kBAAkB,CAAC,eAAnB,CAAmC,UAHjC,EAG6C;AAClD,WAAO,mDACH,0CADJ;AAED,GAtBqD,CAwBtD;;;AACA,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,kBAAD,CAAhD;;AACA,MAAI,oBAAJ,EAA0B;AACxB,QAAI,CAAC,oBAAoB,CAAC,YAAD,CAAzB,EAAyC;AACvC,aAAO,iDAAP;AACD;;AAED,QAAI,UAAU,GAAG,oBAAoB,CAAC,YAAD,CAArC;;AACA,QAAI,CAAC,UAAU,CAAC,UAAD,CAAf,EAA6B;AAC3B,aAAO,0DAAP;AACD,KAFD,MAEO,IAAI,CAAC,UAAU,CAAC,WAAD,CAAf,EAA8B;AACnC,aAAO,2DAAP;AACD,KAFM,MAEA,IAAI,CAAC,UAAU,CAAC,cAAD,CAAf,EAAiC;AACtC,aAAO,8DAAP;AACD,KAFM,MAEA,IAAI,CAAC,UAAU,CAAC,KAAD,CAAf,EAAwB;AAC7B,aAAO,qDAAP;AACD,KAFM,MAEA,IAAI,CAAC,UAAU,CAAC,wBAAD,CAAf,EAA2C;AAChD,aAAO,8DACH,eADJ;AAED;;AAED,QAAI,kBAAkB,CAAC,iBAAD,CAAlB,CAAsC,cAAtC,MAA0D,KAA9D,EAAqE;AACnE,aAAO,qDAAP;AACD,KAFD,MAEO,IACH,kBAAkB,CAAC,iBAAD,CAAlB,CAAsC,kBAAtC,MAA8D,OAD3D,EACoE;AACzE,aAAO,2DAAP;AACD,KAHM,MAGA,IAAI,CAAC,kBAAkB,CAAC,iBAAD,CAAlB,CAAsC,iBAAtC,CAAL,EAA+D;AACpE,aAAO,iDAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;AAOA,SAAS,mBAAT,CAA6B,OAA7B,EAAsC;AACpC,MAAI,CAAC,4BAA4B,EAA7B,IAAmC,OAAO,CAAC,UAAR,GAAqB,CAAxD,IACA,CAAC,OAAO,CAAC,qBADb,EACoC;AAClC,WAAO,IAAP;AACD;;AACD,SAAO,+BAA+B,CAAC,OAAD,EAAU,qBAAU,aAAV,CAAwB,GAAlC,CAAtC;AACD;AAED;;;;;;;;AAMA,SAAS,gCAAT,CAA0C,aAA1C,EAAyD;AACvD,MAAI,CAAC,aAAL,EAAoB;AAClB,WAAO,iCAAP;AACD;;AACD,MAAI,CAAC,aAAa,CAAC,KAAf,IAAwB,CAAC,aAAa,CAAC,aAA3C,EAA0D;AACxD,WAAO,+CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;AAOA,SAAS,kCAAT,CAA4C,mBAA5C,EAAiE;AAC/D,MAAI,mBAAmB,CAAC,qBAAxB,EAA+C;AAC7C,QAAM,oBAAoB,GAAG,+BAA+B,CACxD,mBADwD,EACnC,qBAAU,aAAV,CAAwB,IADW,CAA5D;;AAEA,QAAI,oBAAoB,IAAI,oBAAoB,CAAC,UAAjD,EAA6D;AAC3D,aAAO,oBAAoB,CAAC,UAArB,CAAgC,oBAAhC,CAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;AAOA,SAAS,+BAAT,CACI,mBADJ,EACyB,iBADzB,EAC4C;AAC1C,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,mBAAmB,CAAC,qBAApB,CAA0C,MAA9D,EAAsE,CAAC,EAAvE,EAA2E;AACzE,QAAM,oBAAoB,GAAG,mBAAmB,CAAC,qBAApB,CAA0C,CAA1C,CAA7B;;AACA,QAAI,oBAAoB,CAAC,IAArB,IAA6B,iBAAjC,EAAoD;AAClD,aAAO,oBAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;;;;;;;;;;;ACtVD;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;IAyBqB,W;;;;;AAAc,C,CACjC;;AACA,IAAI,KAAK,GAAG,iEAAiE,KAAjE,CAAuE,EAAvE,CAAZ;;AAEA,WAAW,CAAC,IAAZ,GAAmB,UAAU,GAAV,EAAe,KAAf,EAAsB;AACvC,MAAI,KAAK,GAAG,KAAZ;AAAA,MAAmB,IAAI,GAAG,EAA1B;AAAA,MAA8B,CAA9B;AACA,EAAA,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,MAAvB;;AAEA,MAAI,GAAJ,EAAS;AACP;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAhB,EAAqB,CAAC,EAAtB;AAA0B,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAK,CAAC,IAAI,IAAI,CAAC,MAAL,KAAc,KAAnB,CAAf;AAA1B;AACD,GAHD,MAGO;AACL;AACA,QAAI,CAAJ,CAFK,CAIL;;AACA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,EAAD,CAAJ,GAAW,IAAI,CAAC,EAAD,CAAJ,GAAW,IAAI,CAAC,EAAD,CAAJ,GAAW,GAA3C;AACA,IAAA,IAAI,CAAC,EAAD,CAAJ,GAAW,GAAX,CANK,CAQL;AACA;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,EAAhB,EAAoB,CAAC,EAArB,EAAyB;AACvB,UAAI,CAAC,IAAI,CAAC,CAAD,CAAT,EAAc;AACZ,QAAA,CAAC,GAAG,IAAI,IAAI,CAAC,MAAL,KAAc,EAAtB;AACA,QAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAK,CAAE,CAAC,IAAI,EAAN,GAAa,CAAC,GAAG,GAAL,GAAY,GAAxB,GAA8B,CAA/B,CAAf;AACD;AACF;AACF;;AAED,SAAO,IAAI,CAAC,IAAL,CAAU,EAAV,CAAP;AACD,CA1BD,C,CA4BA;AACA;;;AACA,WAAW,CAAC,QAAZ,GAAuB,YAAW;AAChC,MAAI,KAAK,GAAG,KAAZ;AAAA,MAAmB,IAAI,GAAG,IAAI,KAAJ,CAAU,EAAV,CAA1B;AAAA,MAAyC,GAAG,GAAC,CAA7C;AAAA,MAAgD,CAAhD;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B,QAAI,CAAC,IAAE,CAAH,IAAQ,CAAC,IAAE,EAAX,IAAkB,CAAC,IAAE,EAArB,IAA2B,CAAC,IAAE,EAAlC,EAAsC;AACpC,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV;AACD,KAFD,MAEO,IAAI,CAAC,IAAE,EAAP,EAAW;AAChB,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV;AACD,KAFM,MAEA;AACL,UAAI,GAAG,IAAI,IAAX,EAAiB,GAAG,GAAG,YAAa,IAAI,CAAC,MAAL,KAAc,SAA3B,GAAsC,CAA5C;AACjB,MAAA,CAAC,GAAG,GAAG,GAAG,GAAV;AACA,MAAA,GAAG,GAAG,GAAG,IAAI,CAAb;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAK,CAAE,CAAC,IAAI,EAAN,GAAa,CAAC,GAAG,GAAL,GAAY,GAAxB,GAA8B,CAA/B,CAAf;AACD;AACF;;AACD,SAAO,IAAI,CAAC,IAAL,CAAU,EAAV,CAAP;AACD,CAfD,C,CAiBA;;;AACA,WAAW,CAAC,WAAZ,GAA0B,YAAW;AACnC,SAAO,uCAAuC,OAAvC,CAA+C,OAA/C,EAAwD,UAAS,CAAT,EAAY;AACzE,QAAI,CAAC,GAAG,IAAI,CAAC,MAAL,KAAc,EAAd,GAAiB,CAAzB;AAAA,QAA4B,CAAC,GAAG,CAAC,IAAI,GAAL,GAAW,CAAX,GAAgB,CAAC,GAAC,GAAF,GAAM,GAAtD;AACA,WAAO,CAAC,CAAC,QAAF,CAAW,EAAX,CAAP;AACD,GAHM,CAAP;AAID,CALD","file":"subscriptions.max.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const CSS = \".swg-dialog,.swg-toast{box-sizing:border-box;background-color:#fff!important}.swg-toast{position:fixed!important;bottom:0!important;max-height:46px!important;z-index:2147483647!important;border:none!important}@media (max-height:640px), (max-width:640px){.swg-dialog,.swg-toast{width:480px!important;left:-240px!important;margin-left:50vw!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}@media (min-width:640px) and (min-height:640px){.swg-dialog{width:630px!important;left:-315px!important;margin-left:50vw!important;background-color:transparent!important;border:none!important}.swg-toast{left:0!important}}@media (max-width:480px){.swg-dialog,.swg-toast{width:100%!important;left:0!important;right:0!important;margin-left:0!important}}\\n/*# sourceURL=/./src/components/dialog.css*/\";","export const CSS = \"body{padding:0;margin:0}swg-container,swg-loading,swg-loading-animate,swg-loading-image{display:block}swg-loading-container{width:100%!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-align:center!important;align-items:center!important;-ms-flex-pack:center!important;justify-content:center!important;min-height:148px!important;height:100%!important;bottom:0!important;margin-top:5px!important;z-index:2147483647!important}@media (min-height:630px), (min-width:630px){swg-loading-container{width:560px!important;margin-left:35px!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;background-color:#fff!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}swg-loading{z-index:2147483647!important;width:36px;height:36px;overflow:hidden;animation:mspin-rotate 1568.63ms linear infinite}swg-loading-animate{animation:mspin-revrot 5332ms steps(4) infinite}swg-loading-image{background-image:url($assets$/loader.svg);background-size:100%;width:11664px;height:36px;animation:swg-loading-film 5332ms steps(324) infinite}@keyframes swg-loading-film{0%{transform:translateX(0)}to{transform:translateX(-11664px)}}@keyframes mspin-rotate{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes mspin-revrot{0%{transform:rotate(0deg)}to{transform:rotate(-1turn)}}\\n/*# sourceURL=/./src/ui/ui.css*/\";","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid a promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid a promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid a promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // If we're adopting another promise, it's not the end of the promise chain,\n  // the new promise is.\n  if (adoptee) {\n    adoptee._isChainEnd = false;\n  }\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * @license\n * Copyright 2017 The Web Activities Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n /** Version: 1.24 */\n'use strict';\n\n/*eslint no-unused-vars: 0*/\n\n\n/**\n * @enum {string}\n */\nconst ActivityMode = {\n  IFRAME: 'iframe',\n  POPUP: 'popup',\n  REDIRECT: 'redirect',\n};\n\n\n/**\n * The result code used for `ActivityResult`.\n * @enum {string}\n */\nconst ActivityResultCode = {\n  OK: 'ok',\n  CANCELED: 'canceled',\n  FAILED: 'failed',\n};\n\n\n/**\n * The result of an activity. The activity implementation returns this object\n * for a successful result, a cancelation or a failure.\n * @struct\n */\nclass ActivityResult {\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {!ActivityMode} mode\n   * @param {string} origin\n   * @param {boolean} originVerified\n   * @param {boolean} secureChannel\n   */\n  constructor(code, data, mode, origin, originVerified, secureChannel) {\n    /** @const {!ActivityResultCode} */\n    this.code = code;\n    /** @const {*} */\n    this.data = code == ActivityResultCode.OK ? data : null;\n    /** @const {!ActivityMode} */\n    this.mode = mode;\n    /** @const {string} */\n    this.origin = origin;\n    /** @const {boolean} */\n    this.originVerified = originVerified;\n    /** @const {boolean} */\n    this.secureChannel = secureChannel;\n    /** @const {boolean} */\n    this.ok = code == ActivityResultCode.OK;\n    /** @const {?Error} */\n    this.error = code == ActivityResultCode.FAILED ?\n        new Error(String(data) || '') :\n        null;\n  }\n}\n\n\n/**\n * The activity request that different types of hosts can be started with.\n * @typedef {{\n *   requestId: string,\n *   returnUrl: string,\n *   args: ?Object,\n *   origin: (string|undefined),\n *   originVerified: (boolean|undefined),\n * }}\n */\nlet ActivityRequest;\n\n\n/**\n * The activity \"open\" options used for popups and redirects.\n *\n * - returnUrl: override the return URL. By default, the current URL will be\n *   used.\n * - skipRequestInUrl: removes the activity request from the URL, in case\n *   redirect is used. By default, the activity request is appended to the\n *   activity URL. This option can be used if the activity request is passed\n *   to the activity by some alternative means.\n * - disableRedirectFallback: disallows popup fallback to redirect. By default\n *   the redirect fallback is allowed. This option has to be used very carefully\n *   because there are many user agents that may fail to open a popup and it\n *   won't be always possible for the opener window to even be aware of such\n *   failures.\n *\n * @typedef {{\n *   returnUrl: (string|undefined),\n *   skipRequestInUrl: (boolean|undefined),\n *   disableRedirectFallback: (boolean|undefined),\n *   width: (number|undefined),\n *   height: (number|undefined),\n * }}\n */\nlet ActivityOpenOptions;\n\n\n/**\n * Activity client-side binding. The port provides limited ways to communicate\n * with the activity and receive signals and results from it. Not every type\n * of activity exposes a port.\n *\n * @interface\n */\nclass ActivityPort {\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!ActivityResult>}\n   */\n  acceptResult() {}\n}\n\n\n/**\n * Activity client-side binding for messaging.\n *\n * Whether the host can or cannot receive a message depends on the type of\n * host and its state. Ensure that the code has an alternative path if\n * messaging is not available.\n *\n * @interface\n */\nclass ActivityMessagingPort {\n\n  /**\n   * Returns the target window where host is loaded. May be unavailable.\n   * @return {?Window}\n   */\n  getTargetWin() {}\n\n  /**\n   * Sends a message to the host.\n   * @param {!Object} payload\n   */\n  message(payload) {}\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * @param {function(!Object)} callback\n   */\n  onMessage(callback) {}\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  messageChannel(opt_name) {}\n}\n\n\n\n/** DOMException.ABORT_ERR name */\nconst ABORT_ERR_NAME = 'AbortError';\n\n/** DOMException.ABORT_ERR = 20 */\nconst ABORT_ERR_CODE = 20;\n\n/** @type {?HTMLAnchorElement} */\nlet aResolver;\n\n\n/**\n * @param {string} urlString\n * @return {!HTMLAnchorElement}\n */\nfunction parseUrl(urlString) {\n  if (!aResolver) {\n    aResolver = /** @type {!HTMLAnchorElement} */ (document.createElement('a'));\n  }\n  aResolver.href = urlString;\n  return /** @type {!HTMLAnchorElement} */ (aResolver);\n}\n\n\n/**\n * @param {!Location|!URL|!HTMLAnchorElement} loc\n * @return {string}\n */\nfunction getOrigin(loc) {\n  if (loc.origin) {\n    return loc.origin;\n  }\n  // Make sure that the origin is normalized. Specifically on IE, host sometimes\n  // includes the default port, which is not per standard.\n  const protocol = loc.protocol;\n  let host = loc.host;\n  if (protocol == 'https:' && host.indexOf(':443') == host.length - 4) {\n    host = host.replace(':443', '');\n  } else if (protocol == 'http:' && host.indexOf(':80') == host.length - 3) {\n    host = host.replace(':80', '');\n  }\n  return protocol + '//' + host;\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction getOriginFromUrl(urlString) {\n  return getOrigin(parseUrl(urlString));\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction removeFragment(urlString) {\n  const index = urlString.indexOf('#');\n  if (index == -1) {\n    return urlString;\n  }\n  return urlString.substring(0, index);\n}\n\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nfunction parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n      .split('&')\n      .reduce((params, param) => {\n        const item = param.split('=');\n        const key = decodeURIComponent(item[0] || '');\n        const value = decodeURIComponent(item[1] || '');\n        if (key) {\n          params[key] = value;\n        }\n        return params;\n      }, {});\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to get from the query string.\n * @return {?string}\n */\nfunction getQueryParam(queryString, param) {\n  return parseQueryString(queryString)[param];\n}\n\n\n/**\n * Add a query-like parameter to the fragment string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nfunction addFragmentParam(url, param, value) {\n  return url +\n      (url.indexOf('#') == -1 ? '#' : '&') +\n      encodeURIComponent(param) + '=' + encodeURIComponent(value);\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to remove from the query string.\n * @return {?string}\n */\nfunction removeQueryParam(queryString, param) {\n  if (!queryString) {\n    return queryString;\n  }\n  const search = encodeURIComponent(param) + '=';\n  let index = -1;\n  do {\n    index = queryString.indexOf(search, index);\n    if (index != -1) {\n      const prev = index > 0 ? queryString.substring(index - 1, index) : '';\n      if (prev == '' || prev == '?' || prev == '#' || prev == '&') {\n        let end = queryString.indexOf('&', index + 1);\n        if (end == -1) {\n          end = queryString.length;\n        }\n        queryString =\n            queryString.substring(0, index) +\n            queryString.substring(end + 1);\n      } else {\n        index++;\n      }\n    }\n  } while (index != -1 && index < queryString.length);\n  return queryString;\n}\n\n\n/**\n * @param {!ActivityRequest} request\n * @return {string}\n */\nfunction serializeRequest(request) {\n  const map = {\n    'requestId': request.requestId,\n    'returnUrl': request.returnUrl,\n    'args': request.args,\n  };\n  if (request.origin !== undefined) {\n    map['origin'] = request.origin;\n  }\n  if (request.originVerified !== undefined) {\n    map['originVerified'] = request.originVerified;\n  }\n  return JSON.stringify(map);\n}\n\n\n/**\n * @param {*} error\n * @return {boolean}\n */\nfunction isAbortError(error) {\n  if (!error || typeof error != 'object') {\n    return false;\n  }\n  return (error['name'] === ABORT_ERR_NAME);\n}\n\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} opt_message\n * @return {!DOMException}\n */\nfunction createAbortError(win, opt_message) {\n  const message = 'AbortError' + (opt_message ? ': ' + opt_message : '');\n  let error = null;\n  if (typeof win['DOMException'] == 'function') {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string, string)} */ (\n        win['DOMException']);\n    try {\n      error = new constr(message, ABORT_ERR_NAME);\n    } catch (e) {\n      // Ignore. In particular, `new DOMException()` fails in Edge.\n    }\n  }\n  if (!error) {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string)} */ (\n        Error);\n    error = new constr(message);\n    error.name = ABORT_ERR_NAME;\n    error.code = ABORT_ERR_CODE;\n  }\n  return error;\n}\n\n\n/**\n * Resolves the activity result as a promise:\n *  - `OK` result is yielded as the promise's payload;\n *  - `CANCEL` result is rejected with the `AbortError`;\n *  - `FAILED` result is rejected with the embedded error.\n *\n * @param {!Window} win\n * @param {!ActivityResult} result\n * @param {function((!ActivityResult|!Promise))} resolver\n */\nfunction resolveResult(win, result, resolver) {\n  if (result.ok) {\n    resolver(result);\n  } else {\n    const error = result.error || createAbortError(win);\n    error.activityResult = result;\n    resolver(Promise.reject(error));\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIeBrowser(win) {\n  // MSIE and Trident are typical user agents for IE browsers.\n  const nav = win.navigator;\n  return /Trident|MSIE|IEMobile/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Error} e\n */\nfunction throwAsync(e) {\n  setTimeout(() => {throw e;});\n}\n\n\n/**\n * Polyfill of the `Node.isConnected` API. See\n * https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected.\n * @param {!Node} node\n * @return {boolean}\n */\nfunction isNodeConnected(node) {\n  // Ensure that node is attached if specified. This check uses a new and\n  // fast `isConnected` API and thus only checked on platforms that have it.\n  // See https://www.chromestatus.com/feature/5676110549352448.\n  if ('isConnected' in node) {\n    return node['isConnected'];\n  }\n  // Polyfill.\n  const root = node.ownerDocument && node.ownerDocument.documentElement;\n  return (root && root.contains(node)) || false;\n}\n\n\n\nconst SENTINEL = '__ACTIVITIES__';\n\n\n/**\n * The messenger helper for activity's port and host.\n */\nclass Messenger {\n\n  /**\n   * @param {!Window} win\n   * @param {!Window|function():?Window} targetOrCallback\n   * @param {?string} targetOrigin\n   * @param {boolean} requireTarget\n   */\n  constructor(win, targetOrCallback, targetOrigin, requireTarget) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Window|function():?Window} */\n    this.targetOrCallback_ = targetOrCallback;\n\n    /**\n     * May start as unknown (`null`) until received in the first message.\n     * @private {?string}\n     */\n    this.targetOrigin_ = targetOrigin;\n\n    /** @private @const {boolean} */\n    this.requireTarget_ = requireTarget;\n\n    /** @private {?Window} */\n    this.target_ = null;\n\n    /** @private {boolean} */\n    this.acceptsChannel_ = false;\n\n    /** @private {?MessagePort} */\n    this.port_ = null;\n\n    /** @private {?function(string, ?Object)} */\n    this.onCommand_ = null;\n\n    /** @private {?function(!Object)} */\n    this.onCustomMessage_ = null;\n\n    /**\n     * @private {?Object<string, !ChannelHolder>}\n     */\n    this.channels_ = null;\n\n    /** @private @const */\n    this.boundHandleEvent_ = this.handleEvent_.bind(this);\n  }\n\n  /**\n   * Connect the port to the host or vice versa.\n   * @param {function(string, ?Object)} onCommand\n   */\n  connect(onCommand) {\n    if (this.onCommand_) {\n      throw new Error('already connected');\n    }\n    this.onCommand_ = onCommand;\n    this.win_.addEventListener('message', this.boundHandleEvent_);\n  }\n\n  /**\n   * Disconnect messenger.\n   */\n  disconnect() {\n    if (this.onCommand_) {\n      this.onCommand_ = null;\n      if (this.port_) {\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.win_.removeEventListener('message', this.boundHandleEvent_);\n      if (this.channels_) {\n        for (const k in this.channels_) {\n          const channelObj = this.channels_[k];\n          if (channelObj.port1) {\n            closePort(channelObj.port1);\n          }\n          if (channelObj.port2) {\n            closePort(channelObj.port2);\n          }\n        }\n        this.channels_ = null;\n      }\n    }\n  }\n\n  /**\n   * Returns whether the messenger has been connected already.\n   * @return {boolean}\n   */\n  isConnected() {\n    return this.targetOrigin_ != null;\n  }\n\n  /**\n   * Returns the messaging target. Only available when connection has been\n   * establihsed.\n   * @return {!Window}\n   */\n  getTarget() {\n    const target = this.getOptionalTarget_();\n    if (!target) {\n      throw new Error('not connected');\n    }\n    return target;\n  }\n\n  /**\n   * @return {?Window}\n   * @private\n   */\n  getOptionalTarget_() {\n    if (this.onCommand_ && !this.target_) {\n      if (typeof this.targetOrCallback_ == 'function') {\n        this.target_ = this.targetOrCallback_();\n      } else {\n        this.target_ = /** @type {!Window} */ (this.targetOrCallback_);\n      }\n    }\n    return this.target_;\n  }\n\n  /**\n   * Returns the messaging origin. Only available when connection has been\n   * establihsed.\n   * @return {string}\n   */\n  getTargetOrigin() {\n    if (this.targetOrigin_ == null) {\n      throw new Error('not connected');\n    }\n    return this.targetOrigin_;\n  }\n\n  /**\n   * The host sends this message to the client to indicate that it's ready to\n   * start communicating. The client is expected to respond back with the\n   * \"start\" command. See `sendStartCommand` method.\n   */\n  sendConnectCommand() {\n    // TODO(dvoytenko): MessageChannel is critically necessary for IE/Edge,\n    // since window messaging doesn't always work. It's also preferred as an API\n    // for other browsers: it's newer, cleaner and arguably more secure.\n    // Unfortunately, browsers currently do not propagate user gestures via\n    // MessageChannel, only via window messaging. This should be re-enabled\n    // once browsers fix user gesture propagation.\n    // See:\n    // Safari: https://bugs.webkit.org/show_bug.cgi?id=186593\n    // Chrome: https://bugs.chromium.org/p/chromium/issues/detail?id=851493\n    // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1469422\n    const acceptsChannel = isIeBrowser(this.win_) || isEdgeBrowser(this.win_);\n    this.sendCommand('connect', {'acceptsChannel': acceptsChannel});\n  }\n\n  /**\n   * The client sends this message to the host upon receiving the \"connect\"\n   * message to start the main communication channel. As a payload, the message\n   * will contain the provided start arguments.\n   * @param {?Object} args\n   */\n  sendStartCommand(args) {\n    let channel = null;\n    if (this.acceptsChannel_ && typeof this.win_.MessageChannel == 'function') {\n      channel = new this.win_.MessageChannel();\n    }\n    if (channel) {\n      this.sendCommand('start', args, [channel.port2]);\n      // It's critical to switch to port messaging only after \"start\" has been\n      // sent. Otherwise, it won't be delivered.\n      this.switchToChannel_(channel.port1);\n    } else {\n      this.sendCommand('start', args);\n    }\n  }\n\n  /**\n   * Sends the specified command from the port to the host or vice versa.\n   * @param {string} cmd\n   * @param {?Object=} opt_payload\n   * @param {?Array=} opt_transfer\n   */\n  sendCommand(cmd, opt_payload, opt_transfer) {\n    const data = {\n      'sentinel': SENTINEL,\n      'cmd': cmd,\n      'payload': opt_payload || null,\n    };\n    if (this.port_) {\n      this.port_.postMessage(data, opt_transfer || undefined);\n    } else {\n      const target = this.getTarget();\n      // Only \"connect\" command is allowed to use `targetOrigin == '*'`\n      const targetOrigin =\n          cmd == 'connect' ?\n          (this.targetOrigin_ != null ? this.targetOrigin_ : '*') :\n          this.getTargetOrigin();\n      target.postMessage(data, targetOrigin, opt_transfer || undefined);\n    }\n  }\n\n  /**\n   * Sends a message to the client.\n   * @param {!Object} payload\n   */\n  customMessage(payload) {\n    this.sendCommand('msg', payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the client.\n   * @param {function(!Object)} callback\n   */\n  onCustomMessage(callback) {\n    this.onCustomMessage_ = callback;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  startChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      const channel = new this.win_.MessageChannel();\n      channelObj.port1 = channel.port1;\n      channelObj.port2 = channel.port2;\n      channelObj.resolver(channelObj.port1);\n    }\n    if (channelObj.port2) {\n      // Not yet sent.\n      this.sendCommand('cnset', {'name': name}, [channelObj.port2]);\n      channelObj.port2 = null;\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  askChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      this.sendCommand('cnget', {'name': name});\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string} name\n   * @param {!MessagePort} port\n   * @private\n   */\n  receiveChannel_(name, port) {\n    const channelObj = this.getChannelObj_(name);\n    channelObj.port1 = port;\n    channelObj.resolver(port);\n  }\n\n  /**\n   * @param {string} name\n   * @return {!ChannelHolder}\n   */\n  getChannelObj_(name) {\n    if (!this.channels_) {\n      this.channels_ = {};\n    }\n    let channelObj = this.channels_[name];\n    if (!channelObj) {\n      let resolver;\n      const promise = new Promise(resolve => {\n        resolver = resolve;\n      });\n      channelObj = {\n        port1: null,\n        port2: null,\n        resolver,\n        promise,\n      };\n      this.channels_[name] = channelObj;\n    }\n    return channelObj;\n  }\n\n  /**\n   * @param {!MessagePort} port\n   * @private\n   */\n  switchToChannel_(port) {\n    if (this.port_) {\n      closePort(this.port_);\n    }\n    this.port_ = port;\n    this.port_.onmessage = event => {\n      const data = event.data;\n      const cmd = data && data['cmd'];\n      const payload = data && data['payload'] || null;\n      if (cmd) {\n        this.handleCommand_(cmd, payload, event);\n      }\n    };\n    // Even though all messaging will switch to ports, the window-based message\n    // listener will be preserved just in case the host is refreshed and needs\n    // another connection.\n  }\n\n  /**\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleEvent_(event) {\n    if (this.requireTarget_ && this.getOptionalTarget_() != event.source) {\n      // When target is required, confirm it against the event.source. This\n      // is normally only needed for ports where a single window can include\n      // multiple iframes to match the event to a specific iframe. Otherwise,\n      // the origin checks below are sufficient.\n      return;\n    }\n    const data = event.data;\n    if (!data || data['sentinel'] != SENTINEL) {\n      return;\n    }\n    const cmd = data['cmd'];\n    if (this.port_ && cmd != 'connect' && cmd != 'start') {\n      // Messaging channel has already taken over. However, the \"connect\" and\n      // \"start\" commands are allowed to proceed in case re-connection is\n      // requested.\n      return;\n    }\n    const origin = /** @type {string} */ (event.origin);\n    const payload = data['payload'] || null;\n    if (this.targetOrigin_ == null && cmd == 'start') {\n      this.targetOrigin_ = origin;\n    }\n    if (this.targetOrigin_ == null && event.source) {\n      if (this.getOptionalTarget_() == event.source) {\n        this.targetOrigin_ = origin;\n      }\n    }\n    // Notice that event.source may differ from the target because of\n    // friendly-iframe intermediaries.\n    if (origin != this.targetOrigin_) {\n      return;\n    }\n    this.handleCommand_(cmd, payload, event);\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleCommand_(cmd, payload, event) {\n    if (cmd == 'connect') {\n      if (this.port_) {\n        // In case the port has already been open - close it to reopen it\n        // again later.\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.acceptsChannel_ = payload && payload['acceptsChannel'] || false;\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'start') {\n      const port = event.ports && event.ports[0];\n      if (port) {\n        this.switchToChannel_(port);\n      }\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'msg') {\n      if (this.onCustomMessage_ != null && payload != null) {\n        this.onCustomMessage_(payload);\n      }\n    } else if (cmd == 'cnget') {\n      const name = payload['name'];\n      this.startChannel(name);\n    } else if (cmd == 'cnset') {\n      const name = payload['name'];\n      const port = event.ports[0];\n      this.receiveChannel_(name, /** @type {!MessagePort} */ (port));\n    } else {\n      this.onCommand_(cmd, payload);\n    }\n  }\n}\n\n\n/**\n * @param {!MessagePort} port\n */\nfunction closePort(port) {\n  try {\n    port.close();\n  } catch (e) {\n    // Ignore.\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the iframe case. Unlike other types\n * of activities, iframe-based activities are always connected and can react\n * to size requests.\n *\n * @implements {ActivityPort}\n * @implements {ActivityMessagingPort}\n */\nclass ActivityIframePort {\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   */\n  constructor(iframe, url, opt_args) {\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = iframe;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (this.iframe_.ownerDocument.defaultView);\n\n    /** @private @const {string} */\n    this.targetOrigin_ = getOriginFromUrl(url);\n\n    /** @private {boolean} */\n    this.connected_ = false;\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function()} */\n    this.readyResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.readyPromise_ = new Promise(resolve => {\n      this.readyResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?function(number)} */\n    this.onResizeRequest_ = null;\n\n    /** @private {?number} */\n    this.requestedHeight_ = null;\n\n    /** @private @const {!Messenger} */\n    this.messenger_ = new Messenger(\n        this.win_,\n        () => this.iframe_.contentWindow,\n        this.targetOrigin_,\n        /* requireTarget */ true);\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.IFRAME;\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    if (!isNodeConnected(this.iframe_)) {\n      throw new Error('iframe must be in DOM');\n    }\n    this.messenger_.connect(this.handleCommand_.bind(this));\n    this.iframe_.src = this.url_;\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.connected_ = false;\n    this.messenger_.disconnect();\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /** @override */\n  getTargetWin() {\n    return this.iframe_.contentWindow || null;\n  }\n\n  /** @override */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /** @override */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /** @override */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.readyPromise_;\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    this.onResizeRequest_ = callback;\n    Promise.resolve().then(() => {\n      if (this.requestedHeight_ != null) {\n        callback(this.requestedHeight_);\n      }\n    });\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    if (!this.connected_) {\n      return;\n    }\n    const height = this.iframe_.offsetHeight;\n    this.messenger_.sendCommand('resized', {'height': height});\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.connected_ = true;\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      if (this.resultResolver_) {\n        const code = /** @type {!ActivityResultCode} */ (payload['code']);\n        const data =\n            code == ActivityResultCode.FAILED ?\n            new Error(payload['data'] || '') :\n            payload['data'];\n        const result = new ActivityResult(\n            code,\n            data,\n            ActivityMode.IFRAME,\n            this.messenger_.getTargetOrigin(),\n            /* originVerified */ true,\n            /* secureChannel */ true);\n        resolveResult(this.win_, result, this.resultResolver_);\n        this.resultResolver_ = null;\n        this.messenger_.sendCommand('close');\n        this.disconnect();\n      }\n    } else if (cmd == 'ready') {\n      if (this.readyResolver_) {\n        this.readyResolver_();\n        this.readyResolver_ = null;\n      }\n    } else if (cmd == 'resize') {\n      this.requestedHeight_ = /** @type {number} */ (payload['height']);\n      if (this.onResizeRequest_) {\n        this.onResizeRequest_(this.requestedHeight_);\n      }\n    }\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n * @implements {ActivityMessagingPort}\n */\nclass ActivityWindowPort {\n\n  /**\n   * @param {!Window} win\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   */\n  constructor(win, requestId, url, target, opt_args, opt_options) {\n    const isValidTarget =\n        target &&\n        (target == '_blank' || target == '_top' || target[0] != '_');\n    if (!isValidTarget) {\n      throw new Error('The only allowed targets are \"_blank\", \"_top\"' +\n          ' and name targets');\n    }\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {string} */\n    this.requestId_ = requestId;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {string} */\n    this.openTarget_ = target;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n    /** @private @const {!ActivityOpenOptions} */\n    this.options_ = opt_options || {};\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?Window} */\n    this.targetWin_ = null;\n\n    /** @private {?number} */\n    this.heartbeatInterval_ = null;\n\n    /** @private {?Messenger} */\n    this.messenger_ = null;\n  }\n\n  /** @override */\n  getMode() {\n    return this.openTarget_ == '_top' ?\n        ActivityMode.REDIRECT :\n        ActivityMode.POPUP;\n  }\n\n  /**\n   * Opens the activity in a window, either as a popup or via redirect.\n   *\n   * Returns the promise that will yield when the window returns or closed.\n   * Notice, that this promise may never complete if \"redirect\" mode was used.\n   *\n   * @return {!Promise}\n   */\n  open() {\n    return this.openInternal_();\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  whenConnected() {\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    if (this.heartbeatInterval_) {\n      this.win_.clearInterval(this.heartbeatInterval_);\n      this.heartbeatInterval_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.disconnect();\n      this.messenger_ = null;\n    }\n    if (this.targetWin_) {\n      // Try to close the popup window. The host will also try to do the same.\n      try {\n        this.targetWin_.close();\n      } catch (e) {\n        // Ignore.\n      }\n      this.targetWin_ = null;\n    }\n    this.resultResolver_ = null;\n  }\n\n  /** @override */\n  getTargetWin() {\n    return this.targetWin_;\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /**\n   * Sends a message to the host.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * Whether the host can or cannot receive a message depends on the type of\n   * host and its state. Ensure that the code has an alternative path if\n   * messaging is not available.\n   * @override\n   */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * This method wraps around window's open method. It first tries to execute\n   * `open` call with the provided target and if it fails, it retries the call\n   * with the `_top` target. This is necessary given that in some embedding\n   * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n   * is blocked by default.\n   * @return {!Promise}\n   * @private\n   */\n  openInternal_() {\n    const featuresStr = this.buildFeatures_();\n\n    // Protectively, the URL will contain the request payload, unless explicitly\n    // directed not to via `skipRequestInUrl` option.\n    let url = this.url_;\n    if (!this.options_.skipRequestInUrl) {\n      const returnUrl =\n          this.options_.returnUrl ||\n          removeFragment(this.win_.location.href);\n      const requestString = serializeRequest({\n        requestId: this.requestId_,\n        returnUrl,\n        args: this.args_,\n      });\n      url = addFragmentParam(url, '__WA__', requestString);\n    }\n\n    // Open the window.\n    let targetWin;\n    let openTarget = this.openTarget_;\n    // IE does not support CORS popups - the popup has to fallback to redirect\n    // mode.\n    if (openTarget != '_top') {\n      if (isIeBrowser(this.win_)) {\n        openTarget = '_top';\n      }\n    }\n    // Try first with the specified target. If we're inside the WKWebView or\n    // a similar environments, this method is expected to fail by default for\n    // all targets except `_top`.\n    try {\n      targetWin = this.win_.open(url, openTarget, featuresStr);\n    } catch (e) {\n      // Ignore.\n    }\n    // Then try with `_top` target.\n    if (!targetWin &&\n        openTarget != '_top' &&\n        !this.options_.disableRedirectFallback) {\n      openTarget = '_top';\n      try {\n        targetWin = this.win_.open(url, openTarget);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n\n    // Setup the target window.\n    if (targetWin) {\n      this.targetWin_ = targetWin;\n      if (openTarget != '_top') {\n        this.setupPopup_();\n      }\n    } else {\n      this.disconnectWithError_(new Error('failed to open window'));\n    }\n\n    // Return result promise, even though it may never complete.\n    return this.resultPromise_.catch(() => {\n      // Ignore. Call to the `acceptResult()` should fail if needed.\n    });\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  buildFeatures_() {\n    // The max width and heights are calculated as following:\n    // MaxSize = AvailSize - ControlsSize\n    // ControlsSize = OuterSize - InnerSize\n    const screen = this.win_.screen;\n    const availWidth = screen.availWidth || screen.width;\n    const availHeight = screen.availHeight || screen.height;\n    const isTop = this.isTopWindow_();\n    const isEdge = isEdgeBrowser(this.win_);\n    // Limit controls to 100px width and height. Notice that it's only\n    // possible to calculate controls size in the top window, not in iframes.\n    // Notice that the Edge behavior is somewhat unique. If we can't find the\n    // right width/height, it will launch in the full-screen. Other browsers\n    // deal with such cases more gracefully.\n    const controlsWidth =\n        isTop && this.win_.outerWidth > this.win_.innerWidth ?\n        Math.min(100, this.win_.outerWidth - this.win_.innerWidth) :\n        (isEdge ? 100 : 0);\n    const controlsHeight =\n        isTop && this.win_.outerHeight > this.win_.innerHeight ?\n        Math.min(100, this.win_.outerHeight - this.win_.innerHeight) :\n        (isEdge ? 100 : 0);\n    // With all the adjustments, at least 50% of the available width/height\n    // should be made available to a popup.\n    const maxWidth = Math.max(availWidth - controlsWidth, availWidth * 0.5);\n    const maxHeight = Math.max(availHeight - controlsHeight, availHeight * 0.5);\n    let w = Math.floor(Math.min(600, maxWidth * 0.9));\n    let h = Math.floor(Math.min(600, maxHeight * 0.9));\n    if (this.options_.width) {\n      w = Math.min(this.options_.width, maxWidth);\n    }\n    if (this.options_.height) {\n      h = Math.min(this.options_.height, maxHeight);\n    }\n    const x = Math.floor((screen.width - w) / 2);\n    const y = Math.floor((screen.height - h) / 2);\n    const features = {\n      'height': h,\n      'width': w,\n      'resizable': 'yes',\n      'scrollbars': 'yes',\n    };\n    // Do not set left/top in Edge: it fails.\n    if (!isEdge) {\n      features['left'] = x;\n      features['top'] = y;\n    }\n    let featuresStr = '';\n    for (const f in features) {\n      if (featuresStr) {\n        featuresStr += ',';\n      }\n      featuresStr += `${f}=${features[f]}`;\n    }\n    return featuresStr;\n  }\n\n  /**\n   * This method only exists to make iframe/top emulation possible in tests.\n   * Otherwise `window.top` cannot be overridden.\n   * @return {boolean}\n   * @private\n   */\n  isTopWindow_() {\n    return this.win_ == this.win_.top;\n  }\n\n  /** @private */\n  setupPopup_() {\n    // Keep alive to catch the window closing, which would indicate\n    // \"cancel\" signal.\n    this.heartbeatInterval_ = this.win_.setInterval(() => {\n      this.check_(/* delayCancel */ true);\n    }, 500);\n\n    // Start up messaging. The messaging is explicitly allowed to proceed\n    // without origin check b/c all arguments have already been passed in\n    // the URL and special handling is enforced when result is delivered.\n    this.messenger_ = new Messenger(\n        this.win_,\n        /** @type {!Window} */ (this.targetWin_),\n        /* targetOrigin */ null,\n        /* requireTarget */ true);\n    this.messenger_.connect(this.handleCommand_.bind(this));\n  }\n\n  /**\n   * @param {boolean=} opt_delayCancel\n   * @private\n   */\n  check_(opt_delayCancel) {\n    if (!this.targetWin_ || this.targetWin_.closed) {\n      if (this.heartbeatInterval_) {\n        this.win_.clearInterval(this.heartbeatInterval_);\n        this.heartbeatInterval_ = null;\n      }\n      // Give a chance for the result to arrive, but otherwise consider the\n      // responce to be empty.\n      this.win_.setTimeout(() => {\n        try {\n          this.result_(ActivityResultCode.CANCELED, /* data */ null);\n        } catch (e) {\n          this.disconnectWithError_(e);\n        }\n      }, opt_delayCancel ? 3000 : 0);\n    }\n  }\n\n  /**\n   * @param {!Error} reason\n   * @private\n   */\n  disconnectWithError_(reason) {\n    if (this.resultResolver_) {\n      this.resultResolver_(Promise.reject(reason));\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @private\n   */\n  result_(code, data) {\n    if (this.resultResolver_) {\n      const isConnected = this.messenger_.isConnected();\n      const result = new ActivityResult(\n          code,\n          data,\n          ActivityMode.POPUP,\n          isConnected ?\n              this.messenger_.getTargetOrigin() :\n              getOriginFromUrl(this.url_),\n          /* originVerified */ isConnected,\n          /* secureChannel */ isConnected);\n      resolveResult(this.win_, result, this.resultResolver_);\n      this.resultResolver_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.sendCommand('close');\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      const code = /** @type {!ActivityResultCode} */ (payload['code']);\n      const data =\n          code == ActivityResultCode.FAILED ?\n          new Error(payload['data'] || '') :\n          payload['data'];\n      this.result_(code, data);\n    } else if (cmd == 'check') {\n      this.win_.setTimeout(() => this.check_(), 200);\n    }\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @param {string} fragment\n * @param {string} requestId\n * @return {?ActivityPort}\n */\nfunction discoverRedirectPort(win, fragment, requestId) {\n  // Try to find the result in the fragment.\n  const paramName = '__WA_RES__';\n  const fragmentParam = getQueryParam(fragment, paramName);\n  if (!fragmentParam) {\n    return null;\n  }\n  const response = /** @type {?Object} */ (JSON.parse(fragmentParam));\n  if (!response || response['requestId'] != requestId) {\n    return null;\n  }\n\n  // Remove the found param from the fragment.\n  const cleanFragment = removeQueryParam(win.location.hash, paramName) || '';\n  if (cleanFragment != win.location.hash) {\n    if (win.history && win.history.replaceState) {\n      try {\n        win.history.replaceState(win.history.state, '', cleanFragment);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n  }\n\n  const code = response['code'];\n  const data = response['data'];\n  const origin = response['origin'];\n  const referrerOrigin = win.document.referrer &&\n      getOriginFromUrl(win.document.referrer);\n  const originVerified = origin == referrerOrigin;\n  return new ActivityWindowRedirectPort(\n      win,\n      code,\n      data,\n      origin,\n      originVerified);\n}\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n */\nclass ActivityWindowRedirectPort {\n\n  /**\n   * @param {!Window} win\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {string} targetOrigin\n   * @param {boolean} targetOriginVerified\n   */\n  constructor(win, code, data, targetOrigin, targetOriginVerified) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!ActivityResultCode} */\n    this.code_ = code;\n    /** @private @const {*} */\n    this.data_ = data;\n    /** @private {string} */\n    this.targetOrigin_ = targetOrigin;\n    /** @private {boolean} */\n    this.targetOriginVerified_ = targetOriginVerified;\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.REDIRECT;\n  }\n\n  /** @override */\n  acceptResult() {\n    const result = new ActivityResult(\n        this.code_,\n        this.data_,\n        ActivityMode.REDIRECT,\n        this.targetOrigin_,\n        this.targetOriginVerified_,\n        /* secureChannel */ false);\n    return new Promise(resolve => {\n      resolveResult(this.win_, result, resolve);\n    });\n  }\n}\n\n\n\n\n/**\n * The page-level activities manager ports. This class is intended to be used\n * as a singleton. It can start activities of all modes: iframe, popup, and\n * redirect.\n */\nclass ActivityPorts {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {string} */\n    this.version = '1.24';\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {string} */\n    this.fragment_ = win.location.hash;\n\n    /**\n     * @private @const {!Object<string, !Array<function(!ActivityPort)>>}\n     */\n    this.requestHandlers_ = {};\n\n    /**\n     * The result buffer is indexed by `requestId`.\n     * @private @const {!Object<string, !ActivityPort>}\n     */\n    this.resultBuffer_ = {};\n\n    /** @private {?function(!Error)} */\n    this.redirectErrorResolver_ = null;\n\n    /** @private {!Promise<!Error>} */\n    this.redirectErrorPromise_ = new Promise(resolve => {\n      this.redirectErrorResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, opt_args) {\n    const port = new ActivityIframePort(iframe, url, opt_args);\n    return port.connect().then(() => port);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, opt_args, opt_options) {\n    const port = this.openWin_(requestId, url, target, opt_args, opt_options);\n    return {targetWin: port.getTargetWin()};\n  }\n\n  /**\n   * Start an activity in a separate window and tries to setup messaging with\n   * this window.\n   *\n   * See `open()` method for more details, including `onResult` callback.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {!Promise<!ActivityMessagingPort>}\n   */\n  openWithMessaging(requestId, url, target, opt_args, opt_options) {\n    const port = this.openWin_(requestId, url, target, opt_args, opt_options);\n    return port.whenConnected().then(() => port);\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPort)} callback\n   */\n  onResult(requestId, callback) {\n    let handlers = this.requestHandlers_[requestId];\n    if (!handlers) {\n      handlers = [];\n      this.requestHandlers_[requestId] = handlers;\n    }\n    handlers.push(callback);\n\n    // Consume available result.\n    const availableResult = this.discoverResult_(requestId);\n    if (availableResult) {\n      this.consumeResult_(availableResult, callback);\n    }\n  }\n\n  /**\n   * @param {function(!Error)} handler\n   */\n  onRedirectError(handler) {\n    this.redirectErrorPromise_.then(handler);\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {!ActivityWindowPort}\n   */\n  openWin_(requestId, url, target, opt_args, opt_options) {\n    const port = new ActivityWindowPort(\n        this.win_, requestId, url, target, opt_args, opt_options);\n    port.open().then(() => {\n      // Await result if possible. Notice that when falling back to \"redirect\",\n      // the result will never arrive through this port.\n      this.consumeResultAll_(requestId, port);\n    });\n    return port;\n  }\n\n  /**\n   * @param {string} requestId\n   * @return {?ActivityPort}\n   * @private\n   */\n  discoverResult_(requestId) {\n    let port = this.resultBuffer_[requestId];\n    if (!port && this.fragment_) {\n      try {\n        port = discoverRedirectPort(\n            this.win_, this.fragment_, requestId);\n      } catch (e) {\n        throwAsync(e);\n        this.redirectErrorResolver_(e);\n      }\n      if (port) {\n        this.resultBuffer_[requestId] = port;\n      }\n    }\n    return port;\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @param {function(!ActivityPort)} callback\n   * @private\n   */\n  consumeResult_(port, callback) {\n    Promise.resolve().then(() => {\n      callback(port);\n    });\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {!ActivityPort} port\n   * @private\n   */\n  consumeResultAll_(requestId, port) {\n    // Find and execute handlers.\n    const handlers = this.requestHandlers_[requestId];\n    if (handlers) {\n      handlers.forEach(handler => {\n        this.consumeResult_(port, handler);\n      });\n    }\n    // Buffer the result for callbacks that may arrive in the future.\n    this.resultBuffer_[requestId] = port;\n  }\n}\n\n\n\nmodule.exports = {\n  ActivityPorts,\n  ActivityIframePort,\n  ActivityMessagingPort,\n  ActivityMode,\n  ActivityOpenOptions,\n  ActivityPort,\n  ActivityRequest,\n  ActivityResult,\n  ActivityResultCode,\n  ActivityWindowPort,\n  createAbortError,\n  isAbortError,\n};\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent,EventOriginator} from '../proto/api_messages';\n\n/** @enum {number}  */\nexport const FilterResult = {\n  /** The event is allowed to proceed to the listeners. */\n  PROCESS_EVENT: 0,\n  /** The event is canceled and the listeners are not informed about it. */\n  CANCEL_EVENT: 1,\n};\n\n/**\n * Defines a client event in SwG\n * Properties:\n * - eventType: Required. The AnalyticsEvent type that occurred.\n * - eventOriginator: Required.  The codebase that initiated the event.\n * - isFromUserAction: Optional.  True if the user took an action to generate\n *   the event.\n * - additionalParameters: Optional.  A JSON object to store generic data.\n *\n *  @typedef {{\n *    eventType: !AnalyticsEvent,\n *    eventOriginator: !EventOriginator,\n *    isFromUserAction: ?boolean,\n *    additionalParameters: ?Object,\n * }}\n */\nexport let ClientEvent;\n\n/**\n * @interface\n */\nexport class ClientEventManagerApi {\n  /**\n   * Call this function to log an event. The registered listeners will be\n   * invoked unless the event is filtered.\n   * @param {!function(!ClientEvent)} listener\n   */\n  registerEventListener(listener) { }\n\n  /**\n   * Register a filterer for events if you need to potentially prevent the\n   * listeners from hearing about it.  A filterer should return\n   * FilterResult.CANCEL_EVENT to prevent listeners from hearing about the\n   * event.\n   * @param {!function(!ClientEvent):FilterResult} filterer\n   */\n  registerEventFilterer(filterer) { }\n\n  /**\n   * Call this function to log an event.  It will immediately throw an error if\n   * the event is invalid.  It will then asynchronously call the filterers and\n   * stop the event if a filterer cancels it.  After that, it will call each\n   * listener asynchronously.\n   * @param {!ClientEvent} event\n   */\n  logEvent(event) { }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {PurchaseData} from './subscribe-response';\nimport {UserData} from './user-data';\n\n\n/**\n * Properties:\n * - entitlements - the current entitlements.\n * - consent - whether to ask the user for account creation consent.\n *   Default is `true`.\n *\n * @typedef {{\n *   entitlements: (?Entitlements|undefined),\n *   consent: (boolean|undefined),\n * }}\n */\nexport let DeferredAccountCreationRequest;\n\n\n/**\n */\nexport class DeferredAccountCreationResponse {\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @param {!UserData} userData\n   * @param {!Array<!PurchaseData>} purchaseDataList\n   * @param {function():!Promise} completeHandler\n   */\n  constructor(entitlements, userData, purchaseDataList, completeHandler) {\n    /** @const {!Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {!UserData} */\n    this.userData = userData;\n    /** @const {!Array<!PurchaseData>} */\n    this.purchaseDataList = purchaseDataList;\n    // TODO(dvoytenko): deprecate.\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseDataList[0];\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n  }\n\n  /**\n   * @return {!DeferredAccountCreationResponse}\n   */\n  clone() {\n    return new DeferredAccountCreationResponse(\n        this.entitlements,\n        this.userData,\n        this.purchaseDataList,\n        this.completeHandler_);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'entitlements': this.entitlements.json(),\n      'userData': this.userData.json(),\n      'purchaseDataList': this.purchaseDataList.map(pd => pd.json()),\n      // TODO(dvoytenko): deprecate.\n      'purchaseData': this.purchaseData.json(),\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription info. The typical action would be to create an\n   * account (or match an existing one) and associated the subscription with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getPropertyFromJsonString} from '../utils/json';\n\n/**\n * The holder of the entitlements for a service.\n */\nexport class Entitlements {\n  /**\n   * @param {string} service\n   * @param {string} raw\n   * @param {!Array<!Entitlement>} entitlements\n   * @param {?string} currentProduct\n   * @param {function(!Entitlements)} ackHandler\n   * @param {?boolean|undefined} isReadyToPay\n   * @param {?string|undefined} decryptedDocumentKey\n   */\n  constructor(\n    service,\n    raw,\n    entitlements,\n    currentProduct,\n    ackHandler,\n    isReadyToPay,\n    decryptedDocumentKey\n  ) {\n    /** @const {string} */\n    this.service = service;\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!Array<!Entitlement>} */\n    this.entitlements = entitlements;\n    /** @const {boolean} */\n    this.isReadyToPay = isReadyToPay || false;\n    /** @const {?string} */\n    this.decryptedDocumentKey = decryptedDocumentKey || null;\n\n    /** @private @const {?string} */\n    this.product_ = currentProduct;\n    /** @private @const {function(!Entitlements)} */\n    this.ackHandler_ = ackHandler;\n  }\n\n  /**\n   * @return {!Entitlements}\n   */\n  clone() {\n    return new Entitlements(\n      this.service,\n      this.raw,\n      this.entitlements.map(ent => ent.clone()),\n      this.product_,\n      this.ackHandler_,\n      this.isReadyToPay,\n      this.decryptedDocumentKey\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'service': this.service,\n      'entitlements': this.entitlements.map(item => item.json()),\n      'isReadyToPay': this.isReadyToPay,\n    };\n  }\n\n  /**\n   * @param {string=} source\n   * @return {boolean}\n   */\n  enablesThis(source) {\n    return this.enables(this.product_, source);\n  }\n\n  /**\n   * @param {string=} source\n   * @return {boolean}\n   */\n  enablesAny(source) {\n    for (let i = 0; i < this.entitlements.length; i++) {\n      if (\n        this.entitlements[i].products.length > 0 &&\n        (!source || source == this.entitlements[i].source)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether these entitlements enable the specified product, optionally also\n   * restricting the source.\n   * @param {?string} product\n   * @param {string=} source\n   * @return {boolean}\n   */\n  enables(product, source) {\n    if (!product) {\n      return false;\n    }\n    return !!this.getEntitlementFor(product, source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the current product,\n   * optionally also matching the specified source.\n   * @param {string=} source\n   * @return {?Entitlement}\n   */\n  getEntitlementForThis(source) {\n    return this.getEntitlementFor(this.product_, source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified product,\n   * optionally also matching the specified source.\n   * @param {?string} product\n   * @param {string=} source\n   * @return {?Entitlement}\n   */\n  getEntitlementFor(product, source) {\n    if (product && this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (\n          this.entitlements[i].enables(product) &&\n          (!source || source == this.entitlements[i].source)\n        ) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified source w/o\n   * matching any specific products.\n   * @param {string} source\n   * @return {?Entitlement}\n   */\n  getEntitlementForSource(source) {\n    if (this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (\n          this.entitlements[i].subscriptionToken &&\n          source == this.entitlements[i].source\n        ) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * A 3p site should call this method to acknowledge that it \"saw\" and\n   * \"understood\" entitlements.\n   */\n  ack() {\n    this.ackHandler_(this);\n  }\n}\n\n/**\n * The single entitlement object.\n */\nexport class Entitlement {\n  /**\n   * @param {string} source\n   * @param {!Array<string>} products\n   * @param {string} subscriptionToken\n   */\n  constructor(source, products, subscriptionToken) {\n    /** @const {string} */\n    this.source = source;\n    /** @const {!Array<string>} */\n    this.products = products;\n    /** @const {string} */\n    this.subscriptionToken = subscriptionToken;\n  }\n\n  /**\n   * @return {!Entitlement}\n   */\n  clone() {\n    return new Entitlement(\n      this.source,\n      this.products.slice(0),\n      this.subscriptionToken\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'source': this.source,\n      'products': this.products,\n      'subscriptionToken': this.subscriptionToken,\n    };\n  }\n\n  /**\n   * @param {?string} product\n   * @return {boolean}\n   */\n  enables(product) {\n    if (!product) {\n      return false;\n    }\n    // Wildcard allows this product.\n    const eq = product.indexOf(':');\n    if (\n      eq != -1 &&\n      this.products.includes(product.substring(0, eq + 1) + '*')\n    ) {\n      return true;\n    }\n    return this.products.includes(product);\n  }\n\n  /**\n   * @param {?Object} json\n   * @return {!Entitlement}\n   */\n  static parseFromJson(json) {\n    if (!json) {\n      json = {};\n    }\n    const source = json['source'] || '';\n    const products = json['products'] || [];\n    const subscriptionToken = json['subscriptionToken'];\n    return new Entitlement(source, products, subscriptionToken);\n  }\n\n  /**\n   * The JSON is expected in one of the forms:\n   * - Single entitlement: `{products: [], ...}`.\n   * - A list of entitlements: `[{products: [], ...}, {...}]`.\n   * @param {!Object|!Array<!Object>} json\n   * @return {!Array<!Entitlement>}\n   */\n  static parseListFromJson(json) {\n    const jsonList = Array.isArray(json)\n      ? /** @type {!Array<Object>} */ (json)\n      : [json];\n    return jsonList.map(json => Entitlement.parseFromJson(json));\n  }\n\n  /**\n   * Returns the SKU associated with this entitlement.\n   * @return {?string}\n   */\n  getSku() {\n    return (\n      /** @type {?string} */ (getPropertyFromJsonString(\n        this.subscriptionToken,\n        'productId'\n      ) || null)\n    );\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {string}\n */\nexport const SubscriptionState = {\n  // user's subscription state not known.\n  UNKNOWN: 'unknown',\n  // user is not a subscriber.\n  NON_SUBSCRIBER: 'non_subscriber',\n  // user is a subscriber.\n  SUBSCRIBER: 'subscriber',\n  // user's subscription has expired.\n  PAST_SUBSCRIBER: 'past_subscriber',\n};\n\n/**\n * Subscription related events. Listed below are enum strings that\n * represent events related to Subscription flow. Event parameters\n * that provide more context about the event are sent as a JSON\n * block of depth 1 in the sendEvent() API call.\n * @enum {string}\n */\nexport const Event = {\n  /**\n   * IMPRESSION_PAYWALL event.\n   * User hits a paywall.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * If the user has run out of metering, and that’s why was shown\n   * a paywall, that would be a passive impression of the paywall.\n   * For example:\n   * const propensityEvent = {\n   *  name: 'paywall',\n   *  active: false,\n   * }\n   */\n  IMPRESSION_PAYWALL: 'paywall',\n  /**\n   * IMPRESSION_AD event.\n   * User has been shown a subscription ad.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * The JSON block can provide the name of the subscription ad\n   * creative or campaign. Ad impressions are usually passive.\n   * const propensityEvent = {\n   *   name: 'ad_shown',\n   *   active: false,\n   *   data: {'ad_name': 'fall_ad'}\n   * }\n   */\n  IMPRESSION_AD: 'ad_shown',\n  /**\n   * IMPRESSION_OFFERS event.\n   * User has been shown a list of available offers for subscription.\n   * Every impression should be qualified as active or passive.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false to indicate this.\n   * The JSON block can provide a list of products displayed,\n   * and the source to indicate why the user was shown the offer.\n   * Note: source is not the same as referrer.\n   * In the cases below, the user took action before seeing the offers,\n   * and therefore considered active impression.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: true,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': 'ad-click'}\n   * }\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: true,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': ‘navigate-to-offers-page’}\n   * }\n   * If the user was shown the offers as a result of paywall metering\n   * expiration, it is considered a passive impression.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'offers_shown',\n   *   active: false,\n   *   data: {'offers': ['basic-monthly', 'premium-weekly'],\n   *           'source': ‘paywall-metering-expired’}\n   * }\n   */\n  IMPRESSION_OFFERS: 'offers_shown',\n  /**\n   * ACTION_SUBSCRIPTIONS_LANDING_PAGE event.\n   * User has taken the action to arrive at a landing page of the\n   * subscription workflow. The landing page should satisfy one of\n   * the following conditions and hence be a part of the funnel to\n   * get the user to subscribe:\n   * - have a button to navigate the user to an offers page, (in\n   *   this case, the next event will be IMPRESSION_OFFERS, with\n   *   parameter 'source' as subscriptions-landing-page and\n   *   'is_active' set to true),\n   * - show offers the user can select, (in this case, the next\n   *   event will be IMPRESSION_OFFERS, with a parameter 'source'\n   *   as navigate-to-offers-page and 'is_active' set to true),\n   * - provide a way to start the payment flow for a specific offer.\n   *   (in this case, the next event will be ACTION_OFFER_SELECTED\n   *   or ACTION_PAYMENT_FLOW_STARTED depending on if that button\n   *   took the user to a checkout page on the publishers site or\n   *   directly started the payment flow).\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block with this event can provide additional information\n   * such as the source, indicating what caused the user to navigate\n   * to this page.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'subscriptions_landing_page',\n   *   active: true,\n   *   data: {'source': 'marketing_via_email'}\n   * }\n   */\n  ACTION_SUBSCRIPTIONS_LANDING_PAGE: 'subscriptions_landing_page',\n  /**\n   * ACTION_OFFER_SELECTED event.\n   * User has selected an offer.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product selected.\n   * For example: {\n   *   name: 'offer_selected',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   * When offer selection starts the payment flow directly,\n   * use the next event ACTION_PAYMENT_FLOW_STARTED instead.\n   */\n  ACTION_OFFER_SELECTED: 'offer_selected',\n  /**\n   * ACTION_PAYMENT_FLOW_STARTED event.\n   * User has started payment flow.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product selected.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'payment_flow_started',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   */\n  ACTION_PAYMENT_FLOW_STARTED: 'payment_flow_start',\n  /**\n   * ACTION_PAYMENT_COMPLETED.\n   * User has made the payment for a subscription.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true since this is a user action.\n   * The JSON block can provide the product user paid for.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'payment_complete',\n   *   active: true,\n   *   data: {product': 'basic-monthly'}\n   * }\n   */\n  ACTION_PAYMENT_COMPLETED: 'payment_complete',\n  /**\n   * EVENT_CUSTOM: custom publisher event.\n   * The field 'active' of PropensityEvent, which carries this\n   * event, must be set to true or false depending on if the event\n   * was generated as a result of a user action.\n   * The JSON block can provide the event name for the custom event.\n   * For example:\n   * const propensityEvent = {\n   *   name: 'custom',\n   *   active: true,\n   *   data: {\n   *     'event_name': 'social_share',\n   *     'platform_used': 'whatsapp'\n   *   }\n   *  }\n   */\n  EVENT_CUSTOM: 'custom',\n};\n\n/**\n * Propensity Event\n * Properties:\n * - name: Required. Name should be valid string in the Event\n *         enum within src/api/logger-api.js.\n * - active: Required. A boolean that indicates whether the\n *         user took some action to participate in the flow\n *         that generated this event. For impression event,\n *         this is set to true if is_active field would be\n *         set to true, as described in documentation for\n *         enum Event. Otherwise, set this field to false.\n *         For action events, this field must always be set\n *         to true. The caller must always set this field.\n * - data: Optional. JSON block of depth '1' provides event\n *         parameters. The guideline to create this JSON block\n *         that describes the event is provided against each\n *         enum listed in the Event enum above.\n *\n *  @typedef {{\n *    name: string,\n *    active: boolean,\n *    data: ?JsonObject,\n * }}\n */\nexport let PublisherEvent;\n\n/**\n * @interface\n */\nexport class LoggerApi {\n  /**\n   * Send a buy-flow event that occurred on the publisher's site to Google.  The\n   * ultimate destination is controlled by configuration settings.  Publisher\n   * configuration available:\n   *   enablePropensity - Sends data to the Propensity to Subscribe ads server.\n   *   enableSwgAnalytics - Sends data to Google's analytics server for buy-flow\n   *     comparison purposes.\n   * @param {!PublisherEvent} userEvent\n   */\n  sendEvent(userEvent) {}\n\n  /**\n   * Send user subscription state upon initial discovery.\n   * A user may have active subscriptions to some products\n   * and expired subscriptions to others. Make one API call\n   * per subscription state and provide a corresponding\n   * list of products with a json object of depth 1.\n   * For example:\n   *     {'product': ['product1', 'product2']}\n   * Each call to this API should have the first argument\n   * as a valid string from the enum SubscriptionState.\n   * @param {SubscriptionState} state\n   * @param {?JsonObject} jsonProducts\n   */\n  sendSubscriptionState(state, jsonProducts) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nexport class Offer {\n\n  /**\n   * @param {string} skuId\n   * @param {string} title\n   * @param {string} description\n   * @param {string} price\n   */\n  constructor(skuId, title, description, price) {\n    /** @const {string} */\n    this.skuId = skuId;\n    /** @const {string} */\n    this.title = title;\n    /** @const {string} */\n    this.description = description;\n    /** @const {string} */\n    this.price = price;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as LoggerApi from './logger-api';\n\n/**\n * @enum {string}\n */\nexport const PropensityType = {\n  // Propensity score for a user to subscribe to a publication.\n  GENERAL: 'general',\n  // Propensity score when blocked access to content by paywall.\n  PAYWALL: 'paywall',\n};\n\n/**\n * The Propensity Score\n * - value: Required. A number that indicates the propensity to subscribe.\n * - bucketed: Required. Indicates if the score is a raw score [1-100] or bucketed[1-20].\n *\n * @typedef {{\n *   value: number,\n *   bucketed: boolean,\n * }}\n */\nexport let Score;\n\n/**\n * Propensity Score Detail\n * Properties:\n * - product: Required. Indicates the publication_id:product_id for which the score is provided.\n * - score: Optional. When score is available, this field contains the propensity score for this product.\n * - error: Optional. When no score is avaialble, a string provides the error message.\n *\n * @typedef {{\n *   product: string,\n *   score: ?Score,\n *   error: ?string,\n * }}\n */\nexport let ScoreDetail;\n\n/**\n * The Body field of the Propensity Score.\n * Properties:\n * - scores: Optional, an array of scores. When header indicates so, atleast one score is available.\n * - error: Optional, string describing why, if no scores were provided by the server.\n *\n *  @typedef {{\n *    scores: ?Array<ScoreDetail>,\n *    error: ?string,\n * }}\n */\nexport let Body;\n\n/**\n * The Header of the Propensity Score.\n * Properties:\n * - ok: Required. true, if propensity score is available, false otherwise.\n *\n *  @typedef {{\n *    ok: boolean,\n * }}\n */\nexport let Header;\n\n/**\n * The Propensity Score.\n * Properties:\n * - header: Required. Provides the header of the Score response.\n * - body: Required. Provides the body of the Score response.\n *\n *  @typedef {{\n *    header: Header,\n *    body: Body,\n * }}\n */\nexport let PropensityScore;\n\n/**\n * Propensity Event\n *   Please note that the primary defition of this object has changed to\n *   PublisherEvent and is defined in logger-api.js.  These two object\n *   definitions are identical.\n * Properties:\n * - name: Required. Name should be valid string in the Event\n *         enum within src/api/logger-api.js.\n * - active: Required. A boolean that indicates whether the\n *         user took some action to participate in the flow\n *         that generated this event. For impression event,\n *         this is set to true if is_active field would be\n *         set to true, as described in documentation for\n *         enum Event. Otherwise, set this field to false.\n *         For action events, this field must always be set\n *         to true. The caller must always set this field.\n * - data: Optional. JSON block of depth '1' provides event\n *         parameters. The guideline to create this JSON block\n *         that describes the event is provided against each\n *         enum listed in the Event enum above.\n *\n *  @typedef {{\n *    name: string,\n *    active: boolean,\n *    data: ?JsonObject,\n * }}\n */\nexport let PropensityEvent;\n\n/*\n * Please note that the definitions of Event and SubscriptionState have moved\n * to logger-api.js.  This is now the preferred interface to use for logging\n * publisher events and setting the user's current subscription state.\n * Propensity will continue to function as an event logger until we are certain\n * no publishers are actively using it to log events.\n */\nexport const Event = LoggerApi.Event;\nexport const SubscriptionState = LoggerApi.SubscriptionState;\n\n/**\n * @extends {LoggerApi.LoggerApi}\n * @interface\n */\nexport class PropensityApi extends LoggerApi.LoggerApi {\n  /**\n   * Get the propensity of a user to subscribe based on the type.\n   * The argument should be a valid string from PropensityType.\n   * If no type is provided, GENERAL score is returned.\n   * @param {PropensityType=} type\n   * @return {?Promise<!PropensityScore>}\n   */\n  getPropensity(type) {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {UserData} from './user-data';\n\n\n/**\n */\nexport class SubscribeResponse {\n\n  /**\n   * @param {string} raw\n   * @param {!PurchaseData} purchaseData\n   * @param {?UserData} userData\n   * @param {?Entitlements} entitlements\n   * @param {!string} productType\n   * @param {function():!Promise} completeHandler\n   * @param {?string=} oldSku\n   */\n  constructor(raw, purchaseData, userData, entitlements, productType,\n      completeHandler, oldSku = null) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseData;\n    /** @const {?UserData} */\n    this.userData = userData;\n    /** @const {?Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {string} */\n    this.productType = productType;\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n    /** @const {?string} */\n    this.oldSku = oldSku;\n  }\n\n  /**\n   * @return {!SubscribeResponse}\n   */\n  clone() {\n    return new SubscribeResponse(\n        this.raw,\n        this.purchaseData,\n        this.userData,\n        this.entitlements,\n        this.productType,\n        this.completeHandler_,\n        this.oldSku\n    );\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'purchaseData': this.purchaseData.json(),\n      'userData': this.userData ? this.userData.json() : null,\n      'entitlements': this.entitlements ? this.entitlements.json() : null,\n      'oldSku' : this.oldSku,\n      'productType': this.productType,\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription purchase. The typical action would be to create an\n   * account (or match an existing one) and associated the purchase with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n\n\n/**\n */\nexport class PurchaseData {\n\n  /**\n   * @param {string} raw\n   * @param {string} signature\n   */\n  constructor(raw, signature) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {string} */\n    this.data = raw;\n    /** @const {string} */\n    this.signature = signature;\n  }\n\n  /**\n   * @return {!PurchaseData}\n   */\n  clone() {\n    return new PurchaseData(this.raw, this.signature);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'data': this.raw,\n      'signature': this.signature,\n    };\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlements} from './entitlements';\nimport {Offer} from './offer';\nimport {\n  DeferredAccountCreationRequest,\n  DeferredAccountCreationResponse,\n} from './deferred-account-creation';\nimport {SubscribeResponse} from './subscribe-response';\nimport {PropensityApi} from './propensity-api';\nimport {LoggerApi} from './logger-api';\n\n/**\n * @interface\n */\nexport class Subscriptions {\n  /**\n   * Optionally initializes the subscriptions runtime with publication or\n   * product ID. If not called, the runtime will look for the initialization\n   * parameters in the page's markup.\n   * @param {string} productOrPublicationId\n   */\n  init(productOrPublicationId) {}\n\n  /**\n   * Optionally configures the runtime with non-default properties. See\n   * `Config` definition for details.\n   * @param {!Config} config\n   */\n  configure(config) {}\n\n  /**\n   * Starts the entitlement flow.\n   */\n  start() {}\n\n  /**\n   * Resets the entitlements that can be fetched again.\n   */\n  reset() {}\n\n  /**\n   * Resets the entitlements and clears all of the caches.\n   */\n  clear() {}\n\n  /**\n   * @param {?string=} encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements(encryptedDocumentKey) {}\n\n  /**\n   * Set the subscribe callback.\n   * @param {function(!Promise<!Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {}\n\n  /**\n   * Returns a set of offers.\n   * @param {{\n   *   productId: (string|undefined),\n   * }=} options\n   * @return {!Promise<!Array<!Offer>>}\n   */\n  getOffers(options) {}\n\n  /**\n   * Starts the Offers flow.\n   * @param {!OffersRequest=} options\n   */\n  showOffers(options) {}\n\n  /**\n   * Starts the Offers flow for a subscription update.\n   * @param {!OffersRequest=} options\n   */\n  showUpdateOffers(options) {}\n\n  /**\n   * Show subscription option.\n   * @param {!OffersRequest=} options\n   */\n  showSubscribeOption(options) {}\n\n  /**\n   * Show abbreviated offers.\n   * @param {!OffersRequest=} options\n   */\n  showAbbrvOffer(options) {}\n\n  /**\n   * Show contribution options for the users to select from.\n   * The options are grouped together by periods (Weekly, Monthly, etc.).\n   * User can select the amount to contribute to from available options\n   * to the publisher. These options are based on the SKUs defined in the Play\n   * console for a given publication.\n   * Each SKU has Amount, Period, SKUId and other attributes.\n   * @param {!OffersRequest=} options\n   */\n  showContributionOptions(options) {}\n\n  /**\n   * Set the callback for the native subscribe request. Setting this callback\n   * triggers the \"native\" option in the offers flow.\n   * @param {function()} callback\n   */\n  setOnNativeSubscribeRequest(callback) {}\n\n  /**\n   * Set the subscribe complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {}\n\n  /**\n   * Starts subscription purchase flow.\n   * @param {string} sku\n   */\n  subscribe(sku) {}\n\n  /**\n   * Starts subscription purchase flow.\n   * @param {SubscriptionRequest} subscriptionRequest\n   */\n  updateSubscription(subscriptionRequest) {}\n\n  /**\n   * Set the contribution complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnContributionResponse(callback) {}\n\n  /**\n   * Set the payment complete callback.\n   * @param {function(!Promise<!SubscribeResponse>)} callback\n   */\n  setOnPaymentResponse(callback) {}\n\n  /**\n   * Starts contributions purchase flow.\n   * @param {string|SubscriptionRequest} skuOrSubscriptionRequest\n   */\n  contribute(skuOrSubscriptionRequest) {}\n\n  /**\n   * Starts the deferred account creation flow.\n   * See `DeferredAccountCreationRequest` for more details.\n   * @param {?DeferredAccountCreationRequest=} options\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  completeDeferredAccountCreation(options) {}\n\n  /**\n   * @param {function(!LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {}\n\n  /**\n   * Starts the login prompt flow.\n   * @return {!Promise}\n   */\n  showLoginPrompt() {}\n\n  /**\n   * Starts the login notification flow.\n   * @return {!Promise}\n   */\n  showLoginNotification() {}\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {}\n\n  /**\n   * @param {!Promise} accountPromise Publisher's promise to lookup account.\n   * @return {!Promise}\n   */\n  waitForSubscriptionLookup(accountPromise) {}\n\n  /**\n   * Starts the Account linking flow.\n   * TODO(dparikh): decide if it's only exposed for testing or PROD purposes.\n   * @param {{ampReaderId: (string|undefined)}=} params\n   */\n  linkAccount(params) {}\n\n  /**\n   * Notifies the client that a flow has been started. The name of the flow\n   * is passed as the callback argument. The flow name corresponds to the\n   * method name in this interface, such as \"showOffers\", or \"subscribe\".\n   * See `SubscriptionFlows` for the full list.\n   *\n   * Also see `setOnFlowCanceled` method.\n   *\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {}\n\n  /**\n   * Notifies the client that a flow has been canceled. The name of the flow\n   * is passed as the callback argument. The flow name corresponds to the\n   * method name in this interface, such as \"showOffers\", or \"subscribe\".\n   * See `SubscriptionFlows` for the full list.\n   *\n   * Notice that some of the flows, such as \"subscribe\", could additionally\n   * have their own \"cancel\" events.\n   *\n   * Also see `setOnFlowStarted` method.\n   *\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {}\n\n  /**\n   * Starts the save subscriptions flow.\n   * @param {!SaveSubscriptionRequestCallback} requestCallback\n   * @return {!Promise} a promise indicating flow is started\n   */\n  saveSubscription(requestCallback) {}\n\n  /**\n   * Creates an element with the SwG button style and the provided callback.\n   * The default theme is \"light\".\n   *\n   * @param {!ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  createButton(optionsOrCallback, callback) {}\n\n  /**\n   * Attaches the SwG button style and the provided callback to an existing\n   * DOM element. The default theme is \"light\".\n   *\n   * @param {!Element} button\n   * @param {!ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   */\n  attachButton(button, optionsOrCallback, callback) {}\n\n  /**\n   * Attaches smartButton element and the provided callback.\n   * The default theme is \"light\".\n   *\n   * @param {!Element} button\n   * @param {!SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   */\n  attachSmartButton(button, optionsOrCallback, callback) {}\n\n  /**\n   * Retrieves the propensity module that provides APIs to\n   * get propensity scores based on user state and events\n   * @return {!Promise<PropensityApi>}\n   */\n  getPropensityModule() {}\n\n  /** @return {!Promise<LoggerApi>} */\n  getLogger() {}\n}\n\n/** @enum {string} */\nexport const SubscriptionFlows = {\n  SHOW_OFFERS: 'showOffers',\n  SHOW_SUBSCRIBE_OPTION: 'showSubscribeOption',\n  SHOW_ABBRV_OFFER: 'showAbbrvOffer',\n  SHOW_CONTRIBUTION_OPTIONS: 'showContributionOptions',\n  SUBSCRIBE: 'subscribe',\n  CONTRIBUTE: 'contribute',\n  COMPLETE_DEFERRED_ACCOUNT_CREATION: 'completeDeferredAccountCreation',\n  LINK_ACCOUNT: 'linkAccount',\n  SHOW_LOGIN_PROMPT: 'showLoginPrompt',\n  SHOW_LOGIN_NOTIFICATION: 'showLoginNotification',\n};\n\n/**\n * Configuration properties:\n * - windowOpenMode - either \"auto\" or \"redirect\". The \"redirect\" value will\n *   force redirect flow for any window.open operation, including payments.\n *   The \"auto\" value either uses a redirect or a popup flow depending on\n *   what's possible on a specific environment. Defaults to \"auto\".\n * - enableSwgAnalytics - if set to true then events logged by the publisher's\n *   client will be sent to Google's SwG analytics service.  This information is\n *   used to compare the effectiveness of Google's buy-flow events to those\n *   generated by the publisher's client code.  This includes events sent to\n *   both PropensityApi and LoggerApi.\n * - enablePropensity - If true events from the logger api are sent to the\n *   propensity server.  Note events from the legacy propensity endpoint are\n *   always sent.\n * @typedef {{\n *   experiments: (!Array<string>|undefined),\n *   windowOpenMode: (!WindowOpenMode|undefined),\n *   analyticsMode: (!AnalyticsMode|undefined),\n *   enableSwgAnalytics: (boolean|undefined),\n *   enablePropensity: (boolean|undefined),\n * }}\n */\nexport let Config;\n\n/**\n * @enum {number}\n */\nexport const AnalyticsMode = {\n  DEFAULT: 0,\n  IMPRESSIONS: 1,\n};\n\n/**\n * @enum {string}\n */\nexport const WindowOpenMode = {\n  AUTO: 'auto',\n  REDIRECT: 'redirect',\n};\n\n/**\n * @enum {string}\n */\nexport const ReplaceSkuProrationMode = {\n  // The replacement takes effect immediately, and the remaining time will\n  // be prorated and credited to the user. This is the current default\n  // behavior.\n  IMMEDIATE_WITH_TIME_PRORATION: 'IMMEDIATE_WITH_TIME_PRORATION',\n};\n\n/**\n * The Offers/Contributions UI is rendered differently based on the\n * ProductType. The ProductType parameter is passed to the Payments flow, and\n * then passed back to the Payments confirmation page to render messages/text\n * based on the ProductType.\n * @enum {string}\n */\nexport const ProductType = {\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  UI_CONTRIBUTION: 'UI_CONTRIBUTION',\n};\n\n/**\n * @return {!Config}\n */\nexport function defaultConfig() {\n  return {\n    windowOpenMode: WindowOpenMode.AUTO,\n    analyticsMode: AnalyticsMode.DEFAULT,\n    enableSwgAnalytics: false,\n    enablePropensity: false,\n  };\n}\n\n/**\n * Properties:\n * - skus - a list of SKUs to return from the defined or default list. The\n *   order is preserved.\n * - list - a predefined list of SKUs. Use of this property is uncommon.\n *   Possible values are \"default\" and \"amp\". Default is \"default\".\n * - isClosable - a boolean value to determine whether the view is closable.\n *\n * @typedef {{\n *   skus: (!Array<string>|undefined),\n *   list: (string|undefined),\n *   isClosable: (boolean|undefined),\n * }}\n */\nexport let OffersRequest;\n\n/**\n * @typedef {{\n *   linkRequested: boolean,\n * }}\n */\nexport let LoginRequest;\n\n/**\n * Properties:\n * - one and only one of \"token\" or \"authCode\"\n * AuthCode reference: https://developers.google.com/actions/identity/oauth2-code-flow\n * Token reference: https://developers.google.com/actions/identity/oauth2-implicit-flow\n * @typedef {{\n *   token: (string|undefined),\n *   authCode: (string|undefined),\n * }}\n */\nexport let SaveSubscriptionRequest;\n\n/**\n * Callback for retrieving subscription request\n *\n * @callback SaveSubscriptionRequestCallback\n * @return {!Promise<SaveSubscriptionRequest> | !SaveSubscriptionRequest} request\n */\nexport let SaveSubscriptionRequestCallback;\n\n/**\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n *\n * @typedef {{\n *   theme: (string|undefined),\n *   lang: (string|undefined),\n * }}\n */\nexport let ButtonOptions;\n\n/**\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n * - messageTextColor: Overrides theme color for message text. (ex: \"#09f\")\n *\n * @typedef {{\n *   theme: (string|undefined),\n *   lang: (string|undefined),\n *   messageTextColor: (string|undefined),\n * }}\n */\nexport let SmartButtonOptions;\n\n/**\n * Properties:\n * - sku: Required. Sku to add to the user's subscriptions.\n * - oldSku: Optional. This is if you want to replace one sku with another. For\n *  example, if a user wants to upgrade or downgrade their current subscription.\n * - prorationMode: Optional. When replacing a subscription you can decide on a\n *  specific proration mode to charge the user.\n *  The default is IMMEDIATE_WITH_TIME_PRORATION.\n * - oneTime: Optional. When a user chooses a contribution, they have the option\n *  to make it non-recurring.\n *\n *  @typedef {{\n *    skuId: string,\n *    oldSku: (string|undefined),\n *    replaceSkuProrationMode: (ReplaceSkuProrationMode|undefined),\n *    oneTime: (boolean|undefined),\n * }}\n */\nexport let SubscriptionRequest;\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nexport class UserData {\n\n  /**\n   * @param {string} idToken\n   * @param {!Object} data\n   */\n  constructor(idToken, data) {\n    /** @const {string} */\n    this.idToken = idToken;\n    /** @const {!Object} */\n    this.data = data;\n\n    /** @const {string} */\n    this.id = data['sub'];\n    /** @const {string} */\n    this.email = data['email'];\n    /** @const {boolean} */\n    this.emailVerified = data['email_verified'];\n    /** @const {string} */\n    this.name = data['name'];\n    /** @const {string} */\n    this.givenName = data['given_name'];\n    /** @const {string} */\n    this.familyName = data['family_name'];\n    /** @const {string} */\n    this.pictureUrl = data['picture'];\n  }\n\n  /**\n   * @return {!UserData}\n   */\n  clone() {\n    return new UserData(this.idToken, this.data);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'id': this.id,\n      'email': this.email,\n      'emailVerified': this.emailVerified,\n      'name': this.name,\n      'givenName': this.givenName,\n      'familyName': this.familyName,\n      'pictureUrl': this.pictureUrl,\n    };\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  ActivityIframePort as WebActivityIframePort,\n  ActivityPorts as WebActivityPorts,\n} from 'web-activities/activity-ports';\nimport {deserialize, getLabel} from '../proto/api_messages';\n\n/**\n * @interface\n */\nexport class ActivityPortDef {\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {}\n}\n/**\n * @interface\n */\nexport class ActivityPort extends ActivityPortDef {\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!web-activities/activity-ports.ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   * @override\n   */\n  acceptResult() {}\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {}\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {}\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {}\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} unusedCallback\n   */\n  onResizeRequest(unusedCallback) {}\n\n  /**\n   * @param {!../proto/api_messages.Message} unusedRequest\n   */\n  execute(unusedRequest) {}\n\n  /**\n   * @param {!function(new: T)} unusedMessage\n   * @param {function(Object)} unusedCallback\n   * @template T\n   */\n  on(unusedMessage, unusedCallback) {}\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {}\n}\n/**\n * @implements {ActivityPortDef}\n */\nclass ActivityPortDeprecated {\n  /**\n   * @param {!web-activities/activity-ports.ActivityPort} port\n   */\n  constructor(port) {\n    /** @private @const {!web-activities/activity-ports.ActivityPort} */\n    this.port_ = port;\n  }\n\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.port_.acceptResult();\n  }\n}\n\n/**\n * @implements {ActivityPortDef}\n */\nexport class ActivityIframePort {\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} args\n   */\n  constructor(iframe, url, args) {\n    /** @private @const {!web-activities/activity-ports.ActivityIframePort} */\n    this.iframePort_ = new WebActivityIframePort(iframe, url, args);\n    /** @private @const {!Object<string, function(!Object)>} */\n    this.callbackMap_ = {};\n    /** @private {?function(!../proto/api_messages.Message)} */\n    this.callbackOriginal_ = null;\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.iframePort_.whenReady();\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    return this.iframePort_.connect().then(() => {\n      // Attach a callback to receive messages after connection complete\n      this.iframePort_.onMessage(data => {\n        if (this.callbackOriginal_) {\n          this.callbackOriginal_(data);\n        }\n        const response = data && data['RESPONSE'];\n        if (!response) {\n          return;\n        }\n        const cb = this.callbackMap_[response[0]];\n        if (cb) {\n          cb(deserialize(response));\n        }\n      });\n    });\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.iframePort_.disconnect();\n  }\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!web-activities/activity-ports.ActivityMode}\n   */\n  getMode() {\n    return this.iframePort_.getMode();\n  }\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   * @override\n   */\n  acceptResult() {\n    return this.iframePort_.acceptResult();\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    return this.iframePort_.onResizeRequest(callback);\n  }\n\n  /**\n   * @param {!../proto/api_messages.Message} request\n   */\n  execute(request) {\n    this.iframePort_.message({'REQUEST': request.toArray()});\n  }\n\n  /**\n   * @param {!function(new: T)} message\n   * @param {function(!../proto/api_messages.Message)} callback\n   * @template T\n   */\n  on(message, callback) {\n    const label = getLabel(message);\n    if (!label) {\n      throw new Error('Invalid data type');\n    } else if (this.callbackMap_[label]) {\n      throw new Error('Invalid type or duplicate callback for ', label);\n    }\n    this.callbackMap_[label] = callback;\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    this.iframePort_.resized();\n  }\n}\n\nexport class ActivityPorts {\n  /**\n   * @param {!../runtime/deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../runtime/deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = new WebActivityPorts(deps.win());\n  }\n\n  /**\n   * Adds client version, publication, product and logging context information.\n   * @param {?Object=} args\n   * @return {!Object}\n   */\n  addDefaultArguments(args) {\n    const deps = this.deps_;\n    const pageConfig = deps.pageConfig();\n    const context = deps.analytics().getContext();\n    return Object.assign(\n      {\n        'analyticsContext': context.toArray(),\n        'publicationId': pageConfig.getPublicationId(),\n        'productId': pageConfig.getProductId(),\n        '_client': 'SwG $internalRuntimeVersion$',\n      },\n      args || {}\n    );\n  }\n\n  /*\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openActivityIframePort_(iframe, url, args) {\n    const activityPort = new ActivityIframePort(iframe, url, args);\n    return activityPort.connect().then(() => activityPort);\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} args\n   * @param {boolean=} addDefaultArguments\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, args, addDefaultArguments = false) {\n    if (addDefaultArguments) {\n      args = this.addDefaultArguments(args);\n    }\n    return this.openActivityIframePort_(iframe, url, args);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} args\n   * @param {?web-activities/activity-ports.ActivityOpenOptions=} options\n   * @param {boolean=} addDefaultArguments\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, args, options, addDefaultArguments = false) {\n    if (addDefaultArguments) {\n      args = this.addDefaultArguments(args);\n    }\n    return this.activityPorts_.open(requestId, url, target, args, options);\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPortDef)} callback\n   */\n  onResult(requestId, callback) {\n    this.activityPorts_.onResult(requestId, port => {\n      callback(new ActivityPortDeprecated(port));\n    });\n  }\n\n  /**\n   * @param {function(!Error)} handler\n   */\n  onRedirectError(handler) {\n    this.activityPorts_.onRedirectError(handler);\n  }\n\n  /**\n   * @return {!web-activities/activity-ports.ActivityPorts}\n   */\n  getOriginalWebActivityPorts() {\n    return this.activityPorts_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Dialog} from './dialog';\nimport {Graypane} from './graypane';\nimport {isCancelError} from '../utils/errors';\n\nconst POPUP_Z_INDEX = 2147483647;\n\n/**\n * The class for the top level dialog.\n * @final\n */\nexport class DialogManager {\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private {?Dialog} */\n    this.dialog_ = null;\n\n    /** @private {?Promise<!Dialog>} */\n    this.openPromise_ = null;\n\n    /** @private @const {!Graypane} */\n    this.popupGraypane_ = new Graypane(doc, POPUP_Z_INDEX);\n\n    /** @private {?Window} */\n    this.popupWin_ = null;\n\n    this.popupGraypane_.getElement().addEventListener('click', () => {\n      if (this.popupWin_) {\n        try {\n          this.popupWin_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  openDialog(hidden = false) {\n    if (!this.openPromise_) {\n      this.dialog_ = new Dialog(this.doc_);\n      this.openPromise_ = this.dialog_.open(hidden);\n    }\n    return this.openPromise_;\n  }\n\n  /**\n   * @param {!./view.View} view\n   * @param {boolean=} hidden\n   * @return {!Promise}\n   */\n  openView(view, hidden = false) {\n    view.whenComplete().catch(reason => {\n      if (isCancelError(reason)) {\n        this.completeView(view);\n      }\n      throw reason;\n    });\n    return this.openDialog(hidden).then(dialog => {\n      return dialog.openView(view);\n    });\n  }\n\n  /**\n   * @param {?./view.View} view\n   */\n  completeView(view) {\n    // Give a small amount of time for another view to take over the dialog.\n    setTimeout(() => {\n      if (this.dialog_ && this.dialog_.getCurrentView() == view) {\n        this.close_();\n      }\n    }, 100);\n  }\n\n  /**\n   */\n  completeAll() {\n    if (this.dialog_) {\n      this.close_();\n    }\n    if (this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.destroy();\n    }\n  }\n\n  /** @private */\n  close_() {\n    this.dialog_.close();\n    this.dialog_ = null;\n    this.openPromise_ = null;\n  }\n\n  /**\n   * @param {?Window|undefined} targetWin\n   */\n  popupOpened(targetWin) {\n    this.popupWin_ = targetWin || null;\n    if (!this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.attach();\n    }\n    this.popupGraypane_.show();\n  }\n\n  /**\n   */\n  popupClosed() {\n    this.popupWin_ = null;\n    try {\n      this.popupGraypane_.hide();\n    } catch (e) {\n      // Ignore.\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CSS as DIALOG_CSS} from '../../build/css/ui/ui.css';\nimport {FriendlyIframe} from './friendly-iframe';\nimport {Graypane} from './graypane';\nimport {LoadingView} from '../ui/loading-view';\nimport {\n  createElement,\n  injectStyleSheet,\n  removeChildren,\n  removeElement,\n} from '../utils/dom';\nimport {resolveDoc} from '../model/doc';\nimport {setImportantStyles, setStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\nconst Z_INDEX = 2147483647;\n\n/**\n * Default iframe important styles.\n * Note: The iframe responsiveness media query style is injected in the\n * publisher's page since style attribute can not include media query.\n * @const {!Object<string, string|number>}\n */\nconst rootElementImportantStyles = {\n  'min-height': '50px',\n  'border': 'none',\n  'display': 'block',\n  'position': 'fixed',\n  'z-index': Z_INDEX,\n  'box-sizing': 'border-box',\n};\n\n/**\n * Reset view styles.\n * @const {!Object<string, string|number>}\n */\nconst resetViewStyles = {\n  'position': 'absolute',\n  'top': '0',\n  'left': '0',\n  'right': '0',\n  'bottom': '0',\n  'opacity': 0,\n  /* These lines are a work around to this issue in iOS:     */\n  /* https://bugs.webkit.org/show_bug.cgi?id=155198          */\n  'height': 0,\n  'max-height': '100%',\n  'max-width': '100%',\n  'min-height': '100%',\n  'min-width': '100%',\n  'width': 0,\n};\n\n/**\n * Position of the dialog.\n * @const @enum {string}\n */\nconst PositionAt = {\n  BOTTOM: 'BOTTOM',\n  TOP: 'TOP',\n  FLOAT: 'FLOAT',\n  FULL: 'FULL',\n};\n\n/**\n * The class for the top level dialog.\n * @final\n */\nexport class Dialog {\n  /**\n   * Create a dialog for the provided doc.\n   * @param {!../model/doc.Doc} doc\n   * @param {!Object<string, string|number>=} importantStyles\n   * @param {!Object<string, string|number>=} styles\n   */\n  constructor(doc, importantStyles = {}, styles = {}) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!FriendlyIframe} */\n    this.iframe_ = new FriendlyIframe(doc.getWin().document, {\n      'class': 'swg-dialog',\n    });\n\n    /** @private @const {!Graypane} */\n    this.graypane_ = new Graypane(doc, Z_INDEX - 1);\n\n    const modifiedImportantStyles = Object.assign(\n      {},\n      rootElementImportantStyles,\n      importantStyles\n    );\n    setImportantStyles(this.iframe_.getElement(), modifiedImportantStyles);\n\n    setStyles(this.iframe_.getElement(), styles);\n\n    /** @private {LoadingView} */\n    this.loadingView_ = null;\n\n    /** @private {?Element} */\n    this.container_ = null; // Depends on constructed document inside iframe.\n\n    /** @private {?./view.View} */\n    this.view_ = null;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private {boolean} */\n    this.hidden_ = false;\n\n    /** @private {?./view.View} */\n    this.previousProgressView_ = null;\n\n    /** @private {boolean} */\n    this.useFixedLayer_ = false;\n  }\n\n  /**\n   * Opens the dialog and builds the iframe container.\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  open(hidden = false) {\n    const iframe = this.iframe_;\n    if (iframe.isConnected()) {\n      throw new Error('already opened');\n    }\n\n    // Attach.\n    this.doc_.getBody().appendChild(iframe.getElement()); // Fires onload.\n\n    this.graypane_.attach();\n\n    if (hidden) {\n      setImportantStyles(iframe.getElement(), {\n        'visibility': 'hidden',\n        'opacity': 0,\n      });\n      this.hidden_ = hidden;\n    } else {\n      this.show_();\n    }\n\n    if (this.useFixedLayer_) {\n      return this.doc_\n        .addToFixedLayer(iframe.getElement())\n        .then(() => iframe.whenReady())\n        .then(() => {\n          this.buildIframe_();\n          return this;\n        });\n    } else {\n      return iframe.whenReady().then(() => {\n        this.buildIframe_();\n        return this;\n      });\n    }\n  }\n\n  /**\n   * Build the iframe with the styling after iframe is loaded.\n   * @private\n   */\n  buildIframe_() {\n    const iframe = this.iframe_;\n    const iframeBody = iframe.getBody();\n    const iframeDoc = /** @type {!HTMLDocument} */ (this.iframe_.getDocument());\n\n    // Inject Google fonts in <HEAD> section of the iframe.\n    injectStyleSheet(resolveDoc(iframeDoc), DIALOG_CSS);\n\n    // Add Loading indicator.\n    this.loadingView_ = new LoadingView(iframeDoc);\n    iframeBody.appendChild(this.loadingView_.getElement());\n\n    // Container for all dynamic content, including 3P iframe.\n    this.container_ = createElement(iframeDoc, 'swg-container', {});\n    iframeBody.appendChild(this.container_);\n    this.setPosition_();\n  }\n\n  /**\n   * Closes the dialog.\n   * @param {boolean=} animated\n   * @return {!Promise}\n   */\n  close(animated = true) {\n    let animating;\n    if (animated) {\n      animating = this.animate_(() => {\n        this.graypane_.hide(/* animate */ true);\n        return transition(\n          this.getElement(),\n          {\n            'transform': 'translateY(100%)',\n          },\n          300,\n          'ease-out'\n        );\n      });\n    } else {\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      const iframeEl = this.iframe_.getElement();\n      iframeEl.parentNode.removeChild(iframeEl);\n\n      this.removePaddingToHtml_();\n      this.graypane_.destroy();\n    });\n  }\n\n  /**\n   * Gets the container within the dialog.\n   * @return {!Element}\n   */\n  getContainer() {\n    if (!this.container_) {\n      throw new Error('not opened yet');\n    }\n    return this.container_;\n  }\n\n  /**\n   * Gets the attached iframe instance.\n   * @return {!FriendlyIframe}\n   */\n  getIframe() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the Iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_.getElement();\n  }\n\n  /**\n   * Transitions to the next view.\n   * @private\n   */\n  entryTransitionToNextView_() {\n    if (this.view_ && this.view_.hasLoadingIndicator()) {\n      // Temporarily cache the old view.\n      this.previousProgressView_ = this.view_;\n    } else {\n      // Since loading indicator will be shown, remove contents of old view.\n      removeChildren(this.getContainer());\n      // When loading indicator was not displayed in the previous view,\n      // loading indicator must be displayed while transitioning to new view.\n      this.loadingView_.show();\n    }\n  }\n\n  /**\n   * Transition out of an old view.\n   * @private\n   */\n  exitTransitionFromOldView_() {\n    // If previous view is still around, remove it.\n    if (this.previousProgressView_) {\n      removeElement(this.previousProgressView_.getElement());\n      this.previousProgressView_ = null;\n    } else {\n      this.loadingView_.hide();\n    }\n  }\n\n  /** @return {?./view.View} */\n  getCurrentView() {\n    return this.view_;\n  }\n\n  /**\n   * Opens the given view and removes existing view from the DOM if any.\n   * @param {!./view.View} view\n   * @return {!Promise}\n   */\n  openView(view) {\n    setImportantStyles(view.getElement(), resetViewStyles);\n    this.entryTransitionToNextView_();\n\n    this.view_ = view;\n    this.getContainer().appendChild(view.getElement());\n\n    // If the current view should fade the parent document.\n    if (view.shouldFadeBody() && !this.hidden_) {\n      this.graypane_.show(/* animate */ true);\n    }\n\n    return view.init(this).then(() => {\n      setImportantStyles(view.getElement(), {\n        'opacity': 1,\n      });\n      if (this.hidden_) {\n        if (view.shouldFadeBody()) {\n          this.graypane_.show(/* animated */ true);\n        }\n        this.show_();\n      }\n      this.exitTransitionFromOldView_();\n    });\n  }\n\n  /**\n   * Show the iframe.\n   * @private\n   */\n  show_() {\n    this.animate_(() => {\n      setImportantStyles(this.getElement(), {\n        'transform': 'translateY(100%)',\n        'opactiy': 1,\n        'visibility': 'visible',\n      });\n      return transition(\n        this.getElement(),\n        {\n          'transform': 'translateY(0)',\n          'opacity': 1,\n          'visibility': 'visible',\n        },\n        300,\n        'ease-out'\n      );\n    });\n    this.hidden_ = false;\n  }\n\n  /**\n   * Resizes the dialog container.\n   * @param {!./view.View} view\n   * @param {number} height\n   * @param {boolean=} animated\n   * @return {?Promise}\n   */\n  resizeView(view, height, animated = true) {\n    if (this.view_ != view) {\n      return null;\n    }\n    const newHeight = this.getMaxAllowedHeight_(height);\n\n    let animating;\n    if (animated) {\n      const oldHeight = this.getElement().offsetHeight;\n      if (newHeight >= oldHeight) {\n        // Expand.\n        animating = this.animate_(() => {\n          setImportantStyles(this.getElement(), {\n            'height': `${newHeight}px`,\n            'transform': `translateY(${newHeight - oldHeight}px)`,\n          });\n          return transition(\n            this.getElement(),\n            {\n              'transform': 'translateY(0)',\n            },\n            300,\n            'ease-out'\n          );\n        });\n      } else {\n        // Collapse.\n        animating = this.animate_(() => {\n          return transition(\n            this.getElement(),\n            {\n              'transform': `translateY(${oldHeight - newHeight}px)`,\n            },\n            300,\n            'ease-out'\n          ).then(() => {\n            setImportantStyles(this.getElement(), {\n              'height': `${newHeight}px`,\n              'transform': 'translateY(0)',\n            });\n          });\n        });\n      }\n    } else {\n      setImportantStyles(this.getElement(), {\n        'height': `${newHeight}px`,\n      });\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      this.updatePaddingToHtml_(height);\n      view.resized();\n    });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return (this.animating_ = wait\n      .then(\n        () => {\n          return callback();\n        },\n        () => {\n          // Ignore errors to make sure animations don't get stuck.\n        }\n      )\n      .then(() => {\n        this.animating_ = null;\n      }));\n  }\n\n  /**\n   * Returns maximum allowed height for current viewport.\n   * @param {number} height\n   * @return {number}\n   * @private\n   */\n  getMaxAllowedHeight_(height) {\n    return Math.min(height, this.doc_.getWin()./*OK*/ innerHeight * 0.9);\n  }\n\n  /**\n   * Gets the element's height.\n   * @return {number}\n   * @private\n   */\n  getHeight_() {\n    return this.getElement().offsetHeight;\n  }\n\n  /**\n   * Sets the position of the dialog. Currently 'BOTTOM' is set by default.\n   */\n  setPosition_() {\n    setImportantStyles(this.getElement(), this.getPositionStyle_());\n  }\n\n  /**\n   * Add the padding to the containing page so as to not hide the content\n   * behind the popup, if rendered at the bottom.\n   * @param {number} newHeight\n   * @private\n   */\n  updatePaddingToHtml_(newHeight) {\n    if (this.inferPosition_() == PositionAt.BOTTOM) {\n      const bottomPadding = newHeight + 20; // Add some extra padding.\n      const htmlElement = this.doc_.getRootElement();\n      setImportantStyles(htmlElement, {\n        'padding-bottom': `${bottomPadding}px`,\n      });\n    }\n  }\n\n  /**\n   * Removes previouly added bottom padding from the document.\n   * @private\n   */\n  removePaddingToHtml_() {\n    this.doc_.getRootElement().style.removeProperty('padding-bottom');\n  }\n\n  /**\n   * Calculates the position of the dialog. Currently dialog is positioned at\n   * the bottom only. This could change in future to adjust the dialog position\n   * based on the screen size.\n   * @return {string}\n   * @private\n   */\n  inferPosition_() {\n    return PositionAt.BOTTOM;\n  }\n\n  /**\n   * Returns the styles required to postion the dialog.\n   * @return {!Object<string, string|number>}\n   * @private\n   */\n  getPositionStyle_() {\n    const dialogPosition = this.inferPosition_();\n    switch (dialogPosition) {\n      case PositionAt.BOTTOM:\n        return {'bottom': 0};\n      case PositionAt.TOP:\n        return {'top': 0};\n      case PositionAt.FLOAT:\n        return {\n          'position': 'fixed',\n          'top': '50%',\n          'left': '50%',\n          'transform': 'translate(-50%, -50%)',\n        };\n      case PositionAt.FULL:\n        return {\n          'position': 'fixed',\n          'height': '100%',\n          'top': 0,\n          'bottom': 0,\n        };\n      default:\n        return {'bottom': 0};\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement, isConnected} from '../utils/dom';\nimport {resetAllStyles} from '../utils/style';\n\n/** @const {!Object<string|number>} */\nconst friendlyIframeAttributes = {\n  'frameborder': 0,\n  'scrolling': 'no',\n  'src': 'about:blank',\n};\n\n/**\n * The class for building friendly iframe.\n */\nexport class FriendlyIframe {\n  /**\n   * @param {!Document} doc\n   * @param {!Object<string, string|number>=} attrs\n   */\n  constructor(doc, attrs = {}) {\n    const mergedAttrs = Object.assign({}, friendlyIframeAttributes, attrs);\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      doc,\n      'iframe',\n      mergedAttrs\n    ));\n\n    // Ensure that the new iframe does not inherit any CSS styles.\n    resetAllStyles(this.iframe_);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise(resolve => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * When promise is resolved.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * Gets the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the document object of the iframe element.\n   * @return {!Document}\n   */\n  getDocument() {\n    const doc =\n      this.getElement().contentDocument ||\n      (this.getElement().contentWindow &&\n        this.getElement().contentWindow.document);\n\n    if (!doc) {\n      throw new Error('not loaded');\n    }\n    return doc;\n  }\n\n  /**\n   * Gets the body of the iframe.\n   * @return {!Element}\n   */\n  getBody() {\n    return /** @type {!Element} */ (this.getDocument().body);\n  }\n\n  /**\n   * Whether the iframe is connected.\n   * @return {boolean}\n   */\n  isConnected() {\n    return isConnected(this.getElement());\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\nexport class Graypane {\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {number} zIndex\n   */\n  constructor(doc, zIndex) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.fadeBackground_ = this.doc_\n      .getWin()\n      .document.createElement('swg-popup-background');\n    setImportantStyles(this.fadeBackground_, {\n      'z-index': zIndex,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n  }\n\n  /**\n   * @return {!Element}\n   */\n  getElement() {\n    return this.fadeBackground_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isAttached() {\n    return !!this.fadeBackground_.parentNode;\n  }\n\n  /**\n   * Attaches the graypane to the document.\n   */\n  attach() {\n    this.doc_.getBody().appendChild(this.fadeBackground_);\n  }\n\n  /**\n   * Detaches the graypane to the document.\n   */\n  destroy() {\n    this.doc_.getBody().removeChild(this.fadeBackground_);\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  show(animated = true) {\n    setImportantStyles(this.fadeBackground_, {\n      'display': 'block',\n      'opacity': animated ? 0 : 1,\n    });\n    if (animated) {\n      return transition(\n        this.fadeBackground_,\n        {\n          'opacity': 1,\n        },\n        300,\n        'ease-out'\n      );\n    }\n  }\n\n  /**\n   * Hides the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  hide(animated = true) {\n    if (animated) {\n      return transition(\n        this.fadeBackground_,\n        {\n          'opacity': 0,\n        },\n        300,\n        'ease-out'\n      ).then(() => {\n        setImportantStyles(this.fadeBackground_, {'display': 'none'});\n      });\n    }\n    setImportantStyles(this.fadeBackground_, {'display': 'none'});\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * abstract View Class. Used to render the content within the Dialog. The\n * extended class has actual content.\n * @abstract\n */\nexport class View {\n  /**\n   * Empty constructor.\n   */\n  constructor() {}\n\n  /**\n   * Gets the iframe element.\n   * @return {!Element}\n   * @abstract\n   */\n  getElement() {}\n\n  /**\n   * @param {!./dialog.Dialog} unusedDialog\n   * @return {!Promise}\n   * @abstract\n   */\n  init(unusedDialog) {}\n\n  /**\n   * Resizes the content.\n   */\n  resized() {\n    // Do nothing by default. Override if needed.\n  }\n\n  /**\n   * Accept the result.\n   * @return {!Promise}\n   * @abstract\n   */\n  whenComplete() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  shouldFadeBody() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  hasLoadingIndicator() {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * The entry point for runtime (swg.js).\n */\n\nimport './polyfills';\nimport {installRuntime} from './runtime/runtime';\nimport {log} from './utils/log';\n\nlog('Subscriptions Runtime: $internalRuntimeVersion$');\n\ninstallRuntime(self);\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isDocumentReady, whenDocumentReady} from '../utils/document-ready';\n\n/**\n * @interface\n */\nexport class Doc {\n  /**\n   * @return {!Window}\n   */\n  getWin() {}\n\n  /**\n   * The `Document` node or analog.\n   * @return {!Node}\n   */\n  getRootNode() {}\n\n  /**\n   * The `Document.documentElement` element or analog.\n   * @return {!Element}\n   */\n  getRootElement() {}\n\n  /**\n   * The `Document.head` element or analog. Returns `null` if not available\n   * yet.\n   * @return {!Element}\n   */\n  getHead() {}\n\n  /**\n   * The `Document.body` element or analog. Returns `null` if not available\n   * yet.\n   * @return {?Element}\n   */\n  getBody() {}\n\n  /**\n   * Whether the document has been fully constructed.\n   * @return {boolean}\n   */\n  isReady() {}\n\n  /**\n   * Resolved when document has been fully constructed.\n   * @return {!Promise}\n   */\n  whenReady() {}\n\n  /**\n   * Adds the element to the fixed layer.\n   * @param {!Element} unusedElement\n   * @return {!Promise}\n   *\n   * This is a no-op for except in AMP on iOS < 13.0.\n   */\n  addToFixedLayer(unusedElement) {}\n}\n\n/** @implements {Doc} */\nexport class GlobalDoc {\n  /**\n   * @param {!Window|!Document} winOrDoc\n   */\n  constructor(winOrDoc) {\n    const isWin = !!winOrDoc.document;\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (isWin\n      ? /** @type {!Window} */ (winOrDoc)\n      : /** @type {!Document} */ (winOrDoc).defaultView);\n    /** @private @const {!Document} */\n    this.doc_ = isWin\n      ? /** @type {!Window} */ (winOrDoc).document\n      : /** @type {!Document} */ (winOrDoc);\n  }\n\n  /** @override */\n  getWin() {\n    return this.win_;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.doc_;\n  }\n\n  /** @override */\n  getRootElement() {\n    return this.doc_.documentElement;\n  }\n\n  /** @override */\n  getHead() {\n    // `document.head` always has a chance to be parsed, at least partially.\n    return /** @type {!Element} */ (this.doc_.head);\n  }\n\n  /** @override */\n  getBody() {\n    return this.doc_.body;\n  }\n\n  /** @override */\n  isReady() {\n    return isDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  whenReady() {\n    return whenDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  addToFixedLayer(unusedElement) {\n    return Promise.resolve();\n  }\n}\n\n/**\n * @param {!Document|!Window|!Doc} input\n * @return {!Doc}\n */\nexport function resolveDoc(input) {\n  // Is it a `Document`\n  if (/** @type {!Document} */ (input).nodeType === /* DOCUMENT */ 9) {\n    return new GlobalDoc(/** @type {!Document} */ (input));\n  }\n  // Is it a `Window`?\n  if (/** @type {!Window} */ (input).document) {\n    return new GlobalDoc(/** @type {!Window} */ (input));\n  }\n  return /** @type {!Doc} */ (input);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Doc, resolveDoc} from './doc';\nimport {PageConfig} from './page-config';\nimport {debugLog} from '../utils/log';\nimport {hasNextNodeInDocumentOrder} from '../utils/dom';\nimport {isArray} from '../utils/types';\nimport {tryParseJson} from '../utils/json';\n\nconst ALREADY_SEEN = '__SWG-SEEN__';\nconst CONTROL_FLAG = 'subscriptions-control';\n\nconst ALLOWED_TYPES = [\n  'CreativeWork',\n  'Article',\n  'NewsArticle',\n  'Blog',\n  'Comment',\n  'Course',\n  'HowTo',\n  'Message',\n  'Review',\n  'WebPage',\n];\n\n// RegExp for quickly scanning LD+JSON for allowed types\nconst RE_ALLOWED_TYPES = new RegExp(ALLOWED_TYPES.join('|'));\n\n/**\n */\nexport class PageConfigResolver {\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   */\n  constructor(winOrDoc) {\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private {?function((!PageConfig|!Promise))} */\n    this.configResolver_ = null;\n\n    /** @private @const {!Promise<!PageConfig>} */\n    this.configPromise_ = new Promise(resolve => {\n      this.configResolver_ = resolve;\n    });\n\n    /** @private @const {!MetaParser} */\n    this.metaParser_ = new MetaParser(this.doc_);\n    /** @private @const {!JsonLdParser} */\n    this.ldParser_ = new JsonLdParser(this.doc_);\n    /** @private @const {!MicrodataParser} */\n    this.microdataParser_ = new MicrodataParser(this.doc_);\n  }\n\n  /**\n   * @return {!Promise<!PageConfig>}\n   */\n  resolveConfig() {\n    // Try resolve the config at different times.\n    Promise.resolve().then(this.check.bind(this));\n    this.doc_.whenReady().then(this.check.bind(this));\n    return this.configPromise_;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    // Already resolved.\n    if (!this.configResolver_) {\n      return null;\n    }\n    let config = this.metaParser_.check();\n    if (!config) {\n      config = this.ldParser_.check();\n    }\n    if (!config) {\n      config = this.microdataParser_.check();\n    }\n    if (config) {\n      // Product ID has been found: initialize the rest of the config.\n      this.configResolver_(config);\n      this.configResolver_ = null;\n    } else if (this.doc_.isReady()) {\n      this.configResolver_(\n        Promise.reject(new Error('No config could be discovered in the page'))\n      );\n      this.configResolver_ = null;\n    }\n    debugLog(config);\n    return config;\n  }\n}\n\nclass TypeChecker {\n  constructor() {}\n\n  /**\n   * Check value from json\n   * @param {?Array|string} value\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkValue(value, expectedTypes) {\n    if (!value) {\n      return false;\n    }\n    return this.checkArray(this.toArray_(value), expectedTypes);\n  }\n\n  /**\n   * Checks space delimited list of types\n   * @param {?string} itemtype\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkString(itemtype, expectedTypes) {\n    if (!itemtype) {\n      return false;\n    }\n    return this.checkArray(itemtype.split(/\\s+/), expectedTypes);\n  }\n\n  /**\n   * @param {Array<?string>} typeArray\n   * @param {Array<string>} expectedTypes\n   * @return {boolean}\n   */\n  checkArray(typeArray, expectedTypes) {\n    let found = false;\n    typeArray.forEach(candidateType => {\n      found =\n        found ||\n        expectedTypes.includes(\n          candidateType.replace(/^http:\\/\\/schema.org\\//i, '')\n        );\n    });\n    return found;\n  }\n\n  /*\n   * @param {?Array|string} value\n   * @return {Array}\n   * @private\n   */\n  toArray_(value) {\n    return isArray(value) ? value : [value];\n  }\n}\n\nclass MetaParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    // Try to find product id.\n    const productId = getMetaTag(\n      this.doc_.getRootNode(),\n      'subscriptions-product-id'\n    );\n    if (!productId) {\n      return null;\n    }\n\n    // Is locked?\n    const accessibleForFree = getMetaTag(\n      this.doc_.getRootNode(),\n      'subscriptions-accessible-for-free'\n    );\n    const locked =\n      (accessibleForFree && accessibleForFree.toLowerCase() == 'false') ||\n      false;\n\n    return new PageConfig(productId, locked);\n  }\n}\n\nclass JsonLdParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private @const @function */\n    this.checkType_ = new TypeChecker();\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    const domReady = this.doc_.isReady();\n\n    // type: 'application/ld+json'\n    const elements = this.doc_\n      .getRootNode()\n      .querySelectorAll('script[type=\"application/ld+json\"]');\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (\n        element[ALREADY_SEEN] ||\n        !element.textContent ||\n        (!domReady && !hasNextNodeInDocumentOrder(element))\n      ) {\n        continue;\n      }\n      element[ALREADY_SEEN] = true;\n      if (!RE_ALLOWED_TYPES.test(element.textContent)) {\n        continue;\n      }\n      const possibleConfig = this.tryExtractConfig_(element);\n      if (possibleConfig) {\n        return possibleConfig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?PageConfig}\n   */\n  tryExtractConfig_(element) {\n    const json = tryParseJson(element.textContent);\n    if (!json) {\n      return null;\n    }\n\n    // Must be an ALLOWED_TYPE\n    if (!this.checkType_.checkValue(json['@type'], ALLOWED_TYPES)) {\n      return null;\n    }\n\n    // Must have a isPartOf[@type=Product].\n    let productId = null;\n    const partOfArray = this.valueArray_(json, 'isPartOf');\n    if (partOfArray) {\n      for (let i = 0; i < partOfArray.length; i++) {\n        productId = this.discoverProductId_(partOfArray[i]);\n        if (productId) {\n          break;\n        }\n      }\n    }\n    if (!productId) {\n      return null;\n    }\n\n    // Found product id, just check for the access flag.\n    const isAccessibleForFree = this.bool_(\n      this.singleValue_(json, 'isAccessibleForFree'),\n      /* default */ true\n    );\n\n    return new PageConfig(productId, !isAccessibleForFree);\n  }\n\n  /**\n   * @param {*} value\n   * @param {boolean} def\n   * @return {boolean}\n   */\n  bool_(value, def) {\n    if (value == null || value === '') {\n      return def;\n    }\n    if (typeof value == 'boolean') {\n      return value;\n    }\n    if (typeof value == 'string') {\n      const lowercase = value.toLowerCase();\n      if (lowercase == 'false') {\n        return false;\n      }\n      if (lowercase == 'true') {\n        return true;\n      }\n    }\n    return def;\n  }\n\n  /**\n   * @param {!Object} json\n   * @return {?string}\n   */\n  discoverProductId_(json) {\n    // Must have type `Product`.\n    if (!this.checkType_.checkValue(json['@type'], ['Product'])) {\n      return null;\n    }\n    return /** @type {?string} */ (this.singleValue_(json, 'productID'));\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {?Array}\n   */\n  valueArray_(json, name) {\n    const value = json[name];\n    if (value == null || value === '') {\n      return null;\n    }\n    return isArray(value) ? value : [value];\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {*}\n   */\n  singleValue_(json, name) {\n    const valueArray = this.valueArray_(json, name);\n    const value = valueArray && valueArray[0];\n    return value == null || value === '' ? null : value;\n  }\n}\n\nclass MicrodataParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private {?boolean} */\n    this.access_ = null;\n    /** @private {?string} */\n    this.productId_ = null;\n    /** @private @const @function */\n    this.checkType_ = new TypeChecker();\n  }\n\n  /**\n   * Returns false if access is restricted, otherwise true\n   * @param {!Element} root An element that is an item of type in ALLOWED_TYPES list\n   * @return {?boolean} locked access\n   * @private\n   */\n  discoverAccess_(root) {\n    const ALREADY_SEEN = 'alreadySeenForAccessInfo';\n    const nodeList = root.querySelectorAll(\"[itemprop='isAccessibleForFree']\");\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      if (!content) {\n        continue;\n      }\n      if (this.isValidElement_(element, root, ALREADY_SEEN)) {\n        let accessForFree = null;\n        if (content.toLowerCase() == 'true') {\n          accessForFree = true;\n        } else if (content.toLowerCase() == 'false') {\n          accessForFree = false;\n        }\n        return accessForFree;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Verifies if an element is valid based on the following\n   * - child of an item of one the the ALLOWED_TYPES\n   * - not a child of an item of any other type\n   * - not seen before, marked using the alreadySeen tag\n   * @param {?Element} current the element to be verified\n   * @param {!Element} root the parent to track up to\n   * @param {!string} alreadySeen used to tag already visited nodes\n   * @return {!boolean} valid node\n   * @private\n   */\n  isValidElement_(current, root, alreadySeen) {\n    for (\n      let node = current;\n      node && !node[alreadySeen];\n      node = node.parentNode\n    ) {\n      node[alreadySeen] = true;\n      // document nodes don't have hasAttribute\n      if (node.hasAttribute && node.hasAttribute('itemscope')) {\n        /**{?string} */\n        const type = node.getAttribute('itemtype');\n        return this.checkType_.checkString(type, ALLOWED_TYPES);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Obtains the product ID that meets the requirements\n   * - child of an item of one of ALLOWED_TYPES\n   * - Not a child of an item of type 'Section'\n   * - child of an item of type 'productID'\n   * @param {!Element} root An element that is an item of an ALLOWED_TYPES\n   * @return {?string} product ID, if found\n   * @private\n   */\n  discoverProductId_(root) {\n    const ALREADY_SEEN = 'alreadySeenForProductInfo';\n    const nodeList = root.querySelectorAll('[itemprop=\"productID\"]');\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      const item = element.closest('[itemtype][itemscope]');\n      const type = item.getAttribute('itemtype');\n      if (type.indexOf('http://schema.org/Product') <= -1) {\n        continue;\n      }\n      if (this.isValidElement_(item.parentElement, root, ALREADY_SEEN)) {\n        return content;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns PageConfig if available\n   * @return {?PageConfig} PageConfig found so far\n   */\n  getPageConfig_() {\n    let locked = null;\n    if (this.access_ != null) {\n      locked = !this.access_;\n    } else if (this.doc_.isReady()) {\n      // Default to unlocked\n      locked = false;\n    }\n    if (this.productId_ != null && locked != null) {\n      return new PageConfig(this.productId_, locked);\n    }\n    return null;\n  }\n\n  /**\n   * Extracts page config from Microdata in the DOM\n   * @return {?PageConfig} PageConfig found\n   */\n  tryExtractConfig_() {\n    let config = this.getPageConfig_();\n    if (config) {\n      return config;\n    }\n\n    // Grab all the nodes with an itemtype and filter for our allowed types\n    const nodeList = Array.prototype.slice\n      .call(this.doc_.getRootNode().querySelectorAll('[itemscope][itemtype]'))\n      .filter(node =>\n        this.checkType_.checkString(\n          node.getAttribute('itemtype'),\n          ALLOWED_TYPES\n        )\n      );\n\n    for (let i = 0; nodeList[i] && config == null; i++) {\n      const element = nodeList[i];\n      if (this.access_ == null) {\n        this.access_ = this.discoverAccess_(element);\n      }\n      if (!this.productId_) {\n        this.productId_ = this.discoverProductId_(element);\n      }\n      config = this.getPageConfig_();\n    }\n    return config;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n    return this.tryExtractConfig_();\n  }\n}\n\n/**\n * @param {!Node} rootNode\n * @return {?string}\n */\nexport function getControlFlag(rootNode) {\n  // Look for the flag in `meta`.\n  const flag = getMetaTag(rootNode, CONTROL_FLAG);\n  if (flag) {\n    return flag;\n  }\n  // Look for the flag in `script`.\n  const el = rootNode.querySelector(`script[${CONTROL_FLAG}]`);\n  if (el) {\n    return el.getAttribute(CONTROL_FLAG);\n  }\n  return null;\n}\n\n/**\n * Returns the value from content attribute of a meta tag with given name.\n *\n * If multiple tags are found, the first value is returned.\n *\n * @param {!Node} rootNode\n * @param {string} name The tag name to look for.\n * @return {?string} attribute value or empty string.\n * @private\n */\nfunction getMetaTag(rootNode, name) {\n  const el = rootNode.querySelector(`meta[name=\"${name}\"]`);\n  if (el) {\n    return el.getAttribute('content');\n  }\n  return null;\n}\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n */\nexport class PageConfig {\n  /**\n   * @param {string} productOrPublicationId\n   * @param {boolean} locked\n   */\n  constructor(productOrPublicationId, locked) {\n    let publicationId, productId, label;\n    const div = productOrPublicationId.indexOf(':');\n    if (div != -1) {\n      // The argument is a product id.\n      productId = productOrPublicationId;\n      publicationId = productId.substring(0, div);\n      label = productId.substring(div + 1);\n      if (label == '*') {\n        throw new Error('wildcard disallowed');\n      }\n    } else {\n      // The argument is a publication id.\n      publicationId = productOrPublicationId;\n      productId = null;\n      label = null;\n    }\n\n    /** @private @const {string} */\n    this.publicationId_ = publicationId;\n    /** @private @const {?string} */\n    this.productId_ = productId;\n    /** @private @const {?string} */\n    this.label_ = label;\n    /** @private @const {boolean} */\n    this.locked_ = locked;\n  }\n\n  /**\n   * @return {string}\n   */\n  getPublicationId() {\n    return this.publicationId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getProductId() {\n    return this.productId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getLabel() {\n    return this.label_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isLocked() {\n    return this.locked_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Loads all polyfills needed by the project.\n * This list should not get longer without a very good reason.\n */\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installDOMTokenListToggle} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installObjectValues} from './polyfills/object-values';\nimport {install as installPromise} from './polyfills/promise';\n\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallObjectValues(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, fromIndex = 0) {\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Sets the Array.contains polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.HTMLDocument.prototype.contains) {\n    win.Object.defineProperty(win.HTMLDocument.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, force)` method.\n * This is specially important because IE does not support `force` attribute.\n * See https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, force) {\n  const remove = force === undefined ? this.contains(token) : !force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @returns {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @returns {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Implements `Object.values` API.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values.\n *\n * @param {!Object} target\n * @returns {!Array<*>}\n */\nexport function values(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = [];\n  for (const key in target) {\n    if (hasOwnProperty.call(target, key)) {\n      output.push(target[key]);\n    }\n  }\n  return output;\n}\n\n/**\n * Sets the Object.values polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.values) {\n    win.Object.defineProperty(win.Object, 'values', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: values,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @interface\n */\nclass Message {\n  /**\n   * @return {string}\n   */\n  label() {}\n\n  /**\n   * @return {!Array}\n   */\n  toArray() {}\n}\n\n/** @enum {number} */\nconst AnalyticsEvent = {\n  UNKNOWN: 0,\n  IMPRESSION_PAYWALL: 1,\n  IMPRESSION_AD: 2,\n  IMPRESSION_OFFERS: 3,\n  IMPRESSION_SUBSCRIBE_BUTTON: 4,\n  IMPRESSION_SMARTBOX: 5,\n  IMPRESSION_SWG_BUTTON: 6,\n  IMPRESSION_CLICK_TO_SHOW_OFFERS: 7,\n  IMPRESSION_CLICK_TO_SHOW_OFFERS_OR_ALREADY_SUBSCRIBED: 8,\n  IMPRESSION_SUBSCRIPTION_COMPLETE: 9,\n  IMPRESSION_ACCOUNT_CHANGED: 10,\n  IMPRESSION_PAGE_LOAD: 11,\n  IMPRESSION_LINK: 12,\n  IMPRESSION_SAVE_SUBSCR_TO_GOOGLE: 13,\n  IMPRESSION_GOOGLE_UPDATED: 14,\n  IMPRESSION_SHOW_OFFERS_SMARTBOX: 15,\n  IMPRESSION_SHOW_OFFERS_SWG_BUTTON: 16,\n  IMPRESSION_SELECT_OFFER_SMARTBOX: 17,\n  IMPRESSION_SELECT_OFFER_SWG_BUTTON: 18,\n  ACTION_SUBSCRIBE: 1000,\n  ACTION_PAYMENT_COMPLETE: 1001,\n  ACTION_ACCOUNT_CREATED: 1002,\n  ACTION_ACCOUNT_ACKNOWLEDGED: 1003,\n  ACTION_SUBSCRIPTIONS_LANDING_PAGE: 1004,\n  ACTION_PAYMENT_FLOW_STARTED: 1005,\n  ACTION_OFFER_SELECTED: 1006,\n  ACTION_SWG_BUTTON_CLICK: 1007,\n  ACTION_VIEW_OFFERS: 1008,\n  ACTION_ALREADY_SUBSCRIBED: 1009,\n  ACTION_NEW_DEFERRED_ACCOUNT: 1010,\n  ACTION_LINK_CONTINUE: 1011,\n  ACTION_LINK_CANCEL: 1012,\n  ACTION_GOOGLE_UPDATED_CLOSE: 1013,\n  ACTION_USER_CANCELED_PAYFLOW: 1014,\n  ACTION_SAVE_SUBSCR_TO_GOOGLE_CONTINUE: 1015,\n  ACTION_SAVE_SUBSCR_TO_GOOGLE_CANCEL: 1016,\n  ACTION_SWG_BUTTON_SHOW_OFFERS_CLICK: 1017,\n  ACTION_SWG_BUTTON_SELECT_OFFER_CLICK: 1018,\n  EVENT_PAYMENT_FAILED: 2000,\n  EVENT_CUSTOM: 3000,\n  EVENT_CONFIRM_TX_ID: 3001,\n  EVENT_CHANGED_TX_ID: 3002,\n  EVENT_GPAY_NO_TX_ID: 3003,\n  EVENT_GPAY_CANNOT_CONFIRM_TX_ID: 3004,\n  EVENT_GOOGLE_UPDATED: 3005,\n  EVENT_SUBSCRIPTION_STATE: 4000,\n};\n/** @enum {number} */\nconst EventOriginator = {\n  UNKNOWN_CLIENT: 0,\n  SWG_CLIENT: 1,\n  AMP_CLIENT: 2,\n  PROPENSITY_CLIENT: 3,\n  SWG_SERVER: 4,\n  PUBLISHER_CLIENT: 5,\n};\n\n/**\n * @implements {Message}\n */\nclass AccountCreationRequest {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.complete_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getComplete() {\n    return this.complete_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setComplete(value) {\n    this.complete_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.complete_,  // field 1 - complete\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AccountCreationRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AlreadySubscribedResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.subscriberOrMember_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?boolean} */\n    this.linkRequested_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getSubscriberOrMember() {\n    return this.subscriberOrMember_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setSubscriberOrMember(value) {\n    this.subscriberOrMember_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getLinkRequested() {\n    return this.linkRequested_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setLinkRequested(value) {\n    this.linkRequested_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.subscriberOrMember_,  // field 1 - subscriber_or_member\n      this.linkRequested_,  // field 2 - link_requested\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AlreadySubscribedResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsContext {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.embedderOrigin_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.transactionId_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?string} */\n    this.referringOrigin_ = (data[3] == null) ? null : data[3];\n\n    /** @private {?string} */\n    this.utmSource_ = (data[4] == null) ? null : data[4];\n\n    /** @private {?string} */\n    this.utmCampaign_ = (data[5] == null) ? null : data[5];\n\n    /** @private {?string} */\n    this.utmMedium_ = (data[6] == null) ? null : data[6];\n\n    /** @private {?string} */\n    this.sku_ = (data[7] == null) ? null : data[7];\n\n    /** @private {?boolean} */\n    this.readyToPay_ = (data[8] == null) ? null : data[8];\n\n    /** @private {!Array<string>} */\n    this.label_ = data[9] || [];\n\n    /** @private {?string} */\n    this.clientVersion_ = (data[10] == null) ? null : data[10];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getEmbedderOrigin() {\n    return this.embedderOrigin_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setEmbedderOrigin(value) {\n    this.embedderOrigin_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getTransactionId() {\n    return this.transactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setTransactionId(value) {\n    this.transactionId_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getReferringOrigin() {\n    return this.referringOrigin_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setReferringOrigin(value) {\n    this.referringOrigin_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmSource() {\n    return this.utmSource_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmSource(value) {\n    this.utmSource_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmCampaign() {\n    return this.utmCampaign_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmCampaign(value) {\n    this.utmCampaign_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getUtmMedium() {\n    return this.utmMedium_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setUtmMedium(value) {\n    this.utmMedium_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getReadyToPay() {\n    return this.readyToPay_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setReadyToPay(value) {\n    this.readyToPay_ = value;\n  }\n\n  /**\n   * @return {!Array<string>}\n   */\n  getLabelList() {\n    return this.label_;\n  }\n\n  /**\n   * @param {!Array<string>} value\n   */\n  setLabelList(value) {\n    this.label_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getClientVersion() {\n    return this.clientVersion_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setClientVersion(value) {\n    this.clientVersion_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.embedderOrigin_,  // field 1 - embedder_origin\n      this.transactionId_,  // field 2 - transaction_id\n      this.referringOrigin_,  // field 3 - referring_origin\n      this.utmSource_,  // field 4 - utm_source\n      this.utmCampaign_,  // field 5 - utm_campaign\n      this.utmMedium_,  // field 6 - utm_medium\n      this.sku_,  // field 7 - sku\n      this.readyToPay_,  // field 8 - ready_to_pay\n      this.label_,  // field 9 - label\n      this.clientVersion_,  // field 10 - client_version\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsContext';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsEventMeta {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?EventOriginator} */\n    this.eventOriginator_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?boolean} */\n    this.isFromUserAction_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?EventOriginator}\n   */\n  getEventOriginator() {\n    return this.eventOriginator_;\n  }\n\n  /**\n   * @param {!EventOriginator} value\n   */\n  setEventOriginator(value) {\n    this.eventOriginator_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getIsFromUserAction() {\n    return this.isFromUserAction_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setIsFromUserAction(value) {\n    this.isFromUserAction_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.eventOriginator_,  // field 1 - event_originator\n      this.isFromUserAction_,  // field 2 - is_from_user_action\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsEventMeta';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass AnalyticsRequest {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?AnalyticsContext} */\n    this.context_ = (data[1] == null || data[1] == undefined) ? null : new\n        AnalyticsContext(data[1]);\n\n    /** @private {?AnalyticsEvent} */\n    this.event_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?AnalyticsEventMeta} */\n    this.meta_ = (data[3] == null || data[3] == undefined) ? null : new\n        AnalyticsEventMeta(data[3]);\n\n    /** @private {?EventParams} */\n    this.params_ = (data[4] == null || data[4] == undefined) ? null : new\n        EventParams(data[4]);\n  }\n\n  /**\n   * @return {?AnalyticsContext}\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {!AnalyticsContext} value\n   */\n  setContext(value) {\n    this.context_ = value;\n  }\n\n  /**\n   * @return {?AnalyticsEvent}\n   */\n  getEvent() {\n    return this.event_;\n  }\n\n  /**\n   * @param {!AnalyticsEvent} value\n   */\n  setEvent(value) {\n    this.event_ = value;\n  }\n\n  /**\n   * @return {?AnalyticsEventMeta}\n   */\n  getMeta() {\n    return this.meta_;\n  }\n\n  /**\n   * @param {!AnalyticsEventMeta} value\n   */\n  setMeta(value) {\n    this.meta_ = value;\n  }\n\n  /**\n   * @return {?EventParams}\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {!EventParams} value\n   */\n  setParams(value) {\n    this.params_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.context_ ? this.context_.toArray() : [], // field 1 - context\n      this.event_,  // field 2 - event\n      this.meta_ ? this.meta_.toArray() : [], // field 3 - meta\n      this.params_ ? this.params_.toArray() : [], // field 4 - params\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'AnalyticsRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EntitlementsResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.jwt_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getJwt() {\n    return this.jwt_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setJwt(value) {\n    this.jwt_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.jwt_,  // field 1 - jwt\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EntitlementsResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass EventParams {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.smartboxMessage_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.gpayTransactionId_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?boolean} */\n    this.hadLogged_ = (data[3] == null) ? null : data[3];\n\n    /** @private {?string} */\n    this.sku_ = (data[4] == null) ? null : data[4];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSmartboxMessage() {\n    return this.smartboxMessage_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSmartboxMessage(value) {\n    this.smartboxMessage_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getGpayTransactionId() {\n    return this.gpayTransactionId_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setGpayTransactionId(value) {\n    this.gpayTransactionId_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getHadLogged() {\n    return this.hadLogged_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setHadLogged(value) {\n    this.hadLogged_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.smartboxMessage_,  // field 1 - smartbox_message\n      this.gpayTransactionId_,  // field 2 - gpay_transaction_id\n      this.hadLogged_,  // field 3 - had_logged\n      this.sku_,  // field 4 - sku\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'EventParams';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass LinkSaveTokenRequest {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.authCode_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.token_ = (data[2] == null) ? null : data[2];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getAuthCode() {\n    return this.authCode_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setAuthCode(value) {\n    this.authCode_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getToken() {\n    return this.token_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setToken(value) {\n    this.token_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.authCode_,  // field 1 - auth_code\n      this.token_,  // field 2 - token\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'LinkSaveTokenRequest';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass LinkingInfoResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.requested_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getRequested() {\n    return this.requested_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setRequested(value) {\n    this.requested_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.requested_,  // field 1 - requested\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'LinkingInfoResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SkuSelectedResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?string} */\n    this.sku_ = (data[1] == null) ? null : data[1];\n\n    /** @private {?string} */\n    this.oldSku_ = (data[2] == null) ? null : data[2];\n\n    /** @private {?boolean} */\n    this.oneTime_ = (data[3] == null) ? null : data[3];\n\n    /** @private {?string} */\n    this.playOffer_ = (data[4] == null) ? null : data[4];\n\n    /** @private {?string} */\n    this.oldPlayOffer_ = (data[5] == null) ? null : data[5];\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.sku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setSku(value) {\n    this.sku_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getOldSku() {\n    return this.oldSku_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setOldSku(value) {\n    this.oldSku_ = value;\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getOneTime() {\n    return this.oneTime_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setOneTime(value) {\n    this.oneTime_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getPlayOffer() {\n    return this.playOffer_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setPlayOffer(value) {\n    this.playOffer_ = value;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getOldPlayOffer() {\n    return this.oldPlayOffer_;\n  }\n\n  /**\n   * @param {string} value\n   */\n  setOldPlayOffer(value) {\n    this.oldPlayOffer_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.sku_,  // field 1 - sku\n      this.oldSku_,  // field 2 - old_sku\n      this.oneTime_,  // field 3 - one_time\n      this.playOffer_,  // field 4 - play_offer\n      this.oldPlayOffer_,  // field 5 - old_play_offer\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SkuSelectedResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SmartBoxMessage {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.isClicked_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getIsClicked() {\n    return this.isClicked_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setIsClicked(value) {\n    this.isClicked_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.isClicked_,  // field 1 - is_clicked\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SmartBoxMessage';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass SubscribeResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.subscribe_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getSubscribe() {\n    return this.subscribe_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setSubscribe(value) {\n    this.subscribe_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.subscribe_,  // field 1 - subscribe\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'SubscribeResponse';\n  }\n}\n\n/**\n * @implements {Message}\n */\nclass ViewSubscriptionsResponse {\n /**\n  * @param {!Array=} data\n  */\n  constructor(data = []) {\n\n    /** @private {?boolean} */\n    this.native_ = (data[1] == null) ? null : data[1];\n  }\n\n  /**\n   * @return {?boolean}\n   */\n  getNative() {\n    return this.native_;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setNative(value) {\n    this.native_ = value;\n  }\n\n  /**\n   * @return {!Array}\n   * @override\n   */\n  toArray() {\n    return [\n      this.label(),  // message label\n      this.native_,  // field 1 - native\n    ];\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  label() {\n    return 'ViewSubscriptionsResponse';\n  }\n}\n\nconst PROTO_MAP = {\n  'AccountCreationRequest': AccountCreationRequest,\n  'AlreadySubscribedResponse': AlreadySubscribedResponse,\n  'AnalyticsContext': AnalyticsContext,\n  'AnalyticsEventMeta': AnalyticsEventMeta,\n  'AnalyticsRequest': AnalyticsRequest,\n  'EntitlementsResponse': EntitlementsResponse,\n  'EventParams': EventParams,\n  'LinkSaveTokenRequest': LinkSaveTokenRequest,\n  'LinkingInfoResponse': LinkingInfoResponse,\n  'SkuSelectedResponse': SkuSelectedResponse,\n  'SmartBoxMessage': SmartBoxMessage,\n  'SubscribeResponse': SubscribeResponse,\n  'ViewSubscriptionsResponse': ViewSubscriptionsResponse,\n};\n\n/**\n * Utility to deserialize a buffer\n * @param {!Array} data\n * @return {!Message}\n */\nfunction deserialize(data) {\n  /** {?string} */\n  const key = data ? data[0] : null;\n  if (key) {\n    const ctor = PROTO_MAP[key];\n    if (ctor) {\n      return new ctor(data);\n    }\n  }\n  throw new Error('Deserialization failed for ' + data);\n}\n\n/**\n * @param {function(new: T)} messageType\n * @return {string}\n * @template T\n */\nfunction getLabel(messageType) {\n  const message = /** @type {!Message} */ (new messageType());\n  return message.label();\n}\n\nexport {\n  AccountCreationRequest,\n  AlreadySubscribedResponse,\n  AnalyticsContext,\n  AnalyticsEvent,\n  AnalyticsEventMeta,\n  AnalyticsRequest,\n  EntitlementsResponse,\n  EventOriginator,\n  EventParams,\n  LinkSaveTokenRequest,\n  LinkingInfoResponse,\n  Message,\n  SkuSelectedResponse,\n  SmartBoxMessage,\n  SubscribeResponse,\n  ViewSubscriptionsResponse,\n  deserialize,\n  getLabel,\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsContext,\n  AnalyticsEvent,\n  AnalyticsEventMeta,\n  AnalyticsRequest,\n  EventOriginator,\n  EventParams,\n} from '../proto/api_messages';\nimport {ClientEventManager} from './client-event-manager';\nimport {createElement} from '../utils/dom';\nimport {feArgs, feUrl} from './services';\nimport {getOnExperiments} from './experiments';\nimport {getUuid} from '../utils/string';\nimport {parseQueryString, parseUrl} from '../utils/url';\nimport {setImportantStyles} from '../utils/style';\n\n/** @const {!Object<string, string>} */\nconst iframeStyles = {\n  display: 'none',\n};\n\nexport class AnalyticsService {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_.getWin().document,\n      'iframe',\n      {}\n    ));\n\n    setImportantStyles(this.iframe_, iframeStyles);\n\n    /** @private @const {string} */\n    this.src_ = feUrl('/serviceiframe');\n\n    /** @private @const {string} */\n    this.publicationId_ = deps.pageConfig().getPublicationId();\n\n    this.args_ = feArgs({\n      publicationId: this.publicationId_,\n    });\n\n    /** @private @type {!boolean} */\n    this.everLogged_ = false;\n\n    /**\n     * @private @const {!AnalyticsContext}\n     */\n    this.context_ = new AnalyticsContext();\n\n    this.context_.setTransactionId(getUuid());\n\n    /** @private {?Promise<!web-activities/activity-ports.ActivityIframePort>} */\n    this.serviceReady_ = null;\n\n    /** @private {?Promise} */\n    this.lastAction_ = null;\n\n    /** @private @const {!ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n    this.eventManager_.registerEventListener(\n      this.handleClientEvent_.bind(this)\n    );\n  }\n\n  /**\n   * @param {string} transactionId\n   */\n  setTransactionId(transactionId) {\n    this.context_.setTransactionId(transactionId);\n  }\n\n  /**\n   * @return {string}\n   */\n  getTransactionId() {\n    return /** @type {string} */ (this.context_.getTransactionId());\n  }\n\n  /**\n   * @return {?string}\n   */\n  getSku() {\n    return this.context_.getSku();\n  }\n\n  /**\n   * @param {string} sku\n   */\n  setSku(sku) {\n    this.context_.setSku(sku);\n  }\n\n  /**\n   * @param {!Array<string>} labels\n   */\n  addLabels(labels) {\n    if (labels && labels.length > 0) {\n      const newLabels = [].concat(this.context_.getLabelList());\n      labels.forEach(label => {\n        if (newLabels.indexOf(label) == -1) {\n          newLabels.push(label);\n        }\n      });\n      this.context_.setLabelList(newLabels);\n    }\n  }\n\n  /**\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getQueryString_() {\n    return this.doc_.getWin().location.search;\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getReferrer_() {\n    return this.doc_.getWin().document.referrer;\n  }\n\n  /**\n   * @private\n   */\n  setContext_() {\n    const utmParams = parseQueryString(this.getQueryString_());\n    this.context_.setReferringOrigin(parseUrl(this.getReferrer_()).origin);\n    const campaign = utmParams['utm_campaign'];\n    const medium = utmParams['utm_medium'];\n    const source = utmParams['utm_source'];\n    if (campaign) {\n      this.context_.setUtmCampaign(campaign);\n    }\n    if (medium) {\n      this.context_.setUtmMedium(medium);\n    }\n    if (source) {\n      this.context_.setUtmSource(source);\n    }\n    this.context_.setClientVersion('SwG $internalRuntimeVersion$');\n    this.addLabels(getOnExperiments(this.doc_.getWin()));\n  }\n\n  /**\n   * @return {!Promise<!../components/activities.ActivityIframePort>}\n   */\n  start() {\n    if (!this.serviceReady_) {\n      // TODO(sohanirao): Potentially do this even earlier\n      this.doc_.getBody().appendChild(this.getElement());\n      this.serviceReady_ = this.activityPorts_\n        .openIframe(this.iframe_, this.src_, this.args_)\n        .then(port => {\n          this.setContext_();\n          return port.whenReady().then(() => port);\n        });\n    }\n    return this.serviceReady_;\n  }\n\n  /**\n   * @param {boolean} isReadyToPay\n   */\n  setReadyToPay(isReadyToPay) {\n    this.context_.setReadyToPay(isReadyToPay);\n  }\n\n  /**\n   */\n  close() {\n    this.doc_.getBody().removeChild(this.getElement());\n  }\n\n  /**\n   * @return {!AnalyticsContext}\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * Returns true if any logs have already be sent to the analytics server.\n   * @return {boolean}\n   */\n  getHasLogged() {\n    return this.everLogged_;\n  }\n\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {!AnalyticsRequest}\n   */\n  createLogRequest_(event) {\n    const meta = new AnalyticsEventMeta();\n    meta.setEventOriginator(event.eventOriginator);\n    meta.setIsFromUserAction(event.isFromUserAction);\n\n    const request = new AnalyticsRequest();\n    request.setEvent(event.eventType);\n    request.setContext(this.context_);\n    request.setMeta(meta);\n    if (event.additionalParameters instanceof EventParams) {\n      request.setParams(event.additionalParameters);\n    } // Ignore event.additionalParameters.  It may have data we shouldn't log.\n    return request;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  shouldLogPublisherEvents_() {\n    return this.deps_.config().enableSwgAnalytics === true;\n  }\n\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {boolean}\n   */\n  shouldAlwaysLogEvent_(event) {\n    /* AMP_CLIENT events are considered publisher events and we generally only\n     * log those if the publisher decided to enable publisher event logging for\n     * privacy purposes.  The page load event is not private and is necessary\n     * just so we know the user is in AMP, so we will log it regardless of\n     * configuration.\n     */\n    return (\n      event.eventType === AnalyticsEvent.IMPRESSION_PAGE_LOAD &&\n      event.eventOriginator === EventOriginator.AMP_CLIENT\n    );\n  }\n\n  /**\n   *  Listens for new events from the events manager and handles logging\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   */\n  handleClientEvent_(event) {\n    //this event is just used to communicate information internally.  It should\n    //not be reported to the SwG analytics service.\n    if (event.eventType === AnalyticsEvent.EVENT_SUBSCRIPTION_STATE) {\n      return;\n    }\n\n    if (\n      ClientEventManager.isPublisherEvent(event) &&\n      !this.shouldLogPublisherEvents_() &&\n      !this.shouldAlwaysLogEvent_(event)\n    ) {\n      return;\n    }\n    this.lastAction_ = this.start().then(port => {\n      const request = this.createLogRequest_(event);\n      this.everLogged_ = true;\n      port.execute(request);\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {SmartSubscriptionButtonApi, Theme} from './smart-button-api';\nimport {createElement} from '../utils/dom';\nimport {msg} from '../utils/i18n';\n\n/**\n * The button title should match that of button's SVG.\n */\n/** @type {!Object<string, string>} */\nconst TITLE_LANG_MAP = {\n  'en': 'Subscribe with Google',\n  'ar': 'Google اشترك مع',\n  'de': 'Abonnieren mit Google',\n  'es': 'Suscríbete con Google',\n  'es-latam': 'Suscríbete con Google',\n  'es-latn': 'Suscríbete con Google',\n  'fr': \"S'abonner avec Google\",\n  'hi': 'Google के ज़रिये सदस्यता',\n  'id': 'Berlangganan dengan Google',\n  'it': 'Abbonati con Google',\n  'jp': 'Google で購読',\n  'ko': 'Google 을 통한구독',\n  'ms': 'Langgan dengan Google',\n  'nl': 'Abonneren via Google',\n  'no': 'Abonner med Google',\n  'pl': 'Subskrybuj z Google',\n  'pt': 'Subscrever com o Google',\n  'pt-br': 'Assine com o Google',\n  'ru': 'Подпиcka через Google',\n  'se': 'Prenumerera med Google',\n  'th': 'สมัครฟาน Google',\n  'tr': 'Google ile Abone Ol',\n  'uk': 'Підписатися через Google',\n  'zh-tw': '透過 Google 訂閱',\n};\n\n/*\n * Properties:\n * - lang: Sets the button SVG and title. Default is \"en\".\n * - theme: \"light\" or \"dark\". Default is \"light\".\n *\n * @typedef {{\n *   options: (!../api/subscriptions.SmartButtonOptions|!../api/subscriptions.ButtonOptions),\n *   clickFun: (!function(Event):?),\n * }}\n */\nexport let ButtonParams;\n\n/**\n * The button stylesheet can be found in the `/assets/swg-button.css`.\n * It's produced by the `gulp assets` task and deployed to\n * `https://news.google.com/swg/js/v1/swg-button.css`.\n */\nexport class ButtonApi {\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {!Promise<!./runtime.ConfiguredRuntime>} configuredRuntimePromise\n   */\n  constructor(doc, configuredRuntimePromise) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Promise<!./runtime.ConfiguredRuntime>} */\n    this.configuredRuntimePromise_ = configuredRuntimePromise;\n  }\n\n  /**\n   */\n  init() {\n    const head = this.doc_.getHead();\n    if (!head) {\n      return;\n    }\n\n    const url = '$assets$/swg-button.css';\n    const existing = head.querySelector(`link[href=\"${url}\"]`);\n    if (existing) {\n      return;\n    }\n\n    // <link rel=\"stylesheet\" href=\"...\" type=\"text/css\">\n    head.appendChild(\n      createElement(this.doc_.getWin().document, 'link', {\n        'rel': 'stylesheet',\n        'type': 'text/css',\n        'href': url,\n      })\n    );\n  }\n\n  /**\n   * @param {!../api/subscriptions.ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  create(optionsOrCallback, callback) {\n    const button = createElement(this.doc_.getWin().document, 'button', {});\n    return this.attach(button, optionsOrCallback, callback);\n  }\n\n  /**\n   * @param {!Element} button\n   * @param {../api/subscriptions.ButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  attach(button, optionsOrCallback, callback) {\n    const options = this.setupButtonAndGetParams_(\n      button,\n      optionsOrCallback,\n      callback\n    ).options;\n\n    const theme = options['theme'];\n    button.classList.add(`swg-button-${theme}`);\n    button.setAttribute('role', 'button');\n    if (options['lang']) {\n      button.setAttribute('lang', options['lang']);\n    }\n    button.setAttribute('title', msg(TITLE_LANG_MAP, button) || '');\n    this.logSwgEvent_(AnalyticsEvent.IMPRESSION_SWG_BUTTON);\n\n    return button;\n  }\n\n  /**\n   * @param {!AnalyticsEvent} eventType\n   * @param {boolean=} isFromUserAction\n   */\n  logSwgEvent_(eventType, isFromUserAction) {\n    this.configuredRuntimePromise_.then(configuredRuntime => {\n      configuredRuntime.eventManager().logSwgEvent(eventType, isFromUserAction);\n    });\n  }\n\n  /**\n   *\n   * @param {../api/subscriptions.ButtonOptions|../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @return {!../api/subscriptions.ButtonOptions|!../api/subscriptions.SmartButtonOptions}\n   * @private\n   */\n  getOptions_(optionsOrCallback) {\n    const options =\n      /** @type {!../api/subscriptions.ButtonOptions|!../api/subscriptions.SmartButtonOptions} */ (optionsOrCallback &&\n      typeof optionsOrCallback != 'function'\n        ? optionsOrCallback\n        : {'theme': Theme.LIGHT});\n\n    const theme = options['theme'];\n    if (theme !== Theme.LIGHT && theme !== Theme.DARK) {\n      options['theme'] = Theme.LIGHT;\n    }\n    return options;\n  }\n\n  /**\n   *\n   * @param {?../api/subscriptions.ButtonOptions|?../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {function()|function(Event):boolean}\n   * @private\n   */\n  getCallback_(optionsOrCallback, callback) {\n    return (\n      /** @type {function()|function(Event):boolean} */ ((typeof optionsOrCallback ==\n      'function'\n        ? optionsOrCallback\n        : null) || callback)\n    );\n  }\n\n  /**\n   * @param {!Element} button\n   * @param {../api/subscriptions.SmartButtonOptions|function()|../api/subscriptions.ButtonOptions} optionsOrCallback\n   * @param {function()=} callbackFun\n   * @return {ButtonParams}\n   */\n  setupButtonAndGetParams_(button, optionsOrCallback, callbackFun) {\n    const options = this.getOptions_(optionsOrCallback);\n    const callback = this.getCallback_(optionsOrCallback, callbackFun);\n    const clickFun = event => {\n      this.logSwgEvent_(AnalyticsEvent.ACTION_SWG_BUTTON_CLICK, true);\n      if (typeof callback === 'function') {\n        callback(event);\n      }\n    };\n    button.addEventListener('click', clickFun);\n    return {options, clickFun};\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!Element} button\n   * @param {../api/subscriptions.SmartButtonOptions|function()} optionsOrCallback\n   * @param {function()=} callback\n   * @return {!Element}\n   */\n  attachSmartButton(deps, button, optionsOrCallback, callback) {\n    const params = this.setupButtonAndGetParams_(\n      button,\n      optionsOrCallback,\n      callback\n    );\n    // Add required CSS class, if missing.\n    button.classList.add('swg-smart-button');\n    return new SmartSubscriptionButtonApi(\n      deps,\n      button,\n      params.options,\n      params.clickFun\n    ).start();\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {warn} from '../utils/log';\n\n/** @enum {number} */\nconst CallbackId = {\n  ENTITLEMENTS: 1,\n  SUBSCRIBE_REQUEST: 2,\n  PAYMENT_RESPONSE: 3,\n  LOGIN_REQUEST: 4,\n  LINK_PROGRESS: 5,\n  LINK_COMPLETE: 6,\n  FLOW_STARTED: 7,\n  FLOW_CANCELED: 8,\n};\n\n/**\n */\nexport class Callbacks {\n  /**\n   */\n  constructor() {\n    /** @private @const {!Object<CallbackId, function(*)>} */\n    this.callbacks_ = {};\n    /** @private @const {!Object<CallbackId, *>} */\n    this.resultBuffer_ = {};\n  }\n\n  /**\n   * @param {function(!Promise<!../api/entitlements.Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {\n    this.setCallback_(CallbackId.ENTITLEMENTS, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/entitlements.Entitlements>} promise\n   */\n  triggerEntitlementsResponse(promise) {\n    return this.trigger_(\n      CallbackId.ENTITLEMENTS,\n      promise.then(res => res.clone())\n    );\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEntitlementsResponsePending() {\n    return !!this.resultBuffer_[CallbackId.ENTITLEMENTS];\n  }\n\n  /**\n   * @param {function(!../api/subscriptions.LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {\n    this.setCallback_(CallbackId.LOGIN_REQUEST, callback);\n  }\n\n  /**\n   * @param {!../api/subscriptions.LoginRequest} request\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLoginRequest(request) {\n    return this.trigger_(CallbackId.LOGIN_REQUEST, request);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkProgress(callback) {\n    this.setCallback_(CallbackId.LINK_PROGRESS, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkProgress() {\n    return this.trigger_(CallbackId.LINK_PROGRESS, true);\n  }\n\n  /**\n   */\n  resetLinkProgress() {\n    this.resetCallback_(CallbackId.LINK_PROGRESS);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {\n    this.setCallback_(CallbackId.LINK_COMPLETE, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkComplete() {\n    return this.trigger_(CallbackId.LINK_COMPLETE, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLinkCompletePending() {\n    return !!this.resultBuffer_[CallbackId.LINK_COMPLETE];\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnSubscribeRequest(callback) {\n    this.setCallback_(CallbackId.SUBSCRIBE_REQUEST, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerSubscribeRequest() {\n    return this.trigger_(CallbackId.SUBSCRIBE_REQUEST, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasSubscribeRequestCallback() {\n    return !!this.callbacks_[CallbackId.SUBSCRIBE_REQUEST];\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {\n    warn(\n      `[swg.js:setOnSubscribeResponse]: This method has been deprecated, please switch usages to 'setOnPaymentResponse'`\n    );\n    this.setCallback_(CallbackId.PAYMENT_RESPONSE, callback);\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnContributionResponse(callback) {\n    warn(\n      `[swg.js:setOnContributionResponse]: This method has been deprecated, please switch usages to 'setOnPaymentResponse'`\n    );\n    this.setCallback_(CallbackId.PAYMENT_RESPONSE, callback);\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnPaymentResponse(callback) {\n    this.setCallback_(CallbackId.PAYMENT_RESPONSE, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/subscribe-response.SubscribeResponse>} responsePromise\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerPaymentResponse(responsePromise) {\n    return this.trigger_(\n      CallbackId.PAYMENT_RESPONSE,\n      responsePromise.then(res => res.clone())\n    );\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasPaymentResponsePending() {\n    return !!this.resultBuffer_[CallbackId.PAYMENT_RESPONSE];\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {\n    this.setCallback_(CallbackId.FLOW_STARTED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowStarted(flow, data = {}) {\n    return this.trigger_(CallbackId.FLOW_STARTED, {\n      flow,\n      data,\n    });\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {\n    this.setCallback_(CallbackId.FLOW_CANCELED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowCanceled(flow, data = {}) {\n    return this.trigger_(CallbackId.FLOW_CANCELED, {\n      flow,\n      data,\n    });\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(?)} callback\n   * @private\n   */\n  setCallback_(id, callback) {\n    if (this.callbacks_[id]) {\n      warn(\n        `[swg.js]: You have registered multiple callbacks for the same response.`\n      );\n    }\n    this.callbacks_[id] = callback;\n    // If result already exist, execute the callback right away.\n    if (id in this.resultBuffer_) {\n      this.executeCallback_(id, callback, this.resultBuffer_[id]);\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {*} data\n   * @return {boolean}\n   * @private\n   */\n  trigger_(id, data) {\n    this.resultBuffer_[id] = data;\n    const callback = this.callbacks_[id];\n    if (callback) {\n      this.executeCallback_(id, callback, data);\n    }\n    return !!callback;\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @private\n   */\n  resetCallback_(id) {\n    if (id in this.resultBuffer_) {\n      delete this.resultBuffer_[id];\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(*)} callback\n   * @param {*} data\n   * @private\n   */\n  executeCallback_(id, callback, data) {\n    // Always execute callbacks in a microtask.\n    Promise.resolve().then(() => {\n      callback(data);\n      this.resetCallback_(id);\n    });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\nimport {FilterResult} from '../api/client-event-manager-api';\nimport {isBoolean, isEnumValue, isFunction, isObject} from '../utils/types';\nimport {log} from '../utils/log';\n\n/**\n * Helper function to describe an issue with an event object\n * @param {!string} valueName\n * @param {?*} value\n * @returns {!string}\n */\nfunction createEventErrorMessage(valueName, value) {\n  return 'Event has an invalid ' + valueName + '(' + value + ')';\n}\n\n/**\n * Throws an error if the event is invalid.\n * @param {!../api/client-event-manager-api.ClientEvent} event\n */\nfunction validateEvent(event) {\n  if (!isObject(event)) {\n    throw new Error('Event must be a valid object');\n  }\n\n  if (!isEnumValue(AnalyticsEvent, event.eventType)) {\n    throw new Error(createEventErrorMessage('eventType', event.eventType));\n  }\n\n  if (!isEnumValue(EventOriginator, event.eventOriginator)) {\n    throw new Error(\n      createEventErrorMessage('eventOriginator', event.eventOriginator)\n    );\n  }\n\n  if (\n    !isObject(event.additionalParameters) &&\n    event.additionalParameters != null\n  ) {\n    throw new Error(\n      createEventErrorMessage(\n        'additionalParameters',\n        event.additionalParameters\n      )\n    );\n  }\n\n  if (event.isFromUserAction != null && !isBoolean(event.isFromUserAction)) {\n    throw new Error(\n      createEventErrorMessage('isFromUserAction', event.isFromUserAction)\n    );\n  }\n}\n\n/** @implements {../api/client-event-manager-api.ClientEventManagerApi} */\nexport class ClientEventManager {\n  /**\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   * @return {boolean}\n   */\n  static isPublisherEvent(event) {\n    return (\n      event.eventOriginator === EventOriginator.PROPENSITY_CLIENT ||\n      event.eventOriginator === EventOriginator.PUBLISHER_CLIENT ||\n      event.eventOriginator === EventOriginator.AMP_CLIENT\n    );\n  }\n\n  /**\n   *\n   * @param {!Promise} configuredPromise\n   */\n  constructor(configuredPromise) {\n    /** @private {!Array<function(!../api/client-event-manager-api.ClientEvent)>} */\n    this.listeners_ = [];\n\n    /** @private {!Array<function(!../api/client-event-manager-api.ClientEvent):!FilterResult>} */\n    this.filterers_ = [];\n\n    /** @private {?Promise} */\n    this.lastAction_ = null;\n\n    /** @private @const {!Promise} */\n    this.isReadyPromise_ = configuredPromise;\n  }\n\n  /**\n   * @overrides\n   */\n  registerEventListener(listener) {\n    if (!isFunction(listener)) {\n      throw new Error('Event manager listeners must be a function');\n    }\n    this.listeners_.push(listener);\n  }\n\n  /**\n   * @overrides\n   */\n  registerEventFilterer(filterer) {\n    if (!isFunction(filterer)) {\n      throw new Error('Event manager filterers must be a function');\n    }\n    this.filterers_.push(filterer);\n  }\n\n  /**\n   * @overrides\n   */\n  logEvent(event) {\n    validateEvent(event);\n    this.lastAction_ = this.isReadyPromise_.then(() => {\n      for (let filterer = 0; filterer < this.filterers_.length; filterer++) {\n        try {\n          if (this.filterers_[filterer](event) === FilterResult.CANCEL_EVENT) {\n            return Promise.resolve();\n          }\n        } catch (e) {\n          log(e);\n        }\n      }\n      for (let listener = 0; listener < this.listeners_.length; listener++) {\n        try {\n          this.listeners_[listener](event);\n        } catch (e) {\n          log(e);\n        }\n      }\n      return Promise.resolve();\n    });\n  }\n\n  /**\n   * Creates an event with the arguments provided and calls logEvent.\n   * @param {!AnalyticsEvent} eventType\n   * @param {?boolean=} isFromUserAction\n   * @param {../proto/api_messages.EventParams=} eventParams\n   */\n  logSwgEvent(eventType, isFromUserAction = false, eventParams = null) {\n    this.logEvent({\n      eventType,\n      eventOriginator: EventOriginator.SWG_CLIENT,\n      isFromUserAction,\n      additionalParameters: eventParams,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {\n  AlreadySubscribedResponse,\n  SkuSelectedResponse,\n} from '../proto/api_messages';\nimport {PayStartFlow} from './pay-flow';\nimport {ProductType, SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\n\n/**\n * The class for Contributions flow.\n */\nexport class ContributionsFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    const isClosable = (options && options.isClosable) || true;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/contributionsiframe'),\n      feArgs({\n        'productId': deps.pageConfig().getProductId(),\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productType': ProductType.UI_CONTRIBUTION,\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': isClosable,\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * @param {SkuSelectedResponse} response\n   */\n  startPayFlow_(response) {\n    const sku = response.getSku();\n    const isOneTime = response.getOneTime();\n    if (sku) {\n      if (isOneTime) {\n        const /** @type {../api/subscriptions.SubscriptionRequest} */ contributionRequest = {\n            skuId: sku,\n            oneTime: isOneTime,\n          };\n        new PayStartFlow(\n          this.deps_,\n          contributionRequest,\n          ProductType.UI_CONTRIBUTION\n        ).start();\n      } else {\n        new PayStartFlow(this.deps_, sku, ProductType.UI_CONTRIBUTION).start();\n      }\n    }\n  }\n\n  /**\n   * Starts the contributions flow or alreadyMember flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_CONTRIBUTION_OPTIONS);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_CONTRIBUTION_OPTIONS);\n    });\n    this.activityIframeView_.on(\n      AlreadySubscribedResponse,\n      this.handleLinkRequest_.bind(this)\n    );\n    this.activityIframeView_.on(\n      SkuSelectedResponse,\n      this.startPayFlow_.bind(this)\n    );\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {DeferredAccountCreationResponse} from '../api/deferred-account-creation';\nimport {JwtHelper} from '../utils/jwt';\nimport {PayCompleteFlow} from './pay-flow';\nimport {PurchaseData, SubscribeResponse} from '../api/subscribe-response';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {UserData} from '../api/user-data';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\n\n/**\n * The flow to initiate deferred account process.\n * See `Subscriptions.completeDeferredAccountCreation` API.\n */\nexport class DeferredAccountFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?../api/deferred-account-creation.DeferredAccountCreationRequest} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @type {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    const defaultOptions = {\n      entitlements: null,\n      consent: true,\n    };\n    /** @private @const {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    this.options_ = Object.assign(defaultOptions, options || {});\n  }\n\n  /**\n   * Starts the deferred account flow.\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  start() {\n    const entitlements = this.options_.entitlements;\n\n    // For now, entitlements are required to be present and have the Google\n    // token. This is strictly not required for the implementation. But it's\n    // preferrable API-wise at this time.\n    if (!entitlements || !entitlements.getEntitlementForSource('google')) {\n      throw new Error('No entitlements with \"google\" source');\n    }\n\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION);\n\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/recoveriframe'),\n      feArgs({\n        'publicationId': this.deps_.pageConfig().getPublicationId(),\n        'productId': this.deps_.pageConfig().getProductId(),\n        'entitlements': (entitlements && entitlements.raw) || null,\n        'consent': this.options_.consent,\n      }),\n      /* shouldFadeBody */ true\n    );\n\n    this.openPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.activityIframeView_.acceptResult().then(\n      result => {\n        // The consent part is complete.\n        return this.handleConsentResponse_(\n          /** @type {!Object} */ (result.data)\n        );\n      },\n      reason => {\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(\n              SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION\n            );\n        } else {\n          this.dialogManager_.completeView(this.activityIframeView_);\n        }\n        throw reason;\n      }\n    );\n  }\n\n  /**\n   * @param {!Object} data\n   * @return {!DeferredAccountCreationResponse}\n   * @private\n   */\n  handleConsentResponse_(data) {\n    this.deps_.entitlementsManager().blockNextNotification();\n\n    // Parse the response.\n    const entitlementsJwt = data['entitlements'];\n    const idToken = data['idToken'];\n    const productType = data['productType'];\n    const entitlements = this.deps_\n      .entitlementsManager()\n      .parseEntitlements({'signedEntitlements': entitlementsJwt});\n    const userData = new UserData(\n      idToken,\n      /** @type {!Object} */ (new JwtHelper().decode(idToken))\n    );\n    const purchaseDataList = data['purchaseDataList']\n      ? data['purchaseDataList'].map(\n          pd => new PurchaseData(pd['data'], pd['signature'])\n        )\n      : [\n          // TODO(dvoytenko): cleanup/deprecate.\n          new PurchaseData(\n            data['purchaseData']['data'],\n            data['purchaseData']['signature']\n          ),\n        ];\n\n    // For now, we'll use the `PayCompleteFlow` as a \"creating account\" flow.\n    // But this can be eventually implemented by the same iframe.\n    const creatingFlow = new PayCompleteFlow(this.deps_);\n    const completeHandler = creatingFlow.complete.bind(creatingFlow);\n\n    const response = new DeferredAccountCreationResponse(\n      entitlements,\n      userData,\n      purchaseDataList,\n      completeHandler\n    );\n\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.ACTION_NEW_DEFERRED_ACCOUNT, true);\n\n    // Start the \"sync\" flow.\n    creatingFlow.start(\n      new SubscribeResponse(\n        '', // raw field doesn't matter in this case\n        purchaseDataList[0],\n        userData,\n        entitlements,\n        productType,\n        () => Promise.resolve() // completeHandler doesn't matter in this case\n      )\n    );\n    return response;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @interface */\nexport class DepsDef {\n  /**\n   * @return {!../model/doc.Doc}\n   */\n  doc() {}\n\n  /**\n   * @return {!Window}\n   */\n  win() {}\n\n  /**\n   * @return {!../api/subscriptions.Config}\n   */\n  config() {}\n\n  /**\n   * @return {!../model/page-config.PageConfig}\n   */\n  pageConfig() {}\n\n  /**\n   * @return {!../components/activities.ActivityPorts}\n   */\n  activities() {}\n\n  /**\n   * @return {!./pay-client.PayClient}\n   */\n  payClient() {}\n\n  /**\n   * @return {!../components/dialog-manager.DialogManager}\n   */\n  dialogManager() {}\n\n  /**\n   * @return {!./entitlements-manager.EntitlementsManager}\n   */\n  entitlementsManager() {}\n\n  /**\n   * @return {!./callbacks.Callbacks}\n   */\n  callbacks() {}\n\n  /**\n   * @return {!../runtime/storage.Storage}\n   */\n  storage() {}\n\n  /**\n   * @return {!../runtime/analytics-service.AnalyticsService}\n   */\n  analytics() {}\n\n  /**\n   * @return {!../runtime/jserror.JsError}\n   */\n  jserror() {}\n\n  /**\n   * @return {!../runtime/client-event-manager.ClientEventManager}\n   */\n  eventManager() {}\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlement, Entitlements} from '../api/entitlements';\nimport {JwtHelper} from '../utils/jwt';\nimport {Toast} from '../ui/toast';\nimport {feArgs, feUrl} from '../runtime/services';\nimport {serviceUrl} from './services';\n\nconst SERVICE_ID = 'subscribe.google.com';\nconst TOAST_STORAGE_KEY = 'toast';\nconst ENTS_STORAGE_KEY = 'ents';\nconst IS_READY_TO_PAY_STORAGE_KEY = 'isreadytopay';\n\n/**\n */\nexport class EntitlementsManager {\n  /**\n   * @param {!Window} win\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {!./fetcher.Fetcher} fetcher\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(win, pageConfig, fetcher, deps) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {string} */\n    this.publicationId_ = this.pageConfig_.getPublicationId();\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!JwtHelper} */\n    this.jwtHelper_ = new JwtHelper();\n\n    /** @private {?Promise<!Entitlements>} */\n    this.responsePromise_ = null;\n\n    /** @private {number} */\n    this.positiveRetries_ = 0;\n\n    /** @private {boolean} */\n    this.blockNextNotification_ = false;\n\n    /** @private @const {!./storage.Storage} */\n    this.storage_ = deps.storage();\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = deps.config();\n  }\n\n  /**\n   * @param {boolean=} expectPositive\n   */\n  reset(expectPositive) {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = Math.max(\n      this.positiveRetries_,\n      expectPositive ? 3 : 0\n    );\n    if (expectPositive) {\n      this.storage_.remove(ENTS_STORAGE_KEY);\n      this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n    }\n  }\n\n  /**\n   * Clears all of the entitlements state and cache.\n   */\n  clear() {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = 0;\n    this.unblockNextNotification();\n    this.storage_.remove(ENTS_STORAGE_KEY);\n    this.storage_.remove(TOAST_STORAGE_KEY);\n    this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getQueryString_() {\n    return this.win_.location.search;\n  }\n\n  /**\n   * @param {?string=} encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements(encryptedDocumentKey) {\n    if (!this.responsePromise_) {\n      this.responsePromise_ = this.getEntitlementsFlow_(encryptedDocumentKey);\n    }\n    return this.responsePromise_.then(response => {\n      if (response.isReadyToPay != null) {\n        this.analyticsService_.setReadyToPay(response.isReadyToPay);\n      }\n      return response;\n    });\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean=} isReadyToPay\n   * @return {boolean}\n   */\n  pushNextEntitlements(raw, isReadyToPay) {\n    const entitlements = this.getValidJwtEntitlements_(\n      raw,\n      /* requireNonExpired */ true,\n      isReadyToPay\n    );\n    if (entitlements && entitlements.enablesThis()) {\n      this.storage_.set(ENTS_STORAGE_KEY, raw);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @param {?string=} encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  getEntitlementsFlow_(encryptedDocumentKey) {\n    return this.fetchEntitlementsWithCaching_(encryptedDocumentKey).then(\n      entitlements => {\n        this.onEntitlementsFetched_(entitlements);\n        return entitlements;\n      }\n    );\n  }\n\n  /**\n   * @param {?string=} encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlementsWithCaching_(encryptedDocumentKey) {\n    return Promise.all([\n      this.storage_.get(ENTS_STORAGE_KEY),\n      this.storage_.get(IS_READY_TO_PAY_STORAGE_KEY),\n    ]).then(cachedValues => {\n      const raw = cachedValues[0];\n      const irtp = cachedValues[1];\n      // Try cache first.\n      if (raw && !encryptedDocumentKey) {\n        const cached = this.getValidJwtEntitlements_(\n          raw,\n          /* requireNonExpired */ true,\n          irtpStringToBoolean(irtp)\n        );\n        if (cached && cached.enablesThis()) {\n          // Already have a positive response.\n          this.positiveRetries_ = 0;\n          return cached;\n        }\n      }\n      // If cache didn't match, perform fetch.\n      return this.fetchEntitlements_(encryptedDocumentKey).then(ents => {\n        // If entitlements match the product, store them in cache.\n        if (ents && ents.enablesThis() && ents.raw) {\n          this.storage_.set(ENTS_STORAGE_KEY, ents.raw);\n        }\n        return ents;\n      });\n    });\n  }\n\n  /**\n   * @param {?string=} encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlements_(encryptedDocumentKey) {\n    // TODO(dvoytenko): Replace retries with consistent fetch.\n    let positiveRetries = this.positiveRetries_;\n    this.positiveRetries_ = 0;\n    const attempt = () => {\n      positiveRetries--;\n      return this.fetch_(encryptedDocumentKey).then(entitlements => {\n        if (entitlements.enablesThis() || positiveRetries <= 0) {\n          return entitlements;\n        }\n        return new Promise(resolve => {\n          this.win_.setTimeout(() => {\n            resolve(attempt());\n          }, 550);\n        });\n      });\n    };\n    return attempt();\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setToastShown(value) {\n    this.storage_.set(TOAST_STORAGE_KEY, value ? '1' : '0');\n  }\n\n  /**\n   */\n  blockNextNotification() {\n    this.blockNextNotification_ = true;\n  }\n\n  /**\n   */\n  unblockNextNotification() {\n    this.blockNextNotification_ = false;\n  }\n\n  /**\n   * The JSON must either contain a \"signedEntitlements\" with JWT, or\n   * \"entitlements\" field with plain JSON object.\n   * @param {!Object} json\n   * @return {!Entitlements}\n   */\n  parseEntitlements(json) {\n    const isReadyToPay = json['isReadyToPay'];\n    if (isReadyToPay == null) {\n      this.storage_.remove(IS_READY_TO_PAY_STORAGE_KEY);\n    } else {\n      this.storage_.set(IS_READY_TO_PAY_STORAGE_KEY, String(isReadyToPay));\n    }\n    const signedData = json['signedEntitlements'];\n    const decryptedDocumentKey = json['decryptedDocumentKey'];\n    if (signedData) {\n      const entitlements = this.getValidJwtEntitlements_(\n        signedData,\n        /* requireNonExpired */ false,\n        isReadyToPay,\n        decryptedDocumentKey\n      );\n      if (entitlements) {\n        return entitlements;\n      }\n    } else {\n      const plainEntitlements = json['entitlements'];\n      if (plainEntitlements) {\n        return this.createEntitlements_(\n          '',\n          plainEntitlements,\n          isReadyToPay,\n          decryptedDocumentKey\n        );\n      }\n    }\n    // Empty response.\n    return this.createEntitlements_('', [], isReadyToPay);\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean} requireNonExpired\n   * @param {boolean=} isReadyToPay\n   * @param {?string=} decryptedDocumentKey\n   * @return {?Entitlements}\n   * @private\n   */\n  getValidJwtEntitlements_(\n    raw,\n    requireNonExpired,\n    isReadyToPay,\n    decryptedDocumentKey\n  ) {\n    try {\n      const jwt = this.jwtHelper_.decode(raw);\n      if (requireNonExpired) {\n        const now = Date.now();\n        const exp = jwt['exp'];\n        if (parseFloat(exp) * 1000 < now) {\n          return null;\n        }\n      }\n      const entitlementsClaim = jwt['entitlements'];\n      return (\n        (entitlementsClaim &&\n          this.createEntitlements_(\n            raw,\n            entitlementsClaim,\n            isReadyToPay,\n            decryptedDocumentKey\n          )) ||\n        null\n      );\n    } catch (e) {\n      // Ignore the error.\n      this.win_.setTimeout(() => {\n        throw e;\n      });\n    }\n    return null;\n  }\n\n  /**\n   * @param {string} raw\n   * @param {!Object|!Array<!Object>} json\n   * @param {boolean=} isReadyToPay\n   * @param {?string=} decryptedDocumentKey\n   * @return {!Entitlements}\n   * @private\n   */\n  createEntitlements_(raw, json, isReadyToPay, decryptedDocumentKey) {\n    return new Entitlements(\n      SERVICE_ID,\n      raw,\n      Entitlement.parseListFromJson(json),\n      this.pageConfig_.getProductId(),\n      this.ack_.bind(this),\n      isReadyToPay,\n      decryptedDocumentKey\n    );\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  onEntitlementsFetched_(entitlements) {\n    // Skip any notifications and toast if other flows are ongoing.\n    // TODO(dvoytenko): what's the right action when pay flow was canceled?\n    const blockNotification = this.blockNextNotification_;\n    this.blockNextNotification_ = false;\n    if (blockNotification) {\n      return;\n    }\n\n    // Notify on the received entitlements.\n    this.deps_\n      .callbacks()\n      .triggerEntitlementsResponse(Promise.resolve(entitlements));\n\n    // Show a toast if needed.\n    this.maybeShowToast_(entitlements);\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @return {!Promise}\n   * @private\n   */\n  maybeShowToast_(entitlements) {\n    const entitlement = entitlements.getEntitlementForThis();\n    if (!entitlement) {\n      return Promise.resolve();\n    }\n    // Check if storage bit is set. It's only set by the `Entitlements.ack`\n    // method.\n    return this.storage_.get(TOAST_STORAGE_KEY).then(value => {\n      if (value == '1') {\n        // Already shown;\n        return;\n      }\n      if (entitlement) {\n        this.showToast_(entitlement);\n      }\n    });\n  }\n\n  /**\n   * @param {!Entitlement} entitlement\n   * @private\n   */\n  showToast_(entitlement) {\n    const source = entitlement.source || 'google';\n    return new Toast(\n      this.deps_,\n      feUrl('/toastiframe'),\n      feArgs({\n        'publicationId': this.publicationId_,\n        'source': source,\n      })\n    ).open();\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  ack_(entitlements) {\n    if (entitlements.getEntitlementForThis()) {\n      this.setToastShown(true);\n    }\n  }\n\n  /**\n   * @param {?string=} encryptedDocumentKey\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetch_(encryptedDocumentKey) {\n    let url =\n      '/publication/' +\n      encodeURIComponent(this.publicationId_) +\n      '/entitlements';\n    if (encryptedDocumentKey) {\n      //TODO(chenshay): Make this a 'Post'.\n      url += '?crypt=' + encodeURIComponent(encryptedDocumentKey);\n    }\n    return this.fetcher_\n      .fetchCredentialedJson(serviceUrl(url))\n      .then(json => this.parseEntitlements(json));\n  }\n}\n\n/**\n * Convert String value of isReadyToPay\n * (from JSON or Cache) to a boolean value.\n * @param {string} value\n * @return {boolean|undefined}\n * @private\n */\nfunction irtpStringToBoolean(value) {\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      return undefined;\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {Event} from '../api/logger-api';\n\n/** @const {!Object<string,AnalyticsEvent>} */\nconst PublisherEventToAnalyticsEvent = {\n  [Event.IMPRESSION_PAYWALL]: AnalyticsEvent.IMPRESSION_PAYWALL,\n  [Event.IMPRESSION_AD]: AnalyticsEvent.IMPRESSION_AD,\n  [Event.IMPRESSION_OFFERS]: AnalyticsEvent.IMPRESSION_OFFERS,\n  [Event.ACTION_SUBSCRIPTIONS_LANDING_PAGE]:\n    AnalyticsEvent.ACTION_SUBSCRIPTIONS_LANDING_PAGE,\n  [Event.ACTION_OFFER_SELECTED]: AnalyticsEvent.ACTION_OFFER_SELECTED,\n  [Event.ACTION_PAYMENT_FLOW_STARTED]:\n    AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED,\n  [Event.ACTION_PAYMENT_COMPLETED]: AnalyticsEvent.ACTION_PAYMENT_COMPLETE,\n  [Event.EVENT_CUSTOM]: AnalyticsEvent.EVENT_CUSTOM,\n};\n\n/** @const {!Object<number,?Event>} */\nconst AnalyticsEventToPublisherEvent = {\n  [AnalyticsEvent.UNKNOWN]: null,\n  [AnalyticsEvent.IMPRESSION_PAYWALL]: Event.IMPRESSION_PAYWALL,\n  [AnalyticsEvent.IMPRESSION_AD]: Event.IMPRESSION_AD,\n  [AnalyticsEvent.IMPRESSION_OFFERS]: Event.IMPRESSION_OFFERS,\n  [AnalyticsEvent.IMPRESSION_SUBSCRIBE_BUTTON]: null,\n  [AnalyticsEvent.IMPRESSION_SMARTBOX]: null,\n  [AnalyticsEvent.ACTION_SUBSCRIBE]: null,\n  [AnalyticsEvent.ACTION_PAYMENT_COMPLETE]: Event.ACTION_PAYMENT_COMPLETED,\n  [AnalyticsEvent.ACTION_ACCOUNT_CREATED]: null,\n  [AnalyticsEvent.ACTION_ACCOUNT_ACKNOWLEDGED]: null,\n  [AnalyticsEvent.ACTION_SUBSCRIPTIONS_LANDING_PAGE]:\n    Event.ACTION_SUBSCRIPTIONS_LANDING_PAGE,\n  [AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED]:\n    Event.ACTION_PAYMENT_FLOW_STARTED,\n  [AnalyticsEvent.ACTION_OFFER_SELECTED]: Event.ACTION_OFFER_SELECTED,\n  [AnalyticsEvent.EVENT_PAYMENT_FAILED]: null,\n  [AnalyticsEvent.EVENT_CUSTOM]: Event.EVENT_CUSTOM,\n};\n\n/**\n * Converts a propensity event enum into an analytics event enum.\n * @param {!Event|string} propensityEvent\n * @returns {!AnalyticsEvent}\n */\nexport function publisherEventToAnalyticsEvent(propensityEvent) {\n  return PublisherEventToAnalyticsEvent[propensityEvent];\n}\n\n/**\n * Converts an analytics event enum into a propensity event enum.\n * @param {!AnalyticsEvent} analyticsEvent\n * @returns {?Event}\n */\nexport function analyticsEventToPublisherEvent(analyticsEvent) {\n  return AnalyticsEventToPublisherEvent[analyticsEvent];\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {string}\n */\nexport const ExperimentFlags = {\n  /**\n   * Enables GPay API in SwG.\n   * Cleanup issue: #406.\n   */\n  GPAY_API: 'gpay-api',\n\n  /**\n   * Enables GPay native support.\n   * Cleanup issue: #441.\n   */\n  GPAY_NATIVE: 'gpay-native',\n\n  /**\n   * Enables the feature that allows you to replace one subscription\n   * for another in the subscribe() API.\n   */\n  REPLACE_SUBSCRIPTION: 'replace-subscription',\n\n  /**\n   * Enables the contributions feature.\n   * DEPRECATED. This flag can be removed once not used by anyone.\n   */\n  CONTRIBUTIONS: 'contributions',\n\n  /**\n   * Enables the Propensity feature\n   */\n  PROPENSITY: 'propensity',\n\n  /**\n   * Enables the Smartbox feature.\n   */\n  SMARTBOX: 'smartbox',\n\n  /**\n   * Enables using new Activities APIs\n   */\n  HEJIRA: 'hejira',\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ErrorUtils} from '../utils/errors';\nimport {parseQueryString} from '../utils/url';\n\n/**\n * @fileoverview\n *\n * Client-side experiments in SwG.\n *\n * The experiments can be set in a few different ways:\n *  1. By gulp build rules using `--experiments=${experimentsString}` argument.\n *  2. By `#swg.experiments=${experimentsString}` parameter in the URL's\n *     fragment.\n *  3. By `swg.configure({experiments: [array]})` call.\n *\n * The `${experimentsString}` is defined as following:\n *  - experimentString = (experimentSpec,)*\n *  - experimentSpec = experimentId | experimentId '=' num100 ('c')?\n *\n * Some examples:\n *  - `A,B` - defines two experiments \"A\" and \"B\" that will be turned on.\n *  - `A:100,B:100` - the same: \"A\" and \"B\" will be turned on.\n *  - `A:0` - the experiment \"A\" will be disabled.\n *  - `A:1` - enable the experiment \"A\" in 1% of impressions.\n *  - `A:10c` - enable the experiment \"A\" in 10% of impressions with 10%\n *    control. In this case, 20% of the impressions will be split into two\n *    categories: experiment and control. Notice, a control can be requested\n *    only for the fraction under 20%.\n */\n\n/**\n * @enum {string}\n */\nconst Selection = {\n  EXPERIMENT: 'e',\n  CONTROL: 'c',\n};\n\n/**\n * A comma-separated set of experiments.\n * @type {string}\n */\nlet experimentsString = '$experiments$';\n\n/**\n * A parsed map of experiments.\n * @type {?Object<string, boolean>}\n */\nlet experimentMap = null;\n\n/**\n * @param {string} s\n * @package Visible for testing only.\n */\nexport function setExperimentsStringForTesting(s) {\n  experimentsString = s;\n  experimentMap = null;\n}\n\n/**\n * Ensures that the experiments have been initialized and returns them.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperiments(win) {\n  if (!experimentMap) {\n    experimentMap = {};\n    let combinedExperimentString = experimentsString;\n    try {\n      const query = parseQueryString(win.location.hash);\n      const experimentStringFromHash = query['swg.experiments'];\n      if (experimentStringFromHash) {\n        combinedExperimentString += ',' + experimentStringFromHash;\n      }\n    } catch (e) {\n      // Ignore: experiment parsing cannot block runtime.\n      ErrorUtils.throwAsync(e);\n    }\n\n    // Format:\n    // - experimentString = (experimentSpec,)*\n    combinedExperimentString.split(',').forEach(s => {\n      s = s.trim();\n      if (!s) {\n        return;\n      }\n      try {\n        parseSetExperiment(win, experimentMap, s);\n      } catch (e) {\n        // Ignore: experiment parsing cannot block runtime.\n        ErrorUtils.throwAsync(e);\n      }\n    });\n  }\n  return experimentMap;\n}\n\n/**\n * @param {!Window} win\n * @param {?Object<string, boolean>} experimentMap\n * @param {string} spec\n */\nfunction parseSetExperiment(win, experimentMap, spec) {\n  // Format:\n  // - experimentSpec = experimentId | experimentId '=' num100 ('c')?\n  let experimentId;\n  let fraction;\n  let control = false;\n  const eq = spec.indexOf(':');\n  if (eq == -1) {\n    experimentId = spec;\n    fraction = 100;\n    control = false;\n  } else {\n    experimentId = spec.substring(0, eq).trim();\n    spec = spec.substring(eq + 1);\n    if (spec.substring(spec.length - 1) == Selection.CONTROL) {\n      control = true;\n      spec = spec.substring(0, spec.length - 1);\n    }\n    fraction = parseInt(spec, 10);\n  }\n  if (isNaN(fraction)) {\n    throw new Error('invalid fraction');\n  }\n\n  // Calculate \"on\"/\"off\".\n  let on;\n  if (fraction > 99) {\n    // Explicitly \"on\".\n    on = true;\n  } else if (fraction < 1) {\n    // Explicitly \"off\".\n    on = false;\n  } else if (win.sessionStorage) {\n    // Fractional and possibly with the control.\n    // Note that:\n    // a. We can't do persistent experiments if storage is not available.\n    // b. We can't run control on more than 20%.\n    control = control && fraction <= 20;\n    try {\n      // Set fraction in the experiment to make it unlaunchable.\n      const storageKey =\n        'subscribe.google.com:e:' +\n        experimentId +\n        ':' +\n        fraction +\n        (control ? 'c' : '');\n      let selection = parseSelection(win.sessionStorage.getItem(storageKey));\n      if (!selection) {\n        // Is experiment/control range?\n        if (win.Math.random() * 100 <= fraction * (control ? 2 : 1)) {\n          const inExperiment = control ? win.Math.random() <= 0.5 : true;\n          selection = inExperiment ? Selection.EXPERIMENT : Selection.CONTROL;\n          win.sessionStorage.setItem(storageKey, selection);\n        }\n      }\n      on = !!selection;\n      if (selection == Selection.CONTROL) {\n        experimentId = 'c-' + experimentId;\n      }\n    } catch (e) {\n      // Ignore: experiment parsing cannot block runtime.\n      on = false;\n      ErrorUtils.throwAsync(e);\n    }\n  } else {\n    on = false;\n  }\n\n  experimentMap[experimentId] = on;\n}\n\n/**\n * @param {?string} s\n * @return {?Selection}\n */\nfunction parseSelection(s) {\n  // Do a simple if-then to inline the whole Selection enum.\n  return s == Selection.EXPERIMENT\n    ? Selection.EXPERIMENT\n    : s == Selection.CONTROL\n    ? Selection.CONTROL\n    : null;\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  return getExperiments(win)[experimentId] || false;\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean} on\n */\nexport function setExperiment(win, experimentId, on) {\n  getExperiments(win)[experimentId] = on;\n}\n\n/**\n * @return {!Array<string>}\n */\nexport function getOnExperiments(win) {\n  const experimentMap = getExperiments(win);\n  const experiments = [];\n  for (const experiment in experimentMap) {\n    if (experimentMap[experiment]) {\n      experiments.push(experiment);\n    }\n  }\n  return experiments;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Xhr} from '../utils/xhr';\n\n/**\n * @interface\n */\nexport class Fetcher {\n  /**\n   * @param {string} unusedUrl\n   * @return {!Promise<!Object>}\n   */\n  fetchCredentialedJson(unusedUrl) {}\n\n  /**\n   * @param {string} unusedUrl\n   * @param {!../utils/xhr.FetchInitDef} unusedInit\n   * @return {!Promise<!../utils/xhr.FetchResponse>}\n   */\n  fetch(unusedUrl, unusedInit) {}\n}\n\n/**\n * @implements {Fetcher}\n */\nexport class XhrFetcher {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Xhr} */\n    this.xhr_ = new Xhr(win);\n  }\n\n  /** @override */\n  fetchCredentialedJson(url) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      headers: {'Accept': 'text/plain, application/json'},\n      credentials: 'include',\n    });\n    return this.xhr_.fetch(url, init).then(response => response.json());\n  }\n\n  /** @override */\n  fetch(url, init) {\n    return this.xhr_.fetch(url, init);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n */\nexport class JsError {\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Promise} */\n    this.microTask_ = Promise.resolve();\n  }\n\n  /**\n   * @param {...*} var_args\n   * @return {!Promise}\n   */\n  error(var_args) {\n    const args = Array.prototype.slice.call(arguments, 0);\n    return this.microTask_.then(() => {\n      const error = createErrorVargs.apply(null, args);\n      if (error.reported) {\n        return;\n      }\n      const img = this.doc_.getWin().document.createElement('img');\n      img.src =\n        '$frontend$/_/SubscribewithgoogleClientUi/jserror' +\n        '?error=' +\n        encodeURIComponent(String(error)) +\n        '&script=' +\n        encodeURIComponent('$frontend$/swg/js/v1/swg.js') +\n        '&line=' +\n        (error.lineNumber || 1) +\n        '&trace=' +\n        encodeURIComponent(error.stack);\n      // Appending this image to DOM is not necessary.\n      error.reported = true;\n    });\n  }\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n */\nfunction createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error}\n */\nfunction duplicateErrorIfNecessary(error) {\n  const messageProperty = Object.getOwnPropertyDescriptor(error, 'message');\n  if (messageProperty && messageProperty.writable) {\n    return error;\n  }\n\n  const {message, stack} = error;\n  const e = new Error(message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = stack;\n  return e;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {\n  AnalyticsEvent,\n  LinkSaveTokenRequest,\n  LinkingInfoResponse,\n} from '../proto/api_messages';\nimport {SubscriptionFlows, WindowOpenMode} from '../api/subscriptions';\nimport {acceptPortResultData} from '../utils/activity-utils';\nimport {createCancelError, isCancelError} from '../utils/errors';\nimport {feArgs, feOrigin, feUrl} from './services';\n\nconst LINK_REQUEST_ID = 'swg-link';\n\n/**\n * The flow to link an existing publisher account to an existing google account.\n */\nexport class LinkbackFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @param {{ampReaderId: (string|undefined)}=} params\n   * @return {!Promise}\n   */\n  start(params = {}) {\n    this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n    const forceRedirect =\n      this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT;\n    const args = params.ampReaderId\n      ? feArgs({\n          'publicationId': this.pageConfig_.getPublicationId(),\n          'ampReaderId': params.ampReaderId,\n        })\n      : feArgs({\n          'publicationId': this.pageConfig_.getPublicationId(),\n        });\n    const opener = this.activityPorts_.open(\n      LINK_REQUEST_ID,\n      feUrl('/linkbackstart'),\n      forceRedirect ? '_top' : '_blank',\n      args,\n      {}\n    );\n    this.deps_.eventManager().logSwgEvent(AnalyticsEvent.IMPRESSION_LINK);\n    this.dialogManager_.popupOpened(opener && opener.targetWin);\n    return Promise.resolve();\n  }\n}\n\n/**\n * The class for Link accounts flow.\n */\nexport class LinkCompleteFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /**\n     * Handler function.\n     * @param {!../components/activities.ActivityPortDef} port\n     */\n    function handler(port) {\n      deps.entitlementsManager().blockNextNotification();\n      deps.callbacks().triggerLinkProgress();\n      deps.dialogManager().popupClosed();\n      const promise = acceptPortResultData(\n        port,\n        feOrigin(),\n        /* requireOriginVerified */ false,\n        /* requireSecureChannel */ false\n      );\n      return promise.then(\n        response => {\n          deps\n            .eventManager()\n            .logSwgEvent(AnalyticsEvent.ACTION_LINK_CONTINUE, true);\n          const flow = new LinkCompleteFlow(deps, response);\n          flow.start();\n        },\n        reason => {\n          if (isCancelError(reason)) {\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.ACTION_LINK_CANCEL, true);\n            deps\n              .callbacks()\n              .triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n          } else {\n            // The user chose to continue but there was an error.\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.ACTION_LINK_CONTINUE, true);\n          }\n        }\n      );\n    }\n    deps.activities().onResult(LINK_REQUEST_ID, handler);\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Object} response\n   */\n  constructor(deps, response) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!./entitlements-manager.EntitlementsManager} */\n    this.entitlementsManager_ = deps.entitlementsManager();\n\n    /** @private @const {!./callbacks.Callbacks} */\n    this.callbacks_ = deps.callbacks();\n\n    const index = (response && response['index']) || '0';\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/linkconfirmiframe', '/u/' + index),\n      feArgs({\n        'productId': deps.pageConfig().getProductId(),\n        'publicationId': deps.pageConfig().getPublicationId(),\n      }),\n      /* shouldFadeBody */ true\n    );\n\n    /** @private {?function()} */\n    this.completeResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.completePromise_ = new Promise(resolve => {\n      this.completeResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @return {!Promise}\n   */\n  start() {\n    const promise = this.activityIframeView_.acceptResultAndVerify(\n      feOrigin(),\n      /* requireOriginVerified */ true,\n      /* requireSecureChannel */ true\n    );\n    promise\n      .then(response => {\n        this.complete_(response);\n      })\n      .catch(reason => {\n        // Rethrow async.\n        setTimeout(() => {\n          throw reason;\n        });\n      })\n      .then(() => {\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      });\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.EVENT_GOOGLE_UPDATED, true);\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.IMPRESSION_GOOGLE_UPDATED, true);\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {?Object} response\n   * @private\n   */\n  complete_(response) {\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.ACTION_GOOGLE_UPDATED_CLOSE, true);\n    this.callbacks_.triggerLinkComplete();\n    this.callbacks_.resetLinkProgress();\n    this.entitlementsManager_.setToastShown(true);\n    this.entitlementsManager_.unblockNextNotification();\n    this.entitlementsManager_.reset((response && response['success']) || false);\n    if (response && response['entitlements']) {\n      this.entitlementsManager_.pushNextEntitlements(response['entitlements']);\n    }\n    this.completeResolver_();\n  }\n\n  /** @return {!Promise} */\n  whenComplete() {\n    return this.completePromise_;\n  }\n}\n\n/**\n * The flow to save subscription information from an existing publisher account\n * to an existing google account.  The accounts may or may not already be\n * linked.\n */\nexport class LinkSaveFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SaveSubscriptionRequestCallback} callback\n   */\n  constructor(deps, callback) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {!../api/subscriptions.SaveSubscriptionRequestCallback} */\n    this.callback_ = callback;\n\n    /** @private {?Promise<!../api/subscriptions.SaveSubscriptionRequest>} */\n    this.requestPromise_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n  }\n\n  /**\n   * @return {?Promise<!../api/subscriptions.SaveSubscriptionRequest>}\n   * @package Visible for testing.\n   */\n  getRequestPromise() {\n    return this.requestPromise_;\n  }\n\n  /**\n   * @private\n   */\n  complete_() {\n    this.dialogManager_.completeView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {!Object} result\n   * @return {!Promise<boolean>}\n   * @private\n   */\n  handleLinkSaveResponse_(result) {\n    // This flow is complete\n    this.complete_();\n    let startPromise;\n    let linkConfirm = null;\n    if (result['linked']) {\n      // When linking succeeds, start link confirmation flow\n      this.dialogManager_.popupClosed();\n      this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n      linkConfirm = new LinkCompleteFlow(this.deps_, result);\n      startPromise = linkConfirm.start();\n    } else {\n      startPromise = Promise.reject(createCancelError(this.win_, 'not linked'));\n    }\n    const completePromise = startPromise.then(() => {\n      this.deps_.callbacks().triggerLinkProgress();\n      return linkConfirm.whenComplete();\n    });\n\n    return completePromise.then(() => {\n      return true;\n    });\n  }\n\n  /**\n   * @param {LinkingInfoResponse} response\n   * @private\n   */\n  sendLinkSaveToken_(response) {\n    if (!response || !response.getRequested()) {\n      return;\n    }\n    this.requestPromise_ = new Promise(resolve => {\n      resolve(this.callback_());\n    })\n      .then(request => {\n        const saveRequest = new LinkSaveTokenRequest();\n        if (request && request.token) {\n          if (request.authCode) {\n            throw new Error('Both authCode and token are available');\n          } else {\n            saveRequest.setToken(request.token);\n          }\n        } else if (request && request.authCode) {\n          saveRequest.setAuthCode(request.authCode);\n        } else {\n          throw new Error('Neither token or authCode is available');\n        }\n        this.activityIframeView_.execute(saveRequest);\n      })\n      .catch(reason => {\n        // The flow is complete.\n        this.complete_();\n        throw reason;\n      });\n  }\n\n  /**\n   * @return {?Promise}\n   */\n  /**\n   * Starts the save subscription\n   * @return {!Promise}\n   */\n  start() {\n    const iframeArgs = this.activityPorts_.addDefaultArguments({\n      'isClosable': true,\n    });\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/linksaveiframe'),\n      iframeArgs,\n      /* shouldFadeBody */ false,\n      /* hasLoadingIndicator */ true\n    );\n    this.activityIframeView_.on(\n      LinkingInfoResponse,\n      this.sendLinkSaveToken_.bind(this)\n    );\n\n    this.openPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_,\n      /* hidden */ true\n    );\n    this.deps_\n      .eventManager()\n      .logSwgEvent(AnalyticsEvent.IMPRESSION_SAVE_SUBSCR_TO_GOOGLE);\n    /** {!Promise<boolean>} */\n    return this.activityIframeView_\n      .acceptResultAndVerify(\n        feOrigin(),\n        /* requireOriginVerified */ true,\n        /* requireSecureChannel */ true\n      )\n      .then(result => {\n        return this.handleLinkSaveResponse_(result);\n      })\n      .catch(reason => {\n        // In case this flow wasn't complete, complete it here\n        this.complete_();\n        // Handle cancellation from user, link confirm start or completion here\n        if (isCancelError(reason)) {\n          this.deps_\n            .eventManager()\n            .logSwgEvent(\n              AnalyticsEvent.ACTION_SAVE_SUBSCR_TO_GOOGLE_CANCEL,\n              true\n            );\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n          return false;\n        }\n        throw reason;\n      });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {AnalyticsEvent, EventOriginator} from '../proto/api_messages';\nimport {Event, SubscriptionState} from '../api/logger-api';\nimport {isBoolean, isEnumValue, isObject} from '../utils/types';\nimport {publisherEventToAnalyticsEvent} from './event-type-mapping';\n\n/**\n * @implements {../api/logger-api.LoggerApi}\n */\nexport class Logger {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!../api/client-event-manager-api.ClientEventManagerApi} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /** @override */\n  sendSubscriptionState(state, jsonProducts) {\n    if (!isEnumValue(SubscriptionState, state)) {\n      throw new Error('Invalid subscription state provided');\n    }\n    if (\n      (SubscriptionState.SUBSCRIBER == state ||\n        SubscriptionState.PAST_SUBSCRIBER == state) &&\n      !jsonProducts\n    ) {\n      throw new Error(\n        'Entitlements must be provided for users with' +\n          ' active or expired subscriptions'\n      );\n    }\n    if (jsonProducts && !isObject(jsonProducts)) {\n      throw new Error('Entitlements must be an Object');\n    }\n    let productsOrSkus = null;\n    if (jsonProducts) {\n      productsOrSkus = JSON.stringify(jsonProducts);\n    }\n    this.eventManager_.logEvent({\n      eventType: AnalyticsEvent.EVENT_SUBSCRIPTION_STATE,\n      eventOriginator: EventOriginator.PUBLISHER_CLIENT,\n      isFromUserAction: null,\n      additionalParameters: {\n        state,\n        productsOrSkus,\n      },\n    });\n  }\n\n  /** @override */\n  sendEvent(userEvent) {\n    let data = null;\n    if (\n      !isEnumValue(Event, userEvent.name) ||\n      !publisherEventToAnalyticsEvent(userEvent.name)\n    ) {\n      throw new Error('Invalid user event provided(' + userEvent.name + ')');\n    }\n\n    if (userEvent.data) {\n      if (!isObject(userEvent.data)) {\n        throw new Error('Event data must be an Object(' + userEvent.data + ')');\n      } else {\n        data = {};\n        Object.assign(data, userEvent.data);\n      }\n    }\n\n    if (isBoolean(userEvent.active)) {\n      if (!data) {\n        data = {};\n      }\n      Object.assign(data, {'is_active': userEvent.active});\n    } else if (userEvent.active != null) {\n      throw new Error('Event active must be a boolean');\n    }\n    this.eventManager_.logEvent({\n      eventType: publisherEventToAnalyticsEvent(userEvent.name),\n      eventOriginator: EventOriginator.PUBLISHER_CLIENT,\n      isFromUserAction: userEvent.active,\n      additionalParameters: data,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\n\nexport class LoginNotificationApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/loginiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        // No need to ask the user. Just tell them you're logging them in.\n        userConsent: false,\n        // TODO(chenshay): Pass entitlements value here.\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Continues the Login flow (after waiting).\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_LOGIN_NOTIFICATION);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.activityIframeView_.acceptResult().then(\n      () => {\n        // The consent part is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      },\n      reason => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {SubscriptionFlows} from '../api/subscriptions';\nimport {feArgs, feUrl} from './services';\nimport {isCancelError} from '../utils/errors';\n\nexport class LoginPromptApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/loginiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n        // First ask the user if they want us to log them in.\n        userConsent: true,\n        // TODO(chenshay): Pass entitlements value here.\n      }),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Prompts the user to login.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_LOGIN_PROMPT);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.activityIframeView_.acceptResult().then(\n      () => {\n        // The consent part is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n      },\n      reason => {\n        if (isCancelError(reason)) {\n          this.deps_\n            .callbacks()\n            .triggerFlowCanceled(SubscriptionFlows.SHOW_LOGIN_PROMPT);\n        } else {\n          this.dialogManager_.completeView(this.activityIframeView_);\n        }\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {serviceUrl} from './services';\n\nexport class OffersApi {\n  /**\n   * @param {!../model/page-config.PageConfig} config\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(config, fetcher) {\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.config_ = config;\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n  }\n\n  /**\n   * @param {?string=} productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   */\n  getOffers(productId = this.config_.getProductId()) {\n    if (!productId) {\n      throw new Error('getOffers requires productId in config or arguments');\n    }\n    return this.fetch_(productId);\n  }\n\n  /**\n   * @param {string} productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   * @private\n   */\n  fetch_(productId) {\n    const url = serviceUrl(\n      '/publication/' +\n        encodeURIComponent(this.config_.getPublicationId()) +\n        '/offers' +\n        '?label=' +\n        encodeURIComponent(productId)\n    );\n    // TODO(dvoytenko): switch to a non-credentialed request after launch.\n    return this.fetcher_.fetchCredentialedJson(url).then(json => {\n      return json['offers'] || [];\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {\n  AlreadySubscribedResponse,\n  SkuSelectedResponse,\n  SubscribeResponse,\n  ViewSubscriptionsResponse,\n} from '../proto/api_messages';\nimport {AnalyticsEvent, EventParams} from '../proto/api_messages';\nimport {PayStartFlow} from './pay-flow';\nimport {ProductType, SubscriptionFlows} from '../api/subscriptions';\nimport {assert} from '../utils/log';\nimport {feArgs, feUrl} from './services';\n\n/**\n * @param {string} sku\n * @return {!EventParams}\n */\nfunction getEventParams(sku) {\n  return new EventParams([, , , , sku]);\n}\n\n/**\n * Offers view is closable when request was originated from 'AbbrvOfferFlow'\n * or from 'SubscribeOptionFlow'.\n */\nconst OFFERS_VIEW_CLOSABLE = true;\n\n// The value logged when the offers screen shows all available SKUs.\nconst ALL_SKUS = '*';\n\n/**\n * The class for Offers flow.\n */\nexport class OffersFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    let isClosable = options && options.isClosable;\n    if (isClosable == undefined) {\n      isClosable = false; // Default is to hide Close button.\n    }\n\n    const feArgsObj = {\n      'productId': deps.pageConfig().getProductId(),\n      'publicationId': deps.pageConfig().getPublicationId(),\n      'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n      'productType': ProductType.SUBSCRIPTION,\n      'list': (options && options.list) || 'default',\n      'skus': (options && options.skus) || null,\n      'isClosable': isClosable,\n      'analyticsContext': deps\n        .analytics()\n        .getContext()\n        .toArray(),\n    };\n\n    this.prorationMode = feArgsObj['replaceSkuProrationMode'] || undefined;\n\n    if (options && options.oldSku) {\n      feArgsObj['oldSku'] = options.oldSku;\n    }\n\n    if (feArgsObj['oldSku']) {\n      assert(feArgsObj['skus'], 'Need a sku list if old sku is provided!');\n\n      // Remove old sku from offers if in list.\n      let skuList = feArgsObj['skus'];\n      const /** @type {string} */ oldSku = feArgsObj['oldSku'];\n      skuList = skuList.filter(sku => sku !== oldSku);\n\n      assert(\n        skuList.length > 0,\n        'Sku list only contained offer user already has'\n      );\n      feArgsObj['skus'] = skuList;\n    }\n\n    // Redirect to payments if only one upgrade option is passed.\n    if (feArgsObj['skus'] && feArgsObj['skus'].length === 1) {\n      const sku = feArgsObj['skus'][0];\n      const /** @type {string|undefined} */ oldSku = feArgsObj['oldSku'];\n      // Update subscription triggers experimental flag if oldSku is passed,\n      // so we need to check for oldSku to decide if it needs to be sent.\n      // Otherwise we might accidentally block a regular subscription request.\n      if (oldSku) {\n        new PayStartFlow(this.deps_, {\n          skuId: sku,\n          oldSku,\n          replaceSkuProrationMode: this.prorationMode,\n        }).start();\n        return;\n      }\n    }\n\n    /** @private  @const {!Array<!string>} */\n    this.skus_ = feArgsObj['skus'] || [ALL_SKUS];\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/offersiframe'),\n      feArgs(feArgsObj),\n      /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * @param {SkuSelectedResponse} response\n   * @private\n   */\n  startPayFlow_(response) {\n    const sku = response.getSku();\n    const oldSku = response.getOldSku();\n    if (sku) {\n      if (oldSku) {\n        this.deps_.analytics().setSku(oldSku);\n      }\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_OFFER_SELECTED,\n        true,\n        getEventParams(sku)\n      );\n      let skuOrSubscriptionRequest;\n      if (oldSku) {\n        skuOrSubscriptionRequest = {};\n        skuOrSubscriptionRequest['skuId'] = sku;\n        skuOrSubscriptionRequest['oldSku'] = oldSku;\n      } else {\n        skuOrSubscriptionRequest = sku;\n      }\n      new PayStartFlow(this.deps_, skuOrSubscriptionRequest).start();\n    }\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   * @private\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_ALREADY_SUBSCRIBED,\n        true\n      );\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * @param {ViewSubscriptionsResponse} response\n   * @private\n   */\n  startNativeFlow_(response) {\n    if (response.getNative()) {\n      this.deps_.callbacks().triggerSubscribeRequest();\n    }\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    if (this.activityIframeView_) {\n      // So no error if skipped to payment screen.\n      // Start/cancel events.\n      // The second parameter is required by Propensity in AMP.\n      this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.SHOW_OFFERS, {\n        skus: this.skus_,\n        source: 'SwG',\n      });\n      this.activityIframeView_.onCancel(() => {\n        this.deps_\n          .callbacks()\n          .triggerFlowCanceled(SubscriptionFlows.SHOW_OFFERS);\n      });\n      this.activityIframeView_.on(\n        SkuSelectedResponse,\n        this.startPayFlow_.bind(this)\n      );\n      this.activityIframeView_.on(\n        AlreadySubscribedResponse,\n        this.handleLinkRequest_.bind(this)\n      );\n      this.activityIframeView_.on(\n        ViewSubscriptionsResponse,\n        this.startNativeFlow_.bind(this)\n      );\n\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.IMPRESSION_OFFERS,\n        null,\n        getEventParams(this.skus_.join(','))\n      );\n\n      return this.dialogManager_.openView(this.activityIframeView_);\n    }\n    return Promise.resolve();\n  }\n}\n\n/**\n * The class for subscribe option flow.\n */\nexport class SubscribeOptionFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      deps.win(),\n      this.activityPorts_,\n      feUrl('/optionsiframe'),\n      feArgs({\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productId': deps.pageConfig().getProductId(),\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': true,\n      }),\n      /* shouldFadeBody */ false\n    );\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    });\n    this.activityIframeView_.on(\n      SubscribeResponse,\n      this.maybeOpenOffersFlow_.bind(this)\n    );\n\n    this.activityIframeView_.acceptResult().then(\n      result => {\n        const data = result.data;\n        const response = new SubscribeResponse();\n        if (data['subscribe']) {\n          response.setSubscribe(true);\n        }\n        this.maybeOpenOffersFlow_(response);\n      },\n      reason => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_CLICK_TO_SHOW_OFFERS\n    );\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {SubscribeResponse} response\n   * @private\n   */\n  maybeOpenOffersFlow_(response) {\n    if (response.getSubscribe()) {\n      const options = this.options_ || {};\n      if (options.isClosable == undefined) {\n        options.isClosable = OFFERS_VIEW_CLOSABLE;\n      }\n      this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_VIEW_OFFERS, true);\n      new OffersFlow(this.deps_, options).start();\n    }\n  }\n}\n\n/**\n * The class for Abbreviated Offer flow.\n *\n */\nexport class AbbrvOfferFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest=} options\n   */\n  constructor(deps, options = {}) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/abbrvofferiframe'),\n      feArgs({\n        'publicationId': deps.pageConfig().getPublicationId(),\n        'productId': deps.pageConfig().getProductId(),\n        'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n        'list': (options && options.list) || 'default',\n        'skus': (options && options.skus) || null,\n        'isClosable': true,\n      }),\n      /* shouldFadeBody */ false\n    );\n  }\n\n  /**\n   * @param {AlreadySubscribedResponse} response\n   * @private\n   */\n  handleLinkRequest_(response) {\n    if (response.getSubscriberOrMember()) {\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.ACTION_ALREADY_SUBSCRIBED,\n        true\n      );\n      this.deps_.callbacks().triggerLoginRequest({\n        linkRequested: !!response.getLinkRequested(),\n      });\n    }\n  }\n\n  /**\n   * Starts the offers flow\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_\n      .callbacks()\n      .triggerFlowStarted(SubscriptionFlows.SHOW_ABBRV_OFFER);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_\n        .callbacks()\n        .triggerFlowCanceled(SubscriptionFlows.SHOW_ABBRV_OFFER);\n    });\n\n    // If the user is already subscribed, trigger login flow\n    this.activityIframeView_.on(\n      AlreadySubscribedResponse,\n      this.handleLinkRequest_.bind(this)\n    );\n\n    // If result is due to requesting offers, redirect to offers flow\n    this.activityIframeView_.acceptResult().then(result => {\n      if (result.data['viewOffers']) {\n        const options = this.options_ || {};\n        if (options.isClosable == undefined) {\n          options.isClosable = OFFERS_VIEW_CLOSABLE;\n        }\n        this.eventManager_.logSwgEvent(AnalyticsEvent.ACTION_VIEW_OFFERS, true);\n        new OffersFlow(this.deps_, options).start();\n        return;\n      }\n      if (result.data['native']) {\n        this.deps_.callbacks().triggerSubscribeRequest();\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return;\n      }\n    });\n\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_CLICK_TO_SHOW_OFFERS_OR_ALREADY_SUBSCRIBED\n    );\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ExperimentFlags} from './experiment-flags';\nimport {PaymentsAsyncClient} from '../../third_party/gpay/src/payjs_async';\nimport {Xhr} from '../utils/xhr';\nimport {bytesToString, stringToBytes} from '../utils/bytes';\nimport {createCancelError} from '../utils/errors';\nimport {feArgs, feCached} from './services';\nimport {isExperimentOn} from './experiments';\n\nconst PAY_REQUEST_ID = 'swg-pay';\nconst GPAY_ACTIVITY_REQUEST = 'GPAY';\n\nconst REDIRECT_STORAGE_KEY = 'subscribe.google.com:rk';\n\n/**\n * @typedef {{\n *   forceRedirect: (boolean|undefined),\n * }}\n */\nexport let PayOptionsDef;\n\n/**\n * @const {!Object<string, string>}\n * @package Visible for testing only.\n */\nexport const PAY_ORIGIN = {\n  'PRODUCTION': 'https://pay.google.com',\n  'SANDBOX': 'https://pay.sandbox.google.com',\n};\n\n/** @return {string} */\nfunction payOrigin() {\n  return PAY_ORIGIN['$payEnvironment$'];\n}\n\n/** @return {string} */\nfunction payUrl() {\n  return feCached(PAY_ORIGIN['$payEnvironment$'] + '/gp/p/ui/pay');\n}\n\n/** @return {string} */\nfunction payDecryptUrl() {\n  return PAY_ORIGIN['$payEnvironment$'] + '/gp/p/apis/buyflow/process';\n}\n\n/**\n */\nexport class PayClient {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @const @private {!PayClientBindingDef} */\n    this.binding_ = isExperimentOn(this.win_, ExperimentFlags.GPAY_API)\n      ? new PayClientBindingPayjs(\n          this.win_,\n          this.activityPorts_,\n          // Generates a new Google Transaction ID.\n          deps.analytics().getTransactionId()\n        )\n      : new PayClientBindingSwg(\n          this.win_,\n          this.activityPorts_,\n          this.dialogManager_\n        );\n  }\n\n  /**\n   * @param {!../utils/preconnect.Preconnect} pre\n   */\n  preconnect(pre) {\n    pre.prefetch(payUrl());\n    pre.prefetch(\n      'https://payments.google.com/payments/v4/js/integrator.js?ss=md'\n    );\n    pre.prefetch('https://clients2.google.com/gr/gr_full_2.0.6.js');\n    pre.preconnect('https://www.gstatic.com/');\n    pre.preconnect('https://fonts.googleapis.com/');\n    pre.preconnect('https://www.google.com/');\n  }\n\n  /**\n   * @return {string}\n   */\n  getType() {\n    // TODO(dvoytenko, #406): remove once GPay API is launched.\n    return this.binding_.getType();\n  }\n\n  /**\n   * @param {!Object} paymentRequest\n   * @param {!PayOptionsDef=} options\n   */\n  start(paymentRequest, options = {}) {\n    this.binding_.start(paymentRequest, options);\n  }\n\n  /**\n   * @param {function(!Promise<!Object>)} callback\n   */\n  onResponse(callback) {\n    this.binding_.onResponse(callback);\n  }\n}\n\n/**\n * TODO(dvoytenko, #406): remove delegated class once GPay launches.\n * @interface\n */\nclass PayClientBindingDef {\n  /**\n   * @return {string}\n   */\n  getType() {}\n\n  /**\n   * @param {!Object} unusedPaymentRequest\n   * @param {!PayOptionsDef} unusedOptions\n   */\n  start(unusedPaymentRequest, unusedOptions) {}\n\n  /**\n   * @param {function(!Promise<!Object>)} unusedCallback\n   */\n  onResponse(unusedCallback) {}\n}\n\n/**\n * @implements {PayClientBindingDef}\n */\nclass PayClientBindingSwg {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {!../components/dialog-manager.DialogManager} dialogManager\n   */\n  constructor(win, activityPorts, dialogManager) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = dialogManager;\n  }\n\n  /** @override */\n  getType() {\n    return 'SWG';\n  }\n\n  /** @override */\n  start(paymentRequest, options) {\n    const opener = this.activityPorts_.open(\n      GPAY_ACTIVITY_REQUEST,\n      payUrl(),\n      options.forceRedirect ? '_top' : '_blank',\n      feArgs(paymentRequest),\n      {}\n    );\n    this.dialogManager_.popupOpened((opener && opener.targetWin) || null);\n  }\n\n  /** @override */\n  onResponse(callback) {\n    const responseCallback = port => {\n      this.dialogManager_.popupClosed();\n      callback(this.validatePayResponse_(port));\n    };\n    this.activityPorts_.onResult(GPAY_ACTIVITY_REQUEST, responseCallback);\n    this.activityPorts_.onResult(PAY_REQUEST_ID, responseCallback);\n  }\n\n  /**\n   * @param {!../components/activities.ActivityPortDef} port\n   * @return {!Promise<!Object>}\n   * @private\n   */\n  validatePayResponse_(port) {\n    // Do not require security immediately: it will be checked below.\n    return port.acceptResult().then(result => {\n      if (result.origin != payOrigin()) {\n        throw new Error('channel mismatch');\n      }\n      const data = /** @type {!Object} */ (result.data);\n      if (data['redirectEncryptedCallbackData']) {\n        // Data is supplied as an encrypted blob.\n        const xhr = new Xhr(this.win_);\n        const url = payDecryptUrl();\n        const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n          method: 'post',\n          headers: {'Accept': 'text/plain, application/json'},\n          credentials: 'include',\n          body: data['redirectEncryptedCallbackData'],\n          mode: 'cors',\n        });\n        return xhr\n          .fetch(url, init)\n          .then(response => response.json())\n          .then(response => {\n            const dataClone = Object.assign({}, data);\n            delete dataClone['redirectEncryptedCallbackData'];\n            return Object.assign(dataClone, response);\n          });\n      }\n      // Data is supplied directly: must be a verified and secure channel.\n      if (result.originVerified && result.secureChannel) {\n        return data;\n      }\n      throw new Error('channel mismatch');\n    });\n  }\n}\n\n/**\n * Binding based on the https://github.com/google/payjs.\n * @implements {PayClientBindingDef}\n * @package Visible for testing only.\n */\nexport class PayClientBindingPayjs {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {!string} googleTransactionId\n   */\n  constructor(win, activityPorts, googleTransactionId) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n\n    /** @private {?function(!Promise<!Object>)} */\n    this.responseCallback_ = null;\n\n    /** @private {?Object} */\n    this.request_ = null;\n\n    /** @private {?Promise<!Object>} */\n    this.response_ = null;\n\n    /** @private @const {!RedirectVerifierHelper} */\n    this.redirectVerifierHelper_ = new RedirectVerifierHelper(this.win_);\n\n    /** @private @const {!PaymentsAsyncClient} */\n    this.client_ = this.createClient_(\n      {\n        environment: '$payEnvironment$',\n        'i': {\n          'redirectKey': this.redirectVerifierHelper_.restoreKey(),\n        },\n      },\n      googleTransactionId,\n      this.handleResponse_.bind(this)\n    );\n\n    // Prepare new verifier pair.\n    this.redirectVerifierHelper_.prepare();\n  }\n\n  /**\n   * @param {!Object} options\n   * @param {string} googleTransactionId\n   * @param {function(!Promise<!Object>)} handler\n   * @return {!PaymentsAsyncClient}\n   * @private\n   */\n  createClient_(options, googleTransactionId, handler) {\n    // Assign Google Transaction ID to PaymentsAsyncClient.googleTransactionId_\n    // so it can be passed to gpay_async.js and stored in payment clearcut log.\n    PaymentsAsyncClient.googleTransactionId_ = googleTransactionId;\n    return new PaymentsAsyncClient(\n      options,\n      handler,\n      /* useIframe */ false,\n      this.activityPorts_.getOriginalWebActivityPorts()\n    );\n  }\n\n  /** @override */\n  getType() {\n    return 'PAYJS';\n  }\n\n  /** @override */\n  start(paymentRequest, options) {\n    this.request_ = paymentRequest;\n\n    if (options.forceRedirect) {\n      paymentRequest = Object.assign(paymentRequest, {\n        'forceRedirect': options.forceRedirect || false,\n      });\n    }\n    setInternalParam(\n      paymentRequest,\n      'disableNative',\n      // The page cannot be iframed at this time. May be relaxed later\n      // for AMP and similar contexts.\n      this.win_ != this.top_() ||\n        // Experiment must be enabled.\n        !isExperimentOn(this.win_, ExperimentFlags.GPAY_NATIVE)\n    );\n    // Notice that the callback for verifier may execute asynchronously.\n    this.redirectVerifierHelper_.useVerifier(verifier => {\n      if (verifier) {\n        setInternalParam(paymentRequest, 'redirectVerifier', verifier);\n      }\n      this.client_.loadPaymentData(paymentRequest);\n    });\n  }\n\n  /** @override */\n  onResponse(callback) {\n    this.responseCallback_ = callback;\n    const response = this.response_;\n    if (response) {\n      Promise.resolve().then(() => {\n        if (response) {\n          callback(this.convertResponse_(response, this.request_));\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {!Promise<!Object>} responsePromise\n   * @private\n   */\n  handleResponse_(responsePromise) {\n    this.response_ = responsePromise;\n    if (this.responseCallback_) {\n      this.responseCallback_(\n        this.convertResponse_(this.response_, this.request_)\n      );\n    }\n  }\n\n  /**\n   * @param {!Promise<!Object>} response\n   * @param {?Object} request\n   * @return {!Promise<!Object>}\n   * @private\n   */\n  convertResponse_(response, request) {\n    return response\n      .then(\n        // Temporary client side solution to remember the\n        // input params. TODO: Remove this once server-side\n        // input preservation is done and is part of the response.\n        res => {\n          if (request) {\n            res['paymentRequest'] = request;\n          }\n          return res;\n        }\n      )\n      .catch(reason => {\n        if (typeof reason == 'object' && reason['statusCode'] == 'CANCELED') {\n          return Promise.reject(createCancelError(this.win_));\n        }\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * @return {!Window}\n   * @private\n   */\n  top_() {\n    // Only exists for testing since it's not possible to override `window.top`.\n    return this.win_.top;\n  }\n}\n\n/**\n * @typedef {{\n *   key: string,\n *   verifier: string,\n * }}\n */\nlet RedirectVerifierPairDef;\n\n/**\n * This helper generates key/verifier pair for the redirect mode. When the\n * redirect mode is used, the encrypted payload is returned via nivigation URL.\n * This payload need to be decrypted and to avoid session fixation attacks, a\n * verifier has to be used. This redirect verifier is not the only session\n * verifier in use: we also use GAIA. However, we have to fallback to this\n * verifier when GAIA is not available.\n *\n * @package Visible for testing only.\n */\nexport class RedirectVerifierHelper {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private {boolean} */\n    this.pairCreated_ = false;\n\n    /** @private {?RedirectVerifierPairDef} */\n    this.pair_ = null;\n\n    /** @private {?Promise<?RedirectVerifierPairDef>} */\n    this.pairPromise_ = null;\n  }\n\n  /**\n   * To avoid popup blockers, the key/verifier pair is created as soon as\n   * possible.\n   * @return {?Promise}\n   */\n  prepare() {\n    return this.getOrCreatePair_(() => {});\n  }\n\n  /**\n   * Calls the provided callback with the generated redirect verifier. This\n   * API is sync/async, which is a big anti-pattern. However, it's necessary\n   * to reduce the risk of popup blockers. If the verifier is already available\n   * (see `prepare` method), the callback will be called immediately and thus\n   * in the same event loop as the user action.\n   *\n   * The return verifier could be `null`. This could mean either that its\n   * generation failed, or if the platform doesn't support necessary APIs, such\n   * as Web Crypto. The redirect can still proceed and try to fallback on GAIA\n   * as a redirect verifier. The set of platforms where GAIA is not available\n   * and the redirect verifier cannot be created is negligible.\n   *\n   * The key corresponding to the returned verifier is stored in the session\n   * storage and can be later restored using `restoreKey` method.\n   *\n   * @param {function(?string)} callback\n   */\n  useVerifier(callback) {\n    this.getOrCreatePair_(pair => {\n      if (pair) {\n        try {\n          this.win_.localStorage.setItem(REDIRECT_STORAGE_KEY, pair.key);\n        } catch (e) {\n          // If storage has failed, there's no point in using the verifer.\n          // However, there are other ways to recover the redirect, so it's\n          // not necessarily a fatal condition.\n          pair = null;\n        }\n      }\n      callback((pair && pair.verifier) || null);\n    });\n  }\n\n  /**\n   * Restores the redirect key from the session storage. The key may be null.\n   * @return {?string}\n   */\n  restoreKey() {\n    try {\n      return (\n        (this.win_.localStorage &&\n          this.win_.localStorage.getItem(REDIRECT_STORAGE_KEY)) ||\n        null\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @param {function(?RedirectVerifierPairDef)} callback\n   * @return {?Promise}\n   * @private\n   */\n  getOrCreatePair_(callback) {\n    this.createPair_();\n    if (this.pairCreated_) {\n      // Already created.\n      callback(this.pair_);\n    } else if (this.pairPromise_) {\n      // Otherwise wait for it to be created.\n      this.pairPromise_.then(pair => callback(pair));\n    }\n    return this.pairPromise_;\n  }\n\n  /**\n   * @private\n   */\n  createPair_() {\n    // Either already created or already started.\n    if (this.pairCreated_ || this.pairPromise_) {\n      return;\n    }\n\n    // Check that the platform can fully support verification. That means\n    // that it's expected to implement the following APIs:\n    // a. Local storage (localStorage);\n    // b. WebCrypto (crypto.subtle);\n    // c. Crypto random (crypto.getRandomValues);\n    // d. SHA284 (crypto.subtle.digest).\n    const crypto = this.win_.crypto;\n    if (\n      this.win_.localStorage &&\n      crypto &&\n      crypto.getRandomValues &&\n      crypto.subtle &&\n      crypto.subtle.digest\n    ) {\n      this.pairPromise_ = new Promise((resolve, reject) => {\n        // 1. Use crypto random to create a 128-bit (16 byte) redirect key.\n        const keyBytes = new Uint8Array(16);\n        crypto.getRandomValues(keyBytes);\n\n        // 2. Encode key as base64.\n        const key = btoa(bytesToString(keyBytes));\n\n        // 3. Create a hash.\n        crypto.subtle.digest({name: 'SHA-384'}, stringToBytes(key)).then(\n          buffer => {\n            const verifier = btoa(\n              bytesToString(\n                new Uint8Array(/** @type {!ArrayBuffer} */ (buffer))\n              )\n            );\n            resolve({key, verifier});\n          },\n          reason => {\n            reject(reason);\n          }\n        );\n      })\n        .catch(() => {\n          // Ignore failures. A failure to create a redirect verifier is often\n          // recoverable.\n          return null;\n        })\n        .then(pair => {\n          this.pairCreated_ = true;\n          this.pair_ = pair;\n          return pair;\n        });\n    } else {\n      // Not supported.\n      this.pairCreated_ = true;\n      this.pair_ = null;\n    }\n  }\n}\n\n/**\n * @param {!Object} paymentRequest\n * @param {string} param\n * @param {*} value\n */\nfunction setInternalParam(paymentRequest, param, value) {\n  paymentRequest['i'] = Object.assign(paymentRequest['i'] || {}, {\n    [param]: value,\n  });\n}\n\n// TODO(dvoytenko, #406): Remove once GPay API is supported.\nexport function getPayjsBindingForTesting() {\n  return PayClientBindingPayjs;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The Flow goes like this:\n * a. Start Payments\n * b. Complete Payments\n * c. Create Account\n * d. Acknowledge Account\n *\n * In other words, Flow = Payments + Account Creation.\n */\n\nimport {\n  AccountCreationRequest,\n  EntitlementsResponse,\n} from '../proto/api_messages';\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {AnalyticsEvent, EventParams} from '../proto/api_messages';\nimport {JwtHelper} from '../utils/jwt';\nimport {\n  ProductType,\n  SubscriptionFlows,\n  WindowOpenMode,\n} from '../api/subscriptions';\nimport {PurchaseData, SubscribeResponse} from '../api/subscribe-response';\nimport {UserData} from '../api/user-data';\nimport {feArgs, feUrl} from './services';\nimport {getPropertyFromJsonString, parseJson} from '../utils/json';\nimport {isCancelError} from '../utils/errors';\n\n/**\n * String values input by the publisher are mapped to the number values.\n * @type {!Object<string, number>}\n */\nexport const ReplaceSkuProrationModeMapping = {\n  // The replacement takes effect immediately, and the remaining time will\n  // be prorated and credited to the user. This is the current default\n  // behavior.\n  'IMMEDIATE_WITH_TIME_PRORATION': 1,\n};\n\nexport const RecurrenceMapping = {\n  'AUTO': 1,\n  'ONE_TIME': 2,\n};\n\n/**\n * @param {string} sku\n * @return {!EventParams}\n */\nfunction getEventParams(sku) {\n  return new EventParams([, , , , sku]);\n}\n\n/**\n * The flow to initiate payment process.\n */\nexport class PayStartFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SubscriptionRequest|string} skuOrSubscriptionRequest\n   * @param {!../api/subscriptions.ProductType} productType\n   */\n  constructor(\n    deps,\n    skuOrSubscriptionRequest,\n    productType = ProductType.SUBSCRIPTION\n  ) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!./pay-client.PayClient} */\n    this.payClient_ = deps.payClient();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!../api/subscriptions.SubscriptionRequest} */\n    this.subscriptionRequest_ =\n      typeof skuOrSubscriptionRequest == 'string'\n        ? {'skuId': skuOrSubscriptionRequest}\n        : skuOrSubscriptionRequest;\n\n    /**@private @const {!ProductType} */\n    this.productType_ = productType;\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    // Map the proration mode to the enum value (if proration exists).\n    this.prorationMode = this.subscriptionRequest_.replaceSkuProrationMode;\n    this.prorationEnum = 0;\n    if (this.prorationMode) {\n      this.prorationEnum = ReplaceSkuProrationModeMapping[this.prorationMode];\n    } else if (this.subscriptionRequest_.oldSku) {\n      this.prorationEnum =\n        ReplaceSkuProrationModeMapping['IMMEDIATE_WITH_TIME_PRORATION'];\n    }\n\n    // Assign one-time recurrence enum if applicable\n    this.oneTimeContribution = false;\n    this.recurrenceEnum = 0;\n    if (this.subscriptionRequest_.oneTime) {\n      this.recurrenceEnum = RecurrenceMapping['ONE_TIME'];\n      delete this.subscriptionRequest_.oneTime;\n    }\n  }\n\n  /**\n   * Starts the payments flow.\n   * @return {!Promise}\n   */\n  start() {\n    const req = this.subscriptionRequest_;\n    // Add the 'publicationId' key to the subscriptionRequest_ object.\n    const swgPaymentRequest = Object.assign({}, req, {\n      'publicationId': this.pageConfig_.getPublicationId(),\n    });\n\n    if (this.prorationEnum) {\n      swgPaymentRequest.replaceSkuProrationMode = this.prorationEnum;\n    }\n\n    if (this.recurrenceEnum) {\n      swgPaymentRequest.paymentRecurrence = this.recurrenceEnum;\n    }\n\n    // Start/cancel events.\n    this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.SUBSCRIBE, req);\n    if (req.oldSku) {\n      this.analyticsService_.setSku(req.oldSku);\n    }\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.ACTION_PAYMENT_FLOW_STARTED,\n      true,\n      getEventParams(req.skuId)\n    );\n    this.payClient_.start(\n      {\n        'apiVersion': 1,\n        'allowedPaymentMethods': ['CARD'],\n        'environment': '$payEnvironment$',\n        'playEnvironment': '$playEnvironment$',\n        'swg': swgPaymentRequest,\n        'i': {\n          'startTimeMs': Date.now(),\n          'productType': this.productType_,\n        },\n      },\n      {\n        forceRedirect:\n          this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT,\n      }\n    );\n    return Promise.resolve();\n  }\n}\n\n/**\n * The flow for successful payments completion.\n */\nexport class PayCompleteFlow {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /** @const @type {./client-event-manager.ClientEventManager} */\n    const eventManager = deps.eventManager();\n\n    deps.payClient().onResponse(payPromise => {\n      deps.entitlementsManager().blockNextNotification();\n      const flow = new PayCompleteFlow(deps);\n      const promise = validatePayResponse(\n        deps,\n        payPromise,\n        flow.complete.bind(flow)\n      );\n      deps.callbacks().triggerPaymentResponse(promise);\n      return promise.then(\n        response => {\n          const sku = parseSkuFromPurchaseDataSafe(response.purchaseData);\n          deps.analytics().setSku(sku || '');\n          eventManager.logSwgEvent(\n            AnalyticsEvent.ACTION_PAYMENT_COMPLETE,\n            true,\n            getEventParams(sku || '')\n          );\n          flow.start(response);\n        },\n        reason => {\n          if (isCancelError(reason)) {\n            deps.callbacks().triggerFlowCanceled(SubscriptionFlows.SUBSCRIBE);\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.ACTION_USER_CANCELED_PAYFLOW, true);\n          } else {\n            deps\n              .eventManager()\n              .logSwgEvent(AnalyticsEvent.EVENT_PAYMENT_FAILED, false);\n            deps.jserror().error('Pay failed', reason);\n          }\n          throw reason;\n        }\n      );\n    });\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?SubscribeResponse} */\n    this.response_ = null;\n\n    /** @private {?Promise} */\n    this.readyPromise_ = null;\n\n    /** @private @const {!../runtime/analytics-service.AnalyticsService} */\n    this.analyticsService_ = deps.analytics();\n\n    /** @private @const {!../runtime/client-event-manager.ClientEventManager} */\n    this.eventManager_ = deps.eventManager();\n\n    /** @private {?string} */\n    this.sku_ = null;\n  }\n\n  /**\n   * Starts the payments completion flow.\n   * @param {!SubscribeResponse} response\n   * @return {!Promise}\n   */\n  start(response) {\n    this.sku_ = parseSkuFromPurchaseDataSafe(response.purchaseData);\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.IMPRESSION_ACCOUNT_CHANGED,\n      true,\n      getEventParams(this.sku_ || '')\n    );\n    this.deps_.entitlementsManager().reset(true);\n    this.response_ = response;\n    const args = {\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'productType': this.response_['productType'],\n      'isSubscriptionUpdate': !!this.response_['oldSku'],\n    };\n    // TODO(dvoytenko, #400): cleanup once entitlements is launched everywhere.\n    if (response.userData && response.entitlements) {\n      args['idToken'] = response.userData.idToken;\n      this.deps_\n        .entitlementsManager()\n        .pushNextEntitlements(response.entitlements.raw);\n    } else {\n      args['loginHint'] = response.userData && response.userData.email;\n    }\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/payconfirmiframe'),\n      feArgs(args),\n      /* shouldFadeBody */ true\n    );\n\n    this.activityIframeView_.on(\n      EntitlementsResponse,\n      this.handleEntitlementsResponse_.bind(this)\n    );\n\n    this.activityIframeView_.acceptResult().then(() => {\n      // The flow is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    });\n    this.readyPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.readyPromise_;\n  }\n\n  /**\n   * @param {!EntitlementsResponse} response\n   * @private\n   */\n  handleEntitlementsResponse_(response) {\n    const jwt = response.getJwt();\n    if (jwt) {\n      this.deps_.entitlementsManager().pushNextEntitlements(jwt);\n    }\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  complete() {\n    this.eventManager_.logSwgEvent(\n      AnalyticsEvent.ACTION_ACCOUNT_CREATED,\n      true,\n      getEventParams(this.sku_ || '')\n    );\n    this.deps_.entitlementsManager().unblockNextNotification();\n    this.readyPromise_.then(() => {\n      const accountCompletionRequest = new AccountCreationRequest();\n      accountCompletionRequest.setComplete(true);\n      this.activityIframeView_.execute(accountCompletionRequest);\n    });\n    return this.activityIframeView_\n      .acceptResult()\n      .catch(() => {\n        // Ignore errors.\n      })\n      .then(() => {\n        this.eventManager_.logSwgEvent(\n          AnalyticsEvent.ACTION_ACCOUNT_ACKNOWLEDGED,\n          true,\n          getEventParams(this.sku_ || '')\n        );\n        this.deps_.entitlementsManager().setToastShown(true);\n      });\n  }\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {!Promise<!Object>} payPromise\n * @param {function():!Promise} completeHandler\n * @return {!Promise<!SubscribeResponse>}\n */\nfunction validatePayResponse(deps, payPromise, completeHandler) {\n  return payPromise.then(data => {\n    // 1) We log against a random TX ID which is how we track a specific user\n    //    anonymously.\n    // 2) If there was a redirect to gPay, we may have lost our stored TX ID.\n    // 3) Pay service is supposed to give us the TX ID it logged against.\n\n    const hasLogged = deps.analytics().getHasLogged();\n    let eventType = AnalyticsEvent.UNKNOWN;\n    let eventParams = undefined;\n    if (typeof data !== 'object' || !data['googleTransactionId']) {\n      // If gPay doesn't give us a TX ID it means that something may\n      // be wrong.  If we previously logged then we are at least continuing to\n      // log against the same TX ID.  If we didn't previously log then we have\n      // lost all connection to the events that preceded the payment event and\n      // we at least want to know why that data was lost.\n      eventParams = new EventParams();\n      eventParams.setHadLogged(hasLogged);\n      eventType = AnalyticsEvent.EVENT_GPAY_NO_TX_ID;\n    } else {\n      const oldTxId = deps.analytics().getTransactionId();\n      const newTxId = data['googleTransactionId'];\n\n      if (!hasLogged) {\n        // This is the expected case for full redirects.  It may be happening\n        // unexpectedly at other times too though and we want to be aware of it\n        // if it does.\n        deps.analytics().setTransactionId(newTxId);\n        eventType = AnalyticsEvent.EVENT_GPAY_CANNOT_CONFIRM_TX_ID;\n      } else {\n        if (oldTxId === newTxId) {\n          // This is the expected case for non-redirect pay events\n          eventType = AnalyticsEvent.EVENT_CONFIRM_TX_ID;\n        } else {\n          // This is an unexpected case: gPay rejected our TX ID and created\n          // its own.  Log the gPay TX ID but keep our logging consistent.\n          eventParams = new EventParams();\n          eventParams.setGpayTransactionId(newTxId);\n          eventType = AnalyticsEvent.EVENT_CHANGED_TX_ID;\n        }\n      }\n    }\n    deps.eventManager().logSwgEvent(eventType, true, eventParams);\n    return parseSubscriptionResponse(deps, data, completeHandler);\n  });\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {*} data\n * @param {function():!Promise} completeHandler\n * @return {!SubscribeResponse}\n */\nexport function parseSubscriptionResponse(deps, data, completeHandler) {\n  let swgData = null;\n  let raw = null;\n  let productType = ProductType.SUBSCRIPTION;\n  let oldSku = null;\n\n  if (data) {\n    if (typeof data == 'string') {\n      raw = /** @type {string} */ (data);\n    } else {\n      // Assume it's a json object in the format:\n      // `{integratorClientCallbackData: \"...\"}` or `{swgCallbackData: \"...\"}`.\n      const json = /** @type {!Object} */ (data);\n      if ('swgCallbackData' in json) {\n        swgData = /** @type {!Object} */ (json['swgCallbackData']);\n      } else if ('integratorClientCallbackData' in json) {\n        raw = json['integratorClientCallbackData'];\n      }\n      if ('paymentRequest' in data) {\n        oldSku = (data['paymentRequest']['swg'] || {})['oldSku'];\n        productType =\n          (data['paymentRequest']['i'] || {})['productType'] ||\n          ProductType.SUBSCRIPTION;\n      }\n    }\n  }\n  if (raw && !swgData) {\n    raw = atob(raw);\n    if (raw) {\n      const parsed = parseJson(raw);\n      swgData = parsed['swgCallbackData'];\n    }\n  }\n  if (!swgData) {\n    throw new Error('unexpected payment response');\n  }\n  raw = JSON.stringify(/** @type {!JsonObject} */ (swgData));\n  return new SubscribeResponse(\n    raw,\n    parsePurchaseData(swgData),\n    parseUserData(swgData),\n    parseEntitlements(deps, swgData),\n    productType,\n    completeHandler,\n    oldSku\n  );\n}\n\n/**\n * @param {!Object} swgData\n * @return {!PurchaseData}\n */\nfunction parsePurchaseData(swgData) {\n  const raw = swgData['purchaseData'];\n  const signature = swgData['purchaseDataSignature'];\n  return new PurchaseData(raw, signature);\n}\n\n/**\n * @param {!Object} swgData\n * @return {?UserData}\n * @package Visible for testing.\n */\nexport function parseUserData(swgData) {\n  const idToken = swgData['idToken'];\n  if (!idToken) {\n    return null;\n  }\n  const jwt = /** @type {!Object} */ (new JwtHelper().decode(idToken));\n  return new UserData(idToken, jwt);\n}\n\n/**\n * @param {!./deps.DepsDef} deps\n * @param {!Object} swgData\n * @return {?../api/entitlements.Entitlements}\n * @package Visible for testing.\n */\nexport function parseEntitlements(deps, swgData) {\n  if (swgData['signedEntitlements']) {\n    return deps.entitlementsManager().parseEntitlements(swgData);\n  }\n  return null;\n}\n\n/**\n * @param {!PurchaseData} purchaseData\n * @return {?string}\n */\nfunction parseSkuFromPurchaseDataSafe(purchaseData) {\n  return (\n    /** @type {?string} */ (getPropertyFromJsonString(\n      purchaseData.raw,\n      'productId'\n    ) || null)\n  );\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AnalyticsEvent,\n  EventOriginator,\n  EventParams,\n} from '../proto/api_messages';\nimport {adsUrl} from './services';\nimport {analyticsEventToPublisherEvent} from './event-type-mapping';\nimport {isBoolean, isObject} from '../utils/types';\n\n/**\n * Implements interface to Propensity server\n */\nexport class PropensityServer {\n  /**\n   * Page configuration is known when Propensity API\n   * is available, publication ID is therefore used\n   * in constructor for the server interface.\n   * @param {!Window} win\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(win, deps, fetcher) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n    /** @private @const {string} */\n    this.publicationId_ = this.deps_.pageConfig().getPublicationId();\n    /** @private {?string} */\n    this.clientId_ = null;\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n    /** @private @const {number} */\n    this.version_ = 1;\n\n    this.deps_\n      .eventManager()\n      .registerEventListener(this.handleClientEvent_.bind(this));\n  }\n\n  /**\n   * @private\n   * @return {string}\n   */\n  getDocumentCookie_() {\n    return this.win_.document.cookie;\n  }\n\n  /**\n   * Returns the client ID to be used.\n   * @return {?string}\n   * @private\n   */\n  getClientId_() {\n    if (!this.clientId_) {\n      // Match '__gads' (name of the cookie) dropped by Ads Tag.\n      const gadsmatch = this.getDocumentCookie_().match(\n        '(^|;)\\\\s*__gads\\\\s*=\\\\s*([^;]+)'\n      );\n      // Since the cookie will be consumed using decodeURIComponent(),\n      // use encodeURIComponent() here to match.\n      this.clientId_ = gadsmatch && encodeURIComponent(gadsmatch.pop());\n    }\n    return this.clientId_;\n  }\n\n  /**\n   * @private\n   * @param {string} url\n   * @return {string}\n   */\n  propensityUrl_(url) {\n    url = url + '&u_tz=240&v=' + this.version_;\n    const clientId = this.getClientId_();\n    if (clientId) {\n      url = url + '&cookie=' + clientId;\n    }\n    url = url + '&cdm=' + this.win_.location.hostname;\n    return url;\n  }\n\n  /**\n   * @param {string} state\n   * @param {?string} productsOrSkus\n   */\n  sendSubscriptionState(state, productsOrSkus) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    let userState = this.publicationId_ + ':' + state;\n    if (productsOrSkus) {\n      userState = userState + ':' + encodeURIComponent(productsOrSkus);\n    }\n    const url = adsUrl('/subopt/data?states=') + encodeURIComponent(userState);\n    return this.fetcher_.fetch(this.propensityUrl_(url), init);\n  }\n\n  /**\n   * @param {string} event\n   * @param {?string} context\n   * @private\n   */\n  sendEvent_(event, context) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    let eventInfo = this.publicationId_ + ':' + event;\n    if (context) {\n      eventInfo = eventInfo + ':' + encodeURIComponent(context);\n    }\n    const url = adsUrl('/subopt/data?events=') + encodeURIComponent(eventInfo);\n    return this.fetcher_.fetch(this.propensityUrl_(url), init);\n  }\n\n  /**\n   *\n   * @param {!../api/client-event-manager-api.ClientEvent} event\n   */\n  handleClientEvent_(event) {\n    /**\n     * Does a live check of the config because we don't know when publisher\n     * called to enable (it may be after a consent dialog).\n     */\n    if (\n      !this.deps_.config().enablePropensity &&\n      event.eventOriginator !== EventOriginator.PROPENSITY_CLIENT\n    ) {\n      return;\n    }\n\n    if (event.eventType === AnalyticsEvent.EVENT_SUBSCRIPTION_STATE) {\n      this.sendSubscriptionState(\n        event.additionalParameters['state'],\n        event.additionalParameters['productsOrSkus']\n      );\n      return;\n    }\n    const propEvent = analyticsEventToPublisherEvent(event.eventType);\n    if (propEvent == null) {\n      return;\n    }\n    let additionalParameters = event.additionalParameters;\n    // The EventParams object is private to SwG analytics.  Do not send.\n    if (additionalParameters instanceof EventParams) {\n      additionalParameters = undefined;\n    }\n    if (isBoolean(event.isFromUserAction)) {\n      if (!isObject(additionalParameters)) {\n        additionalParameters = {};\n      }\n      additionalParameters['is_active'] = event.isFromUserAction;\n    }\n    this.sendEvent_(\n      propEvent,\n      JSON.stringify(/** @type {?JsonObject} */ (additionalParameters))\n    );\n  }\n\n  /**\n   * @param {JsonObject} response\n   * @return {!../api/propensity-api.PropensityScore}\n   */\n  parsePropensityResponse_(response) {\n    let defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({});\n    if (!response['header']) {\n      defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n        header: {ok: false},\n        body: {error: 'No valid response'},\n      });\n      return defaultScore;\n    }\n    const status = response['header'];\n    let scoreDetails = undefined;\n    if (status['ok']) {\n      const scores = response['scores'];\n      scoreDetails = [];\n      for (let i = 0; i < scores.length; i++) {\n        const result = scores[i];\n        const scoreStatus = !!result['score'];\n        let scoreDetail;\n        if (scoreStatus) {\n          const value = /** @type {!../api/propensity-api.Score} */ ({\n            value: result['score'],\n            bucketed: result['score_type'] == 2,\n          });\n          scoreDetail = /** @type {!../api/propensity-api.Body} */ ({\n            product: result['product'],\n            score: value,\n          });\n        } else {\n          scoreDetail = /** @type {!../api/propensity-api.Body} */ ({\n            product: result['product'],\n            error: result['error_message'],\n          });\n        }\n        scoreDetails.push(scoreDetail);\n      }\n      if (scoreDetails) {\n        defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n          header: {ok: true},\n          body: {scores: scoreDetails},\n        });\n      }\n      return defaultScore;\n    }\n    defaultScore = /** @type {!../api/propensity-api.PropensityScore} */ ({\n      header: {ok: false},\n      body: {error: response['error']},\n    });\n    return defaultScore;\n  }\n  /**\n   * @param {string} referrer\n   * @param {string} type\n   * @return {?Promise<../api/propensity-api.PropensityScore>}\n   */\n  getPropensity(referrer, type) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      credentials: 'include',\n    });\n    const url =\n      adsUrl('/subopt/pts?products=') +\n      this.publicationId_ +\n      '&type=' +\n      type +\n      '&ref=' +\n      referrer;\n    return this.fetcher_\n      .fetch(this.propensityUrl_(url), init)\n      .then(result => result.json())\n      .then(response => {\n        return this.parsePropensityResponse_(response);\n      });\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as PropensityApi from '../api/propensity-api';\nimport {Event, SubscriptionState} from '../api/logger-api';\nimport {EventOriginator} from '../proto/api_messages';\nimport {PropensityServer} from './propensity-server';\nimport {isBoolean} from '../utils/types';\nimport {isEnumValue, isObject} from '../utils/types';\nimport {publisherEventToAnalyticsEvent} from './event-type-mapping';\n\n/**\n * @implements {PropensityApi.PropensityApi}\n */\nexport class Propensity {\n  /**\n   * @param {!Window} win\n   * @param {!./deps.DepsDef} deps\n   * @param {!./fetcher.Fetcher} fetcher\n   *\n   * IMPORTANT: deps may not be full initialized config and pageConfig are\n   * available immediately, other function should be gated on a ready promise.\n   * #TODO(jpettitt) switch refactor to take out the win and use deps to get win\n   */\n  constructor(win, deps, fetcher) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private {PropensityServer} */\n    this.propensityServer_ = new PropensityServer(win, deps, fetcher);\n\n    /** @private @const {!../api/client-event-manager-api.ClientEventManagerApi} */\n    this.eventManager_ = deps.eventManager();\n  }\n\n  /** @override */\n  sendSubscriptionState(state, jsonProducts) {\n    if (!Object.values(SubscriptionState).includes(state)) {\n      throw new Error('Invalid subscription state provided');\n    }\n    if (\n      (SubscriptionState.SUBSCRIBER == state ||\n        SubscriptionState.PAST_SUBSCRIBER == state) &&\n      !jsonProducts\n    ) {\n      throw new Error(\n        'Entitlements must be provided for users with' +\n          ' active or expired subscriptions'\n      );\n    }\n    if (jsonProducts && !isObject(jsonProducts)) {\n      throw new Error('Entitlements must be an Object');\n    }\n    let productsOrSkus = null;\n    if (jsonProducts) {\n      productsOrSkus = JSON.stringify(jsonProducts);\n    }\n    this.propensityServer_.sendSubscriptionState(state, productsOrSkus);\n  }\n\n  /** @override */\n  getPropensity(type) {\n    if (type && !Object.values(PropensityApi.PropensityType).includes(type)) {\n      throw new Error('Invalid propensity type requested');\n    }\n    if (!type) {\n      type = PropensityApi.PropensityType.GENERAL;\n    }\n    return this.propensityServer_.getPropensity(\n      this.win_.document.referrer,\n      type\n    );\n  }\n\n  /** @override */\n  sendEvent(userEvent) {\n    const analyticsEvent = publisherEventToAnalyticsEvent(userEvent.name);\n    let data = null;\n    if (!isEnumValue(Event, userEvent.name) || !analyticsEvent) {\n      throw new Error('Invalid user event provided(' + userEvent.name + ')');\n    }\n\n    if (userEvent.data) {\n      if (!isObject(userEvent.data)) {\n        throw new Error('Event data must be an Object(' + userEvent.data + ')');\n      } else {\n        data = {};\n        Object.assign(data, userEvent.data);\n      }\n    }\n\n    if (isBoolean(userEvent.active)) {\n      if (!data) {\n        data = {};\n      }\n      Object.assign(data, {'is_active': userEvent.active});\n    } else if (userEvent.active != null) {\n      throw new Error('Event active must be a boolean');\n    }\n\n    this.eventManager_.logEvent({\n      eventType: analyticsEvent,\n      eventOriginator: EventOriginator.PROPENSITY_CLIENT,\n      isFromUserAction: userEvent.active,\n      additionalParameters: data,\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AbbrvOfferFlow, OffersFlow, SubscribeOptionFlow} from './offers-flow';\nimport {ActivityPorts} from '../components/activities';\nimport {AnalyticsEvent} from '../proto/api_messages';\nimport {AnalyticsMode} from '../api/subscriptions';\nimport {AnalyticsService} from './analytics-service';\nimport {ButtonApi} from './button-api';\nimport {Callbacks} from './callbacks';\nimport {ClientEventManager} from './client-event-manager';\nimport {ContributionsFlow} from './contributions-flow';\nimport {DeferredAccountFlow} from './deferred-account-flow';\nimport {DepsDef} from './deps';\nimport {DialogManager} from '../components/dialog-manager';\nimport {Doc, resolveDoc} from '../model/doc';\nimport {EntitlementsManager} from './entitlements-manager';\nimport {ExperimentFlags} from './experiment-flags';\nimport {Fetcher, XhrFetcher} from './fetcher';\nimport {JsError} from './jserror';\nimport {\n  LinkCompleteFlow,\n  LinkSaveFlow,\n  LinkbackFlow,\n} from './link-accounts-flow';\nimport {Logger} from './logger';\nimport {LoginNotificationApi} from './login-notification-api';\nimport {LoginPromptApi} from './login-prompt-api';\nimport {OffersApi} from './offers-api';\nimport {PageConfig} from '../model/page-config';\nimport {\n  PageConfigResolver,\n  getControlFlag,\n} from '../model/page-config-resolver';\nimport {PayClient} from './pay-client';\nimport {PayCompleteFlow, PayStartFlow} from './pay-flow';\nimport {Preconnect} from '../utils/preconnect';\nimport {\n  ProductType,\n  Subscriptions,\n  WindowOpenMode,\n  defaultConfig,\n} from '../api/subscriptions';\nimport {Propensity} from './propensity';\nimport {CSS as SWG_DIALOG} from '../../build/css/components/dialog.css';\nimport {Storage} from './storage';\nimport {WaitForSubscriptionLookupApi} from './wait-for-subscription-lookup-api';\nimport {assert} from '../utils/log';\nimport {debugLog} from '../utils/log';\nimport {injectStyleSheet, isEdgeBrowser} from '../utils/dom';\nimport {isArray} from '../utils/types';\nimport {isBoolean} from '../utils/types';\nimport {isExperimentOn} from './experiments';\nimport {setExperiment} from './experiments';\n\nconst RUNTIME_PROP = 'SWG';\nconst RUNTIME_LEGACY_PROP = 'SUBSCRIPTIONS'; // MIGRATE\n\n/**\n * Reference to the runtime, for testing.\n * @private {!Runtime}\n */\nlet runtimeInstance_;\n\n/**\n * Returns runtime for testing if available. Throws if the runtime is not\n * initialized yet.\n * @visibleForTesting\n * @return {!Runtime}\n */\nexport function getRuntime() {\n  assert(runtimeInstance_, 'not initialized yet');\n  return runtimeInstance_;\n}\n\n/**\n * Installs SwG runtime.\n * @param {!Window} win\n */\nexport function installRuntime(win) {\n  // Only install the SwG runtime once.\n  if (win[RUNTIME_PROP] && !isArray(win[RUNTIME_PROP])) {\n    return;\n  }\n\n  // Create a SwG runtime.\n  const runtime = new Runtime(win);\n\n  // Create a public version of the SwG runtime.\n  const publicRuntime = createPublicRuntime(runtime);\n\n  /**\n   * Executes a callback when SwG runtime is ready.\n   * @param {function(!Subscriptions)} callback\n   */\n  function callWhenRuntimeIsReady(callback) {\n    if (!callback) {\n      return;\n    }\n\n    runtime.whenReady().then(() => {\n      callback(publicRuntime);\n    });\n  }\n\n  // Queue up any callbacks the publication might have provided.\n  const waitingCallbacks = [].concat(\n    win[RUNTIME_PROP],\n    win[RUNTIME_LEGACY_PROP]\n  );\n  waitingCallbacks.forEach(callWhenRuntimeIsReady);\n\n  // If any more callbacks are `push`ed to the global SwG variables,\n  // they'll be queued up to receive the SwG runtime when it's ready.\n  win[RUNTIME_PROP] = win[RUNTIME_LEGACY_PROP] = {\n    push: callWhenRuntimeIsReady,\n  };\n\n  // Set variable for testing.\n  runtimeInstance_ = runtime;\n\n  // Kick off subscriptions flow.\n  runtime.startSubscriptionsFlowIfNeeded();\n}\n\n/**\n * @implements {Subscriptions}\n */\nexport class Runtime {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(win);\n\n    /** @private @const {!Promise} */\n    this.ready_ = Promise.resolve();\n\n    /** @private {?string} */\n    this.productOrPublicationId_ = null;\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = {};\n\n    /** @private {boolean} */\n    this.committed_ = false;\n\n    /** @private {?function((!ConfiguredRuntime|!Promise))} */\n    this.configuredResolver_ = null;\n\n    /** @private @const {!Promise<!ConfiguredRuntime>} */\n    this.configuredPromise_ = new Promise(resolve => {\n      this.configuredResolver_ = resolve;\n    });\n\n    /** @private {?PageConfigResolver} */\n    this.pageConfigResolver_ = null;\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_, this.configuredPromise_);\n    this.buttonApi_.init(); // Injects swg-button stylesheet.\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * @param {boolean} commit\n   * @return {!Promise<!ConfiguredRuntime>}\n   * @private\n   */\n  configured_(commit) {\n    if (!this.committed_ && commit) {\n      this.committed_ = true;\n      /** @type {!Promise<!PageConfig>} */\n      let pageConfigPromise;\n      if (this.productOrPublicationId_) {\n        pageConfigPromise = Promise.resolve(\n          new PageConfig(this.productOrPublicationId_, /* locked */ false)\n        );\n      } else {\n        this.pageConfigResolver_ = new PageConfigResolver(this.doc_);\n        pageConfigPromise = this.pageConfigResolver_\n          .resolveConfig()\n          .then(config => {\n            this.pageConfigResolver_ = null;\n            return config;\n          });\n      }\n      pageConfigPromise.then(\n        pageConfig => {\n          this.configuredResolver_(\n            new ConfiguredRuntime(\n              this.doc_,\n              pageConfig,\n              /* integr */ {configPromise: this.configuredPromise_},\n              this.config_\n            )\n          );\n          this.configuredResolver_ = null;\n        },\n        reason => {\n          this.configuredResolver_(Promise.reject(reason));\n          this.configuredResolver_ = null;\n        }\n      );\n    } else if (commit && this.pageConfigResolver_) {\n      this.pageConfigResolver_.check();\n    }\n    return this.configuredPromise_;\n  }\n\n  /**\n   * Starts the subscription flow if it hasn't been started and the page is\n   * configured to start it automatically.\n   *\n   * @return {?Promise}\n   * @package\n   */\n  startSubscriptionsFlowIfNeeded() {\n    const control = getControlFlag(this.win_.document);\n    debugLog(control, 'mode');\n    if (control == 'manual') {\n      // \"Skipping automatic start because control flag is set to \"manual\".\n      return null;\n    }\n    return this.start();\n  }\n\n  /** @override */\n  init(productOrPublicationId) {\n    assert(!this.committed_, 'already configured');\n    this.productOrPublicationId_ = productOrPublicationId;\n  }\n\n  /** @override */\n  configure(config) {\n    // Accumulate config for startup.\n    Object.assign(this.config_, config);\n    return this.configured_(false).then(runtime => runtime.configure(config));\n  }\n\n  /** @override */\n  start() {\n    return this.configured_(true).then(runtime => runtime.start());\n  }\n\n  /** @override */\n  reset() {\n    return this.configured_(true).then(runtime => runtime.reset());\n  }\n\n  /** @override */\n  clear() {\n    return this.configured_(true).then(runtime => runtime.clear());\n  }\n\n  /** @override */\n  getEntitlements(encryptedDocumentKey) {\n    return this.configured_(true).then(runtime =>\n      runtime.getEntitlements(encryptedDocumentKey)\n    );\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnEntitlementsResponse(callback)\n    );\n  }\n\n  /** @override */\n  getOffers(options) {\n    return this.configured_(true).then(runtime => runtime.getOffers(options));\n  }\n\n  /** @override */\n  showOffers(options) {\n    return this.configured_(true).then(runtime => runtime.showOffers(options));\n  }\n\n  /** @override */\n  showUpdateOffers(options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showUpdateOffers(options)\n    );\n  }\n\n  /** @override */\n  showSubscribeOption(options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showSubscribeOption(options)\n    );\n  }\n\n  /** @override */\n  showAbbrvOffer(options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showAbbrvOffer(options)\n    );\n  }\n\n  /** @override */\n  showContributionOptions(options) {\n    return this.configured_(true).then(runtime =>\n      runtime.showContributionOptions(options)\n    );\n  }\n\n  /** @override */\n  waitForSubscriptionLookup(accountPromise) {\n    return this.configured_(true).then(runtime =>\n      runtime.waitForSubscriptionLookup(accountPromise)\n    );\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnNativeSubscribeRequest(callback)\n    );\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnSubscribeResponse(callback)\n    );\n  }\n\n  /** @override */\n  subscribe(sku) {\n    return this.configured_(true).then(runtime => runtime.subscribe(sku));\n  }\n\n  /** @override */\n  updateSubscription(subscriptionRequest) {\n    return this.configured_(true).then(runtime =>\n      runtime.updateSubscription(subscriptionRequest)\n    );\n  }\n\n  /** @override */\n  setOnContributionResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnContributionResponse(callback)\n    );\n  }\n\n  /** @override */\n  setOnPaymentResponse(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnPaymentResponse(callback)\n    );\n  }\n\n  /** @override */\n  contribute(skuOrSubscriptionRequest) {\n    return this.configured_(true).then(runtime =>\n      runtime.contribute(skuOrSubscriptionRequest)\n    );\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(options) {\n    return this.configured_(true).then(runtime =>\n      runtime.completeDeferredAccountCreation(options)\n    );\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnLoginRequest(callback)\n    );\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnLinkComplete(callback)\n    );\n  }\n\n  /** @override */\n  linkAccount(params = {}) {\n    return this.configured_(true).then(runtime => runtime.linkAccount(params));\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnFlowStarted(callback)\n    );\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    return this.configured_(false).then(runtime =>\n      runtime.setOnFlowCanceled(callback)\n    );\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.configured_(true).then(runtime => {\n      return runtime.saveSubscription(saveSubscriptionRequestCallback);\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.configured_(true).then(runtime => {\n      return runtime.showLoginPrompt();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.configured_(true).then(runtime => {\n      return runtime.showLoginNotification();\n    });\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, callback) {\n    return this.buttonApi_.create(optionsOrCallback, callback);\n  }\n\n  /** @override */\n  attachSmartButton(button, optionsOrCallback, callback) {\n    return this.configured_(true).then(runtime =>\n      runtime.attachSmartButton(button, optionsOrCallback, callback)\n    );\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, callback) {\n    return this.buttonApi_.attach(button, optionsOrCallback, callback);\n  }\n\n  /** @override */\n  getPropensityModule() {\n    return this.configured_(true).then(runtime => {\n      return runtime.getPropensityModule();\n    });\n  }\n\n  /** @override */\n  getLogger() {\n    return this.configured_(true).then(runtime => runtime.getLogger());\n  }\n}\n\n/**\n * @implements {DepsDef}\n * @implements {Subscriptions}\n */\nexport class ConfiguredRuntime {\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {{\n   *     fetcher: (!Fetcher|undefined),\n   *     configPromise: (!Promise|undefined),\n   *   }=} integr\n   * @param {!../api/subscriptions.Config=} config\n   */\n  constructor(winOrDoc, pageConfig, integr, config) {\n    integr = integr || {};\n    integr.configPromise = integr.configPromise || Promise.resolve();\n\n    /** @private @const {!ClientEventManager} */\n    this.eventManager_ = new ClientEventManager(integr.configPromise);\n\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private @const {!Window} */\n    this.win_ = this.doc_.getWin();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = defaultConfig();\n\n    if (isEdgeBrowser(this.win_)) {\n      // TODO(dvoytenko, b/120607343): Find a way to remove this restriction\n      // or move it to Web Activities.\n      this.config_.windowOpenMode = WindowOpenMode.REDIRECT;\n    }\n    if (config) {\n      this.configure_(config);\n    }\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {!Promise} */\n    this.documentParsed_ = this.doc_.whenReady();\n\n    /** @private @const {!JsError} */\n    this.jserror_ = new JsError(this.doc_);\n\n    /** @private @const {!Fetcher} */\n    this.fetcher_ = integr.fetcher || new XhrFetcher(this.win_);\n\n    /** @private @const {!Storage} */\n    this.storage_ = new Storage(this.win_);\n\n    /** @private @const {!DialogManager} */\n    this.dialogManager_ = new DialogManager(this.doc_);\n\n    /** @private @const {!Callbacks} */\n    this.callbacks_ = new Callbacks();\n\n    // WARNING: DepsDef ('this') is being progressively defined below.\n    // Constructors will crash if they rely on something that doesn't exist yet.\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = new ActivityPorts(this);\n\n    /** @private @const {!AnalyticsService} */\n    this.analyticsService_ = new AnalyticsService(this);\n\n    /** @private @const {!PayClient} */\n    this.payClient_ = new PayClient(this);\n\n    /** @private @const {!Logger} */\n    this.logger_ = new Logger(this);\n\n    /** @private @const {!EntitlementsManager} */\n    this.entitlementsManager_ = new EntitlementsManager(\n      this.win_,\n      this.pageConfig_,\n      this.fetcher_,\n      this // See note about 'this' above\n    );\n\n    /** @private @const {!Propensity} */\n    this.propensityModule_ = new Propensity(\n      this.win_,\n      this, // See note about 'this' above\n      this.fetcher_\n    );\n\n    // ALL CLEAR: DepsDef definition now complete.\n\n    /** @private @const {!OffersApi} */\n    this.offersApi_ = new OffersApi(this.pageConfig_, this.fetcher_);\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_, Promise.resolve(this));\n\n    const preconnect = new Preconnect(this.win_.document);\n\n    preconnect.prefetch('$assets$/loader.svg');\n    LinkCompleteFlow.configurePending(this);\n    PayCompleteFlow.configurePending(this);\n    this.payClient_.preconnect(preconnect);\n\n    injectStyleSheet(this.doc_, SWG_DIALOG);\n\n    // Report redirect errors if any.\n    this.activityPorts_.onRedirectError(error => {\n      this.analyticsService_.addLabels(['redirect']);\n      this.eventManager_.logSwgEvent(\n        AnalyticsEvent.EVENT_PAYMENT_FAILED,\n        false\n      );\n      this.jserror_.error('Redirect error', error);\n    });\n  }\n\n  /** @override */\n  doc() {\n    return this.doc_;\n  }\n\n  /** @override */\n  win() {\n    return this.win_;\n  }\n\n  /** @override */\n  pageConfig() {\n    return this.pageConfig_;\n  }\n\n  /** @override */\n  jserror() {\n    return this.jserror_;\n  }\n\n  /** @override */\n  activities() {\n    return this.activityPorts_;\n  }\n\n  /** @override */\n  payClient() {\n    return this.payClient_;\n  }\n\n  /** @override */\n  dialogManager() {\n    return this.dialogManager_;\n  }\n\n  /** @override */\n  entitlementsManager() {\n    return this.entitlementsManager_;\n  }\n\n  /** @override */\n  callbacks() {\n    return this.callbacks_;\n  }\n\n  /** @override */\n  storage() {\n    return this.storage_;\n  }\n\n  /** @override */\n  analytics() {\n    return this.analyticsService_;\n  }\n\n  /** @override */\n  init() {\n    // Implemented by the `Runtime` class.\n  }\n\n  /** @override */\n  configure(config) {\n    // Indirected for constructor testing.\n    this.configure_(config);\n  }\n\n  /**\n   * @param {!../api/subscriptions.Config} config\n   * @private\n   */\n  configure_(config) {\n    // Validate first.\n    let error = '';\n    for (const k in config) {\n      const v = config[k];\n      switch (k) {\n        case 'windowOpenMode':\n          if (v != WindowOpenMode.AUTO && v != WindowOpenMode.REDIRECT) {\n            error = 'Unknown windowOpenMode: ' + v;\n          }\n          break;\n        case 'experiments':\n          v.forEach(experiment => setExperiment(this.win_, experiment, true));\n          break;\n        case 'analyticsMode':\n          if (v != AnalyticsMode.DEFAULT && v != AnalyticsMode.IMPRESSIONS) {\n            error = 'Unknown analytics mode: ' + v;\n          }\n          break;\n        case 'enableSwgAnalytics':\n          if (!isBoolean(v)) {\n            error = 'Unknown enableSwgAnalytics value: ' + v;\n          }\n          break;\n        case 'enablePropensity':\n          if (!isBoolean(v)) {\n            error = 'Unknown enablePropensity value: ' + v;\n          }\n          break;\n        default:\n          error = 'Unknown config property: ' + k;\n      }\n    }\n    // Throw error string if it's not null\n    assert(!error, error || undefined);\n    // Assign.\n    Object.assign(this.config_, config);\n  }\n\n  /** @override */\n  config() {\n    return this.config_;\n  }\n\n  /** @override */\n  reset() {\n    this.entitlementsManager_.reset();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  clear() {\n    this.entitlementsManager_.clear();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  start() {\n    // No need to run entitlements without a product or for an unlocked page.\n    if (!this.pageConfig_.getProductId() || !this.pageConfig_.isLocked()) {\n      return Promise.resolve();\n    }\n    this.getEntitlements();\n  }\n\n  /** @override */\n  getEntitlements(encryptedDocumentKey) {\n    return this.entitlementsManager_\n      .getEntitlements(encryptedDocumentKey)\n      .then(entitlements => {\n        // Auto update internal things tracking the user's current SKU.\n        if (entitlements) {\n          try {\n            const skus = entitlements.entitlements.map(\n              entitlement => entitlement.getSku() || 'unknown subscriptionToken'\n            );\n            if (skus.length > 0) {\n              this.analyticsService_.setSku(skus.join(','));\n            }\n          } catch (ex) {}\n        }\n        return entitlements.clone();\n      });\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    this.callbacks_.setOnEntitlementsResponse(callback);\n  }\n\n  /** @override */\n  getOffers(options) {\n    return this.offersApi_.getOffers(options && options.productId);\n  }\n\n  /** @override */\n  showOffers(options) {\n    return this.documentParsed_.then(() => {\n      const errorMessage =\n        'The showOffers() method cannot be used to update a subscription. ' +\n        'Use the showUpdateOffers() method instead.';\n      assert(options ? !options['oldSku'] : true, errorMessage);\n      const flow = new OffersFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showUpdateOffers(options) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.REPLACE_SUBSCRIPTION),\n      'Not yet launched!'\n    );\n    return this.documentParsed_.then(() => {\n      const errorMessage =\n        'The showUpdateOffers() method cannot be used for new subscribers. ' +\n        'Use the showOffers() method instead.';\n      assert(options ? !!options['oldSku'] : false, errorMessage);\n      const flow = new OffersFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showSubscribeOption(options) {\n    return this.documentParsed_.then(() => {\n      const flow = new SubscribeOptionFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showAbbrvOffer(options) {\n    return this.documentParsed_.then(() => {\n      const flow = new AbbrvOfferFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showContributionOptions(options) {\n    return this.documentParsed_.then(() => {\n      const flow = new ContributionsFlow(this, options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  waitForSubscriptionLookup(accountPromise) {\n    return this.documentParsed_.then(() => {\n      const wait = new WaitForSubscriptionLookupApi(this, accountPromise);\n      return wait.start();\n    });\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    this.callbacks_.setOnLoginRequest(callback);\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    this.callbacks_.setOnLinkComplete(callback);\n  }\n\n  /** @override */\n  linkAccount(params = {}) {\n    return this.documentParsed_.then(() => {\n      return new LinkbackFlow(this).start(params);\n    });\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.documentParsed_.then(() => {\n      return new LinkSaveFlow(this, saveSubscriptionRequestCallback).start();\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.documentParsed_.then(() => {\n      return new LoginPromptApi(this).start();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.documentParsed_.then(() => {\n      return new LoginNotificationApi(this).start();\n    });\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    this.callbacks_.setOnSubscribeRequest(callback);\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    this.callbacks_.setOnSubscribeResponse(callback);\n  }\n\n  /** @override */\n  setOnPaymentResponse(callback) {\n    this.callbacks_.setOnPaymentResponse(callback);\n  }\n\n  /** @override */\n  subscribe(sku) {\n    const errorMessage =\n      'The subscribe() method can only take a sku as its parameter; ' +\n      'for subscription updates please use the updateSubscription() method';\n    assert(typeof sku === 'string', errorMessage);\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, sku).start();\n    });\n  }\n\n  /** @override */\n  updateSubscription(subscriptionRequest) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.REPLACE_SUBSCRIPTION),\n      'Not yet launched!'\n    );\n    const errorMessage =\n      'The updateSubscription() method should be used for subscription ' +\n      'updates; for new subscriptions please use the subscribe() method';\n    assert(\n      subscriptionRequest ? subscriptionRequest['oldSku'] : false,\n      errorMessage\n    );\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, subscriptionRequest).start();\n    });\n  }\n\n  /** @override */\n  setOnContributionResponse(callback) {\n    this.callbacks_.setOnContributionResponse(callback);\n  }\n\n  /** @override */\n  contribute(skuOrSubscriptionRequest) {\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(\n        this,\n        skuOrSubscriptionRequest,\n        ProductType.UI_CONTRIBUTION\n      ).start();\n    });\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(options) {\n    return this.documentParsed_.then(() => {\n      return new DeferredAccountFlow(this, options || null).start();\n    });\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    this.callbacks_.setOnFlowStarted(callback);\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    this.callbacks_.setOnFlowCanceled(callback);\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, callback) {\n    // This is a minor duplication to allow this code to be sync.\n    return this.buttonApi_.create(optionsOrCallback, callback);\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, callback) {\n    // This is a minor duplication to allow this code to be sync.\n    this.buttonApi_.attach(button, optionsOrCallback, callback);\n  }\n\n  /** @override */\n  attachSmartButton(button, optionsOrCallback, callback) {\n    assert(\n      isExperimentOn(this.win_, ExperimentFlags.SMARTBOX),\n      'Not yet launched!'\n    );\n    this.buttonApi_.attachSmartButton(\n      this,\n      button,\n      optionsOrCallback,\n      callback\n    );\n  }\n\n  /** @override */\n  getPropensityModule() {\n    return Promise.resolve(this.propensityModule_);\n  }\n\n  /** @override\n   * @return {!ClientEventManager}\n   */\n  eventManager() {\n    return this.eventManager_;\n  }\n\n  /** @override */\n  getLogger() {\n    return Promise.resolve(this.logger_);\n  }\n}\n\n/**\n * @param {!Runtime} runtime\n * @return {!Subscriptions}\n */\nfunction createPublicRuntime(runtime) {\n  return /** @type {!Subscriptions} */ ({\n    init: runtime.init.bind(runtime),\n    configure: runtime.configure.bind(runtime),\n    start: runtime.start.bind(runtime),\n    reset: runtime.reset.bind(runtime),\n    clear: runtime.clear.bind(runtime),\n    getEntitlements: runtime.getEntitlements.bind(runtime),\n    linkAccount: runtime.linkAccount.bind(runtime),\n    showLoginPrompt: runtime.showLoginPrompt.bind(runtime),\n    showLoginNotification: runtime.showLoginNotification.bind(runtime),\n    getOffers: runtime.getOffers.bind(runtime),\n    showOffers: runtime.showOffers.bind(runtime),\n    showUpdateOffers: runtime.showUpdateOffers.bind(runtime),\n    showAbbrvOffer: runtime.showAbbrvOffer.bind(runtime),\n    showSubscribeOption: runtime.showSubscribeOption.bind(runtime),\n    showContributionOptions: runtime.showContributionOptions.bind(runtime),\n    waitForSubscriptionLookup: runtime.waitForSubscriptionLookup.bind(runtime),\n    subscribe: runtime.subscribe.bind(runtime),\n    updateSubscription: runtime.updateSubscription.bind(runtime),\n    contribute: runtime.contribute.bind(runtime),\n    completeDeferredAccountCreation: runtime.completeDeferredAccountCreation.bind(\n      runtime\n    ),\n    setOnEntitlementsResponse: runtime.setOnEntitlementsResponse.bind(runtime),\n    setOnLoginRequest: runtime.setOnLoginRequest.bind(runtime),\n    setOnLinkComplete: runtime.setOnLinkComplete.bind(runtime),\n    setOnNativeSubscribeRequest: runtime.setOnNativeSubscribeRequest.bind(\n      runtime\n    ),\n    setOnPaymentResponse: runtime.setOnPaymentResponse.bind(runtime),\n    setOnSubscribeResponse: runtime.setOnSubscribeResponse.bind(runtime),\n    setOnContributionResponse: runtime.setOnContributionResponse.bind(runtime),\n    setOnFlowStarted: runtime.setOnFlowStarted.bind(runtime),\n    setOnFlowCanceled: runtime.setOnFlowCanceled.bind(runtime),\n    saveSubscription: runtime.saveSubscription.bind(runtime),\n    createButton: runtime.createButton.bind(runtime),\n    attachButton: runtime.attachButton.bind(runtime),\n    attachSmartButton: runtime.attachSmartButton.bind(runtime),\n    getPropensityModule: runtime.getPropensityModule.bind(runtime),\n    getLogger: runtime.getLogger.bind(runtime),\n  });\n}\n\n/**\n * @return {!Function}\n * @protected\n */\nexport function getSubscriptionsClassForTesting() {\n  return Subscriptions;\n}\n\n/**\n * @return {!Function}\n * @protected\n */\nexport function getFetcherClassForTesting() {\n  return Fetcher;\n}\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addQueryParam, parseQueryString, parseUrl} from '../utils/url';\n\n/**\n * Have to put these in the map to avoid compiler optimization. Due to\n * optimization issues, this map only allows property-style keys. E.g. \"hr1\",\n * as opposed to \"1hr\".\n * @type {!Object<string, number>}\n * @package Visible for testing only.\n */\nexport const CACHE_KEYS = {\n  'nocache': 1,\n  'hr1': 3600000, // 1hr = 1000 * 60 * 60\n  'hr12': 43200000, // 12hr = 1000 * 60 * 60 * 12\n};\n\n/**\n * @return {string}\n */\nexport function feOrigin() {\n  return parseUrl('$frontend$').origin;\n}\n\n/**\n * @param {string} url Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nexport function serviceUrl(url) {\n  return '$frontend$/swg/_/api/v1' + url;\n}\n\n/**\n * @param {string} url  Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nexport function adsUrl(url) {\n  return '$adsServer$' + url;\n}\n\n/**\n * @param {string} url Relative URL, e.g. \"/offersiframe\".\n * @param {string=} prefix\n * @return {string} The complete URL.\n */\nexport function feUrl(url, prefix = '') {\n  // Add cache param.\n  url = feCached('$frontend$' + prefix + '/swg/_/ui/v1' + url);\n\n  // Optionally add jsmode param. This allows us to test against \"aggressively\" compiled Boq JS.\n  const query = parseQueryString(self.location.hash);\n  const boqJsMode = query['swg.boqjsmode'];\n  if (boqJsMode !== undefined) {\n    url = addQueryParam(url, 'jsmode', boqJsMode);\n  }\n\n  return url;\n}\n\n/**\n * @param {string} url FE URL.\n * @return {string} The complete URL including cache param.\n */\nexport function feCached(url) {\n  return addQueryParam(url, '_', cacheParam('$frontendCache$'));\n}\n\n/**\n * @param {!Object<string, ?>} args\n * @return {!Object<string, ?>}\n */\nexport function feArgs(args) {\n  return Object.assign(args, {\n    '_client': 'SwG $internalRuntimeVersion$',\n  });\n}\n\n/**\n * @param {string} cacheKey\n * @return {string}\n * @package Visible for testing only.\n */\nexport function cacheParam(cacheKey) {\n  let period = CACHE_KEYS[cacheKey];\n  if (period == null) {\n    period = 1;\n  }\n  if (period === 0) {\n    return '_';\n  }\n  const now = Date.now();\n  return String(period <= 1 ? now : Math.floor(now / period));\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SmartBoxMessage} from '../proto/api_messages';\nimport {createElement} from '../utils/dom';\nimport {feArgs, feUrl} from './services';\nimport {setImportantStyles} from '../utils/style';\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n/**\n * @enum {string}\n */\nexport const Theme = {\n  LIGHT: 'light',\n  DARK: 'dark',\n};\n\n/**\n * The class for Smart button Api.\n */\nexport class SmartSubscriptionButtonApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!Element} button\n   * @param {!../api/subscriptions.SmartButtonOptions} options\n   * @param {function()=} callback\n   */\n  constructor(deps, button, options, callback) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_,\n      'iframe',\n      iframeAttributes\n    ));\n\n    /** @private @const {!Element} */\n    this.button_ = button;\n\n    /** @private {!../api/subscriptions.SmartButtonOptions} */\n    this.options_ = options;\n\n    /** @private const {function()=} */\n    this.callback_ = callback;\n\n    /** @private @const {string} */\n    this.src_ = feUrl('/smartboxiframe');\n\n    const frontendArguments = {\n      'productId': this.deps_.pageConfig().getProductId(),\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'theme': (this.options_ && this.options_.theme) || 'light',\n      'lang': (this.options_ && this.options_.lang) || 'en',\n    };\n    const messageTextColor = this.options_ && this.options_.messageTextColor;\n    if (messageTextColor) {\n      frontendArguments['messageTextColor'] = messageTextColor;\n    }\n\n    /** @private @const {!Object} */\n    this.args_ = feArgs(frontendArguments);\n  }\n\n  /**\n   * @param {SmartBoxMessage} smartBoxMessage\n   */\n  handleSmartBoxClick_(smartBoxMessage) {\n    if (smartBoxMessage && smartBoxMessage.getIsClicked()) {\n      if (!this.callback_) {\n        throw new Error('No callback!');\n      }\n      this.callback_();\n      return;\n    }\n  }\n\n  /**\n   * Make a call to build button content and listens for the 'click' message.\n   * @return {!Element}\n   */\n  start() {\n    setImportantStyles(this.iframe_, {\n      'opacity': 1,\n      'position': 'absolute',\n      'top': 0,\n      'bottom': 0,\n      'left': 0,\n      'height': '100%',\n      'right': 0,\n      'width': '100%',\n    });\n    this.button_.appendChild(this.iframe_);\n    const args = this.activityPorts_.addDefaultArguments(this.args_);\n    this.activityPorts_.openIframe(this.iframe_, this.src_, args).then(port => {\n      port.on(SmartBoxMessage, this.handleSmartBoxClick_.bind(this));\n    });\n    return this.iframe_;\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PREFIX = 'subscribe.google.com';\n\nexport class Storage {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Object<string, !Promise<?string>>} */\n    this.values_ = {};\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise<?string>}\n   */\n  get(key) {\n    if (!this.values_[key]) {\n      this.values_[key] = new Promise(resolve => {\n        if (this.win_.sessionStorage) {\n          try {\n            resolve(this.win_.sessionStorage.getItem(storageKey(key)));\n          } catch (e) {\n            // Ignore error.\n            resolve(null);\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    }\n    return this.values_[key];\n  }\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   * @return {!Promise}\n   */\n  set(key, value) {\n    this.values_[key] = Promise.resolve(value);\n    return new Promise(resolve => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.setItem(storageKey(key), value);\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise}\n   */\n  remove(key) {\n    delete this.values_[key];\n    return new Promise(resolve => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.removeItem(storageKey(key));\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n}\n\n/**\n * @param {string} key\n * @return {string}\n */\nfunction storageKey(key) {\n  return PREFIX + ':' + key;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActivityIframeView} from '../ui/activity-iframe-view';\nimport {DeferredAccountCreationResponse} from '../api/deferred-account-creation';\nimport {feArgs, feUrl} from './services';\n\nconst NO_PROMISE_ERR = 'No account promise provided';\n\nexport class WaitForSubscriptionLookupApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Promise} accountPromise\n   */\n  constructor(deps, accountPromise) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private {!Promise} */\n    this.accountPromise_ = accountPromise || Promise.reject(NO_PROMISE_ERR);\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n      this.win_,\n      this.activityPorts_,\n      feUrl('/waitforsubscriptionlookupiframe'),\n      feArgs({\n        publicationId: deps.pageConfig().getPublicationId(),\n        productId: deps.pageConfig().getProductId(),\n      }),\n      /* shouldFadeBody */ true,\n      /* hasLoadingIndicator */ true\n    );\n  }\n\n  /**\n   * Starts the Login Flow.\n   * @return {!Promise}\n   */\n  start() {\n    this.openViewPromise_ = this.dialogManager_.openView(\n      this.activityIframeView_\n    );\n\n    return this.accountPromise_.then(\n      account => {\n        // Account was found.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return account;\n      },\n      reason => {\n        this.dialogManager_.completeView(this.activityIframeView_);\n        throw reason;\n      }\n    );\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Message} from '../proto/api_messages'; // eslint-disable-line no-unused-vars\nimport {View} from '../components/view';\nimport {acceptPortResultData} from '../utils/activity-utils';\nimport {createElement} from '../utils/dom';\nimport {isCancelError} from '../utils/errors';\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n/**\n * Class to build and render Activity iframe view.\n */\nexport class ActivityIframeView extends View {\n  /**\n   * @param {!Window} win\n   * @param {!../components/activities.ActivityPorts} activityPorts\n   * @param {string} src\n   * @param {!Object<string, ?>=} args\n   * @param {boolean=} shouldFadeBody\n   * @param {boolean=} hasLoadingIndicator\n   */\n  constructor(\n    win,\n    activityPorts,\n    src,\n    args,\n    shouldFadeBody = false,\n    hasLoadingIndicator = false\n  ) {\n    super();\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_,\n      'iframe',\n      iframeAttributes\n    ));\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args || {};\n\n    /** @private @const {boolean} */\n    this.shouldFadeBody_ = shouldFadeBody;\n\n    /** @private @const {boolean} */\n    this.hasLoadingIndicator_ = hasLoadingIndicator;\n\n    /** @private {?../components/activities.ActivityIframePort} */\n    this.port_ = null;\n\n    /**\n     * @private\n     * {?function<!web-activities/activity-ports.ActivityIframePort|!Promise>}\n     */\n    this.portResolver_ = null;\n\n    /**\n     * @private @const\n     * {!Promise<!web-activities/activity-ports.ActivityIframePort>}\n     */\n    this.portPromise_ = new Promise(resolve => {\n      this.portResolver_ = resolve;\n    });\n  }\n\n  /** @override */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /** @override */\n  init(dialog) {\n    return this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then(port => this.onOpenIframeResponse_(port, dialog));\n  }\n\n  /**\n   * Returns if document should fade for this view.\n   * @return {boolean}\n   */\n  shouldFadeBody() {\n    return this.shouldFadeBody_;\n  }\n\n  /**\n   * Returns if the view shows loading indicator.\n   * @return {boolean}\n   */\n  hasLoadingIndicator() {\n    return this.hasLoadingIndicator_;\n  }\n\n  /**\n   * @param {!../components/activities.ActivityIframePort} port\n   * @param {!../components/dialog.Dialog} dialog\n   * @return {!Promise}\n   */\n  onOpenIframeResponse_(port, dialog) {\n    this.port_ = port;\n    this.portResolver_(port);\n\n    this.port_.onResizeRequest(height => {\n      dialog.resizeView(this, height);\n    });\n\n    return this.port_.whenReady();\n  }\n\n  /**\n   * @return {!Promise<!../components/activities.ActivityIframePort>}\n   * @private\n   */\n  getPortPromise_() {\n    return this.portPromise_;\n  }\n\n  /**\n   * @param {!function(new: T)}  message\n   * @param {function(../proto/api_messages.Message)} callback\n   * @template T\n   */\n  on(message, callback) {\n    this.getPortPromise_().then(port => {\n      port.on(message, callback);\n    });\n  }\n\n  /**\n   * @param {!../proto/api_messages.Message} request\n   */\n  execute(request) {\n    this.getPortPromise_().then(port => {\n      port.execute(request);\n    });\n  }\n\n  /**\n   * Accepts results from the caller.\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.getPortPromise_().then(port => port.acceptResult());\n  }\n\n  /**\n   * Accepts results from the caller and verifies origin.\n   * @param {string} requireOrigin\n   * @param {boolean} requireOriginVerified\n   * @param {boolean} requireSecureChannel\n   * @return {!Promise<!Object>}\n   */\n  acceptResultAndVerify(\n    requireOrigin,\n    requireOriginVerified,\n    requireSecureChannel\n  ) {\n    return this.getPortPromise_().then(port => {\n      return acceptPortResultData(\n        port,\n        requireOrigin,\n        requireOriginVerified,\n        requireSecureChannel\n      );\n    });\n  }\n\n  /**\n   * Completes the flow.\n   * @return {!Promise}\n   */\n  whenComplete() {\n    return this.acceptResult();\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  onCancel(callback) {\n    this.acceptResult().catch(reason => {\n      if (isCancelError(reason)) {\n        callback();\n      }\n      throw reason;\n    });\n  }\n\n  /** @override */\n  resized() {\n    if (this.port_) {\n      this.port_.resized();\n    }\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\n\n/**\n * Loading indicator class. Builds the loading indicator view to be injected in\n * parent element <iframe class=\"swg-dialog\"> element. Provides methods to\n * show/hide loading indicator.\n */\nexport class LoadingView {\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.loadingContainer_ = createElement(\n      this.doc_,\n      'swg-loading-container',\n      {}\n    );\n\n    /** @private @const {!Element} */\n    this.loading_ = createElement(this.doc_, 'swg-loading', {});\n    this.loadingContainer_.appendChild(this.loading_);\n\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n\n    // Build the animated loading indicator.\n    this.buildLoadingIndicator_();\n  }\n\n  /**\n   * Gets the populated loading container.\n   * @return {!Element}\n   */\n  getElement() {\n    return this.loadingContainer_;\n  }\n\n  /**\n   * Shows the loading indicator within the container element.\n   */\n  show() {\n    this.loadingContainer_.style.removeProperty('display');\n  }\n\n  /**\n   * Hides the loading indicator within the container element.\n   */\n  hide() {\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n  }\n\n  /**\n   * Populates the loading indivicator. The populated element\n   * can be added in any view, when required.\n   * @private\n   */\n  buildLoadingIndicator_() {\n    const loadingContainer = this.loading_;\n\n    const loadingIndicatorTopContainer = createElement(\n      this.doc_,\n      'swg-loading-animate',\n      {}\n    );\n    loadingContainer.appendChild(loadingIndicatorTopContainer);\n\n    const loadingIndicatorChildContainer = createElement(\n      this.doc_,\n      'swg-loading-image',\n      {}\n    );\n    loadingIndicatorTopContainer.appendChild(loadingIndicatorChildContainer);\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from '../utils/dom';\nimport {resetStyles, setImportantStyles} from '../utils/style';\nimport {transition} from '../utils/animation';\n\n/** @const {!Object<string, string|number>} */\nexport const toastImportantStyles = {\n  'height': 0,\n};\n\n/** @typedef {{\n *    text: string,\n *    action: ({label: string, handler: function()}|undefined)\n *  }}\n */\nexport let ToastSpecDef;\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n  'class': 'swg-toast',\n};\n\n/**\n * The class Notification toast.\n */\nexport class Toast {\n  /**\n   * @param {!../runtime/deps.DepsDef} deps\n   * @param {string} src\n   * @param {!Object<string, ?>} args\n   */\n  constructor(deps, src, args) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!../components/activities.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = /** @type {!HTMLIFrameElement} */ (createElement(\n      this.doc_.getWin().document,\n      'iframe',\n      iframeAttributes\n    ));\n\n    setImportantStyles(this.iframe_, toastImportantStyles);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise(resolve => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * Returns the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Opens the notification toast.\n   * @return {!Promise}\n   */\n  open() {\n    this.doc_.getBody().appendChild(this.iframe_); // Fires onload.\n    return this.buildToast_();\n  }\n\n  /**\n   * Builds the content of the iframe. On load, animates the toast.\n   */\n  buildToast_() {\n    const toastDurationSeconds = 7;\n    return this.activityPorts_\n      .openIframe(this.iframe_, this.src_, this.args_)\n      .then(port => {\n        return port.whenReady();\n      })\n      .then(() => {\n        resetStyles(this.iframe_, ['height']);\n\n        this.animate_(() => {\n          setImportantStyles(this.iframe_, {\n            'transform': 'translateY(100%)',\n            'opactiy': 1,\n            'visibility': 'visible',\n          });\n          return transition(\n            this.iframe_,\n            {\n              'transform': 'translateY(0)',\n              'opacity': 1,\n              'visibility': 'visible',\n            },\n            400,\n            'ease-out'\n          );\n        });\n\n        // Close the Toast after the specified duration.\n        this.doc_.getWin().setTimeout(() => {\n          this.close();\n        }, (toastDurationSeconds + 1) * 1000);\n      });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return (this.animating_ = wait\n      .then(\n        () => {\n          return callback();\n        },\n        () => {\n          // Ignore errors to make sure animations don't get stuck.\n        }\n      )\n      .then(() => {\n        this.animating_ = null;\n      }));\n  }\n\n  /**\n   * Closes the toast.\n   * @return {!Promise}\n   */\n  close() {\n    return this.animate_(() => {\n      // Remove the toast from the DOM after animation is complete.\n      this.doc_.getWin().setTimeout(() => {\n        this.doc_.getBody().removeChild(this.iframe_);\n        return Promise.resolve();\n      }, 500);\n\n      return transition(\n        this.iframe_,\n        {\n          'transform': 'translateY(100%)',\n          'opacity': 1,\n          'visibility': 'visible',\n        },\n        400,\n        'ease-out'\n      );\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!../components/activities.ActivityPortDef} port\n * @param {string} requireOrigin\n * @param {boolean} requireOriginVerified\n * @param {boolean} requireSecureChannel\n * @return {!Promise<!Object>}\n */\nexport function acceptPortResultData(\n  port,\n  requireOrigin,\n  requireOriginVerified,\n  requireSecureChannel\n) {\n  return port.acceptResult().then(result => {\n    if (\n      result.origin != requireOrigin ||\n      (requireOriginVerified && !result.originVerified) ||\n      (requireSecureChannel && !result.secureChannel)\n    ) {\n      throw new Error('channel mismatch');\n    }\n    return result.data;\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {setImportantStyles} from './style';\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nexport function transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise(resolve => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(\n        el,\n        Object.assign(\n          {\n            'transition': `transform ${tr}, opacity ${tr}`,\n          },\n          props\n        )\n      );\n    });\n  }).then(() => {\n    setImportantStyles(el, {\n      'transition': previousTransitionValue,\n    });\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_'};\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nexport function utf8DecodeSync(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8EncodeSync(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, ch => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/]/g, ch => base64UrlEncodeSubs[ch]);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!Document} doc\n * @return {string}\n */\nfunction getReadyState(doc) {\n  return /** @type {string} */ (doc['readyState']);\n}\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isDocumentReady(doc) {\n  const readyState = getReadyState(doc);\n  return readyState != 'loading' && readyState != 'uninitialized';\n}\n\n/**\n * Whether the document has loaded all the css and sub-resources.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentComplete(doc) {\n  return getReadyState(doc) == 'complete';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nexport function onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Returns a promise that is resolved when document is complete.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentComplete(doc) {\n  return new Promise(resolve => {\n    onDocumentState(doc, isDocumentComplete, resolve);\n  });\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\nimport {setStyles} from './style';\n\n/** @const @enum{string} */\nexport const styleLinkAttrs = {\n  'rel': 'stylesheet',\n  'type': 'text/css',\n};\n\n/** @const {string} */\nexport const styleType = 'text/css';\n\n/** @const {string} */\nexport const styleExistsQuerySelector = 'link[rel=stylesheet][href]';\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!Object<string, string|number|boolean|!Object<string, string|number|boolean>>} attributes\n * @return {!Element} updated element.\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    if (attr == 'style') {\n      setStyles(\n        element,\n        /** @type {!Object<string, string|boolean|number>} */\n        (attributes[attr])\n      );\n    } else {\n      element.setAttribute(\n        attr,\n        /** @type {string|boolean|number} */ (attributes[attr])\n      );\n    }\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!Object<string, string>} attributes\n * @param {?(string|!Node|!ArrayLike<!Node>|!Array<!Node>)=} content\n * @return {!Element} created element.\n */\nexport function createElement(doc, tagName, attributes, content) {\n  const element = doc.createElement(tagName);\n  addAttributesToElement(element, attributes);\n  if (content != null) {\n    if (typeof content == 'string') {\n      element.textContent = content;\n    } else if (content.nodeType) {\n      element.appendChild(content);\n    } else if ('length' in content) {\n      for (let i = 0; i < content.length; i++) {\n        element.appendChild(content[i]);\n      }\n    } else {\n      assert(false, 'Unsupported content: %s', content);\n    }\n  }\n  return element;\n}\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n/**\n * Removes all children from the parent element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  parent.textContent = '';\n}\n\n/**\n * Injects the provided styles in the HEAD section of the document.\n * @param {!../model/doc.Doc} doc The document object.\n * @param {string} styleText The style string.\n * @return {!Element}\n */\nexport function injectStyleSheet(doc, styleText) {\n  const styleElement = createElement(doc.getWin().document, 'style', {\n    'type': styleType,\n  });\n  styleElement.textContent = styleText;\n  doc.getHead().appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node=} stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while (\n    (currentElement = currentElement.parentNode) &&\n    currentElement != stopNode\n  );\n  return false;\n}\n\n/**\n * Polyfill of the `Node.isConnected` API. See\n * https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected.\n * @param {!Node} node\n * @return {boolean}\n */\nexport function isConnected(node) {\n  // Ensure that node is attached if specified. This check uses a new and\n  // fast `isConnected` API and thus only checked on platforms that have it.\n  // See https://www.chromestatus.com/feature/5676110549352448.\n  if ('isConnected' in node) {\n    return node['isConnected'];\n  }\n  // Polyfill.\n  const root = node.ownerDocument && node.ownerDocument.documentElement;\n  return (root && root.contains(node)) || false;\n}\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createAbortError, isAbortError} from 'web-activities/activity-ports';\n\n/**\n * Whether the specified error is an AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {*} error\n * @return {boolean}\n */\nexport function isCancelError(error) {\n  return isAbortError(error);\n}\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} message\n * @return {!DOMException}\n */\nexport function createCancelError(win, message) {\n  return createAbortError(win, message);\n}\n\n/**\n * A set of error utilities combined in a class to allow easy stubbing in tests.\n */\nexport class ErrorUtils {\n  /**\n   * @param {!Error} error\n   */\n  static throwAsync(error) {\n    setTimeout(() => {\n      throw error;\n    });\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!Object<string, string>} map\n * @param {?string|?Element} langOrElement\n * @return {?string}\n */\nexport function msg(map, langOrElement) {\n  const lang = !langOrElement\n    ? ''\n    : typeof langOrElement == 'string'\n    ? langOrElement\n    : langOrElement.lang ||\n      (langOrElement.ownerDocument &&\n        langOrElement.ownerDocument.documentElement.lang);\n  let search = ((lang && lang.toLowerCase()) || 'en').replace(/_/g, '-');\n  while (search) {\n    if (search in map) {\n      return map[search];\n    }\n    const dash = search.lastIndexOf('-');\n    search = dash != -1 ? search.substring(0, dash) : '';\n  }\n  // \"en\" is always default.\n  return map['en'];\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object, the returned value will\n * be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (!part) {\n      value = undefined;\n      break;\n    }\n    if (\n      !isObject(value) ||\n      value[part] === undefined ||\n      !hasOwnProperty(value, part)\n    ) {\n      value = undefined;\n      break;\n    }\n    value = value[part];\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */ (JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (onFailed) {\n      onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n    /** @type {!Object} */ (obj),\n    key\n  );\n}\n\n/**\n * Converts the passed string into a JSON object (if possible) and returns the\n * value of the propertyName on that object.\n * @param {string} jsonString\n * @param {string} propertyName\n * @return {*}\n */\nexport function getPropertyFromJsonString(jsonString, propertyName) {\n  const json = tryParseJson(jsonString);\n  return (json && json[propertyName]) || null;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {base64UrlDecodeToBytes, utf8DecodeSync} from './bytes';\nimport {tryParseJson} from './json';\n\n/**\n * @typedef {{\n *   header: (?JsonObject|undefined),\n *   payload: (?JsonObject|undefined),\n *   verifiable: string,\n *   sig: string,\n * }}\n */\nlet JwtTokenInternalDef;\n\n/**\n * Provides helper methods to decode and verify JWT tokens.\n */\nexport class JwtHelper {\n  constructor() {}\n\n  /**\n   * Decodes JWT token and returns its payload.\n   * @param {string} encodedToken\n   * @return {?JsonObject|undefined}\n   */\n  decode(encodedToken) {\n    return this.decodeInternal_(encodedToken).payload;\n  }\n\n  /**\n   * @param {string} encodedToken\n   * @return {!JwtTokenInternalDef}\n   * @private\n   */\n  decodeInternal_(encodedToken) {\n    // See https://jwt.io/introduction/\n    /**\n     * Throws error about invalid token.\n     */\n    function invalidToken() {\n      throw new Error(`Invalid token: \"${encodedToken}\"`);\n    }\n\n    // Encoded token has three parts: header.payload.sig\n    // Note! The padding is not allowed by JWT spec:\n    // http://self-issued.info/docs/draft-goland-json-web-token-00.html#rfc.section.5\n    const parts = encodedToken.split('.');\n    if (parts.length != 3) {\n      invalidToken();\n    }\n    const headerUtf8Bytes = base64UrlDecodeToBytes(parts[0]);\n    const payloadUtf8Bytes = base64UrlDecodeToBytes(parts[1]);\n    return {\n      header: tryParseJson(utf8DecodeSync(headerUtf8Bytes), invalidToken),\n      payload: tryParseJson(utf8DecodeSync(payloadUtf8Bytes), invalidToken),\n      verifiable: `${parts[0]}.${parts[1]}`,\n      sig: parts[2],\n    };\n  }\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Debug logger, only log message if #swg.log=1\n * @param {...*} var_args [decription]\n */\n\n/* eslint-disable */\n\nfunction debugLog(var_args) {\n  if (/swg.debug=1/.test(self.location.hash)) {\n    const logArgs = Array.prototype.slice.call(arguments, 0);\n    logArgs.unshift('[Subscriptions]');\n    log.apply(log, logArgs);\n  }\n}\n\n/**\n * @param  {...*} var_args [description]\n */\nfunction log(var_args) {\n  console.log.apply(console, arguments);\n}\n\n/**\n * @param  {...*} var_args [description]\n */\nfunction warn(var_args) {\n  console.warn.apply(console, arguments);\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {string=} message The assertion message\n * @param {...*} var_args Arguments substituted into %s in the message.\n * @return {T} The value of shouldBeTrueish.\n * @template T\n */\nfunction assert(shouldBeTrueish, message, var_args) {\n  let firstElement;\n  if (!shouldBeTrueish) {\n    message = message || 'Assertion failed';\n    const splitMessage = message.split('%s');\n    const first = splitMessage.shift();\n    let formatted = first;\n    const messageArray = [];\n    pushIfNonEmpty(messageArray, first);\n    for (let i = 2; i < arguments.length; i++) {\n      const val = arguments[i];\n      if (val && val.tagName) {\n        firstElement = val;\n      }\n      const nextConstant = splitMessage.shift();\n      messageArray.push(val);\n      pushIfNonEmpty(messageArray, nextConstant.trim());\n      formatted += toString(val) + nextConstant;\n    }\n    const e = new Error(formatted);\n    e.fromAssert = true;\n    e.associatedElement = firstElement;\n    e.messageArray = messageArray;\n    throw e;\n  }\n  return shouldBeTrueish;\n}\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\nmodule.exports = {\n  assert,\n  debugLog,\n  warn,\n  log\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a map-like object.\n * If initial is provided, copies its own properties into the\n * newly created object.\n * @param {Object=} initial This should typically be an object literal.\n * @return {!Object}\n * @template T\n */\nexport function map(initial) {\n  const obj = Object.create(null);\n  if (initial) {\n    Object.assign(obj, initial);\n  }\n  return obj;\n}\n\n/**\n * Implements `Array.find()` method that's not yet available in all browsers.\n *\n * @param {?Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {?T}\n * @template T\n */\nexport function findInArray(array, predicate) {\n  if (!array) {\n    return null;\n  }\n  const len = array.length || 0;\n  if (len > 0) {\n    for (let i = 0; i < len; i++) {\n      const other = array[i];\n      if (predicate(other, i, array)) {\n        return other;\n      }\n    }\n  }\n  return null;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElement} from './dom';\n\nexport class Preconnect {\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @param {string} url\n   */\n  preconnect(url) {\n    this.pre_(url, 'preconnect');\n  }\n\n  /**\n   * @param {string} url\n   */\n  dnsPrefetch(url) {\n    this.pre_(url, 'dns-prefetch');\n  }\n\n  /**\n   * @param {string} url\n   */\n  prefetch(url) {\n    this.pre_(url, 'preconnect prefetch');\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} as\n   */\n  preload(url, as) {\n    this.pre_(url, 'preconnect preload', as);\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} rel\n   * @param {?string=} as\n   * @private\n   */\n  pre_(url, rel, as) {\n    // <link rel=\"prefetch\" href=\"...\" as=\"\">\n    const linkEl = createElement(this.doc_, 'link', {\n      'rel': rel,\n      'href': url,\n    });\n    if (as) {\n      linkEl.setAttribute('as', as);\n    }\n    this.doc_.head.appendChild(linkEl);\n  }\n}\n","/**\n * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an array of random values.  The length of the array is numInts.  Each\n * int will be >= 0 and < maxVal.\n * @param {!number} numInts\n * @param {!number} maxVal\n */\nexport function getRandomInts(numInts, maxVal) {\n  // Ensure array type is appropriate for the max value (performance)\n  const arr =\n    maxVal < 256\n      ? new Uint8Array(numInts)\n      : maxVal < 32768\n      ? new Uint16Array(numInts)\n      : new Uint32Array(numInts);\n\n  if (crypto && crypto.getRandomValues) {\n    crypto.getRandomValues(arr);\n    for (let i = arr.length - 1; i > -1; i--) {\n      arr[i] = arr[i] % maxVal;\n    }\n  } else {\n    // For older browsers\n    for (let i = arr.length - 1; i > -1; i--) {\n      arr[i] = Math.floor(Math.random() * maxVal);\n    }\n  }\n\n  return arr;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getRandomInts} from './random';\n\nconst CHARS = '0123456789ABCDEF';\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes removed and character after to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {!function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, maxIterations = 1) {\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const length = str.length;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n\n/**\n * Ensures the passed value is safe to use for character 19 per rfc4122,\n * sec. 4.1.5.  \"Sets the high bits of clock sequence\".\n * @param {!number} v\n */\nfunction getChar19(v) {\n  return CHARS[(v & 0x3) | 0x8];\n}\n\n/**\n * The returned identifier will always be an 8 digit valid hexidecimal number\n * and will be unique for each MS within a given month.\n * @return {string}\n */\nfunction getMonthlyTimeIdentifier() {\n  const hexTime = Date.now().toString(16);\n  return hexTime.substring(hexTime.length - 8).toUpperCase();\n}\n\n/**\n * Generates a RFC 4122 V4 UUID. Ex: \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n * The first 8 digits are unique for the millisecond of the month.  The rest\n * are randomly generated.\n */\nexport function getUuid() {\n  let uuid = getMonthlyTimeIdentifier() + '-';\n  let rIndex = 0;\n  const rands = getRandomInts(23, 16);\n  for (let i = 9; i < 36; i++) {\n    switch (i) {\n      case 13:\n      case 18:\n      case 23:\n        uuid += '-';\n        break;\n      case 14:\n        uuid += '4';\n        break;\n      case 19:\n        uuid += getChar19(rands[rIndex++]);\n        break;\n      default:\n        uuid += CHARS[rands[rIndex++]];\n        break;\n    }\n  }\n  return uuid;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './object.js';\nimport {startsWith} from './string';\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n/**\n * Default styles to be set for top level friendly iframe.\n * Some attributes are not included such as height, left, margin-left; since\n * these attributes are updated by @media queries and having these values\n * defined here as !important does not work on IE/edge browsers.\n * @const {!Object<string, string|number>}\n */\nexport const defaultStyles = {\n  'align-content': 'normal',\n  'animation': 'none',\n  'align-items': 'normal',\n  'align-self': 'auto',\n  'alignment-baseline': 'auto',\n  'backface-visibility': 'hidden',\n  'background-clip': 'border-box',\n  'background-image': 'none',\n  'baseline-shift': '0',\n  'block-size': 'auto',\n  'border': 'none',\n  'border-collapse': 'separate',\n  'bottom': '0',\n  'box-sizing': 'border-box',\n  'break-after': 'auto',\n  'break-before': 'auto',\n  'break-inside': 'auto',\n  'buffered-rendering': 'auto',\n  'caption-side': 'top',\n  'caret-color': 'rgb(51, 51, 51)',\n  'clear': 'none',\n  'color': 'rgb(51, 51, 51)',\n  'color-rendering': 'auto',\n  'column-count': 'auto',\n  'column-fill': 'balance',\n  'column-gap': 'normal',\n  'column-rule-color': 'rgb(51, 51, 51)',\n  'column-rule-style': 'none',\n  'column-rule-width': '0',\n  'column-span': 'none',\n  'column-width': 'auto',\n  'contain': 'none',\n  'counter-increment': 'none',\n  'counter-reset': 'none',\n  'cursor': 'auto',\n  'direction': 'inherit',\n  'display': 'block',\n  'empty-cells': 'show',\n  'filter': 'none',\n  'flex': 'none', // flex-grow, flex-shrink, and flex-basis.\n  'flex-flow': 'row nowrap', // flex-direction, flex-wrap.\n  'float': 'none',\n  'flood-color': 'rgb(0, 0, 0)',\n  'flood-opacity': '1',\n  'font': 'none',\n  'font-size': 'medium',\n  'font-family': '',\n  'height': 'auto',\n  'hyphens': 'manual',\n  'image-rendering': 'auto',\n  'inline-size': '', // Setting to 'auto' will not allow override.\n  'isolation': 'auto',\n  'justify-content': 'normal',\n  'justify-items': 'normal',\n  'justify-self': 'auto',\n  'letter-spacing': 'normal',\n  'lighting-color': 'rgb(255, 255, 255)',\n  'line-break': 'auto',\n  'line-height': 'normal',\n  'mask': 'none',\n  'max-block-size': 'none',\n  'max-height': 'none',\n  'max-inline-size': 'none',\n  'max-width': 'none',\n  'min-block-size': 'none',\n  'min-height': '0',\n  'min-inline-size': '0',\n  'min-width': '0',\n  'mix-blend-mode': 'normal',\n  'object-fit': 'fill', // Important for Safari browser.\n  'offset-distance': 'none', // Chrome only (Experimental).\n  'offset-path': 'none', // Chrome only (Experimental).\n  'offset-rotate': 'auto 0deg', // Chrome only (Experimental).\n  'opacity': '1',\n  'order': '0',\n  'orphans': '2',\n  'outline': 'none',\n  'overflow-anchor': 'auto',\n  'overflow-wrap': 'normal',\n  'overflow': 'visible',\n  'padding': '0',\n  'page': '',\n  'perspective': 'none',\n  'pointer-events': 'auto',\n  'position': 'static',\n  'quotes': '',\n  'resize': 'none',\n  'right': '0',\n  'scroll-behavior': 'auto',\n  'tab-size': '8', // Only Chrome, Safari (Experimental).\n  'table-layout': 'auto',\n  'text-align': 'start',\n  'text-align-last': 'auto',\n  'text-anchor': 'start',\n  'text-combine-upright': 'none',\n  'text-decoration': 'none',\n  'text-indent': '0',\n  'text-orientation': 'mixed',\n  'text-overflow': 'clip',\n  'text-rendering': 'auto',\n  'text-shadow': 'none',\n  'text-size-adjust': 'auto',\n  'text-transform': 'none',\n  'text-underline-position': 'auto',\n  'top': 'auto',\n  'touch-action': 'auto',\n  'transform': 'none',\n  'transition': 'none 0s ease 0s',\n  'unicode-bidi': 'normal',\n  'user-select': 'auto',\n  'vector-effect': 'none',\n  'vertical-align': 'baseline',\n  'visibility': 'visible',\n  'white-space': 'normal',\n  'widows': '2',\n  'word-break': 'normal',\n  'word-spacing': '0',\n  'word-wrap': 'normal',\n  'writing-mode': 'horizontal-tb',\n  'zoom': '1',\n  'z-index': 'auto',\n};\n\n/** @const {string} */\nexport const googleFontsUrl =\n  'https://fonts.googleapis.com/css?family=Google+Sans';\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n      getVendorJsPropertyName(styles, k),\n      styles[k].toString(),\n      'important'\n    );\n  }\n}\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {Element} element\n * @param {string} property\n * @param {?string|number|boolean} value\n * @param {string=} units\n * @param {boolean=} bypassCache\n */\nexport function setStyle(element, property, value, units, bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    bypassCache\n  );\n  if (propertyName) {\n    element.style[propertyName] = /** @type {string} */ (units\n      ? value + units\n      : value);\n  }\n}\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    bypassCache\n  );\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, ?string|number|boolean>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} display\n */\nexport function toggle(element, display) {\n  if (display === undefined) {\n    display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', display ? '' : 'none');\n}\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return value + 'px';\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} y\n * @return {string}\n */\nexport function translate(x, y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof y == 'number') {\n    y = px(y);\n  }\n  return `translate(${x}, ${y})`;\n}\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n    /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g,\n    '($1,$2,$3, 1)'\n  );\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */ (win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */ (style) || map();\n}\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n\n/**\n * Resets all the styles of an element to a given value. Defaults to null.\n * The valid values are 'inherit', 'initial', 'unset' or null.\n * @param {!Element} element\n */\nexport function resetAllStyles(element) {\n  setImportantStyles(element, defaultStyles);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Determines if value is of FormData type.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFormData(value) {\n  return toString(value) === '[object FormData]';\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * True if the value is a function.\n * @param {*} value\n */\nexport function isFunction(value) {\n  return value !== null && typeof value === 'function';\n}\n\n/**\n * True if the value is either true or false.\n * @param {?*} value\n */\nexport function isBoolean(value) {\n  return value === true || value === false;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isArray} from './types';\n\n/**\n  @typedef {{\n    href: string,\n    protocol: string,\n    host: string,\n    hostname: string,\n    port: string,\n    pathname: string,\n    search: string,\n    hash: string,\n    origin: string,\n  }}\n  */\nlet LocationDef;\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {Object<string, !LocationDef>}\n */\nlet cache;\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @return {!LocationDef}\n */\nexport function parseUrl(url) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = Object.create(null));\n  }\n\n  const fromCache = cache[url];\n  if (fromCache) {\n    return fromCache;\n  }\n\n  const info = parseUrlWithA(a, url);\n\n  return (cache[url] = info);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @return {!LocationDef}\n */\nfunction parseUrlWithA(a, url) {\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  /** @type {!LocationDef} */\n  const info = {\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: '', // Set below.\n  };\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if (\n    (info.protocol == 'http:' && info.port == 80) ||\n    (info.protocol == 'https:' && info.port == 443)\n  ) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n  return info;\n}\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nexport function parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n    .split('&')\n    .reduce((params, param) => {\n      const item = param.split('=');\n      const key = decodeURIComponent(item[0] || '');\n      const value = decodeURIComponent(item[1] || '');\n      if (key) {\n        params[key] = value;\n      }\n      return params;\n    }, {});\n}\n\n/**\n * Adds a parameter to a query string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nexport function addQueryParam(url, param, value) {\n  const queryIndex = url.indexOf('?');\n  const fragmentIndex = url.indexOf('#');\n  let fragment = '';\n  if (fragmentIndex != -1) {\n    fragment = url.substring(fragmentIndex);\n    url = url.substring(0, fragmentIndex);\n  }\n  if (queryIndex == -1) {\n    url += '?';\n  } else if (queryIndex < url.length - 1) {\n    url += '&';\n  }\n  url += encodeURIComponent(param) + '=' + encodeURIComponent(value);\n  return url + fragment;\n}\n\n/**\n * Returns the Url including the path and search, without fregment.\n * @param {string} url\n * @return {string}\n */\nexport function getHostUrl(url) {\n  const locationHref = parseUrl(url);\n  return locationHref.origin + locationHref.pathname + locationHref.search;\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './log';\nimport {parseJson} from './json';\nimport {parseUrl} from './url';\nimport {utf8EncodeSync} from './bytes';\n\n/**\n * The \"init\" argument of the Fetch API. Currently, only \"credentials: include\"\n * is implemented.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * @typedef {{\n *   body: (!FormData|string|undefined),\n *   credentials: (string|undefined),\n *   headers: (!Object|undefined),\n *   method: (string|undefined),\n *   responseType: (string)\n * }}\n */\nexport let FetchInitDef;\n\n/** @private @const {!Array<string>} */\nconst allowedMethods_ = ['GET', 'POST'];\n\n/** @private @enum {number} Allowed fetch responses. */\nconst allowedFetchTypes_ = {\n  document: 1,\n  text: 2,\n};\n\n/**\n * A class that polyfills Fetch API.\n */\nexport class Xhr {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Window} */\n    this.win = win;\n  }\n\n  /**\n   * We want to call `fetch_` unbound from any context since it could\n   * be either the native fetch or our polyfill.\n   *\n   * @param {string} input\n   * @param {!FetchInitDef} init\n   * @return {!Promise<!FetchResponse>|!Promise<!Response>}\n   * @private\n   */\n  fetch_(input, init) {\n    // TODO(avimehta): Should the requests go through when page is not visible?\n    assert(typeof input == 'string', 'Only URL supported: %s', input);\n    // In particular, Firefox does not tolerate `null` values for\n    // `credentials`.\n    const creds = init.credentials;\n    assert(\n      creds === undefined || creds == 'include' || creds == 'omit',\n      'Only credentials=include|omit support: %s',\n      creds\n    );\n    // Fallback to xhr polyfill since `fetch` api does not support\n    // responseType = 'document'. We do this so we don't have to do any parsing\n    // and document construction on the UI thread which would be expensive.\n    if (init.responseType == 'document') {\n      return fetchPolyfill(input, init);\n    }\n    return (this.win.fetch || fetchPolyfill).apply(null, arguments);\n  }\n\n  /**\n   * @param {string} input URL\n   * @param {?FetchInitDef} init Fetch options object.\n   * @return {!Promise<!FetchResponse>}\n   */\n  fetch(input, init) {\n    // TODO (avimehta): Figure out if CORS needs be handled the way AMP does it.\n    init = setupInit(init);\n    return this.fetch_(input, init)\n      .then(\n        response => response,\n        reason => {\n          const targetOrigin = parseUrl(input).origin;\n          throw new Error(\n            `XHR Failed fetching (${targetOrigin}/...):`,\n            reason && reason.message\n          );\n        }\n      )\n      .then(response => assertSuccess(response));\n  }\n}\n\n/**\n * Normalized method name by uppercasing.\n * @param {string|undefined} method\n * @return {string}\n * @private\n */\nfunction normalizeMethod_(method) {\n  if (method === undefined) {\n    return 'GET';\n  }\n  method = method.toUpperCase();\n\n  assert(\n    allowedMethods_.includes(method),\n    'Only one of %s is currently allowed. Got %s',\n    allowedMethods_.join(', '),\n    method\n  );\n\n  return method;\n}\n\n/**\n * Sets up and normalizes the FetchInitDef\n *\n * @param {?FetchInitDef=} init Fetch options object.\n * @param {string=} accept The HTTP Accept header value.\n * @return {!FetchInitDef}\n */\nfunction setupInit(init, accept) {\n  init = init || /** @type {FetchInitDef} */ ({});\n  init.method = normalizeMethod_(init.method);\n  init.headers = init.headers || {};\n  if (accept) {\n    init.headers['Accept'] = accept;\n  }\n  return init;\n}\n\n/**\n * A minimal polyfill of Fetch API. It only polyfills what we currently use.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * Notice that the \"fetch\" method itself is not exported as that would require\n * us to immediately support a much wide API.\n *\n * @param {string} input\n * @param {!FetchInitDef} init\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nexport function fetchPolyfill(input, init) {\n  return new Promise(function(resolve, reject) {\n    const xhr = createXhrRequest(init.method || 'GET', input);\n\n    if (init.credentials == 'include') {\n      xhr.withCredentials = true;\n    }\n\n    if (init.responseType in allowedFetchTypes_) {\n      xhr.responseType = init.responseType;\n    }\n\n    if (init.headers) {\n      Object.keys(init.headers).forEach(function(header) {\n        xhr.setRequestHeader(header, init.headers[header]);\n      });\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n        return;\n      }\n      if (xhr.status < 100 || xhr.status > 599) {\n        xhr.onreadystatechange = null;\n        reject(new Error(`Unknown HTTP status ${xhr.status}`));\n        return;\n      }\n\n      // TODO(dvoytenko): This is currently simplified: we will wait for the\n      // whole document loading to complete. This is fine for the use cases\n      // we have now, but may need to be reimplemented later.\n      if (xhr.readyState == /* COMPLETE */ 4) {\n        resolve(new FetchResponse(xhr));\n      }\n    };\n    xhr.onerror = () => {\n      reject(new Error('Network failure'));\n    };\n    xhr.onabort = () => {\n      reject(new Error('Request aborted'));\n    };\n\n    if (init.method == 'POST') {\n      xhr.send(init.body);\n    } else {\n      xhr.send();\n    }\n  });\n}\n\n/**\n * @param {string} method\n * @param {string} url\n * @return {!XMLHttpRequest}\n * @private\n */\nfunction createXhrRequest(method, url) {\n  const xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else {\n    throw new Error('CORS is not supported');\n  }\n  return xhr;\n}\n\n/**\n * If 415 or in the 5xx range.\n * @param {number} status\n */\nfunction isRetriable(status) {\n  return status == 415 || (status >= 500 && status < 600);\n}\n\n/**\n * Returns the response if successful or otherwise throws an error.\n * @param {!FetchResponse} response\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nexport function assertSuccess(response) {\n  return new Promise(resolve => {\n    if (response.ok) {\n      return resolve(response);\n    }\n\n    const {status} = response;\n    const err = new Error(`HTTP error ${status}`);\n    err.retriable = isRetriable(status);\n    // TODO(@jridgewell, #9448): Callers who need the response should\n    // skip processing.\n    err.response = response;\n    throw err;\n  });\n}\n\n/**\n * Response object in the Fetch API.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n */\nexport class FetchResponse {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n\n    /** @const {number} */\n    this.status = this.xhr_.status;\n\n    /** @const {boolean} */\n    this.ok = this.status >= 200 && this.status < 300;\n\n    /** @const {!FetchResponseHeaders} */\n    this.headers = new FetchResponseHeaders(xhr);\n\n    /** @type {boolean} */\n    this.bodyUsed = false;\n\n    /** @type {?ReadableStream} */\n    this.body = null;\n  }\n\n  /**\n   * Create a copy of the response and return it.\n   * @return {!FetchResponse}\n   */\n  clone() {\n    assert(!this.bodyUsed, 'Body already used');\n    return new FetchResponse(this.xhr_);\n  }\n\n  /**\n   * Drains the response and returns the text.\n   * @return {!Promise<string>}\n   * @private\n   */\n  drainText_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    return Promise.resolve(this.xhr_.responseText);\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * text.\n   * @return {!Promise<string>}\n   */\n  text() {\n    return this.drainText_();\n  }\n\n  /**\n   * Drains the response and returns the JSON object.\n   * @return {!Promise<!JsonObject>}\n   */\n  json() {\n    return /** @type {!Promise<!JsonObject>} */ (this.drainText_().then(\n      parseJson\n    ));\n  }\n\n  /**\n   * Reads the xhr responseXML.\n   * @return {!Promise<!Document>}\n   * @private\n   */\n  document_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    assert(\n      this.xhr_.responseXML,\n      'responseXML should exist. Make sure to return ' +\n        'Content-Type: text/html header.'\n    );\n    return /** @type {!Promise<!Document>} */ (Promise.resolve(\n      assert(this.xhr_.responseXML)\n    ));\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * ArrayBuffer.\n   * @return {!Promise<!ArrayBuffer>}\n   */\n  arrayBuffer() {\n    return /** @type {!Promise<!ArrayBuffer>} */ (this.drainText_().then(\n      utf8EncodeSync\n    ));\n  }\n}\n\n/**\n * Provides access to the response headers as defined in the Fetch API.\n * @private Visible for testing.\n */\nexport class FetchResponseHeaders {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n  }\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  get(name) {\n    return this.xhr_.getResponseHeader(name);\n  }\n\n  /**\n   * @param {string} name\n   * @return {boolean}\n   */\n  has(name) {\n    return this.xhr_.getResponseHeader(name) != null;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst MAX_Z_INDEX = 2147483647;\n\nconst Constants = {};\n\n/**\n * Supported environments.\n *\n * @enum {string}\n */\nConstants.Environment = {\n  LOCAL: 'LOCAL',\n  PREPROD: 'PREPROD',\n  PRODUCTION: 'PRODUCTION',\n  SANDBOX: 'SANDBOX',\n  TEST: 'TEST',\n  TIN: 'TIN',\n};\n\n/**\n * Supported payment methods.\n *\n * @enum {string}\n */\nConstants.PaymentMethod = {\n  CARD: 'CARD',\n  TOKENIZED_CARD: 'TOKENIZED_CARD',\n  UPI: 'UPI',\n};\n\n/**\n * Auth methods.\n *\n * @enum {string}\n */\nConstants.AuthMethod = {\n  CRYPTOGRAM_3DS: 'CRYPTOGRAM_3DS',\n  PAN_ONLY: 'PAN_ONLY',\n};\n\n/**\n * Returned result status.\n *\n * @enum {string}\n */\nConstants.ResponseStatus = {\n  CANCELED: 'CANCELED',\n  DEVELOPER_ERROR: 'DEVELOPER_ERROR',\n};\n\n/**\n * Supported total price status.\n *\n * @enum {string}\n */\nConstants.TotalPriceStatus = {\n  ESTIMATED: 'ESTIMATED',\n  FINAL: 'FINAL',\n  NOT_CURRENTLY_KNOWN: 'NOT_CURRENTLY_KNOWN',\n};\n\n/**\n * Supported Google Pay payment button type.\n *\n * @enum {string}\n */\nConstants.ButtonType = {\n  SHORT: 'short',\n  LONG: 'long',\n};\n\n/**\n * Supported button colors.\n *\n * @enum {string}\n */\nConstants.ButtonColor = {\n  DEFAULT: 'default',  // Currently defaults to black.\n  BLACK: 'black',\n  WHITE: 'white',\n};\n\n/**\n * Id attributes.\n *\n * @enum {string}\n */\nConstants.Id = {\n  POPUP_WINDOW_CONTAINER: 'popup-window-container',\n};\n\n/** @const {string} */\nConstants.STORAGE_KEY_PREFIX = 'google.payments.api.storage';\n\n/** @const {string} */\nConstants.IS_READY_TO_PAY_RESULT_KEY =\n    Constants.STORAGE_KEY_PREFIX + '.isreadytopay.result';\n\n/** @const {string} */\nConstants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY =\n    Constants.STORAGE_KEY_PREFIX + '.upi.canMakePaymentCache';\n\n\nConstants.CLASS_PREFIX = 'google-payments-';\nConstants.IFRAME_ACTIVE_CONTAINER_CLASS =\n    `${Constants.CLASS_PREFIX}activeContainer`;\nConstants.IFRAME_CONTAINER_CLASS = `${Constants.CLASS_PREFIX}dialogContainer`;\nConstants.IFRAME_STYLE_CENTER_CLASS = `${Constants.CLASS_PREFIX}dialogCenter`;\nConstants.IFRAME_STYLE_CLASS = `${Constants.CLASS_PREFIX}dialog`;\n\nConstants.IFRAME_STYLE = `\n.${Constants.IFRAME_STYLE_CLASS} {\n    animation: none 0s ease 0s 1 normal none running;\n    background: none 0 0 / auto repeat scroll padding-box border-box #fff;\n    background-blend-mode: normal;\n    border: 0 none #333;\n    border-radius: 8px 8px 0 0;\n    border-collapse: separate;\n    bottom: 0;\n    box-shadow: #808080 0 3px 0 0, #808080 0 0 22px;\n    box-sizing: border-box;\n    letter-spacing: normal;\n    max-height: 100%;\n    overflow: visible;\n    position: fixed;\n    width: 100%;\n    z-index: ${MAX_Z_INDEX};\n    -webkit-appearance: none;\n    left: 0;\n}\n@media (min-width: 480px) {\n  .${Constants.IFRAME_STYLE_CLASS} {\n    width: 480px !important;\n    left: -240px !important;\n    margin-left: calc(100vw - 100vw / 2) !important;\n  }\n}\n.${Constants.IFRAME_CONTAINER_CLASS} {\n  background-color: rgba(0,0,0,0.26);\n  bottom: 0;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  right: 0;\n}\n.iframeContainer {\n  -webkit-overflow-scrolling: touch;\n}\n`;\n\nConstants.IFRAME_STYLE_CENTER = `\n.${Constants.IFRAME_STYLE_CENTER_CLASS} {\n  animation: none 0s ease 0s 1 normal none running;\n  background-blend-mode: normal;\n  background: none 0 0 / auto repeat scroll padding-box border-box #fff;\n  border-collapse: separate;\n  border-radius: 8px;\n  border: 0px none #333;\n  bottom: auto;\n  box-shadow: #808080 0 0 22px;\n  box-sizing: border-box;\n  left: -240px;\n  letter-spacing: normal;\n  margin-left: calc(100vw - 100vw / 2) !important;\n  max-height: 90%;\n  overflow: visible;\n  position: absolute;\n  top: 100%;\n  transform: scale(0.8);\n  width: 480px;\n  z-index: ${MAX_Z_INDEX};\n  -webkit-appearance: none;\n}\n@media (min-height: 667px) {\n  .${Constants.IFRAME_STYLE_CENTER_CLASS} {\n    max-height: 600px;\n  }\n}\n.${Constants.IFRAME_ACTIVE_CONTAINER_CLASS} {\n  top: 50%;\n  transform: scale(1.0) translateY(-50%);\n}\n`;\n\nConstants.GPAY_BUTTON_WITH_CARD_INFO_IMAGE =\n    'background-image: url(https://pay.google.com/gp/p/generate_gpay_btn_img);';\n\nConstants.BUTTON_LOCALE_TO_MIN_WIDTH = {\n  'en': 152,\n  'bg': 163,\n  'cs': 192,\n  'de': 183,\n  'es': 183,\n  'fr': 183,\n  'hr': 157,\n  'id': 186,\n  'ja': 148,\n  'ko': 137,\n  'ms': 186,\n  'nl': 167,\n  'pl': 182,\n  'pt': 193,\n  'ru': 206,\n  'sk': 157,\n  'sl': 211,\n  'sr': 146,\n  'tr': 161,\n  'uk': 207,\n  'zh': 156,\n};\n\n/**\n * Name of the graypane.\n *\n * @const {string}\n */\nConstants.GPAY_GRAYPANE = 'gpay-graypane';\n\n/**\n * Class used for the gpay button.\n *\n * @const {string}\n */\nConstants.GPAY_BUTTON_CLASS = 'gpay-button';\n\nConstants.BUTTON_STYLE = `\n.${Constants.GPAY_BUTTON_CLASS} {\n  background-origin: content-box;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: contain;\n  border: 0px;\n  border-radius: 4px;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 1px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n  cursor: pointer;\n  height: 40px;\n  min-height: 40px;\n  padding: 11px 24px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black {\n  background-color: #000;\n  box-shadow: none;\n  padding: 12px 24px 10px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white {\n  background-color: #fff;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.short {\n  min-width: 90px;\n  width: 160px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.short {\n  background-image: url(https://www.gstatic.com/instantbuy/svg/dark_gpay.svg);\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.short {\n  background-image: url(https://www.gstatic.com/instantbuy/svg/light_gpay.svg);\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.active {\n  background-color: #5f6368;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.black.hover {\n  background-color: #3c4043;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.active {\n  background-color: #fff;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.focus {\n  box-shadow: #e8e8e8 0 1px 1px 0, #e8e8e8 0 1px 3px;\n}\n\n.${Constants.GPAY_BUTTON_CLASS}.white.hover {\n  background-color: #f8f8f8;\n}\n`;\n\nConstants.GPAY_BUTTON_WITH_OFFER_ICON_ADDITIONAL_STYLE = 'position: relative;';\n\nConstants.GPAY_OFFER_ICON_CLASS = 'gpay-offer-icon';\n\nConstants.GPAY_OFFER_ICON_SVG =\n    \"<svg width=\\\"20px\\\" height=\\\"20px\\\" viewBox=\\\"0 0 20 20\\\" \" +\n    \"version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\" +\n    \"\\\"http://www.w3.org/1999/xlink\\\" class=\\\"gpay-offer-icon\\\"><defs><path d=\\\"M19.41,9.58 L10.41,0.58 \" +\n    \"C10.05,0.22 9.55,0 9,0 L2,0 C0.9,0 0,0.9 0,2 L0,9 C0,9.55 0.22,10.05 \" +\n    \"0.59,10.42 L9.59,19.42 C9.95,19.78 10.45,20 11,20 C11.55,20 12.05,19.78 \" +\n    \"12.41,19.41 L19.41,12.41 C19.78,12.05 20,11.55 20,11 C20,10.45 19.77,\" +\n    \"9.94 19.41,9.58 Z\\\" id=\\\"path-1\\\"></path></defs><g id=\\\"buttons_10.05\\\"\" +\n    \" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\" +\n    \"<g id=\\\"Artboard\\\" transform=\\\"translate(-40.000000, -43.000000)\\\">\" +\n    \"<g id=\\\"Group-3\\\" transform=\\\"translate(40.000000, 43.000000)\\\">\" +\n    \"<g id=\\\"Group-2-Copy-2\\\"><g id=\\\"Group-Copy\\\"><g id=\\\"ic_loyalty_24px\\\">\" +\n    \"<mask id=\\\"mask-2\\\" fill=\\\"white\\\"><use xlink:href=\\\"#path-1\\\"></use>\" +\n    \"</mask><use id=\\\"gpay-Shape\\\" fill=\\\"#FF6100\\\" fill-rule=\\\"nonzero\\\" \" +\n    \"xlink:href=\\\"#path-1\\\"></use><path d=\\\"M3.5,5 C2.67,5 2,4.33 2,3.5 C2,\" +\n    \"2.67 2.67,2 3.5,2 C4.33,2 5,2.67 5,3.5 C5,4.33 4.33,5 3.5,5 Z\\\" \" +\n    \"id=\\\"Path\\\" fill=\\\"#FFFFFF\\\" fill-rule=\\\"nonzero\\\" mask=\\\"url(#mask-2)\\\">\" +\n    \"</path></g></g></g><g id=\\\"Group-13-Copy-7\\\" transform=\\\"translate\" +\n    \"(6.000000, 6.000000)\\\" fill=\\\"#FFFFFF\\\" fill-rule=\\\"nonzero\\\">\" +\n    \"<g id=\\\"Group-13-Copy-2\\\"><path d=\\\"M2.15217391,4.55172414 C0.963561082,\" +\n    \"4.55172414 1.99840144e-14,3.53278598 1.99840144e-14,2.27586207 \" +\n    \"C1.99840144e-14,1.01893816 0.963561082,6.30606678e-14 2.15217391,6.\" +\n    \"30606678e-14 C3.34078674,6.30606678e-14 4.30434783,1.01893816 4.30434783,\" +\n    \"2.27586207 C4.30434783,3.53278598 3.34078674,4.55172414 2.15217391,\" +\n    \"4.55172414 Z M2.15217391,3.31034483 C2.69245247,3.31034483 3.13043478,2.\" +\n    \"84719112 3.13043478,2.27586207 C3.13043478,1.70453302 2.69245247,\" +\n    \"1.24137931 2.15217391,1.24137931 C1.61189535,1.24137931 1.17391304,1\" +\n    \".70453302 1.17391304,2.27586207 C1.17391304,2.84719112 1.61189535,3.\" +\n    \"31034483 2.15217391,3.31034483 Z\\\" id=\\\"Combined-Shape\\\"></path>\" +\n    \"<path d=\\\"M6.84782609,9 C5.65921326,9 4.69565217,7.98106184 4.69565217,\" +\n    \"6.72413793 C4.69565217,5.46721402 5.65921326,4.44827586 6.84782609,\" +\n    \"4.44827586 C8.03643892,4.44827586 9,5.46721402 9,6.72413793 C9,7.98106184\" +\n    \" 8.03643892,9 6.84782609,9 Z M6.84782609,7.75862069 C7.38810465,\" +\n    \"7.75862069 7.82608696,7.29546698 7.82608696,6.72413793 C7.82608696\" +\n    \",6.15280888 7.38810465,5.68965517 6.84782609,5.68965517 C6.30754753,\" +\n    \"5.68965517 5.86956522,6.15280888 5.86956522,6.72413793 C5.86956522,\" +\n    \"7.29546698 6.30754753,7.75862069 6.84782609,7.75862069 Z\\\" \" +\n    \"id=\\\"Combined-Shape\\\"></path><polygon id=\\\"Rectangle\\\" \" +\n    \"transform=\\\"translate(4.497720, 4.541938) rotate(34.000000) \" +\n    \"translate(-4.497720, -4.541938) \\\" points=\\\"3.77901778 -0.202295978 \" +\n    \"4.9740273 -0.171019161 5.21642263 9.28617278 4.02141311 9.25489596\\\">\" +\n    \"</polygon></g></g></g></g></g></svg>\";\n\nConstants.GPAY_OFFER_ICON_STYLE = `\n.${Constants.GPAY_OFFER_ICON_CLASS} {\n  position: absolute;\n  right: -5px;\n  top: -5px;\n}\n\n#ic_loyalty_24px use.hover {\n  fill: #FC853B;\n}\n`;\n\nConstants.GPAY_OFFER_DESCRIPTION_CLASS = 'gpay-offer-description';\n\nConstants.GPAY_OFFER_DESCRIPTION_STYLE = `\n@import url(//fonts.googleapis.com/css?family=Google+Sans:500);\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS} {\n  text-align: center;\n  font: 10px 'Google Sans';\n  margin-top: 2px;\n  margin-bottom: 0px;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.gpay-btn-clicked {\n  color: #3C4043;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.short {\n  min-width: 90px;\n  width: 160px;\n}\n\n.${Constants.GPAY_OFFER_DESCRIPTION_CLASS}.long {\n  min-width: 152px;\n  width: 240px;\n}\n`;\n\n/**\n * Class used for the new gpay button with card info (last 4 digits, card net).\n *\n * @const {string}\n */\nConstants.GPAY_BUTTON_CARD_INFO_CLASS = 'gpay-card-info-btn';\n\nConstants.GPAY_BUTTON_CARD_INFO_BUTTON_STYLE = `\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS} {\n    background-origin: content-box;\n    background-position: center center;\n    background-repeat: no-repeat;\n    background-size: contain;\n    border: 0px;\n    border-radius: 4px;\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 1px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n    cursor: pointer;\n    height: 40px;\n    min-height: 40px;\n    padding: 11px 24px;\n    background-color: #000;\n    box-shadow: none;\n    padding: 9px 24px 10px;\n    min-width: 190px;\n    width: 240px;\n  }\n\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS}.active {\n    background-color: #5f6368;\n  }\n\n  .${Constants.GPAY_BUTTON_CARD_INFO_CLASS}.hover {\n    background-color: #3c4043;\n  }\n  `;\n\n\n/**\n * Trusted domain for secure context validation\n *\n * @const {string}\n */\nConstants.TRUSTED_DOMAIN = '.google.com';\n\nexport {Constants};\n\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\n/**\n * Injects the provided style sheet to the document head.\n * @param {string} styleText The stylesheet to be injected.\n * @return {!Element}\n */\nfunction injectStyleSheet(styleText) {\n  const styleElement = document.createElement('style');\n  styleElement.type = 'text/css';\n  styleElement.textContent = styleText;\n  document.head.appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Injects the pay with google iframe.\n * @param {string} iframeClassName The classname of the iFrame wrapper.\n * @return {!{container: !Element, iframe:!HTMLIFrameElement}}\n */\nfunction injectIframe(iframeClassName) {\n  const container = document.createElement('div');\n  container.classList.add(Constants.IFRAME_CONTAINER_CLASS);\n  const iframeContainer = document.createElement('div');\n  iframeContainer.classList.add('iframeContainer');\n  /** @private @const {!HTMLIFrameElement} */\n  const iframe =\n      /** @type {!HTMLIFrameElement} */ (document.createElement('iframe'));\n  iframe.classList.add(iframeClassName);\n  iframe.setAttribute('frameborder', '0');\n  iframe.setAttribute('scrolling', 'no');\n  iframeContainer.appendChild(iframe);\n  container.appendChild(iframeContainer);\n  document.body.appendChild(container);\n  return {'container': container, 'iframe': iframe};\n}\n\nexport {\n  injectStyleSheet,\n  injectIframe,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\nconst MAX_Z_INDEX = 2147483647;\n\n\nclass Graypane {\n\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.element_ = doc.createElement(Constants.GPAY_GRAYPANE);\n    setImportantStyles(this.element_, {\n      'z-index': MAX_Z_INDEX,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n\n    /** @private {?Window} */\n    this.popupWindow_ = null;\n\n    this.element_.addEventListener('click', () => {\n      if (this.popupWindow_) {\n        try {\n          this.popupWindow_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {?Window|undefined} popupWindow\n   * @return {!Promise}\n   */\n  show(popupWindow) {\n    this.popupWindow_ = popupWindow || null;\n    this.doc_.body.appendChild(this.element_);\n    setImportantStyles(this.element_, {\n      'display': 'block',\n      'opacity': 0,\n    });\n    return transition(this.element_, {\n      'opacity': 1,\n    }, 300, 'ease-out');\n  }\n\n  /**\n   * Hides the graypane.\n   * @return {!Promise|undefined}\n   */\n  hide() {\n    this.popupWindow_ = null;\n    if (!this.element_.parentElement) {\n      // Has already been removed or haven't been even added to DOM.\n      // This could be possible after redirect.\n      return;\n    }\n    return transition(this.element_, {\n      'opacity': 0,\n    }, 300, 'ease-out').then(() => {\n      setImportantStyles(this.element_, {'display': 'none'});\n      this.doc_.body.removeChild(this.element_);\n    });\n  }\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n *\n * The `!important` styles are used to avoid accidental specificity overrides\n * from the 3p page's stylesheet.\n *\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nfunction setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(k, styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nfunction transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise(resolve => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(el, Object.assign({\n        'transition': `transform ${tr}, opacity ${tr}`,\n      }, props));\n    });\n  }).then(() => {\n    // Stop transition and make sure that the final properties get set.\n    setImportantStyles(el, Object.assign({\n      'transition': previousTransitionValue,\n    }, props));\n  });\n}\n\n\nexport {Graypane};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PostMessageService} from './post_message_service.js';\n\n/**\n * Supported interactions between iframe and merchant page.\n *\n * @enum {number}\n */\n// Next Id: 10\nconst PostMessageEventType = {\n  IS_READY_TO_PAY: 6,\n  LOG_BUTTON_CLICK: 5,\n  LOG_IS_READY_TO_PAY_API: 0,\n  LOG_LOAD_PAYMENT_DATA_API: 1,\n  LOG_RENDER_BUTTON: 2,\n  LOG_INITIALIZE_PAYMENTS_CLIENT: 9,\n  LOG_PAY_FRAME_REQUESTED: 15,\n  LOG_PAY_FRAME_LOADED: 16,\n  LOG_PAY_FRAME_LOADED_WITH_ALL_JS: 17,\n  LOG_INLINE_PAYMENT_WIDGET_INITIALIZE: 4,\n  LOG_INLINE_PAYMENT_WIDGET_SUBMIT: 3,\n  LOG_INLINE_PAYMENT_WIDGET_DISPLAYED: 7,\n  LOG_INLINE_PAYMENT_WIDGET_HIDDEN: 8,\n};\n\n/**\n * Types of buy flow activity modes.\n *\n * @enum {number}\n */\nconst BuyFlowActivityMode = {\n  UNKNOWN_MODE: 0,\n  IFRAME: 1,\n  POPUP: 2,\n  REDIRECT: 3,\n  ANDROID_NATIVE: 4,\n  PAYMENT_HANDLER: 5,\n};\n\n/**\n * Types of buy flow activity modes.\n *\n * @enum {number}\n */\nconst PublicErrorCode = {\n  UNKNOWN_ERROR_TYPE: 0,\n  INTERNAL_ERROR: 1,\n  DEVELOPER_ERROR: 2,\n  BUYER_ACCOUNT_ERROR: 3,\n  MERCHANT_ACCOUNT_ERROR: 4,\n  UNSUPPORTED_API_VERSION: 5,\n  BUYER_CANCEL: 6,\n};\n\n/**\n * The presentation mode of the buy flow\n *\n * @enum {number}\n */\nconst BuyFlowMode = {\n  PAY_WITH_GOOGLE: 5,\n  SUBSCRIBE_WITH_GOOGLE: 6,\n};\n\n/**\n * Iframe used for logging and prefetching.\n *\n * @type {?Element}\n */\nlet iframe = null;\n\n/** @type {?PostMessageService} */\nlet postMessageService = null;\n\n/** @type {?string} */\nlet environment = null;\n\n/** @type {?string} */\nlet googleTransactionId = null;\n\n/** @type {number} */\nlet originTimeMs = Date.now();\n\n/** @type {?BuyFlowActivityMode} */\nlet buyFlowActivityMode = null;\n\n/** @type {boolean} */\nlet iframeLoaded = false;\n\n/** @type {!Array<!Object>} */\nlet buffer = [];\n\nclass PayFrameHelper {\n  /**\n   * Creates a hidden iframe for logging and appends it to the top level\n   * document.\n   */\n  static load() {\n    if (iframe) {\n      return;\n    }\n    const initOptions =\n        /** @type {!PaymentOptions} */ (window['gpayInitParams']) || {};\n    environment = initOptions.environment || Constants.Environment.PRODUCTION;\n    iframe = document.createElement('iframe');\n    // Pass in origin because document.referrer inside iframe is empty in\n    // certain cases\n    // Can be replaced by iframe.src=... in non Google context.\n    iframe.src = PayFrameHelper.getIframeUrl_(\n            window.location.origin,\n            initOptions.merchantInfo && initOptions.merchantInfo.merchantId);\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_PAY_FRAME_REQUESTED,\n      'clientLatencyStartMs': Date.now(),\n    });\n    iframe.height = '0';\n    iframe.width = '0';\n    iframe.style.display = 'none';\n    iframe.style.visibility = 'hidden';\n    iframe.onload = function() {\n      PayFrameHelper.postMessage({\n        'eventType': PostMessageEventType.LOG_PAY_FRAME_LOADED_WITH_ALL_JS,\n        'clientLatencyStartMs': Date.now(),\n      });\n      PayFrameHelper.iframeLoaded();\n    };\n    // If the body is already loaded, just append the iframe. Otherwise, we wait\n    // until the DOM has loaded to append the iframe, otherwise document.body is\n    // null.\n    if (document.body) {\n      PayFrameHelper.initialize_();\n    } else {\n      document.addEventListener(\n          'DOMContentLoaded', () => PayFrameHelper.initialize_());\n    }\n  }\n\n  /**\n   * Appends the iframe to the DOM and updates the post message service.\n   * @private\n   */\n  static initialize_() {\n    document.body.appendChild(iframe);\n    postMessageService = new PostMessageService(iframe.contentWindow);\n  }\n\n  /**\n   * Sends a message to the iframe and wait for a response.\n   * Uses the responseHandler specified only if the responseType is a match.\n   *\n   * @param {!Object} data\n   * @param {!PostMessageEventType} eventType\n   * @param {string} responseType\n   * @param {function(!Event)} responseHandler\n   */\n  static sendAndWaitForResponse(\n      data, eventType, responseType, responseHandler) {\n    function callback(event) {\n      if (event.data[responseType]) {\n        responseHandler(event);\n        // We only want to process the response from the payframe once.\n        // so stop listening to the event once processed.\n        PayFrameHelper.removeMessageEventListener_(callback);\n      }\n    }\n\n    PayFrameHelper.addMessageEventListener_(callback);\n\n    const postMessageData = Object.assign({'eventType': eventType}, data);\n    PayFrameHelper.postMessage(postMessageData);\n  }\n\n  /**\n   * Add an event listener for listening to messages received.\n   *\n   * @param {function(!Event)} callback\n   * @private\n   */\n  static addMessageEventListener_(callback) {\n    window.addEventListener('message', callback);\n  }\n\n  /**\n   * Remove the event listener for listening to messages.\n   *\n   * @param {function(!Event)} callback\n   * @private\n   */\n  static removeMessageEventListener_(callback) {\n    window.removeEventListener('message', callback);\n  }\n\n  /**\n   * Posts a message to the iframe with the given data.\n   *\n   * @param {!Object} data\n   */\n  static postMessage(data) {\n    if (!iframeLoaded) {\n      buffer.push(data);\n      return;\n    }\n    const postMessageData = Object.assign(\n        {\n          'buyFlowActivityMode': buyFlowActivityMode,\n          'googleTransactionId': googleTransactionId,\n          'originTimeMs': originTimeMs,\n        },\n        data);\n    postMessageService.postMessage(\n        postMessageData, PayFrameHelper.getIframeOrigin_());\n  }\n\n  /**\n   * Sets the activity mode.\n   *\n   * @param {!BuyFlowActivityMode} mode\n   */\n  static setBuyFlowActivityMode(mode) {\n    buyFlowActivityMode = mode;\n  }\n\n  /**\n   * Sets the google transaction id.\n   *\n   * @param {string} txnId\n   */\n  static setGoogleTransactionId(txnId) {\n    googleTransactionId = txnId;\n  }\n\n  /**\n   * Sets the originTimeMs. To be used only for tests.\n   *\n   * @param {number} originTimeMsTemp\n   */\n  static setOriginTimeMs(originTimeMsTemp) {\n    originTimeMs = originTimeMsTemp;\n  }\n\n  /**\n   * Override postMessageService for testing.\n   *\n   * @param {!PostMessageService} messageService\n   */\n  static setPostMessageService(messageService) {\n    postMessageService = messageService;\n  }\n\n  /**\n   * Clears the singleton variables.\n   */\n  static reset() {\n    iframe = null;\n    buffer.length = 0;\n    iframeLoaded = false;\n    buyFlowActivityMode = null;\n  }\n\n  /**\n   * Sets whether the iframe has been loaded or not.\n   *\n   * @param {boolean} loaded\n   */\n  static setIframeLoaded(loaded) {\n    iframeLoaded = loaded;\n  }\n\n  /**\n   * Called whenever the iframe is loaded.\n   */\n  static iframeLoaded() {\n    iframeLoaded = true;\n    buffer.forEach(function(data) {\n      PayFrameHelper.postMessage(data);\n    });\n    buffer.length = 0;\n  }\n\n  /**\n   * Returns the events that have been buffered.\n   *\n   * @return {!Array<!Object>}\n   */\n  static getBuffer() {\n    return buffer;\n  }\n\n  /**\n   * Mocks the iframe as an arbitrary html element instead of actually injecting\n   * it for testing.\n   */\n  static injectIframeForTesting() {\n    PayFrameHelper.reset();\n    iframe = document.createElement('p');\n    PayFrameHelper.iframeLoaded();\n  }\n\n  /**\n   * Returns the payframe origin based on the environment.\n   *\n   * @return {string}\n   * @private\n   */\n  static getIframeOrigin_() {\n    let iframeUrl = 'https://pay';\n    if (environment == Constants.Environment.SANDBOX) {\n      iframeUrl += '.sandbox';\n    } else if (environment == Constants.Environment.PREPROD) {\n      iframeUrl += '-preprod.sandbox';\n    }\n    return iframeUrl + '.google.com';\n  }\n\n  /**\n   * Returns the payframe URL based on the environment.\n   *\n   * @param {string} origin The origin that is opening the payframe.\n   * @param {string|null=} merchantId The merchant id.\n   * @return {string}\n   * @private\n   */\n  static getIframeUrl_(origin, merchantId) {\n    // TrustedResourceUrl header needs to start with https or '//'.\n    const iframeUrl = `https://pay${environment == Constants.Environment.PREPROD ?\n             '-preprod.sandbox' :\n             environment == Constants.Environment.SANDBOX ? '.sandbox' : ''}.google.com/gp/p/ui/payframe?origin=${origin}&mid=%{merchantId}`;\n    return iframeUrl;\n  }\n}\n\n// Start loading pay frame early\nPayFrameHelper.load();\n\nexport {\n  BuyFlowActivityMode,\n  BuyFlowMode,\n  PayFrameHelper,\n  PostMessageEventType,\n  PublicErrorCode,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\nimport {PaymentsRequestDelegate} from './payments_request_delegate.js';\nimport {PaymentsWebActivityDelegate} from './payments_web_activity_delegate.js';\nimport {UpiHandler} from './upi_handler.js';\nimport {ActivityPorts} from 'web-activities/activity-ports';\nimport {\n  BuyFlowActivityMode,\n  BuyFlowMode,\n  PayFrameHelper,\n  PostMessageEventType,\n  PublicErrorCode,\n} from './pay_frame_helper.js';\nimport {\n  apiV2DoesMerchantSupportSpecifiedCardType,\n  chromeSupportsPaymentHandler,\n  chromeSupportsPaymentRequest,\n  doesMerchantSupportOnlyTokenizedCards,\n  getUpiPaymentMethod,\n  validatePaymentOptions,\n  validateIsReadyToPayRequest,\n  validatePaymentDataRequest,\n  validateSecureContext,\n} from './validator.js';\n\nimport {createGoogleTransactionId} from './utils.js';\n\nconst TRUSTED_DOMAINS = [\n  'actions.google.com',\n  'amp-actions.sandbox.google.com',\n  'amp-actions-staging.sandbox.google.com',\n  'amp-actions-autopush.sandbox.google.com',\n  'payments.developers.google.com',\n  'payments.google.com',\n];\n\n/**\n * The client for interacting with the Google Payment APIs.\n * <p>\n * The async refers to the fact that this client supports redirects\n * when using webactivties.\n * <p>\n * If you are using this be sure that this is what you want.\n * <p>\n * In almost all cases PaymentsClient is the better client to use because\n * it exposes a promises based api which is easier to deal with.\n * @final\n */\nclass PaymentsAsyncClient {\n  /**\n   * @param {!PaymentOptions} paymentOptions\n   * @param {function(!Promise<!PaymentData>)} onPaymentResponse\n   * @param {boolean=} useIframe\n   * @param {!ActivityPorts=} activities Can be used to provide a shared\n   *   activities manager. By default, the new manager is created.\n   */\n  constructor(paymentOptions, onPaymentResponse, useIframe, activities) {\n    this.onPaymentResponse_ = onPaymentResponse;\n\n    validatePaymentOptions(paymentOptions);\n\n    /** @private {?number} */\n    this.loadPaymentDataApiStartTimeMs_ = null;\n\n    /** @private @const {string} */\n    this.environment_ =\n      paymentOptions.environment || Constants.Environment.TEST;\n    if (!PaymentsAsyncClient.googleTransactionId_) {\n      PaymentsAsyncClient.googleTransactionId_ =\n        /** @type {string} */ (this.isInTrustedDomain_() &&\n        paymentOptions['i'] &&\n        paymentOptions['i']['googleTransactionId']\n          ? paymentOptions['i']['googleTransactionId']\n          : createGoogleTransactionId(this.environment_));\n    }\n\n    /** @private @const {!PaymentOptions} */\n    this.paymentOptions_ = paymentOptions;\n\n    /** @private @const {!PaymentsClientDelegateInterface} */\n    this.webActivityDelegate_ = new PaymentsWebActivityDelegate(\n      this.environment_,\n      PaymentsAsyncClient.googleTransactionId_,\n      useIframe,\n      activities,\n      paymentOptions['i'] && paymentOptions['i']['redirectKey']\n    );\n\n    /** @private {number} */\n    this.buyFlowMode_ = BuyFlowMode.PAY_WITH_GOOGLE;\n\n    const paymentRequestSupported = chromeSupportsPaymentRequest();\n    // TODO: Remove the temporary hack that disable payments\n    // request for inline flow.\n    /** @private @const {?PaymentsClientDelegateInterface} */\n    this.delegate_ =\n      paymentRequestSupported && !useIframe\n        ? new PaymentsRequestDelegate(this.environment_)\n        : this.webActivityDelegate_;\n\n    this.upiHandler_ = new UpiHandler();\n\n    this.webActivityDelegate_.onResult(this.onResult_.bind(this));\n    this.delegate_.onResult(this.onResult_.bind(this));\n\n    // If web delegate is used anyway then this is overridden in the web\n    // activity delegate when load payment data is called.\n    if (chromeSupportsPaymentHandler()) {\n      PayFrameHelper.setBuyFlowActivityMode(\n        BuyFlowActivityMode.PAYMENT_HANDLER\n      );\n    } else if (paymentRequestSupported) {\n      PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.ANDROID_NATIVE);\n    }\n\n    PayFrameHelper.setGoogleTransactionId(\n      PaymentsAsyncClient.googleTransactionId_\n    );\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_INITIALIZE_PAYMENTS_CLIENT,\n      'clientLatencyStartMs': Date.now(),\n    });\n\n    window.addEventListener('message', event =>\n      this.handleMessageEvent_(event)\n    );\n  }\n\n  /**\n   * Check whether the user can make payments using the Payment API.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @export\n   */\n  isReadyToPay(isReadyToPayRequest) {\n    // Merge with paymentOptions, preferring values from isReadyToPayRequest\n    if (isReadyToPayRequest) {\n      isReadyToPayRequest = Object.assign(\n        {},\n        this.paymentOptions_,\n        isReadyToPayRequest\n      );\n    }\n    const startTimeMs = Date.now();\n    /** @type {?string} */\n    const errorMessage =\n      validateSecureContext() ||\n      validateIsReadyToPayRequest(isReadyToPayRequest);\n    if (errorMessage) {\n      return new Promise((resolve, reject) => {\n        PaymentsAsyncClient.logDevErrorToConsole_('isReadyToPay', errorMessage);\n        PayFrameHelper.postMessage({\n          'eventType': PostMessageEventType.LOG_IS_READY_TO_PAY_API,\n          'error': PublicErrorCode.DEVELOPER_ERROR,\n        });\n        reject({\n          'statusCode': Constants.ResponseStatus.DEVELOPER_ERROR,\n          'statusMessage': errorMessage,\n        });\n      });\n    }\n\n    const isReadyToPayPromise = this.isReadyToPay_(isReadyToPayRequest);\n\n    isReadyToPayPromise.then(response => {\n      PayFrameHelper.postMessage({\n        'eventType': PostMessageEventType.LOG_IS_READY_TO_PAY_API,\n        'clientLatencyStartMs': startTimeMs,\n        'isReadyToPayApiResponse': response,\n      });\n      return response;\n    });\n    return isReadyToPayPromise;\n  }\n\n  /**\n   * Actual implementation of isReadyToPay in a private method so that\n   * we can add callbacks to the promise to measure latencies.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @private\n   */\n  isReadyToPay_(isReadyToPayRequest) {\n    if (this.upiHandler_.isUpiRequest(isReadyToPayRequest)) {\n      return this.upiHandler_.isReadyToPay(isReadyToPayRequest);\n    }\n    if (\n      chromeSupportsPaymentRequest() &&\n      !isNativeDisabledInRequest(isReadyToPayRequest)\n    ) {\n      if (isReadyToPayRequest.apiVersion >= 2) {\n        return this.isReadyToPayApiV2ForChromePaymentRequest_(\n          isReadyToPayRequest\n        );\n      } else {\n        // This is the apiVersion 1 branch.\n        // If the merchant supports only Tokenized cards then just rely on\n        // delegate to give us the result.\n        // This will need to change once b/78519188 is fixed.\n        const webPromise = this.webActivityDelegate_.isReadyToPay(\n          isReadyToPayRequest\n        );\n        const nativePromise = this.delegate_.isReadyToPay(isReadyToPayRequest);\n        if (\n          doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest) &&\n          !chromeSupportsPaymentHandler()\n        ) {\n          return nativePromise;\n        }\n        // Return webIsReadyToPay only if delegateIsReadyToPay has been\n        // executed.\n        return nativePromise.then(() => webPromise);\n      }\n    }\n    const webPromise = this.webActivityDelegate_.isReadyToPay(\n      isReadyToPayRequest\n    );\n    return webPromise;\n  }\n\n  /**\n   * Handle is ready to pay for api v2.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   * @private\n   */\n  isReadyToPayApiV2ForChromePaymentRequest_(isReadyToPayRequest) {\n    let defaultPromise = Promise.resolve({'result': false});\n    if (isReadyToPayRequest.existingPaymentMethodRequired) {\n      defaultPromise = Promise.resolve({\n        'result': false,\n        'paymentMethodPresent': false,\n      });\n    }\n\n    let nativePromise = defaultPromise;\n    if (\n      apiV2DoesMerchantSupportSpecifiedCardType(\n        isReadyToPayRequest,\n        Constants.AuthMethod.CRYPTOGRAM_3DS\n      )\n    ) {\n      // If the merchant supports tokenized cards.\n      // Make a separate call to gms core to check if the user isReadyToPay\n      // with just tokenized cards. We can't pass in PAN_ONLY here\n      // because gms core always returns true for PAN_ONLY.\n      // Leave other payment methods as is.\n      const nativeRtpRequest /** @type {!IsReadyToPayRequest} */ = JSON.parse(\n        JSON.stringify(isReadyToPayRequest)\n      );\n      for (let i = 0; i < nativeRtpRequest.allowedPaymentMethods.length; i++) {\n        if (\n          nativeRtpRequest.allowedPaymentMethods[i].type ==\n          Constants.PaymentMethod.CARD\n        ) {\n          nativeRtpRequest.allowedPaymentMethods[i].parameters[\n            'allowedAuthMethods'\n          ] = [Constants.AuthMethod.CRYPTOGRAM_3DS];\n        }\n      }\n\n      nativePromise = this.delegate_.isReadyToPay(nativeRtpRequest);\n    }\n\n    let webPromise = defaultPromise;\n    if (\n      apiV2DoesMerchantSupportSpecifiedCardType(\n        isReadyToPayRequest,\n        Constants.AuthMethod.PAN_ONLY\n      )\n    ) {\n      webPromise = this.webActivityDelegate_.isReadyToPay(isReadyToPayRequest);\n    }\n\n    // Update session storage with payment handler canMakePayment result but\n    // rely on web delegate for actual response\n    if (chromeSupportsPaymentHandler()) {\n      return nativePromise.then(() => webPromise);\n    }\n\n    return nativePromise.then(nativeResult => {\n      if ((nativeResult && nativeResult['result']) == true) {\n        return nativeResult;\n      }\n      return webPromise;\n    });\n  }\n\n  /**\n   * Prefetch paymentData to speed up loadPaymentData call. Note the provided\n   * paymentDataRequest should exactly be the same as provided in\n   * loadPaymentData to make the loadPaymentData call fast since current\n   * web flow prefetching is based on the full request parameters.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @export\n   */\n  prefetchPaymentData(paymentDataRequest) {\n    /** @type {?string} */\n    const errorMessage =\n      validateSecureContext() || validatePaymentDataRequest(paymentDataRequest);\n    if (errorMessage) {\n      PaymentsAsyncClient.logDevErrorToConsole_(\n        'prefetchPaymentData',\n        errorMessage\n      );\n      return;\n    }\n    this.assignInternalParams_(paymentDataRequest);\n    if (\n      chromeSupportsPaymentRequest() &&\n      !isNativeDisabledInRequest(paymentDataRequest)\n    ) {\n      this.delegate_.prefetchPaymentData(paymentDataRequest);\n    } else {\n      // For non chrome supports always use the hosting page.\n      this.webActivityDelegate_.prefetchPaymentData(paymentDataRequest);\n    }\n  }\n\n  /**\n   * Request PaymentData, which contains necessary infomartion to complete a\n   * payment.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @export\n   */\n  loadPaymentData(paymentDataRequest) {\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_BUTTON_CLICK,\n    });\n    const errorMessage =\n      validateSecureContext() || validatePaymentDataRequest(paymentDataRequest);\n    this.buyFlowMode_ =\n      paymentDataRequest && paymentDataRequest.swg\n        ? BuyFlowMode.SUBSCRIBE_WITH_GOOGLE\n        : BuyFlowMode.PAY_WITH_GOOGLE;\n    if (errorMessage) {\n      this.onPaymentResponse_(\n        new Promise((resolve, reject) => {\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'error': PublicErrorCode.DEVELOPER_ERROR,\n            'buyFlowMode': this.buyFlowMode_,\n          });\n          PaymentsAsyncClient.logDevErrorToConsole_(\n            'loadPaymentData',\n            errorMessage\n          );\n          reject({\n            'statusCode': Constants.ResponseStatus.DEVELOPER_ERROR,\n            'statusMessage': errorMessage,\n          });\n        })\n      );\n      return;\n    }\n\n    // Handler for UPI PaymentMethod\n    // Currently we don't support UPI along with other payment methods, if\n    // UPI is in payment methods then we assume it is UPI only.\n    const upiPaymentMethod = getUpiPaymentMethod(paymentDataRequest);\n    if (upiPaymentMethod) {\n      this.upiHandler_.loadPaymentData(\n        paymentDataRequest,\n        upiPaymentMethod,\n        this.onResult_.bind(this)\n      );\n      return;\n    }\n\n    const isReadyToPayResult = window.sessionStorage.getItem(\n      Constants.IS_READY_TO_PAY_RESULT_KEY\n    );\n    this.loadPaymentDataApiStartTimeMs_ = Date.now();\n    this.assignInternalParams_(paymentDataRequest);\n    // We want to fall back to the web delegate if payment handler is supported\n    // and isReadyToPay bit is not explicitly set to true (fallback to web if\n    // isReadyToPay wasn't called for PH)\n    if (\n      (chromeSupportsPaymentHandler() && isReadyToPayResult !== 'true') ||\n      isNativeDisabledInRequest(paymentDataRequest)\n    ) {\n      this.webActivityDelegate_.loadPaymentData(paymentDataRequest);\n    } else {\n      this.delegate_.loadPaymentData(paymentDataRequest);\n    }\n  }\n\n  /**\n   * Log developer error to console.\n   *\n   * @param {string} apiName\n   * @param {?string} errorMessage\n   * @private\n   */\n  static logDevErrorToConsole_(apiName, errorMessage) {\n    console.error('DEVELOPER_ERROR in ' + apiName + ' : ' + errorMessage);\n  }\n\n  /**\n   * Return a <div> element containing a Google Pay payment button.\n   *\n   * @param {!ButtonOptions=} options\n   * @return {!Element}\n   * @export\n   */\n  createButton(options = {}) {\n    const button = null;\n    // Only log if button was created successfully\n    const startTimeMs = Date.now();\n    PayFrameHelper.postMessage({\n      'eventType': PostMessageEventType.LOG_RENDER_BUTTON,\n      'clientLatencyStartMs': startTimeMs,\n    });\n    return button;\n  }\n\n  /**\n   * @param {!Event} e postMessage event from the AMP page.\n   * @private\n   */\n  handleMessageEvent_(e) {\n    if (this.isInTrustedDomain_()) {\n      // Only handles the event right now if loaded in trusted domain.\n      if (e.data['name'] === 'logPaymentData') {\n        PayFrameHelper.postMessage(e.data['data']);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @return {boolean}\n   */\n  isInTrustedDomain_() {\n    return TRUSTED_DOMAINS.indexOf(window.location.hostname) != -1;\n  }\n\n  /**\n   * Called when load payment data result is returned. This triggers the payment\n   * response callback passed to the client.\n   *\n   * @private\n   */\n  onResult_(response) {\n    response\n      .then(result => {\n        PayFrameHelper.postMessage({\n          'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n          'clientLatencyStartMs': this.loadPaymentDataApiStartTimeMs_,\n          'buyFlowMode': this.buyFlowMode_,\n        });\n      })\n      .catch(result => {\n        if (result['errorCode']) {\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'error': /** @type {!PublicErrorCode} */ (result['errorCode']),\n            'buyFlowMode': this.buyFlowMode_,\n          });\n        } else {\n          // If user closes window we don't get a error code\n          PayFrameHelper.postMessage({\n            'eventType': PostMessageEventType.LOG_LOAD_PAYMENT_DATA_API,\n            'error': PublicErrorCode.BUYER_CANCEL,\n            'buyFlowMode': this.buyFlowMode_,\n          });\n        }\n      });\n    this.onPaymentResponse_(response);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {!PaymentDataRequest}\n   * @private\n   */\n  assignInternalParams_(paymentDataRequest) {\n    const internalParam = {\n      'startTimeMs': Date.now(),\n      'googleTransactionId': PaymentsAsyncClient.googleTransactionId_,\n    };\n    paymentDataRequest['i'] = paymentDataRequest['i']\n      ? Object.assign(internalParam, paymentDataRequest['i'])\n      : internalParam;\n    return paymentDataRequest;\n  }\n}\n\n/** @const {?string} */\nPaymentsAsyncClient.googleTransactionId_;\n\n/**\n * Whether the request specifies that the native support has to be disabled.\n *\n * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n * @return {boolean}\n */\nfunction isNativeDisabledInRequest(request) {\n  return (request['i'] && request['i']['disableNative']) === true;\n}\n\nexport {PaymentsAsyncClient};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An interface which captures what we need to start up buyflow across surfaces.\n * @interface\n */\nclass PaymentsClientDelegateInterface {\n  /**\n   * Check whether the user can make payments using the Payment API.\n   *\n   * @param {!IsReadyToPayRequest} isReadyToPayRequest\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   */\n  isReadyToPay(isReadyToPayRequest) {}\n\n  /**\n   * Prefetch paymentData to speed up loadPaymentData call. Note the provided\n   * paymentDataRequest should exactly be the same as provided in\n   * loadPaymentData to make the loadPaymentData call fast.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   */\n  prefetchPaymentData(paymentDataRequest) {}\n\n  /**\n   * Request PaymentData, which contains necessary infomartion to complete a\n   * payment.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   */\n  loadPaymentData(paymentDataRequest) {}\n\n  /**\n   * @param {function(!Promise<!PaymentData>)} callback\n   */\n  onResult(callback) {}\n}\n\nexport {PaymentsClientDelegateInterface};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Description of this file.\n */\nimport {Constants} from './constants.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\n\n/**\n * An implementation of PaymentsClientDelegateInterface that leverages payment\n * request.\n * @implements {PaymentsClientDelegateInterface}\n */\nclass PaymentsRequestDelegate {\n  /**\n   * @param {string} environment\n   */\n  constructor(environment) {\n    this.environment_ = environment;\n\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.callback_ = null;\n  }\n\n  /** @override */\n  onResult(callback) {\n    this.callback_ = callback;\n  }\n\n  /** @override */\n  isReadyToPay(isReadyToPayRequest) {\n    /** @type{!PaymentRequest} */\n    const paymentRequest = this.createPaymentRequest_(isReadyToPayRequest);\n    return new Promise((resolve, reject) => {\n      paymentRequest.canMakePayment()\n          .then(result => {\n            window.sessionStorage.setItem(\n                Constants.IS_READY_TO_PAY_RESULT_KEY, result.toString());\n            const response = {'result': result};\n            if (isReadyToPayRequest.apiVersion >= 2 &&\n                isReadyToPayRequest.existingPaymentMethodRequired) {\n              // For apiVersion 2, we always use native to only check for\n              // tokenized cards.\n              // For tokenized cards native always does a presence check so\n              // we can say that if canMakePayment is true for native for\n              // tokenizedCards then the user has a payment method which is\n              // present.\n              response['paymentMethodPresent'] = result;\n            }\n            resolve(response);\n          })\n          .catch(function(err) {\n            if (window.sessionStorage.getItem(\n                    Constants.IS_READY_TO_PAY_RESULT_KEY)) {\n              resolve({\n                'result': window.sessionStorage.getItem(\n                              Constants.IS_READY_TO_PAY_RESULT_KEY) == 'true'\n              });\n            } else {\n              resolve({'result': false});\n            }\n          });\n    });\n  }\n\n  /** @override */\n  prefetchPaymentData(paymentDataRequest) {\n    // Creating PaymentRequest instance will call\n    // Gcore isReadyToPay internally which will prefetch tempaltes.\n    this.createPaymentRequest_(\n        paymentDataRequest, this.environment_,\n        paymentDataRequest.transactionInfo.currencyCode,\n        paymentDataRequest.transactionInfo.totalPrice);\n  }\n\n  /** @override */\n  loadPaymentData(paymentDataRequest) {\n    this.loadPaymentDataThroughPaymentRequest_(paymentDataRequest);\n  }\n\n  /**\n   * Create PaymentRequest instance.\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request The necessary information to check if user is\n   *     ready to pay or to support a payment from merchants.\n   * @param {?string=} environment (optional)\n   * @param {?string=} currencyCode (optional)\n   * @param {?string=} totalPrice (optional)\n   * @return {!PaymentRequest} PaymentRequest instance.\n   * @private\n   */\n  createPaymentRequest_(request, environment, currencyCode, totalPrice) {\n    let data = {};\n    if (request) {\n      data = JSON.parse(JSON.stringify(request));\n    }\n\n    // Only set the apiVersion if the merchant doesn't set it.\n    if (!data['apiVersion']) {\n      data['apiVersion'] = 1;\n    }\n\n    // Add allowedPaymentMethods for swg to get through gms core validation.\n    if (data['swg']) {\n      data['allowedPaymentMethods'] = [Constants.PaymentMethod.CARD];\n    }\n\n    if (environment && environment == Constants.Environment.TEST) {\n      data['environment'] = environment;\n    }\n\n    const supportedInstruments = [{\n      'supportedMethods': ['https://google.com/pay'],\n      'data': data,\n    }];\n\n    const details = {\n      'total': {\n        'label': 'Estimated Total Price',\n        'amount': {\n          // currency and value are required fields in PaymentRequest, but these\n          // fields will never be used since PaymentRequest UI is skipped when\n          // we're the only payment method, so default to some value to by pass\n          // this requirement.\n          'currency': currencyCode || 'USD',\n          'value': totalPrice || '0',\n        }\n      }\n    };\n\n    return new PaymentRequest(supportedInstruments, details);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @private\n   */\n  loadPaymentDataThroughPaymentRequest_(paymentDataRequest) {\n    const currencyCode = (paymentDataRequest.transactionInfo &&\n                          paymentDataRequest.transactionInfo.currencyCode) ||\n        undefined;\n    const totalPrice = (paymentDataRequest.transactionInfo &&\n                        paymentDataRequest.transactionInfo.totalPrice) ||\n        undefined;\n    const paymentRequest = this.createPaymentRequest_(\n        paymentDataRequest, this.environment_, currencyCode, totalPrice);\n    this.callback_(\n        /** @type{!Promise<!PaymentData>} */\n        (paymentRequest.show()\n             .then(\n                 /**\n                  * @param {!PaymentResponse} paymentResponse\n                  * @return {!PaymentData}\n                  */\n                 (paymentResponse) => {\n                   // Should be called to dismiss any remaining UI\n                   paymentResponse.complete('success');\n                   return paymentResponse.details;\n                 })\n             .catch(function(err) {\n               err['statusCode'] = Constants.ResponseStatus.CANCELED;\n               throw err;\n             })));\n  }\n}\n\nexport {PaymentsRequestDelegate};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {Graypane} from './graypane.js';\nimport {PaymentsClientDelegateInterface} from './payments_client_delegate_interface.js';\nimport {\n  ActivityPort,\n  ActivityPorts,\n  ActivityIframePort,\n} from 'web-activities/activity-ports';\nimport {\n  BuyFlowActivityMode,\n  PayFrameHelper,\n  PostMessageEventType,\n} from './pay_frame_helper.js';\nimport {doesMerchantSupportOnlyTokenizedCards} from './validator.js';\nimport {injectStyleSheet, injectIframe} from './element_injector.js';\n\nconst GPAY_ACTIVITY_REQUEST = 'GPAY';\nconst IFRAME_CLOSE_DURATION_IN_MS = 250;\nconst IFRAME_SHOW_UP_DURATION_IN_MS = 250;\nconst IFRAME_SMOOTH_HEIGHT_TRANSITION = `height ${IFRAME_SHOW_UP_DURATION_IN_MS}ms`;\nconst ERROR_PREFIX = 'Error: ';\n\n/**\n * Supported browser user agent keys.\n *\n * @enum {string}\n */\nconst BrowserUserAgent = {\n  CHROME: 'Chrome',\n  FIREFOX: 'Firefox',\n  SAFARI: 'Safari',\n};\n\n/**\n * Resizing payload including resize height and transition style.\n *\n * @typedef {{\n *   height: string,\n *   transition: string,\n * }}\n */\nlet ResizePayload;\n\n/**\n * An implementation of PaymentsClientDelegateInterface that uses the custom\n * hosting page along with web activities to actually get to the hosting page.\n * @implements {PaymentsClientDelegateInterface}\n */\nclass PaymentsWebActivityDelegate {\n  /**\n   * @param {string} environment\n   * @param {string} googleTransactionId\n   * @param {boolean=} useIframe\n   * @param {!ActivityPorts=} activities Can be used to provide a shared\n   *   activities manager. By default, the new manager is created.\n   * @param {?string=} redirectKey The redirect key used for redirect mode.\n   */\n  constructor(\n    environment,\n    googleTransactionId,\n    useIframe,\n    activities,\n    redirectKey\n  ) {\n    this.environment_ = environment;\n    /** @private @const {boolean} */\n\n    /** @const {!ActivityPorts} */\n    this.activities = activities || new ActivityPorts(window);\n    /** @const @private {!Graypane} */\n    this.graypane_ = new Graypane(window.document);\n    /** @private {?function(!Promise<!PaymentData>)} */\n    this.callback_ = null;\n    /**\n     * @private {?{\n     *             container: !Element,\n     *             iframe:!HTMLIFrameElement,\n     *             request:!PaymentDataRequest,\n     *             dataPromise:?Promise<!PaymentData>}}\n     */\n    this.prefetchedObjects_ = null;\n    /** @private {boolean} */\n    this.shouldHandleResizing_ = false;\n    /** @private {?ActivityIframePort} */\n    this.port_ = null;\n    /** @private {?function(!Promise<void>)} */\n    this.dismissPromiseResolver_ = null;\n    /** @const @private {string} */\n    this.googleTransactionId_ = googleTransactionId;\n    /** @const @private {?string} */\n    this.redirectKey_ = redirectKey || null;\n\n    /**\n     * @private {?ResizePayload}\n     */\n    this.savedResizePayload_ = null;\n\n    // Only install dialog styles when iframing is allowed.\n    if (null) {\n      injectStyleSheet(Constants.IFRAME_STYLE);\n      if (null) {\n        injectStyleSheet(Constants.IFRAME_STYLE_CENTER);\n      }\n    }\n  }\n\n  /** @override */\n  onResult(callback) {\n    if (this.callback_) {\n      return;\n    }\n    this.callback_ = callback;\n    this.activities.onResult(\n      GPAY_ACTIVITY_REQUEST,\n      this.onActivityResult_.bind(this)\n    );\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @private\n   */\n  onActivityResult_(port) {\n    // Hide the graypane.\n    this.graypane_.hide();\n    // Only verified origins are allowed.\n    this.callback_(\n      port.acceptResult().then(\n        result => {\n          // Origin must always match: popup, iframe or redirect.\n          if (result.origin != this.getOrigin_()) {\n            throw new Error('channel mismatch');\n          }\n          const data = /** @type {!PaymentData} */ (result.data);\n          if (data['redirectEncryptedCallbackData']) {\n            PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.REDIRECT);\n            return this.fetchRedirectResponse_(\n              data['redirectEncryptedCallbackData']\n            ).then(decrypedJson => {\n              // Merge other non-encrypted fields into the final response.\n              const clone = Object.assign({}, data);\n              delete clone['redirectEncryptedCallbackData'];\n              return Object.assign(clone, decrypedJson);\n            });\n          }\n          // Unencrypted data supplied: must be a verified and secure channel.\n          if (!result.originVerified || !result.secureChannel) {\n            throw new Error('channel mismatch');\n          }\n          return data;\n        },\n        error => {\n          // TODO: Log the original and the inferred error to eye3.\n          const originalError = error['message'];\n          let inferredError = error['message'];\n          try {\n            // Try to parse the error message to a structured error, if it's\n            // not possible, fallback to use the error message string.\n            inferredError = JSON.parse(\n              originalError.substring(ERROR_PREFIX.length)\n            );\n          } catch (e) {}\n          if (\n            inferredError['statusCode'] &&\n            ['DEVELOPER_ERROR', 'MERCHANT_ACCOUNT_ERROR'].indexOf(\n              inferredError['statusCode']\n            ) == -1\n          ) {\n            inferredError = {\n              'statusCode': 'CANCELED',\n            };\n          }\n          if (inferredError == 'AbortError') {\n            inferredError = {\n              'statusCode': 'CANCELED',\n            };\n          }\n          return Promise.reject(inferredError);\n        }\n      )\n    );\n  }\n\n  /**\n   * @param {string} redirectEncryptedCallbackData\n   * @return {!PaymentData}\n   * @private\n   */\n  fetchRedirectResponse_(redirectEncryptedCallbackData) {\n    // This method has to rely on the legacy XHR API because the redirect\n    // functionality is, in part, aimed at older browsers.\n    return new Promise((resolve, reject) => {\n      const url = this.getDecryptionUrl_();\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', url, true);\n      if ('withCredentials' in xhr) {\n        // It's fine to proceed in a non-redirect mode because redirectVerifier\n        // plays the part of CORS propagation.\n        xhr.withCredentials = true;\n      }\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n          return;\n        }\n        if (xhr.status < 100 || xhr.status > 599) {\n          xhr.onreadystatechange = null;\n          reject(new Error(`Unknown HTTP status ${xhr.status}`));\n          return;\n        }\n        if (xhr.readyState == /* COMPLETE */ 4) {\n          try {\n            resolve(JSON.parse(xhr.responseText));\n          } catch (e) {\n            // JSON parsing error is expected here.\n            reject(e);\n          }\n        }\n      };\n      xhr.onerror = () => {\n        reject(new Error('Network failure'));\n      };\n      xhr.onabort = () => {\n        reject(new Error('Request aborted'));\n      };\n\n      // Send POST.\n      xhr.send(redirectEncryptedCallbackData);\n    });\n  }\n\n  /** @override */\n  isReadyToPay(isReadyToPayRequest) {\n    return new Promise((resolve, reject) => {\n      if (doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest)) {\n        resolve({'result': false});\n        return;\n      }\n      const userAgent = window.navigator.userAgent;\n      const isIosGsa =\n        userAgent.indexOf('GSA/') > 0 &&\n        userAgent.indexOf(BrowserUserAgent.SAFARI) > 0;\n      // pop up in IGSA doesn't work.\n      if (isIosGsa && !null) {\n        resolve({'result': false});\n        return;\n      }\n      const isFirefoxIos = userAgent.indexOf('FxiOS') > 0;\n      if (isFirefoxIos) {\n        resolve({'result': false});\n        return;\n      }\n      const isSupported =\n        userAgent.indexOf(BrowserUserAgent.CHROME) > 0 ||\n        userAgent.indexOf(BrowserUserAgent.FIREFOX) > 0 ||\n        userAgent.indexOf(BrowserUserAgent.SAFARI) > 0;\n      if (\n        isSupported &&\n        isReadyToPayRequest.apiVersion >= 2 &&\n        isReadyToPayRequest.existingPaymentMethodRequired\n      ) {\n        isReadyToPayRequest.environment = this.environment_;\n        PayFrameHelper.sendAndWaitForResponse(\n          isReadyToPayRequest,\n          PostMessageEventType.IS_READY_TO_PAY,\n          'isReadyToPayResponse',\n          function(event) {\n            const response = {\n              'result': isSupported,\n            };\n            if (isReadyToPayRequest.existingPaymentMethodRequired) {\n              response['paymentMethodPresent'] =\n                event.data['isReadyToPayResponse'] == 'READY_TO_PAY';\n            }\n            resolve(response);\n          }\n        );\n      } else {\n        resolve({'result': isSupported});\n      }\n    });\n  }\n\n  /** @override */\n  prefetchPaymentData(paymentDataRequest) {\n    // Only handles prefetch for iframe for now.\n    if (!null) {\n      return;\n    }\n    const containerAndFrame = this.injectIframe_(paymentDataRequest);\n    const paymentDataPromise = this.openIframe_(\n      containerAndFrame['container'],\n      containerAndFrame['iframe'],\n      paymentDataRequest\n    );\n    this.prefetchedObjects_ = {\n      'container': containerAndFrame['container'],\n      'iframe': containerAndFrame['iframe'],\n      'request': paymentDataRequest,\n      'dataPromise': paymentDataPromise,\n    };\n  }\n\n  /** @override */\n  loadPaymentData(paymentDataRequest) {\n    if (!paymentDataRequest.swg) {\n      // Only set the apiVersion if the merchant is not setting it.\n      if (!paymentDataRequest.apiVersion) {\n        paymentDataRequest.apiVersion = 1;\n      }\n    }\n    paymentDataRequest.environment = this.environment_;\n    if (null) {\n      PayFrameHelper.setBuyFlowActivityMode(BuyFlowActivityMode.IFRAME);\n      // TODO: Compare the request with prefetched request.\n      let containerAndFrame;\n      let paymentDataPromise;\n      if (this.prefetchedObjects_) {\n        // Rendering prefetched frame and container.\n        containerAndFrame = this.prefetchedObjects_;\n        paymentDataPromise = this.prefetchedObjects_['dataPromise'];\n        this.prefetchedObjects_ = null;\n      } else {\n        containerAndFrame = this.injectIframe_(paymentDataRequest);\n        paymentDataPromise = this.openIframe_(\n          containerAndFrame['container'],\n          containerAndFrame['iframe'],\n          paymentDataRequest\n        );\n      }\n      this.showContainerAndIframeWithAnimation_(\n        containerAndFrame['container'],\n        containerAndFrame['iframe'],\n        paymentDataRequest\n      );\n      history.pushState({}, '', '');\n      const onPopState = e => {\n        e.preventDefault();\n        this.backButtonHandler_(containerAndFrame);\n        window.removeEventListener('popstate', onPopState);\n      };\n      window.addEventListener('popstate', onPopState);\n      const dismissPromise = new Promise(resolve => {\n        this.dismissPromiseResolver_ = resolve;\n      });\n      this.callback_(Promise.race([paymentDataPromise, dismissPromise]));\n      return;\n    }\n    PayFrameHelper.setBuyFlowActivityMode(\n      paymentDataRequest['forceRedirect']\n        ? BuyFlowActivityMode.REDIRECT\n        : BuyFlowActivityMode.POPUP\n    );\n    const opener = this.activities.open(\n      GPAY_ACTIVITY_REQUEST,\n      this.getHostingPageUrl_(),\n      this.getRenderMode_(paymentDataRequest),\n      paymentDataRequest,\n      {'width': 600, 'height': 600}\n    );\n    this.graypane_.show(opener && opener.targetWin);\n  }\n\n  /**\n   * Returns the render mode whether need to force redirect.\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {string}\n   * @private\n   */\n  getRenderMode_(paymentDataRequest) {\n    return paymentDataRequest['forceRedirect'] ? '_top' : 'gp-js-popup';\n  }\n\n  /**\n   * Returns the server origin based on the environment.\n   *\n   * @private\n   * @return {string}\n   */\n  getOrigin_() {\n    if (this.environment_ == Constants.Environment.LOCAL) {\n      return '';\n    }\n\n    let baseDomain;\n    if (this.environment_ == Constants.Environment.PREPROD) {\n      baseDomain = 'pay-preprod.sandbox';\n    } else if (this.environment_ == Constants.Environment.SANDBOX) {\n      baseDomain = 'pay.sandbox';\n    } else {\n      baseDomain = 'pay';\n    }\n    return 'https://' + baseDomain + '.google.com';\n  }\n\n  /**\n   * Returns the base path based on the environment.\n   *\n   * @private\n   * @return {string} The base path\n   */\n  getBasePath_() {\n    return this.getOrigin_() + '/gp/p';\n  }\n\n  /**\n   * Returns the decryption url to be used to decrypt the encrypted payload.\n   *\n   * @private\n   * @return {string} The decryption url\n   */\n  getDecryptionUrl_() {\n    let url = this.getBasePath_() + '/apis/buyflow/process';\n    if (this.redirectKey_) {\n      url += '?rk=' + encodeURIComponent(this.redirectKey_);\n    }\n    return url;\n  }\n\n  /**\n   * Returns the hosting page url.\n   *\n   * @private\n   * @return {string} The hosting page url\n   */\n  getHostingPageUrl_() {\n    // In Tin tests, the hosting page is requested from\n    // /testing/buyflow/merchantdemo.html and is accessed relatively since the\n    // base path is unknown ahead of time.\n    if (this.environment_ == Constants.Environment.TIN) {\n      // There is no /gp/p prefix since multilogin prefixes is broken in Tin:\n      // http://yaqs/4912322941550592\n      return '/ui/pay';\n    }\n    return this.getBasePath_() + '/ui/pay';\n  }\n\n  /**\n   * Returns the iframe pwg url to be used to be used for amp.\n   *\n   * @param {string} environment\n   * @param {string} origin\n   * @return {string} The iframe url\n   */\n  getIframeUrl(environment, origin) {\n    // TODO: These should be compile time constants and not dependent\n    // on the environment.\n    let iframeUrl = `https://pay.google.com/gp/p/ui/pay?origin=${origin}`;\n    if (\n      environment == Constants.Environment.SANDBOX ||\n      environment == Constants.Environment.PREPROD\n    ) {\n      iframeUrl = `https://pay'+  (environment == Constants.Environment.PREPROD ? '-preprod' : '')+  '.sandbox.google.com/gp/p/ui/pay?origin=${origin}`;\n    }\n    return iframeUrl;\n  }\n\n  /**\n   * Close iframe with animation.\n   *\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @private\n   */\n  removeIframeAndContainer_(container, iframe) {\n    const transitionStyle = 'all ' + IFRAME_CLOSE_DURATION_IN_MS + 'ms ease 0s';\n    this.setTransition_(iframe, transitionStyle);\n    iframe.height = '0px';\n    // TODO: This should be replaced by listening to TransitionEnd event\n    setTimeout(() => {\n      if (container.parentNode) {\n        container.parentNode.removeChild(container);\n      }\n    }, IFRAME_CLOSE_DURATION_IN_MS);\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {{container: !Element, iframe:!HTMLIFrameElement}}\n   * @private\n   */\n  injectIframe_(paymentDataRequest) {\n    const containerAndFrame = injectIframe(\n      this.isVerticalCenterExperimentEnabled_(paymentDataRequest)\n        ? Constants.IFRAME_STYLE_CENTER_CLASS\n        : Constants.IFRAME_STYLE_CLASS\n    );\n    const iframe = containerAndFrame['iframe'];\n    const container = containerAndFrame['container'];\n    container.addEventListener(\n      'click',\n      this.closeActionHandler_.bind(this, containerAndFrame)\n    );\n    // Hide iframe and disable resize at initialize.\n    container.style.display = 'none';\n    iframe.style.display = 'none';\n    iframe.height = '0px';\n    const transitionStyle =\n      'all ' + IFRAME_SHOW_UP_DURATION_IN_MS + 'ms ease 0s';\n    this.setTransition_(iframe, transitionStyle);\n    this.shouldHandleResizing_ = false;\n    return containerAndFrame;\n  }\n\n  /**\n   * Handler when back button is triggered, should dismiss iframe if present.\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  backButtonHandler_(containerAndFrame) {\n    this.dismissIframe_(containerAndFrame);\n  }\n\n  /**\n   * Handler when close action is triggered, will pop history state to close\n   * the iframe.\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  closeActionHandler_(containerAndFrame) {\n    if (containerAndFrame['container'].parentNode) {\n      // Close action only when container is still attached to the page.\n      history.back();\n    }\n  }\n\n  /**\n   * @param {{container: !Element, iframe:!HTMLIFrameElement}} containerAndFrame\n   * @private\n   */\n  dismissIframe_(containerAndFrame) {\n    // Dismiss iframe only when container is still attached in the page.\n    if (containerAndFrame['container'].parentNode) {\n      // TODO: Think about whether this could be just hide instead of\n      // disconnect and remove, the tricky part is how to handle the case where\n      // payment data request is not the same.\n      this.dismissPromiseResolver_(Promise.reject({'errorCode': 'CANCELED'}));\n      this.removeIframeAndContainer_(\n        containerAndFrame['container'],\n        containerAndFrame['iframe']\n      );\n      this.port_ && this.port_.disconnect();\n    }\n  }\n\n  /**\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {boolean}\n   * @private\n   */\n  isVerticalCenterExperimentEnabled_(paymentDataRequest) {\n    return (\n      null &&\n      paymentDataRequest['i'] &&\n      paymentDataRequest['i'].renderContainerCenter\n    );\n  }\n\n  /**\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @private\n   */\n  showContainerAndIframeWithAnimation_(container, iframe, paymentDataRequest) {\n    container.style.display = 'block';\n    iframe.style.display = 'block';\n    setTimeout(() => {\n      // Hard code the apprx height here, it will be resize to expected height\n      // later.\n      iframe.height = '280px';\n      if (this.isVerticalCenterExperimentEnabled_(paymentDataRequest)) {\n        iframe.classList.add(Constants.IFRAME_ACTIVE_CONTAINER_CLASS);\n      }\n      // TODO: This should be handles properly by listening to\n      // TransitionEnd event.\n      setTimeout(() => {\n        this.shouldHandleResizing_ = true;\n        // TODO: Add browser test that catches this.\n        if (this.savedResizePayload_) {\n          this.setTransition_(iframe, this.savedResizePayload_['transition']);\n          iframe.height = this.savedResizePayload_['height'];\n          this.savedResizePayload_ = null;\n        }\n      }, IFRAME_SHOW_UP_DURATION_IN_MS);\n    }, 1);\n  }\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} transitionStyle\n   * @private\n   */\n  setTransition_(iframe, transitionStyle) {\n    iframe.style.setProperty('transition', transitionStyle);\n    // For safari.\n    iframe.style.setProperty('-webkit-transition', transitionStyle);\n  }\n\n  /**\n   * Use WebActivitiy to open iframe that's in given container.\n   *\n   * @param {!Element} container\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!PaymentDataRequest} paymentDataRequest\n   * @return {!Promise<!PaymentData>}\n   * @private\n   */\n  openIframe_(container, iframe, paymentDataRequest) {\n    if (!paymentDataRequest.swg) {\n      if (!paymentDataRequest.apiVersion) {\n        paymentDataRequest.apiVersion = 1;\n      }\n    }\n    paymentDataRequest.environment = this.environment_;\n    let iframeLoadStartTime;\n    const trustedUrl = this.getIframeUrl(\n      this.environment_,\n      window.location.origin\n    );\n    return this.activities\n      .openIframe(iframe, trustedUrl, paymentDataRequest)\n      .then(port => {\n        // Handle custom resize message.\n        this.port_ = port;\n        port.onMessage(payload => {\n          if (payload['type'] !== 'resize' || !this.shouldHandleResizing_) {\n            // Save the resize event later after initial animation is finished\n            this.savedResizePayload_ = {\n              'height': payload['height'],\n              'transition': payload['transition'],\n            };\n            return;\n          }\n          // b/111310899: Smooth out initial iFrame loading\n          if (!iframeLoadStartTime) {\n            iframeLoadStartTime = Date.now();\n          }\n          if (\n            Date.now() <\n            iframeLoadStartTime + IFRAME_SHOW_UP_DURATION_IN_MS\n          ) {\n            this.setTransition_(\n              iframe,\n              payload['transition'] + ', ' + IFRAME_SMOOTH_HEIGHT_TRANSITION\n            );\n          } else {\n            this.setTransition_(iframe, payload['transition']);\n          }\n          iframe.height = payload['height'];\n        });\n        return /** @type {!Promise<!Object>} */ (port.acceptResult());\n      })\n      .then(\n        /**\n         * @param {!Object} result\n         * @return {!PaymentData}\n         */\n        result => {\n          this.removeIframeAndContainer_(container, iframe);\n          // This is only for popping the state we pushed earlier.\n          history.back();\n          const data = /** @type {!PaymentData} */ (result['data']);\n          return data;\n        },\n        error => {\n          this.removeIframeAndContainer_(container, iframe);\n          // This is only for popping the state we pushed earlier.\n          history.back();\n          return Promise.reject(error);\n        }\n      );\n  }\n}\n\nexport {PaymentsWebActivityDelegate};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Service wrapping window.parent.postMessage. This enables\n * window.postMessage to be swapped out in unit tests.\n */\nclass PostMessageService {\n  constructor(window) {\n    /** @private @const {!Window} */\n    this.window_ = window;\n  }\n\n  /**\n   * Passthrough to Window#postMessage. See Window#postMessage DOM API\n   * documentation for more information about arguments.\n   *\n   * @param {!Object} message\n   * @param {string} targetOrigin\n   */\n  postMessage(message, targetOrigin) {\n    this.window_.postMessage(message, targetOrigin);\n  }\n}\n\nexport {PostMessageService};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\nimport {PublicErrorCode} from './pay_frame_helper.js';\nimport {getUpiPaymentMethod} from './validator.js';\n\nclass UpiHandler {\n  constructor() {}\n\n  /**\n   * Returns upi payment method object if it exists in allowed payment methods\n   * or null if it doesn't\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n   * @return {boolean}\n   */\n  isUpiRequest(request) {\n    return !!getUpiPaymentMethod(request);\n  }\n\n  /**\n   * Returns upi payment method object if it exists in allowed payment methods\n   * or null if it doesn't\n   *\n   * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n   * @return {!Promise} The promise will contain the boolean result and error\n   *     message when possible.\n   */\n  isReadyToPay(request) {\n    // Always return true for UPI if api version is 2 and chrome supports\n    // payment request\n    if (getUpiPaymentMethod(request)) {\n      if (request.existingPaymentMethodRequired) {\n        return Promise.resolve({'result': true, 'paymentMethodPresent': true});\n      } else {\n        return Promise.resolve({'result': true});\n      }\n    }\n    throw new Error('No Upi payment method found in handler');\n  }\n\n  /**\n   * Request payment data when payment method is UPI\n   *\n   * @param {!PaymentDataRequest} paymentDataRequest Provides necessary\n   *     information to support a payment.\n   * @param {!Object} upiPaymentMethod UPI paymentmethod in\n   *     allowedPaymentMethods array.\n   * @param {!Function} onResultCallback Function to call when everything is\n   *     done.\n   */\n  loadPaymentData(paymentDataRequest, upiPaymentMethod, onResultCallback) {\n    const parameters = upiPaymentMethod['parameters'];\n    const transactionInfo = paymentDataRequest['transactionInfo'];\n    const supportedInstruments = null ?\n        [{\n          // This is the url for Tez teamfood release.\n          'supportedMethods': ['https://pwp-server.appspot.com/pay-teamfood'],\n          'data': {\n            'pa': 'redbus@axisbank',\n            'pn': parameters['payeeName'],\n            'tr': parameters['transactionReferenceId'],\n            'url': parameters['referenceUrl'],\n            'mc': '4131',\n            'tn': 'Purchase in Merchant',\n          },\n        }] :\n        [{\n          'supportedMethods': ['https://tez.google.com/pay'],\n          'data': {\n            'pa': parameters['payeeVpa'],\n            'pn': parameters['payeeName'],\n            'tr': parameters['transactionReferenceId'],\n            'url': parameters['referenceUrl'],\n            'mc': parameters['mcc'],\n            'tn': transactionInfo['transactionNote'],\n          },\n        }];\n\n    if (parameters['transactionId']) {\n      supportedInstruments[0]['data']['tid'] = parameters['transactionId'];\n    }\n\n    const details = {\n      'total': {\n        'label': 'Total',\n        'amount': {\n          'currency': transactionInfo['currencyCode'],\n          'value': transactionInfo['totalPrice'],\n        },\n      },\n      'displayItems': [{\n        'label': 'Original Amount',\n        'amount': {\n          'currency': transactionInfo['currencyCode'],\n          'value': transactionInfo['totalPrice'],\n        },\n      }],\n    };\n\n    let request = new PaymentRequest(supportedInstruments, details);\n\n    onResultCallback(\n        this.checkCanMakePayment_(request)\n            .then(result => {\n              if (result) {\n                return this.showUi_(request);\n              } else {\n                return this.redirectToGooglePlay_();\n              }\n            })\n            .then(paymentData => {\n              return this.processData_(\n                  paymentData, paymentDataRequest, upiPaymentMethod);\n            })\n            .catch(error => {\n              error['statusCode'] = Constants.ResponseStatus.CANCELED;\n              return Promise.reject(error);\n            }));\n  }\n\n  /**\n   * Show the Tez payment request UI.\n   *\n   * @private\n   * @param {!PaymentRequest} request The payment request object.\n   * @return {!Promise<!PaymentData>} A promise containing payment response.\n   */\n  showUi_(request) {\n    return request.show().then(paymentResponse => {\n      paymentResponse.complete('success');\n      return paymentResponse.details;\n    });\n  }\n\n  /**\n   * Checks whether can make a payment with Tez on this device.\n   *\n   * @private\n   * @param {!PaymentRequest} request The payment request object.\n   * @return {!Promise<boolean>} a promise containing the result of whether can\n   *     make payment.\n   */\n  checkCanMakePayment_(request) {\n    // Checks canMakePayment cache, and use the cache result if it exists.\n    const cacheResult =\n        window.sessionStorage.getItem(Constants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY);\n    if (cacheResult) {\n      return Promise.resolve(cacheResult === 'true');\n    }\n\n    // Feature detect canMakePayment().\n    if (!request.canMakePayment) {\n      return Promise.resolve(true);\n    }\n\n    let canMakePaymentPromise = request.canMakePayment();\n\n    return canMakePaymentPromise.then(result => {\n      // Store the result in cache if the result is true to avoid quota error\n      // caused by querying multiple times with different data.\n      // Doesn't store false because if we do so, user will be redirected to\n      // Google Play again after installing Google Pay if Chrome is not closed.\n      if (result) {\n        window.sessionStorage.setItem(\n            Constants.UPI_CAN_MAKE_PAYMENT_CACHE_KEY, result.toString());\n      }\n      return result;\n    });\n  }\n\n  /**\n   * Redirect user to Google Pay app in Google Play store\n   *\n   * @private\n   * @returns {!Promise<!Object>} Rejected promise with error message\n   */\n  redirectToGooglePlay_() {\n    window.location.replace(\n        null ?\n            'https://play.google.com/store/apps/details?id=com.google.android.apps.nbu.paisa.user.teamfood ' :  // NOLINT\n            'https://play.google.com/store/apps/details?id=com.google.android.apps.nbu.paisa.user');  // NOLINT\n    return Promise.reject(\n        {'errorMessage': 'Cannot redirect to Tez page in Google Play.'});\n  }\n\n  /**\n   * Convert Tez payment data to GPay payment data if payment succeeded, or\n   * reject if payment failed\n   *\n   * @private\n   * @param {!PaymentData} tezPaymentData The payment data object from Tez.\n   * @param {!PaymentDataRequest} paymentDataRequest The payment data request.\n   * @param {!Object} upiPaymentMethod UPI paymentmethod in\n   * allowedPaymentMethods array\n   * @returns {!Promise<PaymentData>} A promise containing payment data or\n   *     error message.\n   */\n  processData_(tezPaymentData, paymentDataRequest, upiPaymentMethod) {\n    const tezResponse = JSON.parse(tezPaymentData['tezResponse']);\n    if (tezResponse['Status'] === 'FAILURE') {\n      let error;\n      switch (tezResponse['responseCode']) {\n        case 'ZM':\n          // payment failure due to invalid MPIN\n          error = {\n            'errorCode': PublicErrorCode.BUYER_ACCOUNT_ERROR,\n            'errorMessage': 'Payment failure due to invalid MPIN.'\n          };\n          break;\n        case 'Z9':\n          // payment failure due to insufficient funds\n          error = {\n            'errorCode': PublicErrorCode.BUYER_ACCOUNT_ERROR,\n            'errorMessage': 'Payment failure due to insufficient funds.'\n          };\n          break;\n        case '91':\n          // payment failure due to transaction timeout or connection issue\n          error = {\n            'errorCode': PublicErrorCode.INTERNAL_ERROR,\n            'errorMessage':\n                'Payment failure due to transaction timeout or connection' +\n                ' issue.'\n          };\n          break;\n        default:\n          // payment failure due to user cancel or other issues\n          error = {'errorMessage': 'Payment cancelled.'};\n      }\n      return Promise.reject(error);\n    }\n\n    const signedMessage = {\n      'paymentMethodType': 'UPI',\n      'payeeVpa': upiPaymentMethod['parameters']['payeeVpa'],\n      'status': tezResponse['Status'],\n      'transactionReferenceId':\n          upiPaymentMethod['parameters']['transactionReferenceId'],\n      'transactionId': upiPaymentMethod['parameters']['transactionId'] ?\n          upiPaymentMethod['parameters']['transactionId'] :\n          tezResponse['txnId'],\n      'transactionInfo': paymentDataRequest['transactionInfo'],\n    };\n\n    let paymentData = {\n      'apiVersion': paymentDataRequest['apiVersion'],\n      'apiVersionMinor': paymentDataRequest['apiVersionMinor'],\n      'paymentMethodData': {\n        'type': upiPaymentMethod['type'],\n        'tokenizationData': {\n          'type': 'DIRECT',\n          'token': {\n            'protocolVersion': 'ECv1',\n            // TODO: Verify that response comes from tez and\n            // add signature and encrypt signed message here\n            'signature': '',\n            'signedMessage': signedMessage\n          }\n        }\n      }\n    };\n    return Promise.resolve(paymentData);\n  }\n}\n\nexport {UpiHandler};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport uuid from '../third_party/random_uuid/Random.uuid.js';\n\n/**\n * Returns a google transaction id.\n *\n * @param {string} environment\n * @return {string}\n */\nfunction createGoogleTransactionId(environment) {\n  return uuid.uuidFast() + '.' + environment;\n}\n\nexport {createGoogleTransactionId};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Constants} from './constants.js';\n\n/**\n * @return {boolean} true if this version of Chrome supports PaymentHandler.\n */\nfunction chromeSupportsPaymentHandler() {\n  // Check if feature is enabled for user\n  if (typeof google == 'undefined' ||\n      !null) {\n    return false;\n  }\n\n  // Payment handler isn't supported on mobile\n  const mobilePlatform = window.navigator.userAgent.match(\n      /Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n  if (mobilePlatform != null) {\n    return false;\n  }\n\n  const chromeVersion = window.navigator.userAgent.match(/Chrome\\/([0-9]+)\\./i);\n  return 'PaymentRequest' in window && chromeVersion != null &&\n      Number(chromeVersion[1]) >= 68 &&\n      window.navigator.vendor == 'Google Inc.';\n}\n\n/**\n * @return {boolean} true if this version of Chrome supports PaymentRequest.\n */\nfunction chromeSupportsPaymentRequest() {\n  // Opera uses chrome as rendering engine and sends almost the exact same\n  // user agent as chrome thereby fooling us on android.\n  const isOpera = window.navigator.userAgent.indexOf('OPR/') != -1;\n  if (isOpera) {\n    return false;\n  }\n  if (chromeSupportsPaymentHandler()) {\n    return true;\n  }\n\n  const androidPlatform = window.navigator.userAgent.match(/Android/i);\n  const chromeVersion = window.navigator.userAgent.match(/Chrome\\/([0-9]+)\\./i);\n  return androidPlatform != null && 'PaymentRequest' in window &&\n      // Make sure skipping PaymentRequest UI when only one PaymentMethod is\n      // supported (starts on Google Chrome 59).\n      window.navigator.vendor == 'Google Inc.' && chromeVersion != null &&\n      Number(chromeVersion[1]) >= 59;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n *\n * @return {boolean} true if the merchant only supports tokenized cards.\n */\nfunction doesMerchantSupportOnlyTokenizedCards(isReadyToPayRequest) {\n  if (isReadyToPayRequest.apiVersion >= 2) {\n    const allowedAuthMethods =\n        extractAllowedAuthMethodsForCards_(isReadyToPayRequest);\n    if (allowedAuthMethods && allowedAuthMethods.length == 1 &&\n        allowedAuthMethods[0] == Constants.AuthMethod.CRYPTOGRAM_3DS) {\n      return true;\n    }\n  }\n  return isReadyToPayRequest.allowedPaymentMethods.length == 1 &&\n      isReadyToPayRequest.allowedPaymentMethods[0] ==\n      Constants.PaymentMethod.TOKENIZED_CARD;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @param {Constants.AuthMethod} apiV2AuthMethod\n *\n * @return {boolean} true if the merchant supports pan cards.\n */\nfunction apiV2DoesMerchantSupportSpecifiedCardType(\n    isReadyToPayRequest, apiV2AuthMethod) {\n  if (isReadyToPayRequest.apiVersion >= 2) {\n    const allowedAuthMethods =\n        extractAllowedAuthMethodsForCards_(isReadyToPayRequest);\n    if (allowedAuthMethods && allowedAuthMethods.includes(apiV2AuthMethod)) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * Validate if is secure context. Returns null if context is secure, otherwise\n * return error message.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\n *\n * @return {?string} null if current context is secure, otherwise return error\n * message.\n */\nfunction validateSecureContext() {\n  if (window.location.hostname.endsWith(Constants.TRUSTED_DOMAIN)) {\n    // This is for local development.\n    return null;\n  }\n  if (window.isSecureContext === undefined) {\n    // Browser not support isSecureContext, figure out a way to validate this\n    // for the unsupported browser.\n    return null;\n  }\n  return window.isSecureContext ?\n      null :\n      'Google Pay APIs should be called in secure context!';\n}\n\n/**\n * Validate PaymentOptions.\n *\n * @param {!PaymentOptions} paymentOptions\n */\nfunction validatePaymentOptions(paymentOptions) {\n  if (paymentOptions.environment &&\n      !Object.values(Constants.Environment)\n           .includes(paymentOptions.environment)) {\n    throw new Error(\n        'Parameter environment in PaymentOptions can optionally be set to ' +\n        'PRODUCTION, otherwise it defaults to TEST.');\n  }\n}\n\n/**\n * Validate IsReadyToPayRequest.\n *\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validateIsReadyToPayRequest(isReadyToPayRequest) {\n  if (!isReadyToPayRequest) {\n    return 'isReadyToPayRequest must be set!';\n  } else if (isReadyToPayRequest.apiVersion >= 2) {\n    if (!('apiVersionMinor' in isReadyToPayRequest)) {\n      return 'apiVersionMinor must be set!';\n    }\n    if (!isReadyToPayRequest.allowedPaymentMethods ||\n        !Array.isArray(isReadyToPayRequest.allowedPaymentMethods) ||\n        isReadyToPayRequest.allowedPaymentMethods.length == 0) {\n      return 'for v2 allowedPaymentMethods must be set to an array containing a list of accepted payment methods';\n    }\n    for (var i = 0; i < isReadyToPayRequest.allowedPaymentMethods.length; i++) {\n      let allowedPaymentMethod = isReadyToPayRequest.allowedPaymentMethods[i];\n      if (allowedPaymentMethod['type'] == Constants.PaymentMethod.CARD) {\n        if (!allowedPaymentMethod['parameters']) {\n          return 'Field parameters must be setup in each allowedPaymentMethod';\n        }\n        var allowedCardNetworks =\n            allowedPaymentMethod['parameters']['allowedCardNetworks'];\n        if (!allowedCardNetworks || !Array.isArray(allowedCardNetworks) ||\n            allowedCardNetworks.length == 0) {\n          return 'allowedCardNetworks must be setup in parameters for type CARD';\n        }\n        var allowedAuthMethods =\n            allowedPaymentMethod['parameters']['allowedAuthMethods'];\n        if (!allowedAuthMethods || !Array.isArray(allowedAuthMethods) ||\n            allowedAuthMethods.length == 0 ||\n            !allowedAuthMethods.every(isAuthMethodValid)) {\n          return 'allowedAuthMethods must be setup in parameters for type \\'CARD\\' ' +\n              ' and must contain \\'CRYPTOGRAM_3DS\\' and/or \\'PAN_ONLY\\'';\n        }\n      }\n    }\n    return null;\n  } else if (\n      !isReadyToPayRequest.allowedPaymentMethods ||\n      !Array.isArray(isReadyToPayRequest.allowedPaymentMethods) ||\n      isReadyToPayRequest.allowedPaymentMethods.length == 0 ||\n      !isReadyToPayRequest.allowedPaymentMethods.every(isPaymentMethodValid)) {\n    return 'allowedPaymentMethods must be set to an array containing \\'CARD\\' ' +\n        'and/or \\'TOKENIZED_CARD\\'!';\n  }\n  return null;\n}\n\n/**\n * Validate the payment method.\n *\n * @param {string} paymentMethod\n * @return {boolean} if the current payment method is valid.\n */\nfunction isPaymentMethodValid(paymentMethod) {\n  return Object.values(Constants.PaymentMethod).includes(paymentMethod);\n}\n\n/**\n * Validate the auth method.\n *\n * @param {string} authMethod\n * @return {boolean} if the current auth method is valid.\n */\nfunction isAuthMethodValid(authMethod) {\n  return Object.values(Constants.AuthMethod).includes(authMethod);\n}\n\n/**\n * Validate PaymentDataRequest.\n *\n * @param {!PaymentDataRequest} paymentDataRequest\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validatePaymentDataRequest(paymentDataRequest) {\n  if (!paymentDataRequest) {\n    return 'paymentDataRequest must be set!';\n  }\n  if (paymentDataRequest.swg) {\n    return validatePaymentDataRequestForSwg(paymentDataRequest.swg);\n  } else if (!paymentDataRequest.transactionInfo) {\n    return 'transactionInfo must be set!';\n  } else if (!paymentDataRequest.transactionInfo.currencyCode) {\n    return 'currencyCode in transactionInfo must be set!';\n  } else if (\n      !paymentDataRequest.transactionInfo.totalPriceStatus ||\n      !Object.values(Constants.TotalPriceStatus)\n           .includes(paymentDataRequest.transactionInfo.totalPriceStatus)) {\n    return 'totalPriceStatus in transactionInfo must be set to one of' +\n        ' NOT_CURRENTLY_KNOWN, ESTIMATED or FINAL!';\n  } else if (\n      paymentDataRequest.transactionInfo.totalPriceStatus !==\n          'NOT_CURRENTLY_KNOWN' &&\n      !paymentDataRequest.transactionInfo.totalPrice) {\n    return 'totalPrice in transactionInfo must be set when' +\n        ' totalPriceStatus is ESTIMATED or FINAL!';\n  }\n\n  // Validate payment data request for UPI payment method\n  const allowedPaymentMethod = getUpiPaymentMethod(paymentDataRequest);\n  if (allowedPaymentMethod) {\n    if (!allowedPaymentMethod['parameters']) {\n      return 'parameters must be set in allowedPaymentMethod!';\n    }\n\n    var parameters = allowedPaymentMethod['parameters'];\n    if (!parameters['payeeVpa']) {\n      return 'payeeVpa in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['payeeName']) {\n      return 'payeeName in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['referenceUrl']) {\n      return 'referenceUrl in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['mcc']) {\n      return 'mcc in allowedPaymentMethod parameters must be set!';\n    } else if (!parameters['transactionReferenceId']) {\n      return 'transactionReferenceId in allowedPaymentMethod parameters' +\n          ' must be set!';\n    }\n\n    if (paymentDataRequest['transactionInfo']['currencyCode'] !== 'INR') {\n      return 'currencyCode in transactionInfo must be set to INR!';\n    } else if (\n        paymentDataRequest['transactionInfo']['totalPriceStatus'] !== 'FINAL') {\n      return 'totalPriceStatus in transactionInfo must be set to FINAL!';\n    } else if (!paymentDataRequest['transactionInfo']['transactionNote']) {\n      return 'transactionNote in transactionInfo must be set!';\n    }\n  }\n  return null;\n}\n\n/**\n * Returns upi payment method object if it exists in allowed payment methods\n * or null if it doesn't\n *\n * @param {!IsReadyToPayRequest|!PaymentDataRequest} request\n * @return {?Object}\n */\nfunction getUpiPaymentMethod(request) {\n  if (!chromeSupportsPaymentRequest() || request.apiVersion < 2 ||\n      !request.allowedPaymentMethods) {\n    return null;\n  }\n  return getAllowedPaymentMethodForType_(request, Constants.PaymentMethod.UPI);\n}\n\n/**\n * Validate parameters for swg.\n *\n * @param {?SwgParameters} swgParameters\n * @return {?string} errorMessage if the request is invalid.\n */\nfunction validatePaymentDataRequestForSwg(swgParameters) {\n  if (!swgParameters) {\n    return 'Swg parameters must be provided';\n  }\n  if (!swgParameters.skuId || !swgParameters.publicationId) {\n    return 'Both skuId and publicationId must be provided';\n  }\n  return null;\n}\n\n/**\n * Returns the allowedAuthMethods for a card from the request.\n *\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @return {?Array<string>}\n * @private\n */\nfunction extractAllowedAuthMethodsForCards_(isReadyToPayRequest) {\n  if (isReadyToPayRequest.allowedPaymentMethods) {\n    const allowedPaymentMethod = getAllowedPaymentMethodForType_(\n        isReadyToPayRequest, Constants.PaymentMethod.CARD);\n    if (allowedPaymentMethod && allowedPaymentMethod.parameters) {\n      return allowedPaymentMethod.parameters['allowedAuthMethods'];\n    }\n  }\n  return null;\n}\n\n/**\n * @param {!IsReadyToPayRequest} isReadyToPayRequest\n * @param {string} paymentMethodType\n * @return {?PaymentMethod} Return first payment method for the given type,\n *     return null if not found.\n * @private\n */\nfunction getAllowedPaymentMethodForType_(\n    isReadyToPayRequest, paymentMethodType) {\n  for (var i = 0; i < isReadyToPayRequest.allowedPaymentMethods.length; i++) {\n    const allowedPaymentMethod = isReadyToPayRequest.allowedPaymentMethods[i];\n    if (allowedPaymentMethod.type == paymentMethodType) {\n      return allowedPaymentMethod;\n    }\n  }\n  return null;\n}\n\nexport {\n  apiV2DoesMerchantSupportSpecifiedCardType,\n  chromeSupportsPaymentHandler,\n  chromeSupportsPaymentRequest,\n  doesMerchantSupportOnlyTokenizedCards,\n  getUpiPaymentMethod,\n  isPaymentMethodValid,\n  validateIsReadyToPayRequest,\n  validatePaymentOptions,\n  validatePaymentDataRequest,\n  validateSecureContext\n};\n","/** @license\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   \"VcydxgltxrVZSTV\"\n *\n *   // Two arguments - returns ID of the specified length, and radix. (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   \"01001010\"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   \"47473046\"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   \"098F4D35\"\n */\n\nexport default class Random_uuid {};\n  // Private array of chars to use\n  var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n  Random_uuid.uuid = function (len, radix) {\n    var chars = CHARS, uuid = [], i;\n    radix = radix || chars.length;\n\n    if (len) {\n      // Compact form\n      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      // rfc4122, version 4 form\n      var r;\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      for (i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n  };\n\n  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\n  // by minimizing calls to random()\n  Random_uuid.uuidFast = function() {\n    var chars = CHARS, uuid = new Array(36), rnd=0, r;\n    for (var i = 0; i < 36; i++) {\n      if (i==8 || i==13 ||  i==18 || i==23) {\n        uuid[i] = '-';\n      } else if (i==14) {\n        uuid[i] = '4';\n      } else {\n        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n        r = rnd & 0xf;\n        rnd = rnd >> 4;\n        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n      }\n    }\n    return uuid.join('');\n  };\n\n  // A more compact, but less performant, RFC4122v4 solution:\n  Random_uuid.uuidCompact = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n  };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC9jc3MvY29tcG9uZW50cy9kaWFsb2cuY3NzLmpzIiwiYnVpbGQvY3NzL3VpL3VpLmNzcy5qcyIsIm5vZGVfbW9kdWxlcy9wcm9taXNlLXBqcy9wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL3dlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLmpzIiwic3JjL2FwaS9jbGllbnQtZXZlbnQtbWFuYWdlci1hcGkuanMiLCJzcmMvYXBpL2RlZmVycmVkLWFjY291bnQtY3JlYXRpb24uanMiLCJzcmMvYXBpL2VudGl0bGVtZW50cy5qcyIsInNyYy9hcGkvbG9nZ2VyLWFwaS5qcyIsInNyYy9hcGkvb2ZmZXIuanMiLCJzcmMvYXBpL3Byb3BlbnNpdHktYXBpLmpzIiwic3JjL2FwaS9zdWJzY3JpYmUtcmVzcG9uc2UuanMiLCJzcmMvYXBpL3N1YnNjcmlwdGlvbnMuanMiLCJzcmMvYXBpL3VzZXItZGF0YS5qcyIsInNyYy9jb21wb25lbnRzL2FjdGl2aXRpZXMuanMiLCJzcmMvY29tcG9uZW50cy9kaWFsb2ctbWFuYWdlci5qcyIsInNyYy9jb21wb25lbnRzL2RpYWxvZy5qcyIsInNyYy9jb21wb25lbnRzL2ZyaWVuZGx5LWlmcmFtZS5qcyIsInNyYy9jb21wb25lbnRzL2dyYXlwYW5lLmpzIiwic3JjL2NvbXBvbmVudHMvdmlldy5qcyIsInNyYy9tYWluLmpzIiwic3JjL21vZGVsL2RvYy5qcyIsInNyYy9tb2RlbC9wYWdlLWNvbmZpZy1yZXNvbHZlci5qcyIsInNyYy9tb2RlbC9wYWdlLWNvbmZpZy5qcyIsInNyYy9wb2x5ZmlsbHMuanMiLCJzcmMvcG9seWZpbGxzL2FycmF5LWluY2x1ZGVzLmpzIiwic3JjL3BvbHlmaWxscy9kb2N1bWVudC1jb250YWlucy5qcyIsInNyYy9wb2x5ZmlsbHMvZG9tdG9rZW5saXN0LXRvZ2dsZS5qcyIsInNyYy9wb2x5ZmlsbHMvbWF0aC1zaWduLmpzIiwic3JjL3BvbHlmaWxscy9vYmplY3QtYXNzaWduLmpzIiwic3JjL3BvbHlmaWxscy9vYmplY3QtdmFsdWVzLmpzIiwic3JjL3BvbHlmaWxscy9wcm9taXNlLmpzIiwic3JjL3Byb3RvL2FwaV9tZXNzYWdlcy5qcyIsInNyYy9ydW50aW1lL2FuYWx5dGljcy1zZXJ2aWNlLmpzIiwic3JjL3J1bnRpbWUvYnV0dG9uLWFwaS5qcyIsInNyYy9ydW50aW1lL2NhbGxiYWNrcy5qcyIsInNyYy9ydW50aW1lL2NsaWVudC1ldmVudC1tYW5hZ2VyLmpzIiwic3JjL3J1bnRpbWUvY29udHJpYnV0aW9ucy1mbG93LmpzIiwic3JjL3J1bnRpbWUvZGVmZXJyZWQtYWNjb3VudC1mbG93LmpzIiwic3JjL3J1bnRpbWUvZGVwcy5qcyIsInNyYy9ydW50aW1lL2VudGl0bGVtZW50cy1tYW5hZ2VyLmpzIiwic3JjL3J1bnRpbWUvZXZlbnQtdHlwZS1tYXBwaW5nLmpzIiwic3JjL3J1bnRpbWUvZXhwZXJpbWVudC1mbGFncy5qcyIsInNyYy9ydW50aW1lL2V4cGVyaW1lbnRzLmpzIiwic3JjL3J1bnRpbWUvZmV0Y2hlci5qcyIsInNyYy9ydW50aW1lL2pzZXJyb3IuanMiLCJzcmMvcnVudGltZS9saW5rLWFjY291bnRzLWZsb3cuanMiLCJzcmMvcnVudGltZS9sb2dnZXIuanMiLCJzcmMvcnVudGltZS9sb2dpbi1ub3RpZmljYXRpb24tYXBpLmpzIiwic3JjL3J1bnRpbWUvbG9naW4tcHJvbXB0LWFwaS5qcyIsInNyYy9ydW50aW1lL29mZmVycy1hcGkuanMiLCJzcmMvcnVudGltZS9vZmZlcnMtZmxvdy5qcyIsInNyYy9ydW50aW1lL3BheS1jbGllbnQuanMiLCJzcmMvcnVudGltZS9wYXktZmxvdy5qcyIsInNyYy9ydW50aW1lL3Byb3BlbnNpdHktc2VydmVyLmpzIiwic3JjL3J1bnRpbWUvcHJvcGVuc2l0eS5qcyIsInNyYy9ydW50aW1lL3J1bnRpbWUuanMiLCJzcmMvcnVudGltZS9zZXJ2aWNlcy5qcyIsInNyYy9ydW50aW1lL3NtYXJ0LWJ1dHRvbi1hcGkuanMiLCJzcmMvcnVudGltZS9zdG9yYWdlLmpzIiwic3JjL3J1bnRpbWUvd2FpdC1mb3Itc3Vic2NyaXB0aW9uLWxvb2t1cC1hcGkuanMiLCJzcmMvdWkvYWN0aXZpdHktaWZyYW1lLXZpZXcuanMiLCJzcmMvdWkvbG9hZGluZy12aWV3LmpzIiwic3JjL3VpL3RvYXN0LmpzIiwic3JjL3V0aWxzL2FjdGl2aXR5LXV0aWxzLmpzIiwic3JjL3V0aWxzL2FuaW1hdGlvbi5qcyIsInNyYy91dGlscy9ieXRlcy5qcyIsInNyYy91dGlscy9kb2N1bWVudC1yZWFkeS5qcyIsInNyYy91dGlscy9kb20uanMiLCJzcmMvdXRpbHMvZXJyb3JzLmpzIiwic3JjL3V0aWxzL2kxOG4uanMiLCJzcmMvdXRpbHMvanNvbi5qcyIsInNyYy91dGlscy9qd3QuanMiLCJzcmMvdXRpbHMvbG9nLmpzIiwic3JjL3V0aWxzL29iamVjdC5qcyIsInNyYy91dGlscy9wcmVjb25uZWN0LmpzIiwic3JjL3V0aWxzL3JhbmRvbS5qcyIsInNyYy91dGlscy9zdHJpbmcuanMiLCJzcmMvdXRpbHMvc3R5bGUuanMiLCJzcmMvdXRpbHMvdHlwZXMuanMiLCJzcmMvdXRpbHMvdXJsLmpzIiwic3JjL3V0aWxzL3hoci5qcyIsInRoaXJkX3BhcnR5L2dwYXkvc3JjL2NvbnN0YW50cy5qcyIsInRoaXJkX3BhcnR5L2dwYXkvc3JjL2VsZW1lbnRfaW5qZWN0b3IuanMiLCJ0aGlyZF9wYXJ0eS9ncGF5L3NyYy9ncmF5cGFuZS5qcyIsInRoaXJkX3BhcnR5L2dwYXkvc3JjL3BheV9mcmFtZV9oZWxwZXIuanMiLCJ0aGlyZF9wYXJ0eS9ncGF5L3NyYy9wYXlqc19hc3luYy5qcyIsInRoaXJkX3BhcnR5L2dwYXkvc3JjL3BheW1lbnRzX2NsaWVudF9kZWxlZ2F0ZV9pbnRlcmZhY2UuanMiLCJ0aGlyZF9wYXJ0eS9ncGF5L3NyYy9wYXltZW50c19yZXF1ZXN0X2RlbGVnYXRlLmpzIiwidGhpcmRfcGFydHkvZ3BheS9zcmMvcGF5bWVudHNfd2ViX2FjdGl2aXR5X2RlbGVnYXRlLmpzIiwidGhpcmRfcGFydHkvZ3BheS9zcmMvcG9zdF9tZXNzYWdlX3NlcnZpY2UuanMiLCJ0aGlyZF9wYXJ0eS9ncGF5L3NyYy91cGlfaGFuZGxlci5qcyIsInRoaXJkX3BhcnR5L2dwYXkvc3JjL3V0aWxzLmpzIiwidGhpcmRfcGFydHkvZ3BheS9zcmMvdmFsaWRhdG9yLmpzIiwidGhpcmRfcGFydHkvZ3BheS90aGlyZF9wYXJ0eS9yYW5kb21fdXVpZC9SYW5kb20udXVpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQ0FPLElBQU0sR0FBRyxHQUFHLHc0QkFBWjs7Ozs7Ozs7OztBQ0FBLElBQU0sR0FBRyxHQUFHLGczQ0FBWjs7OztBQ0FQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Z0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUEvQixDQUFmO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsRUFBVixDQUFQO0FBQ0QsQ0FmRCxDLENBaUJBOzs7QUFDQSxXQUFXLENBQUMsV0FBWixHQUEwQixZQUFXO0FBQ25DLFNBQU8sdUNBQXVDLE9BQXZDLENBQStDLE9BQS9DLEVBQXdELFVBQVMsQ0FBVCxFQUFZO0FBQ3pFLFFBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFMLEtBQWMsRUFBZCxHQUFpQixDQUF6QjtBQUFBLFFBQTRCLENBQUMsR0FBRyxDQUFDLElBQUksR0FBTCxHQUFXLENBQVgsR0FBZ0IsQ0FBQyxHQUFDLEdBQUYsR0FBTSxHQUF0RDtBQUNBLFdBQU8sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxFQUFYLENBQVA7QUFDRCxHQUhNLENBQVA7QUFJRCxDQUxEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0IGNvbnN0IENTUyA9IFwiLnN3Zy1kaWFsb2csLnN3Zy10b2FzdHtib3gtc2l6aW5nOmJvcmRlci1ib3g7YmFja2dyb3VuZC1jb2xvcjojZmZmIWltcG9ydGFudH0uc3dnLXRvYXN0e3Bvc2l0aW9uOmZpeGVkIWltcG9ydGFudDtib3R0b206MCFpbXBvcnRhbnQ7bWF4LWhlaWdodDo0NnB4IWltcG9ydGFudDt6LWluZGV4OjIxNDc0ODM2NDchaW1wb3J0YW50O2JvcmRlcjpub25lIWltcG9ydGFudH1AbWVkaWEgKG1heC1oZWlnaHQ6NjQwcHgpLCAobWF4LXdpZHRoOjY0MHB4KXsuc3dnLWRpYWxvZywuc3dnLXRvYXN0e3dpZHRoOjQ4MHB4IWltcG9ydGFudDtsZWZ0Oi0yNDBweCFpbXBvcnRhbnQ7bWFyZ2luLWxlZnQ6NTB2dyFpbXBvcnRhbnQ7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czo4cHghaW1wb3J0YW50O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjhweCFpbXBvcnRhbnQ7Ym94LXNoYWRvdzowIDFweCAxcHggcmdiYSg2MCw2NCw2NywuMyksMCAxcHggNHB4IDFweCByZ2JhKDYwLDY0LDY3LC4xNSkhaW1wb3J0YW50fX1AbWVkaWEgKG1pbi13aWR0aDo2NDBweCkgYW5kIChtaW4taGVpZ2h0OjY0MHB4KXsuc3dnLWRpYWxvZ3t3aWR0aDo2MzBweCFpbXBvcnRhbnQ7bGVmdDotMzE1cHghaW1wb3J0YW50O21hcmdpbi1sZWZ0OjUwdnchaW1wb3J0YW50O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50O2JvcmRlcjpub25lIWltcG9ydGFudH0uc3dnLXRvYXN0e2xlZnQ6MCFpbXBvcnRhbnR9fUBtZWRpYSAobWF4LXdpZHRoOjQ4MHB4KXsuc3dnLWRpYWxvZywuc3dnLXRvYXN0e3dpZHRoOjEwMCUhaW1wb3J0YW50O2xlZnQ6MCFpbXBvcnRhbnQ7cmlnaHQ6MCFpbXBvcnRhbnQ7bWFyZ2luLWxlZnQ6MCFpbXBvcnRhbnR9fVxcbi8qIyBzb3VyY2VVUkw9Ly4vc3JjL2NvbXBvbmVudHMvZGlhbG9nLmNzcyovXCI7IiwiZXhwb3J0IGNvbnN0IENTUyA9IFwiYm9keXtwYWRkaW5nOjA7bWFyZ2luOjB9c3dnLWNvbnRhaW5lcixzd2ctbG9hZGluZyxzd2ctbG9hZGluZy1hbmltYXRlLHN3Zy1sb2FkaW5nLWltYWdle2Rpc3BsYXk6YmxvY2t9c3dnLWxvYWRpbmctY29udGFpbmVye3dpZHRoOjEwMCUhaW1wb3J0YW50O2Rpc3BsYXk6LW1zLWZsZXhib3ghaW1wb3J0YW50O2Rpc3BsYXk6ZmxleCFpbXBvcnRhbnQ7LW1zLWZsZXgtYWxpZ246Y2VudGVyIWltcG9ydGFudDthbGlnbi1pdGVtczpjZW50ZXIhaW1wb3J0YW50Oy1tcy1mbGV4LXBhY2s6Y2VudGVyIWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyIWltcG9ydGFudDttaW4taGVpZ2h0OjE0OHB4IWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnQ7Ym90dG9tOjAhaW1wb3J0YW50O21hcmdpbi10b3A6NXB4IWltcG9ydGFudDt6LWluZGV4OjIxNDc0ODM2NDchaW1wb3J0YW50fUBtZWRpYSAobWluLWhlaWdodDo2MzBweCksIChtaW4td2lkdGg6NjMwcHgpe3N3Zy1sb2FkaW5nLWNvbnRhaW5lcnt3aWR0aDo1NjBweCFpbXBvcnRhbnQ7bWFyZ2luLWxlZnQ6MzVweCFpbXBvcnRhbnQ7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czo4cHghaW1wb3J0YW50O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjhweCFpbXBvcnRhbnQ7YmFja2dyb3VuZC1jb2xvcjojZmZmIWltcG9ydGFudDtib3gtc2hhZG93OjAgMXB4IDFweCByZ2JhKDYwLDY0LDY3LC4zKSwwIDFweCA0cHggMXB4IHJnYmEoNjAsNjQsNjcsLjE1KSFpbXBvcnRhbnR9fXN3Zy1sb2FkaW5ne3otaW5kZXg6MjE0NzQ4MzY0NyFpbXBvcnRhbnQ7d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtvdmVyZmxvdzpoaWRkZW47YW5pbWF0aW9uOm1zcGluLXJvdGF0ZSAxNTY4LjYzbXMgbGluZWFyIGluZmluaXRlfXN3Zy1sb2FkaW5nLWFuaW1hdGV7YW5pbWF0aW9uOm1zcGluLXJldnJvdCA1MzMybXMgc3RlcHMoNCkgaW5maW5pdGV9c3dnLWxvYWRpbmctaW1hZ2V7YmFja2dyb3VuZC1pbWFnZTp1cmwoJGFzc2V0cyQvbG9hZGVyLnN2Zyk7YmFja2dyb3VuZC1zaXplOjEwMCU7d2lkdGg6MTE2NjRweDtoZWlnaHQ6MzZweDthbmltYXRpb246c3dnLWxvYWRpbmctZmlsbSA1MzMybXMgc3RlcHMoMzI0KSBpbmZpbml0ZX1Aa2V5ZnJhbWVzIHN3Zy1sb2FkaW5nLWZpbG17MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTExNjY0cHgpfX1Aa2V5ZnJhbWVzIG1zcGluLXJvdGF0ZXswJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfXRve3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIG1zcGluLXJldnJvdHswJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfXRve3RyYW5zZm9ybTpyb3RhdGUoLTF0dXJuKX19XFxuLyojIHNvdXJjZVVSTD0vLi9zcmMvdWkvdWkuY3NzKi9cIjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIEVTNi9Qcm9taXNlcyBBKyBQcm9taXNlIGluc3RhbmNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbigqPSksIGZ1bmN0aW9uICgqPSkpfSByZXNvbHZlclxuICovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIFByb21pc2UgcmVxdWlyZXMgYG5ld2AnKTtcbiAgfVxuICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBwYXNzIHJlc29sdmVyIGZ1bmN0aW9uJyk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9uKHRoaXM6UHJvbWlzZSwqPSxmdW5jdGlvbigqPSksZnVuY3Rpb24oKj0pLERlZmVycmVkKTohUHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuX3N0YXRlID0gUGVuZGluZ1Byb21pc2U7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5fdmFsdWUgPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLl9pc0NoYWluRW5kID0gdHJ1ZTtcblxuICBkb1Jlc29sdmUoXG4gICAgdGhpcyxcbiAgICBhZG9wdGVyKHRoaXMsIEZ1bGZpbGxlZFByb21pc2UpLFxuICAgIGFkb3B0ZXIodGhpcywgUmVqZWN0ZWRQcm9taXNlKSxcbiAgICB7IHRoZW46IHJlc29sdmVyIH1cbiAgKTtcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgUHVibGljIEluc3RhbmNlIE1ldGhvZHNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcHJvbWlzZSBpbnN0YW5jZSB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0IG9mIHRoaXMgcHJvbWlzZVxuICogYXMgaW5wdXRzIHRvIHRoZSBvbkZ1bGZpbGxlZCBvciBvblJlamVjdGVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBvbkZ1bGZpbGxlZFxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gb25SZWplY3RlZFxuICovXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgb25GdWxmaWxsZWQgPSBpc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdm9pZCAwO1xuICBvblJlamVjdGVkID0gaXNGdW5jdGlvbihvblJlamVjdGVkKSA/IG9uUmVqZWN0ZWQgOiB2b2lkIDA7XG5cbiAgaWYgKG9uRnVsZmlsbGVkIHx8IG9uUmVqZWN0ZWQpIHtcbiAgICB0aGlzLl9pc0NoYWluRW5kID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fc3RhdGUoXG4gICAgdGhpcy5fdmFsdWUsXG4gICAgb25GdWxmaWxsZWQsXG4gICAgb25SZWplY3RlZFxuICApO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHByb21pc2UgdGhhdCB3aWxsIGhhbmRsZSB0aGUgcmVqZWN0ZWQgc3RhdGUgb2YgdGhpcyBwcm9taXNlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IG9uUmVqZWN0ZWRcbiAqIEByZXR1cm5zIHshUHJvbWlzZX1cbiAqL1xuUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihvblJlamVjdGVkKSB7XG4gIHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCBvblJlamVjdGVkKTtcbn07XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIFB1YmxpYyBTdGF0aWMgTWV0aG9kc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bGZpbGxlZCBQcm9taXNlIG9mIHZhbHVlLiBJZiB2YWx1ZSBpcyBpdHNlbGYgYSB0aGVuLWFibGUsXG4gKiByZXNvbHZlcyB3aXRoIHRoZSB0aGVuLWFibGUncyB2YWx1ZS5cbiAqXG4gKiBAdGhpcyB7IVByb21pc2V9XG4gKiBAcGFyYW0geyo9fSB2YWx1ZVxuICogQHJldHVybnMgeyFQcm9taXNlfVxuICovXG5Qcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoaXNPYmplY3QodmFsdWUpICYmIHZhbHVlIGluc3RhbmNlb2YgdGhpcykge1xuICAgIHByb21pc2UgPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb21pc2V9ICovKHByb21pc2UpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVqZWN0ZWQgUHJvbWlzZSBvZiByZWFzb24uXG4gKlxuICogQHRoaXMgeyFQcm9taXNlfVxuICogQHBhcmFtIHsqPX0gcmVhc29uXG4gKiBAcmV0dXJucyB7IVByb21pc2V9XG4gKi9cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uKF8sIHJlamVjdCkge1xuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZX0gKi8ocHJvbWlzZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBQcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdpdGggYW4gYXJyYXkgb2YgdGhlIHZhbHVlcyBvZiB0aGVcbiAqIHBhc3NlZCBpbiBwcm9taXNlcy4gSWYgYW55IHByb21pc2UgcmVqZWN0cywgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbFxuICogcmVqZWN0LlxuICpcbiAqIEB0aGlzIHshUHJvbWlzZX1cbiAqIEBwYXJhbSB7IUFycmF5PFByb21pc2V8Kj59IHByb21pc2VzXG4gKiBAcmV0dXJucyB7IVByb21pc2V9XG4gKi9cblByb21pc2UuYWxsID0gZnVuY3Rpb24ocHJvbWlzZXMpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGxlbmd0aCA9IHByb21pc2VzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH1cblxuICAgIGVhY2gocHJvbWlzZXMsIGZ1bmN0aW9uKHByb21pc2UsIGluZGV4KSB7XG4gICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICBpZiAoLS1sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlamVjdCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlfSAqLyhwcm9taXNlKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIFByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IGJhc2VkIG9uIHRoZSBmaXJzdFxuICogcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgcHJvbWlzZS5cbiAqXG4gKiBAdGhpcyB7IVByb21pc2V9XG4gKiBAcGFyYW0geyFBcnJheTxQcm9taXNlfCo+fSBwcm9taXNlc1xuICogQHJldHVybnMgeyFQcm9taXNlfVxuICovXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbihwcm9taXNlcykge1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKHByb21pc2VzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZX0gKi8ocHJvbWlzZSk7XG59O1xuXG52YXIgb25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uKHJlYXNvbiwgcHJvbWlzZSkge1xuICB0aHJvdyByZWFzb247XG59O1xuXG4vKipcbiAqIEFuIGludGVybmFsIHVzZSBzdGF0aWMgZnVuY3Rpb24uXG4gKi9cblByb21pc2UuX292ZXJyaWRlVW5oYW5kbGVkRXhjZXB0aW9uSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgb25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9IGhhbmRsZXI7XG59O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICBQcml2YXRlIGZ1bmN0aW9uc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogVGhlIEZ1bGZpbGxlZCBQcm9taXNlIHN0YXRlLiBDYWxscyBvbkZ1bGZpbGxlZCB3aXRoIHRoZSByZXNvbHZlZCB2YWx1ZSBvZlxuICogdGhpcyBwcm9taXNlLCBjcmVhdGluZyBhIG5ldyBwcm9taXNlLlxuICpcbiAqIElmIHRoZXJlIGlzIG5vIG9uRnVsZmlsbGVkLCByZXR1cm5zIHRoZSBjdXJyZW50IHByb21pc2UgdG8gYXZvaWQgYSBwcm9taXNlXG4gKiBpbnN0YW5jZS5cbiAqXG4gKiBAdGhpcyB7IVByb21pc2V9IFRoZSBjdXJyZW50IHByb21pc2VcbiAqIEBwYXJhbSB7Kj19IHZhbHVlIFRoZSBjdXJyZW50IHByb21pc2UncyByZXNvbHZlZCB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pPX0gb25GdWxmaWxsZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pPX0gdW51c2VkXG4gKiBAcGFyYW0ge0RlZmVycmVkfSBkZWZlcnJlZCBBIGRlZmVycmVkIG9iamVjdCB0aGF0IGhvbGRzIGEgcHJvbWlzZSBhbmQgaXRzXG4gKiAgICAgcmVzb2x2ZSBhbmQgcmVqZWN0IGZ1bmN0aW9ucy4gSXQgSVMgTk9UIHBhc3NlZCB3aGVuIGNhbGxlZCBmcm9tXG4gKiAgICAgUHJvbWlzZSN0aGVuIHRvIHNhdmUgYW4gb2JqZWN0IGluc3RhbmNlIChzaW5jZSB3ZSBtYXkgcmV0dXJuIHRoZSBjdXJyZW50XG4gKiAgICAgcHJvbWlzZSkuIEl0IElTIHBhc3NlZCBpbiB3aGVuIGFkb3B0aW5nIHRoZSBGdWxmaWxsZWQgc3RhdGUgZnJvbSB0aGVcbiAqICAgICBQZW5kaW5nIHN0YXRlLlxuICogQHJldHVybnMgeyFQcm9taXNlfVxuICovXG5mdW5jdGlvbiBGdWxmaWxsZWRQcm9taXNlKHZhbHVlLCBvbkZ1bGZpbGxlZCwgdW51c2VkLCBkZWZlcnJlZCkge1xuICBpZiAoIW9uRnVsZmlsbGVkKSB7XG4gICAgZGVmZXJyZWRBZG9wdChkZWZlcnJlZCwgRnVsZmlsbGVkUHJvbWlzZSwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlmICghZGVmZXJyZWQpIHtcbiAgICBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCh0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfVxuICBkZWZlcih0cnlDYXRjaERlZmVycmVkKGRlZmVycmVkLCBvbkZ1bGZpbGxlZCwgdmFsdWUpKTtcbiAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbi8qKlxuICogVGhlIFJlamVjdGVkIFByb21pc2Ugc3RhdGUuIENhbGxzIG9uUmVqZWN0ZWQgd2l0aCB0aGUgcmVzb2x2ZWQgdmFsdWUgb2ZcbiAqIHRoaXMgcHJvbWlzZSwgY3JlYXRpbmcgYSBuZXcgcHJvbWlzZS5cbiAqXG4gKiBJZiB0aGVyZSBpcyBubyBvblJlamVjdGVkLCByZXR1cm5zIHRoZSBjdXJyZW50IHByb21pc2UgdG8gYXZvaWQgYSBwcm9taXNlXG4gKiBpbnN0YW5jZS5cbiAqXG4gKiBAdGhpcyB7IVByb21pc2V9IFRoZSBjdXJyZW50IHByb21pc2VcbiAqIEBwYXJhbSB7Kj19IHJlYXNvbiBUaGUgY3VycmVudCBwcm9taXNlJ3MgcmVqZWN0aW9uIHJlYXNvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pPX0gdW51c2VkXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IG9uUmVqZWN0ZWRcbiAqIEBwYXJhbSB7RGVmZXJyZWR9IGRlZmVycmVkIEEgZGVmZXJyZWQgb2JqZWN0IHRoYXQgaG9sZHMgYSBwcm9taXNlIGFuZCBpdHNcbiAqICAgICByZXNvbHZlIGFuZCByZWplY3QgZnVuY3Rpb25zLiBJdCBJUyBOT1QgcGFzc2VkIHdoZW4gY2FsbGVkIGZyb21cbiAqICAgICBQcm9taXNlI3RoZW4gdG8gc2F2ZSBhbiBvYmplY3QgaW5zdGFuY2UgKHNpbmNlIHdlIG1heSByZXR1cm4gdGhlIGN1cnJlbnRcbiAqICAgICBwcm9taXNlKS4gSXQgSVMgcGFzc2VkIGluIHdoZW4gYWRvcHRpbmcgdGhlIFJlamVjdGVkIHN0YXRlIGZyb20gdGhlXG4gKiAgICAgUGVuZGluZyBzdGF0ZS5cbiAqIEByZXR1cm5zIHshUHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gUmVqZWN0ZWRQcm9taXNlKHJlYXNvbiwgdW51c2VkLCBvblJlamVjdGVkLCBkZWZlcnJlZCkge1xuICBpZiAoIW9uUmVqZWN0ZWQpIHtcbiAgICBkZWZlcnJlZEFkb3B0KGRlZmVycmVkLCBSZWplY3RlZFByb21pc2UsIHJlYXNvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaWYgKCFkZWZlcnJlZCkge1xuICAgIGRlZmVycmVkID0gbmV3IERlZmVycmVkKHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG4gIGRlZmVyKHRyeUNhdGNoRGVmZXJyZWQoZGVmZXJyZWQsIG9uUmVqZWN0ZWQsIHJlYXNvbikpO1xuICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuLyoqXG4gKiBUaGUgUGVuZGluZyBQcm9taXNlIHN0YXRlLiBFdmVudHVhbGx5IGNhbGxzIG9uRnVsZmlsbGVkIG9uY2UgdGhlIHByb21pc2UgaGFzXG4gKiByZXNvbHZlZCwgb3Igb25SZWplY3RlZCBvbmNlIHRoZSBwcm9taXNlIHJlamVjdHMuXG4gKlxuICogSWYgdGhlcmUgaXMgbm8gb25GdWxmaWxsZWQgYW5kIG5vIG9uUmVqZWN0ZWQsIHJldHVybnMgdGhlIGN1cnJlbnQgcHJvbWlzZSB0b1xuICogYXZvaWQgYSBwcm9taXNlIGluc3RhbmNlLlxuICpcbiAqIEB0aGlzIHshUHJvbWlzZX0gVGhlIGN1cnJlbnQgcHJvbWlzZVxuICogQHBhcmFtIHsqPX0gcXVldWUgVGhlIGN1cnJlbnQgcHJvbWlzZSdzIHBlbmRpbmcgcHJvbWlzZXMgcXVldWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IG9uRnVsZmlsbGVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IG9uUmVqZWN0ZWRcbiAqIEBwYXJhbSB7RGVmZXJyZWR9IGRlZmVycmVkIEEgZGVmZXJyZWQgb2JqZWN0IHRoYXQgaG9sZHMgYSBwcm9taXNlIGFuZCBpdHNcbiAqICAgICByZXNvbHZlIGFuZCByZWplY3QgZnVuY3Rpb25zLiBJdCBJUyBOT1QgcGFzc2VkIHdoZW4gY2FsbGVkIGZyb21cbiAqICAgICBQcm9taXNlI3RoZW4gdG8gc2F2ZSBhbiBvYmplY3QgaW5zdGFuY2UgKHNpbmNlIHdlIG1heSByZXR1cm4gdGhlIGN1cnJlbnRcbiAqICAgICBwcm9taXNlKS4gSXQgSVMgcGFzc2VkIGluIHdoZW4gYWRvcHRpbmcgdGhlIFBlbmRpbmcgc3RhdGUgZnJvbSB0aGVcbiAqICAgICBQZW5kaW5nIHN0YXRlIG9mIGFub3RoZXIgcHJvbWlzZS5cbiAqIEByZXR1cm5zIHshUHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gUGVuZGluZ1Byb21pc2UocXVldWUsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBkZWZlcnJlZCkge1xuICBpZiAoIWRlZmVycmVkKSB7XG4gICAgaWYgKCFvbkZ1bGZpbGxlZCAmJiAhb25SZWplY3RlZCkgeyByZXR1cm4gdGhpczsgfVxuICAgIGRlZmVycmVkID0gbmV3IERlZmVycmVkKHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG4gIHF1ZXVlLnB1c2goe1xuICAgIGRlZmVycmVkOiBkZWZlcnJlZCxcbiAgICBvbkZ1bGZpbGxlZDogb25GdWxmaWxsZWQgfHwgZGVmZXJyZWQucmVzb2x2ZSxcbiAgICBvblJlamVjdGVkOiBvblJlamVjdGVkIHx8IGRlZmVycmVkLnJlamVjdFxuICB9KTtcbiAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIGRlZmVycmVkIGluc3RhbmNlIHRoYXQgaG9sZHMgYSBwcm9taXNlIGFuZCBpdHMgcmVzb2x2ZSBhbmRcbiAqIHJlamVjdCBmdW5jdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIERlZmVycmVkKFByb21pc2UpIHtcbiAgdmFyIGRlZmVycmVkID0gdGhpcztcbiAgLyoqIEB0eXBlIHshUHJvbWlzZX0gKi9cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLyoqIEB0eXBlIHtmdW5jdGlvbigqPSl9ICovXG4gICAgZGVmZXJyZWQucmVzb2x2ZSA9IHJlc29sdmU7XG5cbiAgICAvKiogQHR5cGUge2Z1bmN0aW9uKCo9KX0gKi9cbiAgICBkZWZlcnJlZC5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICByZXR1cm4gZGVmZXJyZWQ7XG59XG5cbi8qKlxuICogVHJhbnNpdGlvbnMgdGhlIHN0YXRlIG9mIHByb21pc2UgdG8gYW5vdGhlciBzdGF0ZS4gVGhpcyBpcyBvbmx5IGV2ZXIgY2FsbGVkXG4gKiBvbiB3aXRoIGEgcHJvbWlzZSB0aGF0IGlzIGN1cnJlbnRseSBpbiB0aGUgUGVuZGluZyBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0geyFQcm9taXNlfSBwcm9taXNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6UHJvbWlzZSwqPSxmdW5jdGlvbigqPSksZnVuY3Rpb24oKj0pLERlZmVycmVkKTohUHJvbWlzZX0gc3RhdGVcbiAqIEBwYXJhbSB7Kj19IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGFkb3B0KHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgYWRvcHRlZSkge1xuICB2YXIgcXVldWUgPSBwcm9taXNlLl92YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBzdGF0ZTtcbiAgcHJvbWlzZS5fdmFsdWUgPSB2YWx1ZTtcblxuICBpZiAoYWRvcHRlZSAmJiBzdGF0ZSA9PT0gUGVuZGluZ1Byb21pc2UpIHtcbiAgICBhZG9wdGVlLl9zdGF0ZSh2YWx1ZSwgdm9pZCAwLCB2b2lkIDAsIHtcbiAgICAgIHByb21pc2U6IHByb21pc2UsXG4gICAgICByZXNvbHZlOiB2b2lkIDAsXG4gICAgICByZWplY3Q6IHZvaWQgMFxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0ID0gcXVldWVbaV07XG4gICAgcHJvbWlzZS5fc3RhdGUoXG4gICAgICB2YWx1ZSxcbiAgICAgIG5leHQub25GdWxmaWxsZWQsXG4gICAgICBuZXh0Lm9uUmVqZWN0ZWQsXG4gICAgICBuZXh0LmRlZmVycmVkXG4gICAgKTtcbiAgfVxuICBxdWV1ZS5sZW5ndGggPSAwO1xuXG4gIC8vIElmIHdlJ3JlIGFkb3B0aW5nIGFub3RoZXIgcHJvbWlzZSwgaXQncyBub3QgdGhlIGVuZCBvZiB0aGUgcHJvbWlzZSBjaGFpbixcbiAgLy8gdGhlIG5ldyBwcm9taXNlIGlzLlxuICBpZiAoYWRvcHRlZSkge1xuICAgIGFkb3B0ZWUuX2lzQ2hhaW5FbmQgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIERldGVybWluZSBpZiB0aGlzIHJlamVjdGVkIHByb21pc2Ugd2lsbCBiZSBcImhhbmRsZWRcIi5cbiAgaWYgKHN0YXRlID09PSBSZWplY3RlZFByb21pc2UgJiYgcHJvbWlzZS5faXNDaGFpbkVuZCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvbWlzZS5faXNDaGFpbkVuZCkge1xuICAgICAgICBvblBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uKHZhbHVlLCBwcm9taXNlKTtcbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgcGFydGlhbCBhcHBsaWNhdGlvbiBvZiBhZG9wdC5cbiAqXG4gKiBAcGFyYW0geyFQcm9taXNlfSBwcm9taXNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6UHJvbWlzZSwqPSxmdW5jdGlvbigqPSksZnVuY3Rpb24oKj0pLERlZmVycmVkKTohUHJvbWlzZX0gc3RhdGVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqPSl9XG4gKi9cbmZ1bmN0aW9uIGFkb3B0ZXIocHJvbWlzZSwgc3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgYWRvcHQocHJvbWlzZSwgc3RhdGUsIHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIGEgZGVmZXJyZWQgcHJvbWlzZXMgc3RhdGUuIE5lY2Vzc2FyeSBmb3IgdXBkYXRpbmcgYW4gYWRvcHRpbmdcbiAqIHByb21pc2UncyBzdGF0ZSB3aGVuIHRoZSBhZG9wdGVlIHJlc29sdmVzLlxuICpcbiAqIEBwYXJhbSB7P0RlZmVycmVkfSBkZWZlcnJlZFxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlByb21pc2UsKj0sZnVuY3Rpb24oKj0pLGZ1bmN0aW9uKCo9KSxEZWZlcnJlZCk6IVByb21pc2V9IHN0YXRlXG4gKiBAcGFyYW0geyo9fSB2YWx1ZVxuICovXG5mdW5jdGlvbiBkZWZlcnJlZEFkb3B0KGRlZmVycmVkLCBzdGF0ZSwgdmFsdWUpIHtcbiAgaWYgKGRlZmVycmVkKSB7XG4gICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuICAgIHByb21pc2UuX3N0YXRlID0gc3RhdGU7XG4gICAgcHJvbWlzZS5fdmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEEgbm8tb3AgZnVuY3Rpb24gdG8gcHJldmVudCBkb3VibGUgcmVzb2x2aW5nLlxuICovXG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKiBUZXN0cyBpZiBmbiBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSBmblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBUZXN0cyBpZiBmbiBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVhY2ggZWxlbWVudCBvZiBhbiBhcnJheSwgY2FsbGluZyB0aGUgaXRlcmF0b3Igd2l0aCB0aGVcbiAqIGVsZW1lbnQgYW5kIGl0cyBpbmRleC5cbiAqXG4gKiBAcGFyYW0geyFBcnJheX0gY29sbGVjdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbigqPSxudW1iZXIpfSBpdGVyYXRvclxuICovXG5mdW5jdGlvbiBlYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdG9yKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgIGl0ZXJhdG9yKGNvbGxlY3Rpb25baV0sIGkpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgdGhlIGRlZmVycmVkIHdpdGggdGhlIHJldHVyblxuICogb2YgZm4uIElmIGFueSBlcnJvciBpcyByYWlzZWQsIHJlamVjdHMgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyFEZWZlcnJlZH0gZGVmZXJyZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pfSBmblxuICogQHBhcmFtIHsqfSBhcmdcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfVxuICovXG5mdW5jdGlvbiB0cnlDYXRjaERlZmVycmVkKGRlZmVycmVkLCBmbiwgYXJnKSB7XG4gIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAgdmFyIHJlc29sdmUgPSBkZWZlcnJlZC5yZXNvbHZlO1xuICB2YXIgcmVqZWN0ID0gZGVmZXJyZWQucmVqZWN0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXN1bHQgPSBmbihhcmcpO1xuICAgICAgZG9SZXNvbHZlKHByb21pc2UsIHJlc29sdmUsIHJlamVjdCwgcmVzdWx0LCByZXN1bHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChlKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogUXVldWVzIGFuZCBleGVjdXRlcyBtdWx0aXBsZSBkZWZlcnJlZCBmdW5jdGlvbnMgb24gYW5vdGhlciBydW4gbG9vcC5cbiAqL1xudmFyIGRlZmVyID0gKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogRGVmZXJzIGZuIHRvIGFub3RoZXIgcnVuIGxvb3AuXG4gICAqL1xuICB2YXIgc2NoZWR1bGVGbHVzaDtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wb3N0TWVzc2FnZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZmx1c2gpO1xuICAgIHNjaGVkdWxlRmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgnbWFjcm8tdGFzaycsICcqJyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlZHVsZUZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZsdXNoLCAwKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHF1ZXVlID0gbmV3IEFycmF5KDE2KTtcbiAgdmFyIGxlbmd0aCA9IDA7XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZuID0gcXVldWVbaV07XG4gICAgICBxdWV1ZVtpXSA9IG51bGw7XG4gICAgICBmbigpO1xuICAgIH1cbiAgICBsZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm5cbiAgICovXG4gIGZ1bmN0aW9uIGRlZmVyKGZuKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkgeyBzY2hlZHVsZUZsdXNoKCk7IH1cbiAgICBxdWV1ZVtsZW5ndGgrK10gPSBmbjtcbiAgfVxuXG4gIHJldHVybiBkZWZlcjtcbn0pKCk7XG5cbi8qKlxuICogVGhlIFByb21pc2UgcmVzb2x1dGlvbiBwcm9jZWR1cmUuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcHJvbWlzZXMtYXBsdXMvcHJvbWlzZXMtc3BlYyN0aGUtcHJvbWlzZS1yZXNvbHV0aW9uLXByb2NlZHVyZVxuICpcbiAqIEBwYXJhbSB7IVByb21pc2V9IHByb21pc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pfSByZXNvbHZlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KX0gcmVqZWN0XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0geyo9fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGRvUmVzb2x2ZShwcm9taXNlLCByZXNvbHZlLCByZWplY3QsIHZhbHVlLCBjb250ZXh0KSB7XG4gIHZhciBfcmVqZWN0ID0gcmVqZWN0O1xuICB2YXIgdGhlbjtcbiAgdmFyIF9yZXNvbHZlO1xuICB0cnkge1xuICAgIGlmICh2YWx1ZSA9PT0gcHJvbWlzZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGZ1bGZpbGwgcHJvbWlzZSB3aXRoIGl0c2VsZicpO1xuICAgIH1cbiAgICB2YXIgaXNPYmogPSBpc09iamVjdCh2YWx1ZSk7XG4gICAgaWYgKGlzT2JqICYmIHZhbHVlIGluc3RhbmNlb2YgcHJvbWlzZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgYWRvcHQocHJvbWlzZSwgdmFsdWUuX3N0YXRlLCB2YWx1ZS5fdmFsdWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqICYmICh0aGVuID0gdmFsdWUudGhlbikgJiYgaXNGdW5jdGlvbih0aGVuKSkge1xuICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBfcmVzb2x2ZSA9IF9yZWplY3QgPSBub29wO1xuICAgICAgICBkb1Jlc29sdmUocHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0LCB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIF9yZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgX3Jlc29sdmUgPSBfcmVqZWN0ID0gbm9vcDtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuICAgICAgdGhlbi5jYWxsKFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfcmVzb2x2ZSh2YWx1ZSk7IH0sXG4gICAgICAgIGZ1bmN0aW9uKHJlYXNvbikgeyBfcmVqZWN0KHJlYXNvbik7IH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIF9yZWplY3QoZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgVGhlIFdlYiBBY3Rpdml0aWVzIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuIC8qKiBWZXJzaW9uOiAxLjI0ICovXG4ndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiAwKi9cblxuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IEFjdGl2aXR5TW9kZSA9IHtcbiAgSUZSQU1FOiAnaWZyYW1lJyxcbiAgUE9QVVA6ICdwb3B1cCcsXG4gIFJFRElSRUNUOiAncmVkaXJlY3QnLFxufTtcblxuXG4vKipcbiAqIFRoZSByZXN1bHQgY29kZSB1c2VkIGZvciBgQWN0aXZpdHlSZXN1bHRgLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgQWN0aXZpdHlSZXN1bHRDb2RlID0ge1xuICBPSzogJ29rJyxcbiAgQ0FOQ0VMRUQ6ICdjYW5jZWxlZCcsXG4gIEZBSUxFRDogJ2ZhaWxlZCcsXG59O1xuXG5cbi8qKlxuICogVGhlIHJlc3VsdCBvZiBhbiBhY3Rpdml0eS4gVGhlIGFjdGl2aXR5IGltcGxlbWVudGF0aW9uIHJldHVybnMgdGhpcyBvYmplY3RcbiAqIGZvciBhIHN1Y2Nlc3NmdWwgcmVzdWx0LCBhIGNhbmNlbGF0aW9uIG9yIGEgZmFpbHVyZS5cbiAqIEBzdHJ1Y3RcbiAqL1xuY2xhc3MgQWN0aXZpdHlSZXN1bHQge1xuICAvKipcbiAgICogQHBhcmFtIHshQWN0aXZpdHlSZXN1bHRDb2RlfSBjb2RlXG4gICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgKiBAcGFyYW0geyFBY3Rpdml0eU1vZGV9IG1vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9yaWdpblZlcmlmaWVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VjdXJlQ2hhbm5lbFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29kZSwgZGF0YSwgbW9kZSwgb3JpZ2luLCBvcmlnaW5WZXJpZmllZCwgc2VjdXJlQ2hhbm5lbCkge1xuICAgIC8qKiBAY29uc3QgeyFBY3Rpdml0eVJlc3VsdENvZGV9ICovXG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAvKiogQGNvbnN0IHsqfSAqL1xuICAgIHRoaXMuZGF0YSA9IGNvZGUgPT0gQWN0aXZpdHlSZXN1bHRDb2RlLk9LID8gZGF0YSA6IG51bGw7XG4gICAgLyoqIEBjb25zdCB7IUFjdGl2aXR5TW9kZX0gKi9cbiAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAvKiogQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMub3JpZ2luVmVyaWZpZWQgPSBvcmlnaW5WZXJpZmllZDtcbiAgICAvKiogQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMuc2VjdXJlQ2hhbm5lbCA9IHNlY3VyZUNoYW5uZWw7XG4gICAgLyoqIEBjb25zdCB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLm9rID0gY29kZSA9PSBBY3Rpdml0eVJlc3VsdENvZGUuT0s7XG4gICAgLyoqIEBjb25zdCB7P0Vycm9yfSAqL1xuICAgIHRoaXMuZXJyb3IgPSBjb2RlID09IEFjdGl2aXR5UmVzdWx0Q29kZS5GQUlMRUQgP1xuICAgICAgICBuZXcgRXJyb3IoU3RyaW5nKGRhdGEpIHx8ICcnKSA6XG4gICAgICAgIG51bGw7XG4gIH1cbn1cblxuXG4vKipcbiAqIFRoZSBhY3Rpdml0eSByZXF1ZXN0IHRoYXQgZGlmZmVyZW50IHR5cGVzIG9mIGhvc3RzIGNhbiBiZSBzdGFydGVkIHdpdGguXG4gKiBAdHlwZWRlZiB7e1xuICogICByZXF1ZXN0SWQ6IHN0cmluZyxcbiAqICAgcmV0dXJuVXJsOiBzdHJpbmcsXG4gKiAgIGFyZ3M6ID9PYmplY3QsXG4gKiAgIG9yaWdpbjogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICBvcmlnaW5WZXJpZmllZDogKGJvb2xlYW58dW5kZWZpbmVkKSxcbiAqIH19XG4gKi9cbmxldCBBY3Rpdml0eVJlcXVlc3Q7XG5cblxuLyoqXG4gKiBUaGUgYWN0aXZpdHkgXCJvcGVuXCIgb3B0aW9ucyB1c2VkIGZvciBwb3B1cHMgYW5kIHJlZGlyZWN0cy5cbiAqXG4gKiAtIHJldHVyblVybDogb3ZlcnJpZGUgdGhlIHJldHVybiBVUkwuIEJ5IGRlZmF1bHQsIHRoZSBjdXJyZW50IFVSTCB3aWxsIGJlXG4gKiAgIHVzZWQuXG4gKiAtIHNraXBSZXF1ZXN0SW5Vcmw6IHJlbW92ZXMgdGhlIGFjdGl2aXR5IHJlcXVlc3QgZnJvbSB0aGUgVVJMLCBpbiBjYXNlXG4gKiAgIHJlZGlyZWN0IGlzIHVzZWQuIEJ5IGRlZmF1bHQsIHRoZSBhY3Rpdml0eSByZXF1ZXN0IGlzIGFwcGVuZGVkIHRvIHRoZVxuICogICBhY3Rpdml0eSBVUkwuIFRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkIGlmIHRoZSBhY3Rpdml0eSByZXF1ZXN0IGlzIHBhc3NlZFxuICogICB0byB0aGUgYWN0aXZpdHkgYnkgc29tZSBhbHRlcm5hdGl2ZSBtZWFucy5cbiAqIC0gZGlzYWJsZVJlZGlyZWN0RmFsbGJhY2s6IGRpc2FsbG93cyBwb3B1cCBmYWxsYmFjayB0byByZWRpcmVjdC4gQnkgZGVmYXVsdFxuICogICB0aGUgcmVkaXJlY3QgZmFsbGJhY2sgaXMgYWxsb3dlZC4gVGhpcyBvcHRpb24gaGFzIHRvIGJlIHVzZWQgdmVyeSBjYXJlZnVsbHlcbiAqICAgYmVjYXVzZSB0aGVyZSBhcmUgbWFueSB1c2VyIGFnZW50cyB0aGF0IG1heSBmYWlsIHRvIG9wZW4gYSBwb3B1cCBhbmQgaXRcbiAqICAgd29uJ3QgYmUgYWx3YXlzIHBvc3NpYmxlIGZvciB0aGUgb3BlbmVyIHdpbmRvdyB0byBldmVuIGJlIGF3YXJlIG9mIHN1Y2hcbiAqICAgZmFpbHVyZXMuXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgcmV0dXJuVXJsOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIHNraXBSZXF1ZXN0SW5Vcmw6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiAgIGRpc2FibGVSZWRpcmVjdEZhbGxiYWNrOiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogICB3aWR0aDogKG51bWJlcnx1bmRlZmluZWQpLFxuICogICBoZWlnaHQ6IChudW1iZXJ8dW5kZWZpbmVkKSxcbiAqIH19XG4gKi9cbmxldCBBY3Rpdml0eU9wZW5PcHRpb25zO1xuXG5cbi8qKlxuICogQWN0aXZpdHkgY2xpZW50LXNpZGUgYmluZGluZy4gVGhlIHBvcnQgcHJvdmlkZXMgbGltaXRlZCB3YXlzIHRvIGNvbW11bmljYXRlXG4gKiB3aXRoIHRoZSBhY3Rpdml0eSBhbmQgcmVjZWl2ZSBzaWduYWxzIGFuZCByZXN1bHRzIGZyb20gaXQuIE5vdCBldmVyeSB0eXBlXG4gKiBvZiBhY3Rpdml0eSBleHBvc2VzIGEgcG9ydC5cbiAqXG4gKiBAaW50ZXJmYWNlXG4gKi9cbmNsYXNzIEFjdGl2aXR5UG9ydCB7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1vZGUgb2YgdGhlIGFjdGl2aXR5OiBpZnJhbWUsIHBvcHVwIG9yIHJlZGlyZWN0LlxuICAgKiBAcmV0dXJuIHshQWN0aXZpdHlNb2RlfVxuICAgKi9cbiAgZ2V0TW9kZSgpIHt9XG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgdGhlIHJlc3VsdCB3aGVuIHJlYWR5LiBUaGUgY2xpZW50IHNob3VsZCB2ZXJpZnkgdGhlIGFjdGl2aXR5J3NcbiAgICogbW9kZSwgb3JpZ2luLCB2ZXJpZmljYXRpb24gYW5kIHNlY3VyZSBjaGFubmVsIGZsYWdzIGJlZm9yZSBkZWNpZGluZ1xuICAgKiB3aGV0aGVyIG9yIG5vdCB0byB0cnVzdCB0aGUgcmVzdWx0LlxuICAgKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9taXNlIHRoYXQgeWllbGRzIHdoZW4gdGhlIGFjdGl2aXR5IGhhcyBiZWVuIGNvbXBsZXRlZCBhbmRcbiAgICogZWl0aGVyIGEgcmVzdWx0LCBhIGNhbmNlbGF0aW9uIG9yIGEgZmFpbHVyZSBoYXMgYmVlbiByZXR1cm5lZC5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFjdGl2aXR5UmVzdWx0Pn1cbiAgICovXG4gIGFjY2VwdFJlc3VsdCgpIHt9XG59XG5cblxuLyoqXG4gKiBBY3Rpdml0eSBjbGllbnQtc2lkZSBiaW5kaW5nIGZvciBtZXNzYWdpbmcuXG4gKlxuICogV2hldGhlciB0aGUgaG9zdCBjYW4gb3IgY2Fubm90IHJlY2VpdmUgYSBtZXNzYWdlIGRlcGVuZHMgb24gdGhlIHR5cGUgb2ZcbiAqIGhvc3QgYW5kIGl0cyBzdGF0ZS4gRW5zdXJlIHRoYXQgdGhlIGNvZGUgaGFzIGFuIGFsdGVybmF0aXZlIHBhdGggaWZcbiAqIG1lc3NhZ2luZyBpcyBub3QgYXZhaWxhYmxlLlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqL1xuY2xhc3MgQWN0aXZpdHlNZXNzYWdpbmdQb3J0IHtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGFyZ2V0IHdpbmRvdyB3aGVyZSBob3N0IGlzIGxvYWRlZC4gTWF5IGJlIHVuYXZhaWxhYmxlLlxuICAgKiBAcmV0dXJuIHs/V2luZG93fVxuICAgKi9cbiAgZ2V0VGFyZ2V0V2luKCkge31cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBob3N0LlxuICAgKiBAcGFyYW0geyFPYmplY3R9IHBheWxvYWRcbiAgICovXG4gIG1lc3NhZ2UocGF5bG9hZCkge31cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gcmVjZWl2ZSBtZXNzYWdlcyBmcm9tIHRoZSBob3N0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFPYmplY3QpfSBjYWxsYmFja1xuICAgKi9cbiAgb25NZXNzYWdlKGNhbGxiYWNrKSB7fVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGNvbW11bmljYXRpb24gY2hhbm5lbCBvciByZXR1cm5zIGFuIGV4aXN0aW5nIG9uZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbmFtZVxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhTWVzc2FnZVBvcnQ+fVxuICAgKi9cbiAgbWVzc2FnZUNoYW5uZWwob3B0X25hbWUpIHt9XG59XG5cblxuXG4vKiogRE9NRXhjZXB0aW9uLkFCT1JUX0VSUiBuYW1lICovXG5jb25zdCBBQk9SVF9FUlJfTkFNRSA9ICdBYm9ydEVycm9yJztcblxuLyoqIERPTUV4Y2VwdGlvbi5BQk9SVF9FUlIgPSAyMCAqL1xuY29uc3QgQUJPUlRfRVJSX0NPREUgPSAyMDtcblxuLyoqIEB0eXBlIHs/SFRNTEFuY2hvckVsZW1lbnR9ICovXG5sZXQgYVJlc29sdmVyO1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFN0cmluZ1xuICogQHJldHVybiB7IUhUTUxBbmNob3JFbGVtZW50fVxuICovXG5mdW5jdGlvbiBwYXJzZVVybCh1cmxTdHJpbmcpIHtcbiAgaWYgKCFhUmVzb2x2ZXIpIHtcbiAgICBhUmVzb2x2ZXIgPSAvKiogQHR5cGUgeyFIVE1MQW5jaG9yRWxlbWVudH0gKi8gKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSk7XG4gIH1cbiAgYVJlc29sdmVyLmhyZWYgPSB1cmxTdHJpbmc7XG4gIHJldHVybiAvKiogQHR5cGUgeyFIVE1MQW5jaG9yRWxlbWVudH0gKi8gKGFSZXNvbHZlcik7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0geyFMb2NhdGlvbnwhVVJMfCFIVE1MQW5jaG9yRWxlbWVudH0gbG9jXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldE9yaWdpbihsb2MpIHtcbiAgaWYgKGxvYy5vcmlnaW4pIHtcbiAgICByZXR1cm4gbG9jLm9yaWdpbjtcbiAgfVxuICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgb3JpZ2luIGlzIG5vcm1hbGl6ZWQuIFNwZWNpZmljYWxseSBvbiBJRSwgaG9zdCBzb21ldGltZXNcbiAgLy8gaW5jbHVkZXMgdGhlIGRlZmF1bHQgcG9ydCwgd2hpY2ggaXMgbm90IHBlciBzdGFuZGFyZC5cbiAgY29uc3QgcHJvdG9jb2wgPSBsb2MucHJvdG9jb2w7XG4gIGxldCBob3N0ID0gbG9jLmhvc3Q7XG4gIGlmIChwcm90b2NvbCA9PSAnaHR0cHM6JyAmJiBob3N0LmluZGV4T2YoJzo0NDMnKSA9PSBob3N0Lmxlbmd0aCAtIDQpIHtcbiAgICBob3N0ID0gaG9zdC5yZXBsYWNlKCc6NDQzJywgJycpO1xuICB9IGVsc2UgaWYgKHByb3RvY29sID09ICdodHRwOicgJiYgaG9zdC5pbmRleE9mKCc6ODAnKSA9PSBob3N0Lmxlbmd0aCAtIDMpIHtcbiAgICBob3N0ID0gaG9zdC5yZXBsYWNlKCc6ODAnLCAnJyk7XG4gIH1cbiAgcmV0dXJuIHByb3RvY29sICsgJy8vJyArIGhvc3Q7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsU3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldE9yaWdpbkZyb21VcmwodXJsU3RyaW5nKSB7XG4gIHJldHVybiBnZXRPcmlnaW4ocGFyc2VVcmwodXJsU3RyaW5nKSk7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsU3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUZyYWdtZW50KHVybFN0cmluZykge1xuICBjb25zdCBpbmRleCA9IHVybFN0cmluZy5pbmRleE9mKCcjJyk7XG4gIGlmIChpbmRleCA9PSAtMSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHVybFN0cmluZy5zdWJzdHJpbmcoMCwgaW5kZXgpO1xufVxuXG5cbi8qKlxuICogUGFyc2VzIGFuZCBidWlsZHMgT2JqZWN0IG9mIFVSTCBxdWVyeSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgVGhlIFVSTCBxdWVyeSBzdHJpbmcuXG4gKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeSkge1xuICBpZiAoIXF1ZXJ5KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiAoL15bPyNdLy50ZXN0KHF1ZXJ5KSA/IHF1ZXJ5LnNsaWNlKDEpIDogcXVlcnkpXG4gICAgICAuc3BsaXQoJyYnKVxuICAgICAgLnJlZHVjZSgocGFyYW1zLCBwYXJhbSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gcGFyYW0uc3BsaXQoJz0nKTtcbiAgICAgICAgY29uc3Qga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0ZW1bMF0gfHwgJycpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChpdGVtWzFdIHx8ICcnKTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIHBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgIH0sIHt9KTtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVN0cmluZyAgQSBxdWVyeSBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgXCJhPWImYz1kXCIuIENvdWxkXG4gKiAgIGJlIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBcIj9cIiBvciBcIiNcIi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSBUaGUgcGFyYW0gdG8gZ2V0IGZyb20gdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldFF1ZXJ5UGFyYW0ocXVlcnlTdHJpbmcsIHBhcmFtKSB7XG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKVtwYXJhbV07XG59XG5cblxuLyoqXG4gKiBBZGQgYSBxdWVyeS1saWtlIHBhcmFtZXRlciB0byB0aGUgZnJhZ21lbnQgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gYWRkRnJhZ21lbnRQYXJhbSh1cmwsIHBhcmFtLCB2YWx1ZSkge1xuICByZXR1cm4gdXJsICtcbiAgICAgICh1cmwuaW5kZXhPZignIycpID09IC0xID8gJyMnIDogJyYnKSArXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQocGFyYW0pICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVN0cmluZyAgQSBxdWVyeSBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgXCJhPWImYz1kXCIuIENvdWxkXG4gKiAgIGJlIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBcIj9cIiBvciBcIiNcIi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSBUaGUgcGFyYW0gdG8gcmVtb3ZlIGZyb20gdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVF1ZXJ5UGFyYW0ocXVlcnlTdHJpbmcsIHBhcmFtKSB7XG4gIGlmICghcXVlcnlTdHJpbmcpIHtcbiAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG4gIH1cbiAgY29uc3Qgc2VhcmNoID0gZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtKSArICc9JztcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGRvIHtcbiAgICBpbmRleCA9IHF1ZXJ5U3RyaW5nLmluZGV4T2Yoc2VhcmNoLCBpbmRleCk7XG4gICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICBjb25zdCBwcmV2ID0gaW5kZXggPiAwID8gcXVlcnlTdHJpbmcuc3Vic3RyaW5nKGluZGV4IC0gMSwgaW5kZXgpIDogJyc7XG4gICAgICBpZiAocHJldiA9PSAnJyB8fCBwcmV2ID09ICc/JyB8fCBwcmV2ID09ICcjJyB8fCBwcmV2ID09ICcmJykge1xuICAgICAgICBsZXQgZW5kID0gcXVlcnlTdHJpbmcuaW5kZXhPZignJicsIGluZGV4ICsgMSk7XG4gICAgICAgIGlmIChlbmQgPT0gLTEpIHtcbiAgICAgICAgICBlbmQgPSBxdWVyeVN0cmluZy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcXVlcnlTdHJpbmcgPVxuICAgICAgICAgICAgcXVlcnlTdHJpbmcuc3Vic3RyaW5nKDAsIGluZGV4KSArXG4gICAgICAgICAgICBxdWVyeVN0cmluZy5zdWJzdHJpbmcoZW5kICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAoaW5kZXggIT0gLTEgJiYgaW5kZXggPCBxdWVyeVN0cmluZy5sZW5ndGgpO1xuICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBY3Rpdml0eVJlcXVlc3R9IHJlcXVlc3RcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplUmVxdWVzdChyZXF1ZXN0KSB7XG4gIGNvbnN0IG1hcCA9IHtcbiAgICAncmVxdWVzdElkJzogcmVxdWVzdC5yZXF1ZXN0SWQsXG4gICAgJ3JldHVyblVybCc6IHJlcXVlc3QucmV0dXJuVXJsLFxuICAgICdhcmdzJzogcmVxdWVzdC5hcmdzLFxuICB9O1xuICBpZiAocmVxdWVzdC5vcmlnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgIG1hcFsnb3JpZ2luJ10gPSByZXF1ZXN0Lm9yaWdpbjtcbiAgfVxuICBpZiAocmVxdWVzdC5vcmlnaW5WZXJpZmllZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbWFwWydvcmlnaW5WZXJpZmllZCddID0gcmVxdWVzdC5vcmlnaW5WZXJpZmllZDtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobWFwKTtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gZXJyb3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzQWJvcnRFcnJvcihlcnJvcikge1xuICBpZiAoIWVycm9yIHx8IHR5cGVvZiBlcnJvciAhPSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKGVycm9yWyduYW1lJ10gPT09IEFCT1JUX0VSUl9OQU1FKTtcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgb3IgZW11bGF0ZXMgYSBET01FeGNlcHRpb24gb2YgQWJvcnRFcnJvciB0eXBlLlxuICogU2VlIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2Fib3J0ZXJyb3IuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZVxuICogQHJldHVybiB7IURPTUV4Y2VwdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQWJvcnRFcnJvcih3aW4sIG9wdF9tZXNzYWdlKSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSAnQWJvcnRFcnJvcicgKyAob3B0X21lc3NhZ2UgPyAnOiAnICsgb3B0X21lc3NhZ2UgOiAnJyk7XG4gIGxldCBlcnJvciA9IG51bGw7XG4gIGlmICh0eXBlb2Ygd2luWydET01FeGNlcHRpb24nXSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVE9ETyhkdm95dGVua28pOiByZW1vdmUgdHlwZWNhc3Qgb25jZSBleHRlcm5zIGFyZSBmaXhlZC5cbiAgICBjb25zdCBjb25zdHIgPSAvKiogQHR5cGUge2Z1bmN0aW9uKG5ldzpET01FeGNlcHRpb24sIHN0cmluZywgc3RyaW5nKX0gKi8gKFxuICAgICAgICB3aW5bJ0RPTUV4Y2VwdGlvbiddKTtcbiAgICB0cnkge1xuICAgICAgZXJyb3IgPSBuZXcgY29uc3RyKG1lc3NhZ2UsIEFCT1JUX0VSUl9OQU1FKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZ25vcmUuIEluIHBhcnRpY3VsYXIsIGBuZXcgRE9NRXhjZXB0aW9uKClgIGZhaWxzIGluIEVkZ2UuXG4gICAgfVxuICB9XG4gIGlmICghZXJyb3IpIHtcbiAgICAvLyBUT0RPKGR2b3l0ZW5rbyk6IHJlbW92ZSB0eXBlY2FzdCBvbmNlIGV4dGVybnMgYXJlIGZpeGVkLlxuICAgIGNvbnN0IGNvbnN0ciA9IC8qKiBAdHlwZSB7ZnVuY3Rpb24obmV3OkRPTUV4Y2VwdGlvbiwgc3RyaW5nKX0gKi8gKFxuICAgICAgICBFcnJvcik7XG4gICAgZXJyb3IgPSBuZXcgY29uc3RyKG1lc3NhZ2UpO1xuICAgIGVycm9yLm5hbWUgPSBBQk9SVF9FUlJfTkFNRTtcbiAgICBlcnJvci5jb2RlID0gQUJPUlRfRVJSX0NPREU7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIGFjdGl2aXR5IHJlc3VsdCBhcyBhIHByb21pc2U6XG4gKiAgLSBgT0tgIHJlc3VsdCBpcyB5aWVsZGVkIGFzIHRoZSBwcm9taXNlJ3MgcGF5bG9hZDtcbiAqICAtIGBDQU5DRUxgIHJlc3VsdCBpcyByZWplY3RlZCB3aXRoIHRoZSBgQWJvcnRFcnJvcmA7XG4gKiAgLSBgRkFJTEVEYCByZXN1bHQgaXMgcmVqZWN0ZWQgd2l0aCB0aGUgZW1iZWRkZWQgZXJyb3IuXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUFjdGl2aXR5UmVzdWx0fSByZXN1bHRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKCFBY3Rpdml0eVJlc3VsdHwhUHJvbWlzZSkpfSByZXNvbHZlclxuICovXG5mdW5jdGlvbiByZXNvbHZlUmVzdWx0KHdpbiwgcmVzdWx0LCByZXNvbHZlcikge1xuICBpZiAocmVzdWx0Lm9rKSB7XG4gICAgcmVzb2x2ZXIocmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlcnJvciA9IHJlc3VsdC5lcnJvciB8fCBjcmVhdGVBYm9ydEVycm9yKHdpbik7XG4gICAgZXJyb3IuYWN0aXZpdHlSZXN1bHQgPSByZXN1bHQ7XG4gICAgcmVzb2x2ZXIoUHJvbWlzZS5yZWplY3QoZXJyb3IpKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzSWVCcm93c2VyKHdpbikge1xuICAvLyBNU0lFIGFuZCBUcmlkZW50IGFyZSB0eXBpY2FsIHVzZXIgYWdlbnRzIGZvciBJRSBicm93c2Vycy5cbiAgY29uc3QgbmF2ID0gd2luLm5hdmlnYXRvcjtcbiAgcmV0dXJuIC9UcmlkZW50fE1TSUV8SUVNb2JpbGUvaS50ZXN0KG5hdiAmJiBuYXYudXNlckFnZW50KTtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0VkZ2VCcm93c2VyKHdpbikge1xuICBjb25zdCBuYXYgPSB3aW4ubmF2aWdhdG9yO1xuICByZXR1cm4gL0VkZ2UvaS50ZXN0KG5hdiAmJiBuYXYudXNlckFnZW50KTtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7IUVycm9yfSBlXG4gKi9cbmZ1bmN0aW9uIHRocm93QXN5bmMoZSkge1xuICBzZXRUaW1lb3V0KCgpID0+IHt0aHJvdyBlO30pO1xufVxuXG5cbi8qKlxuICogUG9seWZpbGwgb2YgdGhlIGBOb2RlLmlzQ29ubmVjdGVkYCBBUEkuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvaXNDb25uZWN0ZWQuXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc05vZGVDb25uZWN0ZWQobm9kZSkge1xuICAvLyBFbnN1cmUgdGhhdCBub2RlIGlzIGF0dGFjaGVkIGlmIHNwZWNpZmllZC4gVGhpcyBjaGVjayB1c2VzIGEgbmV3IGFuZFxuICAvLyBmYXN0IGBpc0Nvbm5lY3RlZGAgQVBJIGFuZCB0aHVzIG9ubHkgY2hlY2tlZCBvbiBwbGF0Zm9ybXMgdGhhdCBoYXZlIGl0LlxuICAvLyBTZWUgaHR0cHM6Ly93d3cuY2hyb21lc3RhdHVzLmNvbS9mZWF0dXJlLzU2NzYxMTA1NDkzNTI0NDguXG4gIGlmICgnaXNDb25uZWN0ZWQnIGluIG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZVsnaXNDb25uZWN0ZWQnXTtcbiAgfVxuICAvLyBQb2x5ZmlsbC5cbiAgY29uc3Qgcm9vdCA9IG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICByZXR1cm4gKHJvb3QgJiYgcm9vdC5jb250YWlucyhub2RlKSkgfHwgZmFsc2U7XG59XG5cblxuXG5jb25zdCBTRU5USU5FTCA9ICdfX0FDVElWSVRJRVNfXyc7XG5cblxuLyoqXG4gKiBUaGUgbWVzc2VuZ2VyIGhlbHBlciBmb3IgYWN0aXZpdHkncyBwb3J0IGFuZCBob3N0LlxuICovXG5jbGFzcyBNZXNzZW5nZXIge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcGFyYW0geyFXaW5kb3d8ZnVuY3Rpb24oKTo/V2luZG93fSB0YXJnZXRPckNhbGxiYWNrXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdGFyZ2V0T3JpZ2luXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZVRhcmdldFxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luLCB0YXJnZXRPckNhbGxiYWNrLCB0YXJnZXRPcmlnaW4sIHJlcXVpcmVUYXJnZXQpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IHdpbjtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d8ZnVuY3Rpb24oKTo/V2luZG93fSAqL1xuICAgIHRoaXMudGFyZ2V0T3JDYWxsYmFja18gPSB0YXJnZXRPckNhbGxiYWNrO1xuXG4gICAgLyoqXG4gICAgICogTWF5IHN0YXJ0IGFzIHVua25vd24gKGBudWxsYCkgdW50aWwgcmVjZWl2ZWQgaW4gdGhlIGZpcnN0IG1lc3NhZ2UuXG4gICAgICogQHByaXZhdGUgez9zdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50YXJnZXRPcmlnaW5fID0gdGFyZ2V0T3JpZ2luO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLnJlcXVpcmVUYXJnZXRfID0gcmVxdWlyZVRhcmdldDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1dpbmRvd30gKi9cbiAgICB0aGlzLnRhcmdldF8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuYWNjZXB0c0NoYW5uZWxfID0gZmFsc2U7XG5cbiAgICAvKiogQHByaXZhdGUgez9NZXNzYWdlUG9ydH0gKi9cbiAgICB0aGlzLnBvcnRfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKHN0cmluZywgP09iamVjdCl9ICovXG4gICAgdGhpcy5vbkNvbW1hbmRfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKCFPYmplY3QpfSAqL1xuICAgIHRoaXMub25DdXN0b21NZXNzYWdlXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSB7P09iamVjdDxzdHJpbmcsICFDaGFubmVsSG9sZGVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmNoYW5uZWxzXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0ICovXG4gICAgdGhpcy5ib3VuZEhhbmRsZUV2ZW50XyA9IHRoaXMuaGFuZGxlRXZlbnRfLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ29ubmVjdCB0aGUgcG9ydCB0byB0aGUgaG9zdCBvciB2aWNlIHZlcnNhLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgP09iamVjdCl9IG9uQ29tbWFuZFxuICAgKi9cbiAgY29ubmVjdChvbkNvbW1hbmQpIHtcbiAgICBpZiAodGhpcy5vbkNvbW1hbmRfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgY29ubmVjdGVkJyk7XG4gICAgfVxuICAgIHRoaXMub25Db21tYW5kXyA9IG9uQ29tbWFuZDtcbiAgICB0aGlzLndpbl8uYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuYm91bmRIYW5kbGVFdmVudF8pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgbWVzc2VuZ2VyLlxuICAgKi9cbiAgZGlzY29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy5vbkNvbW1hbmRfKSB7XG4gICAgICB0aGlzLm9uQ29tbWFuZF8gPSBudWxsO1xuICAgICAgaWYgKHRoaXMucG9ydF8pIHtcbiAgICAgICAgY2xvc2VQb3J0KHRoaXMucG9ydF8pO1xuICAgICAgICB0aGlzLnBvcnRfID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMud2luXy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5ib3VuZEhhbmRsZUV2ZW50Xyk7XG4gICAgICBpZiAodGhpcy5jaGFubmVsc18pIHtcbiAgICAgICAgZm9yIChjb25zdCBrIGluIHRoaXMuY2hhbm5lbHNfKSB7XG4gICAgICAgICAgY29uc3QgY2hhbm5lbE9iaiA9IHRoaXMuY2hhbm5lbHNfW2tdO1xuICAgICAgICAgIGlmIChjaGFubmVsT2JqLnBvcnQxKSB7XG4gICAgICAgICAgICBjbG9zZVBvcnQoY2hhbm5lbE9iai5wb3J0MSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFubmVsT2JqLnBvcnQyKSB7XG4gICAgICAgICAgICBjbG9zZVBvcnQoY2hhbm5lbE9iai5wb3J0Mik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhbm5lbHNfID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBtZXNzZW5nZXIgaGFzIGJlZW4gY29ubmVjdGVkIGFscmVhZHkuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0Nvbm5lY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy50YXJnZXRPcmlnaW5fICE9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWVzc2FnaW5nIHRhcmdldC4gT25seSBhdmFpbGFibGUgd2hlbiBjb25uZWN0aW9uIGhhcyBiZWVuXG4gICAqIGVzdGFibGloc2VkLlxuICAgKiBAcmV0dXJuIHshV2luZG93fVxuICAgKi9cbiAgZ2V0VGFyZ2V0KCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0T3B0aW9uYWxUYXJnZXRfKCk7XG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGNvbm5lY3RlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9XaW5kb3d9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRPcHRpb25hbFRhcmdldF8oKSB7XG4gICAgaWYgKHRoaXMub25Db21tYW5kXyAmJiAhdGhpcy50YXJnZXRfKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0T3JDYWxsYmFja18gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnRhcmdldF8gPSB0aGlzLnRhcmdldE9yQ2FsbGJhY2tfKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRhcmdldF8gPSAvKiogQHR5cGUgeyFXaW5kb3d9ICovICh0aGlzLnRhcmdldE9yQ2FsbGJhY2tfKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0XztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtZXNzYWdpbmcgb3JpZ2luLiBPbmx5IGF2YWlsYWJsZSB3aGVuIGNvbm5lY3Rpb24gaGFzIGJlZW5cbiAgICogZXN0YWJsaWhzZWQuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldFRhcmdldE9yaWdpbigpIHtcbiAgICBpZiAodGhpcy50YXJnZXRPcmlnaW5fID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGNvbm5lY3RlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YXJnZXRPcmlnaW5fO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBob3N0IHNlbmRzIHRoaXMgbWVzc2FnZSB0byB0aGUgY2xpZW50IHRvIGluZGljYXRlIHRoYXQgaXQncyByZWFkeSB0b1xuICAgKiBzdGFydCBjb21tdW5pY2F0aW5nLiBUaGUgY2xpZW50IGlzIGV4cGVjdGVkIHRvIHJlc3BvbmQgYmFjayB3aXRoIHRoZVxuICAgKiBcInN0YXJ0XCIgY29tbWFuZC4gU2VlIGBzZW5kU3RhcnRDb21tYW5kYCBtZXRob2QuXG4gICAqL1xuICBzZW5kQ29ubmVjdENvbW1hbmQoKSB7XG4gICAgLy8gVE9ETyhkdm95dGVua28pOiBNZXNzYWdlQ2hhbm5lbCBpcyBjcml0aWNhbGx5IG5lY2Vzc2FyeSBmb3IgSUUvRWRnZSxcbiAgICAvLyBzaW5jZSB3aW5kb3cgbWVzc2FnaW5nIGRvZXNuJ3QgYWx3YXlzIHdvcmsuIEl0J3MgYWxzbyBwcmVmZXJyZWQgYXMgYW4gQVBJXG4gICAgLy8gZm9yIG90aGVyIGJyb3dzZXJzOiBpdCdzIG5ld2VyLCBjbGVhbmVyIGFuZCBhcmd1YWJseSBtb3JlIHNlY3VyZS5cbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCBicm93c2VycyBjdXJyZW50bHkgZG8gbm90IHByb3BhZ2F0ZSB1c2VyIGdlc3R1cmVzIHZpYVxuICAgIC8vIE1lc3NhZ2VDaGFubmVsLCBvbmx5IHZpYSB3aW5kb3cgbWVzc2FnaW5nLiBUaGlzIHNob3VsZCBiZSByZS1lbmFibGVkXG4gICAgLy8gb25jZSBicm93c2VycyBmaXggdXNlciBnZXN0dXJlIHByb3BhZ2F0aW9uLlxuICAgIC8vIFNlZTpcbiAgICAvLyBTYWZhcmk6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODY1OTNcbiAgICAvLyBDaHJvbWU6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTg1MTQ5M1xuICAgIC8vIEZpcmVmb3g6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0Njk0MjJcbiAgICBjb25zdCBhY2NlcHRzQ2hhbm5lbCA9IGlzSWVCcm93c2VyKHRoaXMud2luXykgfHwgaXNFZGdlQnJvd3Nlcih0aGlzLndpbl8pO1xuICAgIHRoaXMuc2VuZENvbW1hbmQoJ2Nvbm5lY3QnLCB7J2FjY2VwdHNDaGFubmVsJzogYWNjZXB0c0NoYW5uZWx9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY2xpZW50IHNlbmRzIHRoaXMgbWVzc2FnZSB0byB0aGUgaG9zdCB1cG9uIHJlY2VpdmluZyB0aGUgXCJjb25uZWN0XCJcbiAgICogbWVzc2FnZSB0byBzdGFydCB0aGUgbWFpbiBjb21tdW5pY2F0aW9uIGNoYW5uZWwuIEFzIGEgcGF5bG9hZCwgdGhlIG1lc3NhZ2VcbiAgICogd2lsbCBjb250YWluIHRoZSBwcm92aWRlZCBzdGFydCBhcmd1bWVudHMuXG4gICAqIEBwYXJhbSB7P09iamVjdH0gYXJnc1xuICAgKi9cbiAgc2VuZFN0YXJ0Q29tbWFuZChhcmdzKSB7XG4gICAgbGV0IGNoYW5uZWwgPSBudWxsO1xuICAgIGlmICh0aGlzLmFjY2VwdHNDaGFubmVsXyAmJiB0eXBlb2YgdGhpcy53aW5fLk1lc3NhZ2VDaGFubmVsID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNoYW5uZWwgPSBuZXcgdGhpcy53aW5fLk1lc3NhZ2VDaGFubmVsKCk7XG4gICAgfVxuICAgIGlmIChjaGFubmVsKSB7XG4gICAgICB0aGlzLnNlbmRDb21tYW5kKCdzdGFydCcsIGFyZ3MsIFtjaGFubmVsLnBvcnQyXSk7XG4gICAgICAvLyBJdCdzIGNyaXRpY2FsIHRvIHN3aXRjaCB0byBwb3J0IG1lc3NhZ2luZyBvbmx5IGFmdGVyIFwic3RhcnRcIiBoYXMgYmVlblxuICAgICAgLy8gc2VudC4gT3RoZXJ3aXNlLCBpdCB3b24ndCBiZSBkZWxpdmVyZWQuXG4gICAgICB0aGlzLnN3aXRjaFRvQ2hhbm5lbF8oY2hhbm5lbC5wb3J0MSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VuZENvbW1hbmQoJ3N0YXJ0JywgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBzcGVjaWZpZWQgY29tbWFuZCBmcm9tIHRoZSBwb3J0IHRvIHRoZSBob3N0IG9yIHZpY2UgdmVyc2EuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbWRcbiAgICogQHBhcmFtIHs/T2JqZWN0PX0gb3B0X3BheWxvYWRcbiAgICogQHBhcmFtIHs/QXJyYXk9fSBvcHRfdHJhbnNmZXJcbiAgICovXG4gIHNlbmRDb21tYW5kKGNtZCwgb3B0X3BheWxvYWQsIG9wdF90cmFuc2Zlcikge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAnc2VudGluZWwnOiBTRU5USU5FTCxcbiAgICAgICdjbWQnOiBjbWQsXG4gICAgICAncGF5bG9hZCc6IG9wdF9wYXlsb2FkIHx8IG51bGwsXG4gICAgfTtcbiAgICBpZiAodGhpcy5wb3J0Xykge1xuICAgICAgdGhpcy5wb3J0Xy5wb3N0TWVzc2FnZShkYXRhLCBvcHRfdHJhbnNmZXIgfHwgdW5kZWZpbmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5nZXRUYXJnZXQoKTtcbiAgICAgIC8vIE9ubHkgXCJjb25uZWN0XCIgY29tbWFuZCBpcyBhbGxvd2VkIHRvIHVzZSBgdGFyZ2V0T3JpZ2luID09ICcqJ2BcbiAgICAgIGNvbnN0IHRhcmdldE9yaWdpbiA9XG4gICAgICAgICAgY21kID09ICdjb25uZWN0JyA/XG4gICAgICAgICAgKHRoaXMudGFyZ2V0T3JpZ2luXyAhPSBudWxsID8gdGhpcy50YXJnZXRPcmlnaW5fIDogJyonKSA6XG4gICAgICAgICAgdGhpcy5nZXRUYXJnZXRPcmlnaW4oKTtcbiAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShkYXRhLCB0YXJnZXRPcmlnaW4sIG9wdF90cmFuc2ZlciB8fCB1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UgdG8gdGhlIGNsaWVudC5cbiAgICogQHBhcmFtIHshT2JqZWN0fSBwYXlsb2FkXG4gICAqL1xuICBjdXN0b21NZXNzYWdlKHBheWxvYWQpIHtcbiAgICB0aGlzLnNlbmRDb21tYW5kKCdtc2cnLCBwYXlsb2FkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byByZWNlaXZlIG1lc3NhZ2VzIGZyb20gdGhlIGNsaWVudC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbighT2JqZWN0KX0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ3VzdG9tTWVzc2FnZShjYWxsYmFjaykge1xuICAgIHRoaXMub25DdXN0b21NZXNzYWdlXyA9IGNhbGxiYWNrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X25hbWVcbiAgICogQHJldHVybiB7IVByb21pc2U8IU1lc3NhZ2VQb3J0Pn1cbiAgICovXG4gIHN0YXJ0Q2hhbm5lbChvcHRfbmFtZSkge1xuICAgIGNvbnN0IG5hbWUgPSBvcHRfbmFtZSB8fCAnJztcbiAgICBjb25zdCBjaGFubmVsT2JqID0gdGhpcy5nZXRDaGFubmVsT2JqXyhuYW1lKTtcbiAgICBpZiAoIWNoYW5uZWxPYmoucG9ydDEpIHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSBuZXcgdGhpcy53aW5fLk1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICBjaGFubmVsT2JqLnBvcnQxID0gY2hhbm5lbC5wb3J0MTtcbiAgICAgIGNoYW5uZWxPYmoucG9ydDIgPSBjaGFubmVsLnBvcnQyO1xuICAgICAgY2hhbm5lbE9iai5yZXNvbHZlcihjaGFubmVsT2JqLnBvcnQxKTtcbiAgICB9XG4gICAgaWYgKGNoYW5uZWxPYmoucG9ydDIpIHtcbiAgICAgIC8vIE5vdCB5ZXQgc2VudC5cbiAgICAgIHRoaXMuc2VuZENvbW1hbmQoJ2Nuc2V0JywgeyduYW1lJzogbmFtZX0sIFtjaGFubmVsT2JqLnBvcnQyXSk7XG4gICAgICBjaGFubmVsT2JqLnBvcnQyID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNoYW5uZWxPYmoucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9uYW1lXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCFNZXNzYWdlUG9ydD59XG4gICAqL1xuICBhc2tDaGFubmVsKG9wdF9uYW1lKSB7XG4gICAgY29uc3QgbmFtZSA9IG9wdF9uYW1lIHx8ICcnO1xuICAgIGNvbnN0IGNoYW5uZWxPYmogPSB0aGlzLmdldENoYW5uZWxPYmpfKG5hbWUpO1xuICAgIGlmICghY2hhbm5lbE9iai5wb3J0MSkge1xuICAgICAgdGhpcy5zZW5kQ29tbWFuZCgnY25nZXQnLCB7J25hbWUnOiBuYW1lfSk7XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsT2JqLnByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHshTWVzc2FnZVBvcnR9IHBvcnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlY2VpdmVDaGFubmVsXyhuYW1lLCBwb3J0KSB7XG4gICAgY29uc3QgY2hhbm5lbE9iaiA9IHRoaXMuZ2V0Q2hhbm5lbE9ial8obmFtZSk7XG4gICAgY2hhbm5lbE9iai5wb3J0MSA9IHBvcnQ7XG4gICAgY2hhbm5lbE9iai5yZXNvbHZlcihwb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHshQ2hhbm5lbEhvbGRlcn1cbiAgICovXG4gIGdldENoYW5uZWxPYmpfKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMuY2hhbm5lbHNfKSB7XG4gICAgICB0aGlzLmNoYW5uZWxzXyA9IHt9O1xuICAgIH1cbiAgICBsZXQgY2hhbm5lbE9iaiA9IHRoaXMuY2hhbm5lbHNfW25hbWVdO1xuICAgIGlmICghY2hhbm5lbE9iaikge1xuICAgICAgbGV0IHJlc29sdmVyO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICByZXNvbHZlciA9IHJlc29sdmU7XG4gICAgICB9KTtcbiAgICAgIGNoYW5uZWxPYmogPSB7XG4gICAgICAgIHBvcnQxOiBudWxsLFxuICAgICAgICBwb3J0MjogbnVsbCxcbiAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgIHByb21pc2UsXG4gICAgICB9O1xuICAgICAgdGhpcy5jaGFubmVsc19bbmFtZV0gPSBjaGFubmVsT2JqO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbm5lbE9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFNZXNzYWdlUG9ydH0gcG9ydFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3dpdGNoVG9DaGFubmVsXyhwb3J0KSB7XG4gICAgaWYgKHRoaXMucG9ydF8pIHtcbiAgICAgIGNsb3NlUG9ydCh0aGlzLnBvcnRfKTtcbiAgICB9XG4gICAgdGhpcy5wb3J0XyA9IHBvcnQ7XG4gICAgdGhpcy5wb3J0Xy5vbm1lc3NhZ2UgPSBldmVudCA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgIGNvbnN0IGNtZCA9IGRhdGEgJiYgZGF0YVsnY21kJ107XG4gICAgICBjb25zdCBwYXlsb2FkID0gZGF0YSAmJiBkYXRhWydwYXlsb2FkJ10gfHwgbnVsbDtcbiAgICAgIGlmIChjbWQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kXyhjbWQsIHBheWxvYWQsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIEV2ZW4gdGhvdWdoIGFsbCBtZXNzYWdpbmcgd2lsbCBzd2l0Y2ggdG8gcG9ydHMsIHRoZSB3aW5kb3ctYmFzZWQgbWVzc2FnZVxuICAgIC8vIGxpc3RlbmVyIHdpbGwgYmUgcHJlc2VydmVkIGp1c3QgaW4gY2FzZSB0aGUgaG9zdCBpcyByZWZyZXNoZWQgYW5kIG5lZWRzXG4gICAgLy8gYW5vdGhlciBjb25uZWN0aW9uLlxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IU1lc3NhZ2VFdmVudH0gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUV2ZW50XyhldmVudCkge1xuICAgIGlmICh0aGlzLnJlcXVpcmVUYXJnZXRfICYmIHRoaXMuZ2V0T3B0aW9uYWxUYXJnZXRfKCkgIT0gZXZlbnQuc291cmNlKSB7XG4gICAgICAvLyBXaGVuIHRhcmdldCBpcyByZXF1aXJlZCwgY29uZmlybSBpdCBhZ2FpbnN0IHRoZSBldmVudC5zb3VyY2UuIFRoaXNcbiAgICAgIC8vIGlzIG5vcm1hbGx5IG9ubHkgbmVlZGVkIGZvciBwb3J0cyB3aGVyZSBhIHNpbmdsZSB3aW5kb3cgY2FuIGluY2x1ZGVcbiAgICAgIC8vIG11bHRpcGxlIGlmcmFtZXMgdG8gbWF0Y2ggdGhlIGV2ZW50IHRvIGEgc3BlY2lmaWMgaWZyYW1lLiBPdGhlcndpc2UsXG4gICAgICAvLyB0aGUgb3JpZ2luIGNoZWNrcyBiZWxvdyBhcmUgc3VmZmljaWVudC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgaWYgKCFkYXRhIHx8IGRhdGFbJ3NlbnRpbmVsJ10gIT0gU0VOVElORUwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY21kID0gZGF0YVsnY21kJ107XG4gICAgaWYgKHRoaXMucG9ydF8gJiYgY21kICE9ICdjb25uZWN0JyAmJiBjbWQgIT0gJ3N0YXJ0Jykge1xuICAgICAgLy8gTWVzc2FnaW5nIGNoYW5uZWwgaGFzIGFscmVhZHkgdGFrZW4gb3Zlci4gSG93ZXZlciwgdGhlIFwiY29ubmVjdFwiIGFuZFxuICAgICAgLy8gXCJzdGFydFwiIGNvbW1hbmRzIGFyZSBhbGxvd2VkIHRvIHByb2NlZWQgaW4gY2FzZSByZS1jb25uZWN0aW9uIGlzXG4gICAgICAvLyByZXF1ZXN0ZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpbiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoZXZlbnQub3JpZ2luKTtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YVsncGF5bG9hZCddIHx8IG51bGw7XG4gICAgaWYgKHRoaXMudGFyZ2V0T3JpZ2luXyA9PSBudWxsICYmIGNtZCA9PSAnc3RhcnQnKSB7XG4gICAgICB0aGlzLnRhcmdldE9yaWdpbl8gPSBvcmlnaW47XG4gICAgfVxuICAgIGlmICh0aGlzLnRhcmdldE9yaWdpbl8gPT0gbnVsbCAmJiBldmVudC5zb3VyY2UpIHtcbiAgICAgIGlmICh0aGlzLmdldE9wdGlvbmFsVGFyZ2V0XygpID09IGV2ZW50LnNvdXJjZSkge1xuICAgICAgICB0aGlzLnRhcmdldE9yaWdpbl8gPSBvcmlnaW47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE5vdGljZSB0aGF0IGV2ZW50LnNvdXJjZSBtYXkgZGlmZmVyIGZyb20gdGhlIHRhcmdldCBiZWNhdXNlIG9mXG4gICAgLy8gZnJpZW5kbHktaWZyYW1lIGludGVybWVkaWFyaWVzLlxuICAgIGlmIChvcmlnaW4gIT0gdGhpcy50YXJnZXRPcmlnaW5fKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlQ29tbWFuZF8oY21kLCBwYXlsb2FkLCBldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNtZFxuICAgKiBAcGFyYW0gez9PYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHshTWVzc2FnZUV2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlQ29tbWFuZF8oY21kLCBwYXlsb2FkLCBldmVudCkge1xuICAgIGlmIChjbWQgPT0gJ2Nvbm5lY3QnKSB7XG4gICAgICBpZiAodGhpcy5wb3J0Xykge1xuICAgICAgICAvLyBJbiBjYXNlIHRoZSBwb3J0IGhhcyBhbHJlYWR5IGJlZW4gb3BlbiAtIGNsb3NlIGl0IHRvIHJlb3BlbiBpdFxuICAgICAgICAvLyBhZ2FpbiBsYXRlci5cbiAgICAgICAgY2xvc2VQb3J0KHRoaXMucG9ydF8pO1xuICAgICAgICB0aGlzLnBvcnRfID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWNjZXB0c0NoYW5uZWxfID0gcGF5bG9hZCAmJiBwYXlsb2FkWydhY2NlcHRzQ2hhbm5lbCddIHx8IGZhbHNlO1xuICAgICAgdGhpcy5vbkNvbW1hbmRfKGNtZCwgcGF5bG9hZCk7XG4gICAgfSBlbHNlIGlmIChjbWQgPT0gJ3N0YXJ0Jykge1xuICAgICAgY29uc3QgcG9ydCA9IGV2ZW50LnBvcnRzICYmIGV2ZW50LnBvcnRzWzBdO1xuICAgICAgaWYgKHBvcnQpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0NoYW5uZWxfKHBvcnQpO1xuICAgICAgfVxuICAgICAgdGhpcy5vbkNvbW1hbmRfKGNtZCwgcGF5bG9hZCk7XG4gICAgfSBlbHNlIGlmIChjbWQgPT0gJ21zZycpIHtcbiAgICAgIGlmICh0aGlzLm9uQ3VzdG9tTWVzc2FnZV8gIT0gbnVsbCAmJiBwYXlsb2FkICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5vbkN1c3RvbU1lc3NhZ2VfKHBheWxvYWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY21kID09ICdjbmdldCcpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwYXlsb2FkWyduYW1lJ107XG4gICAgICB0aGlzLnN0YXJ0Q2hhbm5lbChuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGNtZCA9PSAnY25zZXQnKSB7XG4gICAgICBjb25zdCBuYW1lID0gcGF5bG9hZFsnbmFtZSddO1xuICAgICAgY29uc3QgcG9ydCA9IGV2ZW50LnBvcnRzWzBdO1xuICAgICAgdGhpcy5yZWNlaXZlQ2hhbm5lbF8obmFtZSwgLyoqIEB0eXBlIHshTWVzc2FnZVBvcnR9ICovIChwb3J0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25Db21tYW5kXyhjbWQsIHBheWxvYWQpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogQHBhcmFtIHshTWVzc2FnZVBvcnR9IHBvcnRcbiAqL1xuZnVuY3Rpb24gY2xvc2VQb3J0KHBvcnQpIHtcbiAgdHJ5IHtcbiAgICBwb3J0LmNsb3NlKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUuXG4gIH1cbn1cblxuXG5cblxuLyoqXG4gKiBUaGUgYEFjdGl2aXR5UG9ydGAgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBpZnJhbWUgY2FzZS4gVW5saWtlIG90aGVyIHR5cGVzXG4gKiBvZiBhY3Rpdml0aWVzLCBpZnJhbWUtYmFzZWQgYWN0aXZpdGllcyBhcmUgYWx3YXlzIGNvbm5lY3RlZCBhbmQgY2FuIHJlYWN0XG4gKiB0byBzaXplIHJlcXVlc3RzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtBY3Rpdml0eVBvcnR9XG4gKiBAaW1wbGVtZW50cyB7QWN0aXZpdHlNZXNzYWdpbmdQb3J0fVxuICovXG5jbGFzcyBBY3Rpdml0eUlmcmFtZVBvcnQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MSUZyYW1lRWxlbWVudH0gaWZyYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHs/T2JqZWN0PX0gb3B0X2FyZ3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKGlmcmFtZSwgdXJsLCBvcHRfYXJncykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSBpZnJhbWU7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMudXJsXyA9IHVybDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHs/T2JqZWN0fSAqL1xuICAgIHRoaXMuYXJnc18gPSBvcHRfYXJncyB8fCBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSAvKiogQHR5cGUgeyFXaW5kb3d9ICovICh0aGlzLmlmcmFtZV8ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy50YXJnZXRPcmlnaW5fID0gZ2V0T3JpZ2luRnJvbVVybCh1cmwpO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/ZnVuY3Rpb24oKX0gKi9cbiAgICB0aGlzLmNvbm5lY3RlZFJlc29sdmVyXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZX0gKi9cbiAgICB0aGlzLmNvbm5lY3RlZFByb21pc2VfID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3RlZFJlc29sdmVyXyA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbigpfSAqL1xuICAgIHRoaXMucmVhZHlSZXNvbHZlcl8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2V9ICovXG4gICAgdGhpcy5yZWFkeVByb21pc2VfID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLnJlYWR5UmVzb2x2ZXJfID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKCghQWN0aXZpdHlSZXN1bHR8IVByb21pc2UpKX0gKi9cbiAgICB0aGlzLnJlc3VsdFJlc29sdmVyXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZTwhQWN0aXZpdHlSZXN1bHQ+fSAqL1xuICAgIHRoaXMucmVzdWx0UHJvbWlzZV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMucmVzdWx0UmVzb2x2ZXJfID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKG51bWJlcil9ICovXG4gICAgdGhpcy5vblJlc2l6ZVJlcXVlc3RfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P251bWJlcn0gKi9cbiAgICB0aGlzLnJlcXVlc3RlZEhlaWdodF8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU1lc3Nlbmdlcn0gKi9cbiAgICB0aGlzLm1lc3Nlbmdlcl8gPSBuZXcgTWVzc2VuZ2VyKFxuICAgICAgICB0aGlzLndpbl8sXG4gICAgICAgICgpID0+IHRoaXMuaWZyYW1lXy5jb250ZW50V2luZG93LFxuICAgICAgICB0aGlzLnRhcmdldE9yaWdpbl8sXG4gICAgICAgIC8qIHJlcXVpcmVUYXJnZXQgKi8gdHJ1ZSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldE1vZGUoKSB7XG4gICAgcmV0dXJuIEFjdGl2aXR5TW9kZS5JRlJBTUU7XG4gIH1cblxuICAvKipcbiAgICogV2FpdHMgdW50aWwgdGhlIGFjdGl2aXR5IHBvcnQgaXMgY29ubmVjdGVkIHRvIHRoZSBob3N0LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIGNvbm5lY3QoKSB7XG4gICAgaWYgKCFpc05vZGVDb25uZWN0ZWQodGhpcy5pZnJhbWVfKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZnJhbWUgbXVzdCBiZSBpbiBET00nKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzZW5nZXJfLmNvbm5lY3QodGhpcy5oYW5kbGVDb21tYW5kXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmlmcmFtZV8uc3JjID0gdGhpcy51cmxfO1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3RlZFByb21pc2VfO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgdGhlIGFjdGl2aXR5IGJpbmRpbmcgYW5kIGNsZWFudXAgbGlzdGVuZXJzLlxuICAgKi9cbiAgZGlzY29ubmVjdCgpIHtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm1lc3Nlbmdlcl8uZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhY2NlcHRSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0UHJvbWlzZV87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFRhcmdldFdpbigpIHtcbiAgICByZXR1cm4gdGhpcy5pZnJhbWVfLmNvbnRlbnRXaW5kb3cgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbWVzc2FnZShwYXlsb2FkKSB7XG4gICAgdGhpcy5tZXNzZW5nZXJfLmN1c3RvbU1lc3NhZ2UocGF5bG9hZCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIG9uTWVzc2FnZShjYWxsYmFjaykge1xuICAgIHRoaXMubWVzc2VuZ2VyXy5vbkN1c3RvbU1lc3NhZ2UoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBtZXNzYWdlQ2hhbm5lbChvcHRfbmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1lc3Nlbmdlcl8uYXNrQ2hhbm5lbChvcHRfbmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB5aWVsZHMgd2hlbiB0aGUgaWZyYW1lIGlzIHJlYWR5IHRvIGJlIGludGVyYWN0ZWRcbiAgICogd2l0aC5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICB3aGVuUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHlQcm9taXNlXztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIGhhbmRsZSByZXNpemUgcmVxdWVzdHMuIE9uY2Ugc3VjY2Vzc2Z1bGx5IHJlc2l6ZWQsXG4gICAqIGVuc3VyZSB0byBjYWxsIGByZXNpemVkKClgIG1ldGhvZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpfSBjYWxsYmFja1xuICAgKi9cbiAgb25SZXNpemVSZXF1ZXN0KGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vblJlc2l6ZVJlcXVlc3RfID0gY2FsbGJhY2s7XG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5yZXF1ZXN0ZWRIZWlnaHRfICE9IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5yZXF1ZXN0ZWRIZWlnaHRfKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIGJhY2sgdG8gdGhlIGFjdGl2aXR5IGltcGxlbWVudGF0aW9uIHRoYXQgdGhlIGNsaWVudCBoYXMgdXBkYXRlZFxuICAgKiB0aGUgYWN0aXZpdHkncyBzaXplLlxuICAgKi9cbiAgcmVzaXplZCgpIHtcbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmlmcmFtZV8ub2Zmc2V0SGVpZ2h0O1xuICAgIHRoaXMubWVzc2VuZ2VyXy5zZW5kQ29tbWFuZCgncmVzaXplZCcsIHsnaGVpZ2h0JzogaGVpZ2h0fSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNtZFxuICAgKiBAcGFyYW0gez9PYmplY3R9IHBheWxvYWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUNvbW1hbmRfKGNtZCwgcGF5bG9hZCkge1xuICAgIGlmIChjbWQgPT0gJ2Nvbm5lY3QnKSB7XG4gICAgICAvLyBGaXJzdCBldmVyIG1lc3NhZ2UuIEluZGljYXRlcyB0aGF0IHRoZSByZWNlaXZlciBpcyBsaXN0ZW5pbmcuXG4gICAgICB0aGlzLmNvbm5lY3RlZF8gPSB0cnVlO1xuICAgICAgdGhpcy5tZXNzZW5nZXJfLnNlbmRTdGFydENvbW1hbmQodGhpcy5hcmdzXyk7XG4gICAgICB0aGlzLmNvbm5lY3RlZFJlc29sdmVyXygpO1xuICAgIH0gZWxzZSBpZiAoY21kID09ICdyZXN1bHQnKSB7XG4gICAgICAvLyBUaGUgbGFzdCBtZXNzYWdlLiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVzdWx0IGhhcyBiZWVuIHJlY2VpdmVkLlxuICAgICAgaWYgKHRoaXMucmVzdWx0UmVzb2x2ZXJfKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSAvKiogQHR5cGUgeyFBY3Rpdml0eVJlc3VsdENvZGV9ICovIChwYXlsb2FkWydjb2RlJ10pO1xuICAgICAgICBjb25zdCBkYXRhID1cbiAgICAgICAgICAgIGNvZGUgPT0gQWN0aXZpdHlSZXN1bHRDb2RlLkZBSUxFRCA/XG4gICAgICAgICAgICBuZXcgRXJyb3IocGF5bG9hZFsnZGF0YSddIHx8ICcnKSA6XG4gICAgICAgICAgICBwYXlsb2FkWydkYXRhJ107XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBY3Rpdml0eVJlc3VsdChcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgQWN0aXZpdHlNb2RlLklGUkFNRSxcbiAgICAgICAgICAgIHRoaXMubWVzc2VuZ2VyXy5nZXRUYXJnZXRPcmlnaW4oKSxcbiAgICAgICAgICAgIC8qIG9yaWdpblZlcmlmaWVkICovIHRydWUsXG4gICAgICAgICAgICAvKiBzZWN1cmVDaGFubmVsICovIHRydWUpO1xuICAgICAgICByZXNvbHZlUmVzdWx0KHRoaXMud2luXywgcmVzdWx0LCB0aGlzLnJlc3VsdFJlc29sdmVyXyk7XG4gICAgICAgIHRoaXMucmVzdWx0UmVzb2x2ZXJfID0gbnVsbDtcbiAgICAgICAgdGhpcy5tZXNzZW5nZXJfLnNlbmRDb21tYW5kKCdjbG9zZScpO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNtZCA9PSAncmVhZHknKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeVJlc29sdmVyXykge1xuICAgICAgICB0aGlzLnJlYWR5UmVzb2x2ZXJfKCk7XG4gICAgICAgIHRoaXMucmVhZHlSZXNvbHZlcl8gPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY21kID09ICdyZXNpemUnKSB7XG4gICAgICB0aGlzLnJlcXVlc3RlZEhlaWdodF8gPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHBheWxvYWRbJ2hlaWdodCddKTtcbiAgICAgIGlmICh0aGlzLm9uUmVzaXplUmVxdWVzdF8pIHtcbiAgICAgICAgdGhpcy5vblJlc2l6ZVJlcXVlc3RfKHRoaXMucmVxdWVzdGVkSGVpZ2h0Xyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG5cbi8qKlxuICogVGhlIGBBY3Rpdml0eVBvcnRgIGltcGxlbWVudGF0aW9uIGZvciB0aGUgc3RhbmRhbG9uZSB3aW5kb3cgYWN0aXZpdHlcbiAqIGNsaWVudCBleGVjdXRlZCBhcyBhIHBvcHVwLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtBY3Rpdml0eVBvcnR9XG4gKiBAaW1wbGVtZW50cyB7QWN0aXZpdHlNZXNzYWdpbmdQb3J0fVxuICovXG5jbGFzcyBBY3Rpdml0eVdpbmRvd1BvcnQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdElkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldFxuICAgKiBAcGFyYW0gez9PYmplY3Q9fSBvcHRfYXJnc1xuICAgKiBAcGFyYW0gez9BY3Rpdml0eU9wZW5PcHRpb25zPX0gb3B0X29wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHdpbiwgcmVxdWVzdElkLCB1cmwsIHRhcmdldCwgb3B0X2FyZ3MsIG9wdF9vcHRpb25zKSB7XG4gICAgY29uc3QgaXNWYWxpZFRhcmdldCA9XG4gICAgICAgIHRhcmdldCAmJlxuICAgICAgICAodGFyZ2V0ID09ICdfYmxhbmsnIHx8IHRhcmdldCA9PSAnX3RvcCcgfHwgdGFyZ2V0WzBdICE9ICdfJyk7XG4gICAgaWYgKCFpc1ZhbGlkVGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBvbmx5IGFsbG93ZWQgdGFyZ2V0cyBhcmUgXCJfYmxhbmtcIiwgXCJfdG9wXCInICtcbiAgICAgICAgICAnIGFuZCBuYW1lIHRhcmdldHMnKTtcbiAgICB9XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IHdpbjtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5yZXF1ZXN0SWRfID0gcmVxdWVzdElkO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnVybF8gPSB1cmw7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMub3BlblRhcmdldF8gPSB0YXJnZXQ7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7P09iamVjdH0gKi9cbiAgICB0aGlzLmFyZ3NfID0gb3B0X2FyZ3MgfHwgbnVsbDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQWN0aXZpdHlPcGVuT3B0aW9uc30gKi9cbiAgICB0aGlzLm9wdGlvbnNfID0gb3B0X29wdGlvbnMgfHwge307XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbigpfSAqL1xuICAgIHRoaXMuY29ubmVjdGVkUmVzb2x2ZXJfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFQcm9taXNlfSAqL1xuICAgIHRoaXMuY29ubmVjdGVkUHJvbWlzZV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdGVkUmVzb2x2ZXJfID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKCghQWN0aXZpdHlSZXN1bHR8IVByb21pc2UpKX0gKi9cbiAgICB0aGlzLnJlc3VsdFJlc29sdmVyXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZTwhQWN0aXZpdHlSZXN1bHQ+fSAqL1xuICAgIHRoaXMucmVzdWx0UHJvbWlzZV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMucmVzdWx0UmVzb2x2ZXJfID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1dpbmRvd30gKi9cbiAgICB0aGlzLnRhcmdldFdpbl8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/bnVtYmVyfSAqL1xuICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P01lc3Nlbmdlcn0gKi9cbiAgICB0aGlzLm1lc3Nlbmdlcl8gPSBudWxsO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLm9wZW5UYXJnZXRfID09ICdfdG9wJyA/XG4gICAgICAgIEFjdGl2aXR5TW9kZS5SRURJUkVDVCA6XG4gICAgICAgIEFjdGl2aXR5TW9kZS5QT1BVUDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgYWN0aXZpdHkgaW4gYSB3aW5kb3csIGVpdGhlciBhcyBhIHBvcHVwIG9yIHZpYSByZWRpcmVjdC5cbiAgICpcbiAgICogUmV0dXJucyB0aGUgcHJvbWlzZSB0aGF0IHdpbGwgeWllbGQgd2hlbiB0aGUgd2luZG93IHJldHVybnMgb3IgY2xvc2VkLlxuICAgKiBOb3RpY2UsIHRoYXQgdGhpcyBwcm9taXNlIG1heSBuZXZlciBjb21wbGV0ZSBpZiBcInJlZGlyZWN0XCIgbW9kZSB3YXMgdXNlZC5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBvcGVuKCkge1xuICAgIHJldHVybiB0aGlzLm9wZW5JbnRlcm5hbF8oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0cyB1bnRpbCB0aGUgYWN0aXZpdHkgcG9ydCBpcyBjb25uZWN0ZWQgdG8gdGhlIGhvc3QuXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgd2hlbkNvbm5lY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0ZWRQcm9taXNlXztcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0IHRoZSBhY3Rpdml0eSBiaW5kaW5nIGFuZCBjbGVhbnVwIGxpc3RlbmVycy5cbiAgICovXG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgaWYgKHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxfKSB7XG4gICAgICB0aGlzLndpbl8uY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdEludGVydmFsXyk7XG4gICAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLm1lc3Nlbmdlcl8pIHtcbiAgICAgIHRoaXMubWVzc2VuZ2VyXy5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLm1lc3Nlbmdlcl8gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy50YXJnZXRXaW5fKSB7XG4gICAgICAvLyBUcnkgdG8gY2xvc2UgdGhlIHBvcHVwIHdpbmRvdy4gVGhlIGhvc3Qgd2lsbCBhbHNvIHRyeSB0byBkbyB0aGUgc2FtZS5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMudGFyZ2V0V2luXy5jbG9zZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZ25vcmUuXG4gICAgICB9XG4gICAgICB0aGlzLnRhcmdldFdpbl8gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnJlc3VsdFJlc29sdmVyXyA9IG51bGw7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFRhcmdldFdpbigpIHtcbiAgICByZXR1cm4gdGhpcy50YXJnZXRXaW5fO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhY2NlcHRSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0UHJvbWlzZV87XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBob3N0LlxuICAgKiBXaGV0aGVyIHRoZSBob3N0IGNhbiBvciBjYW5ub3QgcmVjZWl2ZSBhIG1lc3NhZ2UgZGVwZW5kcyBvbiB0aGUgdHlwZSBvZlxuICAgKiBob3N0IGFuZCBpdHMgc3RhdGUuIEVuc3VyZSB0aGF0IHRoZSBjb2RlIGhhcyBhbiBhbHRlcm5hdGl2ZSBwYXRoIGlmXG4gICAqIG1lc3NhZ2luZyBpcyBub3QgYXZhaWxhYmxlLlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG1lc3NhZ2UocGF5bG9hZCkge1xuICAgIHRoaXMubWVzc2VuZ2VyXy5jdXN0b21NZXNzYWdlKHBheWxvYWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIHJlY2VpdmUgbWVzc2FnZXMgZnJvbSB0aGUgaG9zdC5cbiAgICogV2hldGhlciB0aGUgaG9zdCBjYW4gb3IgY2Fubm90IHJlY2VpdmUgYSBtZXNzYWdlIGRlcGVuZHMgb24gdGhlIHR5cGUgb2ZcbiAgICogaG9zdCBhbmQgaXRzIHN0YXRlLiBFbnN1cmUgdGhhdCB0aGUgY29kZSBoYXMgYW4gYWx0ZXJuYXRpdmUgcGF0aCBpZlxuICAgKiBtZXNzYWdpbmcgaXMgbm90IGF2YWlsYWJsZS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBvbk1lc3NhZ2UoY2FsbGJhY2spIHtcbiAgICB0aGlzLm1lc3Nlbmdlcl8ub25DdXN0b21NZXNzYWdlKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGNvbW11bmljYXRpb24gY2hhbm5lbCBvciByZXR1cm5zIGFuIGV4aXN0aW5nIG9uZS5cbiAgICogV2hldGhlciB0aGUgaG9zdCBjYW4gb3IgY2Fubm90IHJlY2VpdmUgYSBtZXNzYWdlIGRlcGVuZHMgb24gdGhlIHR5cGUgb2ZcbiAgICogaG9zdCBhbmQgaXRzIHN0YXRlLiBFbnN1cmUgdGhhdCB0aGUgY29kZSBoYXMgYW4gYWx0ZXJuYXRpdmUgcGF0aCBpZlxuICAgKiBtZXNzYWdpbmcgaXMgbm90IGF2YWlsYWJsZS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtZXNzYWdlQ2hhbm5lbChvcHRfbmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1lc3Nlbmdlcl8uYXNrQ2hhbm5lbChvcHRfbmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd3JhcHMgYXJvdW5kIHdpbmRvdydzIG9wZW4gbWV0aG9kLiBJdCBmaXJzdCB0cmllcyB0byBleGVjdXRlXG4gICAqIGBvcGVuYCBjYWxsIHdpdGggdGhlIHByb3ZpZGVkIHRhcmdldCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHJpZXMgdGhlIGNhbGxcbiAgICogd2l0aCB0aGUgYF90b3BgIHRhcmdldC4gVGhpcyBpcyBuZWNlc3NhcnkgZ2l2ZW4gdGhhdCBpbiBzb21lIGVtYmVkZGluZ1xuICAgKiBzY2VuYXJpb3MsIHN1Y2ggYXMgaU9TJyBXS1dlYlZpZXcsIG5hdmlnYXRpb24gdG8gYF9ibGFua2AgYW5kIG90aGVyIHRhcmdldHNcbiAgICogaXMgYmxvY2tlZCBieSBkZWZhdWx0LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9wZW5JbnRlcm5hbF8oKSB7XG4gICAgY29uc3QgZmVhdHVyZXNTdHIgPSB0aGlzLmJ1aWxkRmVhdHVyZXNfKCk7XG5cbiAgICAvLyBQcm90ZWN0aXZlbHksIHRoZSBVUkwgd2lsbCBjb250YWluIHRoZSByZXF1ZXN0IHBheWxvYWQsIHVubGVzcyBleHBsaWNpdGx5XG4gICAgLy8gZGlyZWN0ZWQgbm90IHRvIHZpYSBgc2tpcFJlcXVlc3RJblVybGAgb3B0aW9uLlxuICAgIGxldCB1cmwgPSB0aGlzLnVybF87XG4gICAgaWYgKCF0aGlzLm9wdGlvbnNfLnNraXBSZXF1ZXN0SW5VcmwpIHtcbiAgICAgIGNvbnN0IHJldHVyblVybCA9XG4gICAgICAgICAgdGhpcy5vcHRpb25zXy5yZXR1cm5VcmwgfHxcbiAgICAgICAgICByZW1vdmVGcmFnbWVudCh0aGlzLndpbl8ubG9jYXRpb24uaHJlZik7XG4gICAgICBjb25zdCByZXF1ZXN0U3RyaW5nID0gc2VyaWFsaXplUmVxdWVzdCh7XG4gICAgICAgIHJlcXVlc3RJZDogdGhpcy5yZXF1ZXN0SWRfLFxuICAgICAgICByZXR1cm5VcmwsXG4gICAgICAgIGFyZ3M6IHRoaXMuYXJnc18sXG4gICAgICB9KTtcbiAgICAgIHVybCA9IGFkZEZyYWdtZW50UGFyYW0odXJsLCAnX19XQV9fJywgcmVxdWVzdFN0cmluZyk7XG4gICAgfVxuXG4gICAgLy8gT3BlbiB0aGUgd2luZG93LlxuICAgIGxldCB0YXJnZXRXaW47XG4gICAgbGV0IG9wZW5UYXJnZXQgPSB0aGlzLm9wZW5UYXJnZXRfO1xuICAgIC8vIElFIGRvZXMgbm90IHN1cHBvcnQgQ09SUyBwb3B1cHMgLSB0aGUgcG9wdXAgaGFzIHRvIGZhbGxiYWNrIHRvIHJlZGlyZWN0XG4gICAgLy8gbW9kZS5cbiAgICBpZiAob3BlblRhcmdldCAhPSAnX3RvcCcpIHtcbiAgICAgIGlmIChpc0llQnJvd3Nlcih0aGlzLndpbl8pKSB7XG4gICAgICAgIG9wZW5UYXJnZXQgPSAnX3RvcCc7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRyeSBmaXJzdCB3aXRoIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LiBJZiB3ZSdyZSBpbnNpZGUgdGhlIFdLV2ViVmlldyBvclxuICAgIC8vIGEgc2ltaWxhciBlbnZpcm9ubWVudHMsIHRoaXMgbWV0aG9kIGlzIGV4cGVjdGVkIHRvIGZhaWwgYnkgZGVmYXVsdCBmb3JcbiAgICAvLyBhbGwgdGFyZ2V0cyBleGNlcHQgYF90b3BgLlxuICAgIHRyeSB7XG4gICAgICB0YXJnZXRXaW4gPSB0aGlzLndpbl8ub3Blbih1cmwsIG9wZW5UYXJnZXQsIGZlYXR1cmVzU3RyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZ25vcmUuXG4gICAgfVxuICAgIC8vIFRoZW4gdHJ5IHdpdGggYF90b3BgIHRhcmdldC5cbiAgICBpZiAoIXRhcmdldFdpbiAmJlxuICAgICAgICBvcGVuVGFyZ2V0ICE9ICdfdG9wJyAmJlxuICAgICAgICAhdGhpcy5vcHRpb25zXy5kaXNhYmxlUmVkaXJlY3RGYWxsYmFjaykge1xuICAgICAgb3BlblRhcmdldCA9ICdfdG9wJztcbiAgICAgIHRyeSB7XG4gICAgICAgIHRhcmdldFdpbiA9IHRoaXMud2luXy5vcGVuKHVybCwgb3BlblRhcmdldCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElnbm9yZS5cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXR1cCB0aGUgdGFyZ2V0IHdpbmRvdy5cbiAgICBpZiAodGFyZ2V0V2luKSB7XG4gICAgICB0aGlzLnRhcmdldFdpbl8gPSB0YXJnZXRXaW47XG4gICAgICBpZiAob3BlblRhcmdldCAhPSAnX3RvcCcpIHtcbiAgICAgICAgdGhpcy5zZXR1cFBvcHVwXygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RXaXRoRXJyb3JfKG5ldyBFcnJvcignZmFpbGVkIHRvIG9wZW4gd2luZG93JykpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiByZXN1bHQgcHJvbWlzZSwgZXZlbiB0aG91Z2ggaXQgbWF5IG5ldmVyIGNvbXBsZXRlLlxuICAgIHJldHVybiB0aGlzLnJlc3VsdFByb21pc2VfLmNhdGNoKCgpID0+IHtcbiAgICAgIC8vIElnbm9yZS4gQ2FsbCB0byB0aGUgYGFjY2VwdFJlc3VsdCgpYCBzaG91bGQgZmFpbCBpZiBuZWVkZWQuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYnVpbGRGZWF0dXJlc18oKSB7XG4gICAgLy8gVGhlIG1heCB3aWR0aCBhbmQgaGVpZ2h0cyBhcmUgY2FsY3VsYXRlZCBhcyBmb2xsb3dpbmc6XG4gICAgLy8gTWF4U2l6ZSA9IEF2YWlsU2l6ZSAtIENvbnRyb2xzU2l6ZVxuICAgIC8vIENvbnRyb2xzU2l6ZSA9IE91dGVyU2l6ZSAtIElubmVyU2l6ZVxuICAgIGNvbnN0IHNjcmVlbiA9IHRoaXMud2luXy5zY3JlZW47XG4gICAgY29uc3QgYXZhaWxXaWR0aCA9IHNjcmVlbi5hdmFpbFdpZHRoIHx8IHNjcmVlbi53aWR0aDtcbiAgICBjb25zdCBhdmFpbEhlaWdodCA9IHNjcmVlbi5hdmFpbEhlaWdodCB8fCBzY3JlZW4uaGVpZ2h0O1xuICAgIGNvbnN0IGlzVG9wID0gdGhpcy5pc1RvcFdpbmRvd18oKTtcbiAgICBjb25zdCBpc0VkZ2UgPSBpc0VkZ2VCcm93c2VyKHRoaXMud2luXyk7XG4gICAgLy8gTGltaXQgY29udHJvbHMgdG8gMTAwcHggd2lkdGggYW5kIGhlaWdodC4gTm90aWNlIHRoYXQgaXQncyBvbmx5XG4gICAgLy8gcG9zc2libGUgdG8gY2FsY3VsYXRlIGNvbnRyb2xzIHNpemUgaW4gdGhlIHRvcCB3aW5kb3csIG5vdCBpbiBpZnJhbWVzLlxuICAgIC8vIE5vdGljZSB0aGF0IHRoZSBFZGdlIGJlaGF2aW9yIGlzIHNvbWV3aGF0IHVuaXF1ZS4gSWYgd2UgY2FuJ3QgZmluZCB0aGVcbiAgICAvLyByaWdodCB3aWR0aC9oZWlnaHQsIGl0IHdpbGwgbGF1bmNoIGluIHRoZSBmdWxsLXNjcmVlbi4gT3RoZXIgYnJvd3NlcnNcbiAgICAvLyBkZWFsIHdpdGggc3VjaCBjYXNlcyBtb3JlIGdyYWNlZnVsbHkuXG4gICAgY29uc3QgY29udHJvbHNXaWR0aCA9XG4gICAgICAgIGlzVG9wICYmIHRoaXMud2luXy5vdXRlcldpZHRoID4gdGhpcy53aW5fLmlubmVyV2lkdGggP1xuICAgICAgICBNYXRoLm1pbigxMDAsIHRoaXMud2luXy5vdXRlcldpZHRoIC0gdGhpcy53aW5fLmlubmVyV2lkdGgpIDpcbiAgICAgICAgKGlzRWRnZSA/IDEwMCA6IDApO1xuICAgIGNvbnN0IGNvbnRyb2xzSGVpZ2h0ID1cbiAgICAgICAgaXNUb3AgJiYgdGhpcy53aW5fLm91dGVySGVpZ2h0ID4gdGhpcy53aW5fLmlubmVySGVpZ2h0ID9cbiAgICAgICAgTWF0aC5taW4oMTAwLCB0aGlzLndpbl8ub3V0ZXJIZWlnaHQgLSB0aGlzLndpbl8uaW5uZXJIZWlnaHQpIDpcbiAgICAgICAgKGlzRWRnZSA/IDEwMCA6IDApO1xuICAgIC8vIFdpdGggYWxsIHRoZSBhZGp1c3RtZW50cywgYXQgbGVhc3QgNTAlIG9mIHRoZSBhdmFpbGFibGUgd2lkdGgvaGVpZ2h0XG4gICAgLy8gc2hvdWxkIGJlIG1hZGUgYXZhaWxhYmxlIHRvIGEgcG9wdXAuXG4gICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLm1heChhdmFpbFdpZHRoIC0gY29udHJvbHNXaWR0aCwgYXZhaWxXaWR0aCAqIDAuNSk7XG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gTWF0aC5tYXgoYXZhaWxIZWlnaHQgLSBjb250cm9sc0hlaWdodCwgYXZhaWxIZWlnaHQgKiAwLjUpO1xuICAgIGxldCB3ID0gTWF0aC5mbG9vcihNYXRoLm1pbig2MDAsIG1heFdpZHRoICogMC45KSk7XG4gICAgbGV0IGggPSBNYXRoLmZsb29yKE1hdGgubWluKDYwMCwgbWF4SGVpZ2h0ICogMC45KSk7XG4gICAgaWYgKHRoaXMub3B0aW9uc18ud2lkdGgpIHtcbiAgICAgIHcgPSBNYXRoLm1pbih0aGlzLm9wdGlvbnNfLndpZHRoLCBtYXhXaWR0aCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnNfLmhlaWdodCkge1xuICAgICAgaCA9IE1hdGgubWluKHRoaXMub3B0aW9uc18uaGVpZ2h0LCBtYXhIZWlnaHQpO1xuICAgIH1cbiAgICBjb25zdCB4ID0gTWF0aC5mbG9vcigoc2NyZWVuLndpZHRoIC0gdykgLyAyKTtcbiAgICBjb25zdCB5ID0gTWF0aC5mbG9vcigoc2NyZWVuLmhlaWdodCAtIGgpIC8gMik7XG4gICAgY29uc3QgZmVhdHVyZXMgPSB7XG4gICAgICAnaGVpZ2h0JzogaCxcbiAgICAgICd3aWR0aCc6IHcsXG4gICAgICAncmVzaXphYmxlJzogJ3llcycsXG4gICAgICAnc2Nyb2xsYmFycyc6ICd5ZXMnLFxuICAgIH07XG4gICAgLy8gRG8gbm90IHNldCBsZWZ0L3RvcCBpbiBFZGdlOiBpdCBmYWlscy5cbiAgICBpZiAoIWlzRWRnZSkge1xuICAgICAgZmVhdHVyZXNbJ2xlZnQnXSA9IHg7XG4gICAgICBmZWF0dXJlc1sndG9wJ10gPSB5O1xuICAgIH1cbiAgICBsZXQgZmVhdHVyZXNTdHIgPSAnJztcbiAgICBmb3IgKGNvbnN0IGYgaW4gZmVhdHVyZXMpIHtcbiAgICAgIGlmIChmZWF0dXJlc1N0cikge1xuICAgICAgICBmZWF0dXJlc1N0ciArPSAnLCc7XG4gICAgICB9XG4gICAgICBmZWF0dXJlc1N0ciArPSBgJHtmfT0ke2ZlYXR1cmVzW2ZdfWA7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlc1N0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBvbmx5IGV4aXN0cyB0byBtYWtlIGlmcmFtZS90b3AgZW11bGF0aW9uIHBvc3NpYmxlIGluIHRlc3RzLlxuICAgKiBPdGhlcndpc2UgYHdpbmRvdy50b3BgIGNhbm5vdCBiZSBvdmVycmlkZGVuLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNUb3BXaW5kb3dfKCkge1xuICAgIHJldHVybiB0aGlzLndpbl8gPT0gdGhpcy53aW5fLnRvcDtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBzZXR1cFBvcHVwXygpIHtcbiAgICAvLyBLZWVwIGFsaXZlIHRvIGNhdGNoIHRoZSB3aW5kb3cgY2xvc2luZywgd2hpY2ggd291bGQgaW5kaWNhdGVcbiAgICAvLyBcImNhbmNlbFwiIHNpZ25hbC5cbiAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsXyA9IHRoaXMud2luXy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmNoZWNrXygvKiBkZWxheUNhbmNlbCAqLyB0cnVlKTtcbiAgICB9LCA1MDApO1xuXG4gICAgLy8gU3RhcnQgdXAgbWVzc2FnaW5nLiBUaGUgbWVzc2FnaW5nIGlzIGV4cGxpY2l0bHkgYWxsb3dlZCB0byBwcm9jZWVkXG4gICAgLy8gd2l0aG91dCBvcmlnaW4gY2hlY2sgYi9jIGFsbCBhcmd1bWVudHMgaGF2ZSBhbHJlYWR5IGJlZW4gcGFzc2VkIGluXG4gICAgLy8gdGhlIFVSTCBhbmQgc3BlY2lhbCBoYW5kbGluZyBpcyBlbmZvcmNlZCB3aGVuIHJlc3VsdCBpcyBkZWxpdmVyZWQuXG4gICAgdGhpcy5tZXNzZW5nZXJfID0gbmV3IE1lc3NlbmdlcihcbiAgICAgICAgdGhpcy53aW5fLFxuICAgICAgICAvKiogQHR5cGUgeyFXaW5kb3d9ICovICh0aGlzLnRhcmdldFdpbl8pLFxuICAgICAgICAvKiB0YXJnZXRPcmlnaW4gKi8gbnVsbCxcbiAgICAgICAgLyogcmVxdWlyZVRhcmdldCAqLyB0cnVlKTtcbiAgICB0aGlzLm1lc3Nlbmdlcl8uY29ubmVjdCh0aGlzLmhhbmRsZUNvbW1hbmRfLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9kZWxheUNhbmNlbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2hlY2tfKG9wdF9kZWxheUNhbmNlbCkge1xuICAgIGlmICghdGhpcy50YXJnZXRXaW5fIHx8IHRoaXMudGFyZ2V0V2luXy5jbG9zZWQpIHtcbiAgICAgIGlmICh0aGlzLmhlYXJ0YmVhdEludGVydmFsXykge1xuICAgICAgICB0aGlzLndpbl8uY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdEludGVydmFsXyk7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxfID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIEdpdmUgYSBjaGFuY2UgZm9yIHRoZSByZXN1bHQgdG8gYXJyaXZlLCBidXQgb3RoZXJ3aXNlIGNvbnNpZGVyIHRoZVxuICAgICAgLy8gcmVzcG9uY2UgdG8gYmUgZW1wdHkuXG4gICAgICB0aGlzLndpbl8uc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5yZXN1bHRfKEFjdGl2aXR5UmVzdWx0Q29kZS5DQU5DRUxFRCwgLyogZGF0YSAqLyBudWxsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdFdpdGhFcnJvcl8oZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG9wdF9kZWxheUNhbmNlbCA/IDMwMDAgOiAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRXJyb3J9IHJlYXNvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGlzY29ubmVjdFdpdGhFcnJvcl8ocmVhc29uKSB7XG4gICAgaWYgKHRoaXMucmVzdWx0UmVzb2x2ZXJfKSB7XG4gICAgICB0aGlzLnJlc3VsdFJlc29sdmVyXyhQcm9taXNlLnJlamVjdChyZWFzb24pKTtcbiAgICB9XG4gICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQWN0aXZpdHlSZXN1bHRDb2RlfSBjb2RlXG4gICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVzdWx0Xyhjb2RlLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMucmVzdWx0UmVzb2x2ZXJfKSB7XG4gICAgICBjb25zdCBpc0Nvbm5lY3RlZCA9IHRoaXMubWVzc2VuZ2VyXy5pc0Nvbm5lY3RlZCgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFjdGl2aXR5UmVzdWx0KFxuICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBBY3Rpdml0eU1vZGUuUE9QVVAsXG4gICAgICAgICAgaXNDb25uZWN0ZWQgP1xuICAgICAgICAgICAgICB0aGlzLm1lc3Nlbmdlcl8uZ2V0VGFyZ2V0T3JpZ2luKCkgOlxuICAgICAgICAgICAgICBnZXRPcmlnaW5Gcm9tVXJsKHRoaXMudXJsXyksXG4gICAgICAgICAgLyogb3JpZ2luVmVyaWZpZWQgKi8gaXNDb25uZWN0ZWQsXG4gICAgICAgICAgLyogc2VjdXJlQ2hhbm5lbCAqLyBpc0Nvbm5lY3RlZCk7XG4gICAgICByZXNvbHZlUmVzdWx0KHRoaXMud2luXywgcmVzdWx0LCB0aGlzLnJlc3VsdFJlc29sdmVyXyk7XG4gICAgICB0aGlzLnJlc3VsdFJlc29sdmVyXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLm1lc3Nlbmdlcl8pIHtcbiAgICAgIHRoaXMubWVzc2VuZ2VyXy5zZW5kQ29tbWFuZCgnY2xvc2UnKTtcbiAgICB9XG4gICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNtZFxuICAgKiBAcGFyYW0gez9PYmplY3R9IHBheWxvYWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUNvbW1hbmRfKGNtZCwgcGF5bG9hZCkge1xuICAgIGlmIChjbWQgPT0gJ2Nvbm5lY3QnKSB7XG4gICAgICAvLyBGaXJzdCBldmVyIG1lc3NhZ2UuIEluZGljYXRlcyB0aGF0IHRoZSByZWNlaXZlciBpcyBsaXN0ZW5pbmcuXG4gICAgICB0aGlzLm1lc3Nlbmdlcl8uc2VuZFN0YXJ0Q29tbWFuZCh0aGlzLmFyZ3NfKTtcbiAgICAgIHRoaXMuY29ubmVjdGVkUmVzb2x2ZXJfKCk7XG4gICAgfSBlbHNlIGlmIChjbWQgPT0gJ3Jlc3VsdCcpIHtcbiAgICAgIC8vIFRoZSBsYXN0IG1lc3NhZ2UuIEluZGljYXRlcyB0aGF0IHRoZSByZXN1bHQgaGFzIGJlZW4gcmVjZWl2ZWQuXG4gICAgICBjb25zdCBjb2RlID0gLyoqIEB0eXBlIHshQWN0aXZpdHlSZXN1bHRDb2RlfSAqLyAocGF5bG9hZFsnY29kZSddKTtcbiAgICAgIGNvbnN0IGRhdGEgPVxuICAgICAgICAgIGNvZGUgPT0gQWN0aXZpdHlSZXN1bHRDb2RlLkZBSUxFRCA/XG4gICAgICAgICAgbmV3IEVycm9yKHBheWxvYWRbJ2RhdGEnXSB8fCAnJykgOlxuICAgICAgICAgIHBheWxvYWRbJ2RhdGEnXTtcbiAgICAgIHRoaXMucmVzdWx0Xyhjb2RlLCBkYXRhKTtcbiAgICB9IGVsc2UgaWYgKGNtZCA9PSAnY2hlY2snKSB7XG4gICAgICB0aGlzLndpbl8uc2V0VGltZW91dCgoKSA9PiB0aGlzLmNoZWNrXygpLCAyMDApO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmcmFnbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RJZFxuICogQHJldHVybiB7P0FjdGl2aXR5UG9ydH1cbiAqL1xuZnVuY3Rpb24gZGlzY292ZXJSZWRpcmVjdFBvcnQod2luLCBmcmFnbWVudCwgcmVxdWVzdElkKSB7XG4gIC8vIFRyeSB0byBmaW5kIHRoZSByZXN1bHQgaW4gdGhlIGZyYWdtZW50LlxuICBjb25zdCBwYXJhbU5hbWUgPSAnX19XQV9SRVNfXyc7XG4gIGNvbnN0IGZyYWdtZW50UGFyYW0gPSBnZXRRdWVyeVBhcmFtKGZyYWdtZW50LCBwYXJhbU5hbWUpO1xuICBpZiAoIWZyYWdtZW50UGFyYW0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCByZXNwb25zZSA9IC8qKiBAdHlwZSB7P09iamVjdH0gKi8gKEpTT04ucGFyc2UoZnJhZ21lbnRQYXJhbSkpO1xuICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlWydyZXF1ZXN0SWQnXSAhPSByZXF1ZXN0SWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFJlbW92ZSB0aGUgZm91bmQgcGFyYW0gZnJvbSB0aGUgZnJhZ21lbnQuXG4gIGNvbnN0IGNsZWFuRnJhZ21lbnQgPSByZW1vdmVRdWVyeVBhcmFtKHdpbi5sb2NhdGlvbi5oYXNoLCBwYXJhbU5hbWUpIHx8ICcnO1xuICBpZiAoY2xlYW5GcmFnbWVudCAhPSB3aW4ubG9jYXRpb24uaGFzaCkge1xuICAgIGlmICh3aW4uaGlzdG9yeSAmJiB3aW4uaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHdpbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh3aW4uaGlzdG9yeS5zdGF0ZSwgJycsIGNsZWFuRnJhZ21lbnQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZ25vcmUuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29kZSA9IHJlc3BvbnNlWydjb2RlJ107XG4gIGNvbnN0IGRhdGEgPSByZXNwb25zZVsnZGF0YSddO1xuICBjb25zdCBvcmlnaW4gPSByZXNwb25zZVsnb3JpZ2luJ107XG4gIGNvbnN0IHJlZmVycmVyT3JpZ2luID0gd2luLmRvY3VtZW50LnJlZmVycmVyICYmXG4gICAgICBnZXRPcmlnaW5Gcm9tVXJsKHdpbi5kb2N1bWVudC5yZWZlcnJlcik7XG4gIGNvbnN0IG9yaWdpblZlcmlmaWVkID0gb3JpZ2luID09IHJlZmVycmVyT3JpZ2luO1xuICByZXR1cm4gbmV3IEFjdGl2aXR5V2luZG93UmVkaXJlY3RQb3J0KFxuICAgICAgd2luLFxuICAgICAgY29kZSxcbiAgICAgIGRhdGEsXG4gICAgICBvcmlnaW4sXG4gICAgICBvcmlnaW5WZXJpZmllZCk7XG59XG5cblxuLyoqXG4gKiBUaGUgYEFjdGl2aXR5UG9ydGAgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBzdGFuZGFsb25lIHdpbmRvdyBhY3Rpdml0eVxuICogY2xpZW50IGV4ZWN1dGVkIGFzIGEgcG9wdXAuXG4gKlxuICogQGltcGxlbWVudHMge0FjdGl2aXR5UG9ydH1cbiAqL1xuY2xhc3MgQWN0aXZpdHlXaW5kb3dSZWRpcmVjdFBvcnQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcGFyYW0geyFBY3Rpdml0eVJlc3VsdENvZGV9IGNvZGVcbiAgICogQHBhcmFtIHsqfSBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRPcmlnaW5cbiAgICogQHBhcmFtIHtib29sZWFufSB0YXJnZXRPcmlnaW5WZXJpZmllZFxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luLCBjb2RlLCBkYXRhLCB0YXJnZXRPcmlnaW4sIHRhcmdldE9yaWdpblZlcmlmaWVkKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUFjdGl2aXR5UmVzdWx0Q29kZX0gKi9cbiAgICB0aGlzLmNvZGVfID0gY29kZTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHsqfSAqL1xuICAgIHRoaXMuZGF0YV8gPSBkYXRhO1xuICAgIC8qKiBAcHJpdmF0ZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMudGFyZ2V0T3JpZ2luXyA9IHRhcmdldE9yaWdpbjtcbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy50YXJnZXRPcmlnaW5WZXJpZmllZF8gPSB0YXJnZXRPcmlnaW5WZXJpZmllZDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0TW9kZSgpIHtcbiAgICByZXR1cm4gQWN0aXZpdHlNb2RlLlJFRElSRUNUO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhY2NlcHRSZXN1bHQoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFjdGl2aXR5UmVzdWx0KFxuICAgICAgICB0aGlzLmNvZGVfLFxuICAgICAgICB0aGlzLmRhdGFfLFxuICAgICAgICBBY3Rpdml0eU1vZGUuUkVESVJFQ1QsXG4gICAgICAgIHRoaXMudGFyZ2V0T3JpZ2luXyxcbiAgICAgICAgdGhpcy50YXJnZXRPcmlnaW5WZXJpZmllZF8sXG4gICAgICAgIC8qIHNlY3VyZUNoYW5uZWwgKi8gZmFsc2UpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHJlc29sdmVSZXN1bHQodGhpcy53aW5fLCByZXN1bHQsIHJlc29sdmUpO1xuICAgIH0pO1xuICB9XG59XG5cblxuXG5cbi8qKlxuICogVGhlIHBhZ2UtbGV2ZWwgYWN0aXZpdGllcyBtYW5hZ2VyIHBvcnRzLiBUaGlzIGNsYXNzIGlzIGludGVuZGVkIHRvIGJlIHVzZWRcbiAqIGFzIGEgc2luZ2xldG9uLiBJdCBjYW4gc3RhcnQgYWN0aXZpdGllcyBvZiBhbGwgbW9kZXM6IGlmcmFtZSwgcG9wdXAsIGFuZFxuICogcmVkaXJlY3QuXG4gKi9cbmNsYXNzIEFjdGl2aXR5UG9ydHMge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luKSB7XG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMudmVyc2lvbiA9ICcxLjI0JztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gd2luO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuZnJhZ21lbnRfID0gd2luLmxvY2F0aW9uLmhhc2g7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCAhQXJyYXk8ZnVuY3Rpb24oIUFjdGl2aXR5UG9ydCk+Pn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3RIYW5kbGVyc18gPSB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgYnVmZmVyIGlzIGluZGV4ZWQgYnkgYHJlcXVlc3RJZGAuXG4gICAgICogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgIUFjdGl2aXR5UG9ydD59XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHRCdWZmZXJfID0ge307XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbighRXJyb3IpfSAqL1xuICAgIHRoaXMucmVkaXJlY3RFcnJvclJlc29sdmVyXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgeyFQcm9taXNlPCFFcnJvcj59ICovXG4gICAgdGhpcy5yZWRpcmVjdEVycm9yUHJvbWlzZV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMucmVkaXJlY3RFcnJvclJlc29sdmVyXyA9IHJlc29sdmU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYW4gYWN0aXZpdHkgd2l0aGluIHRoZSBzcGVjaWZpZWQgaWZyYW1lLlxuICAgKiBAcGFyYW0geyFIVE1MSUZyYW1lRWxlbWVudH0gaWZyYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHs/T2JqZWN0PX0gb3B0X2FyZ3NcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFjdGl2aXR5SWZyYW1lUG9ydD59XG4gICAqL1xuICBvcGVuSWZyYW1lKGlmcmFtZSwgdXJsLCBvcHRfYXJncykge1xuICAgIGNvbnN0IHBvcnQgPSBuZXcgQWN0aXZpdHlJZnJhbWVQb3J0KGlmcmFtZSwgdXJsLCBvcHRfYXJncyk7XG4gICAgcmV0dXJuIHBvcnQuY29ubmVjdCgpLnRoZW4oKCkgPT4gcG9ydCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYW4gYWN0aXZpdHkgaW4gYSBzZXBhcmF0ZSB3aW5kb3cuIFRoZSByZXN1bHQgd2lsbCBiZSBkZWxpdmVyZWRcbiAgICogdG8gdGhlIGBvblJlc3VsdGAgY2FsbGJhY2suXG4gICAqXG4gICAqIFRoZSBhY3Rpdml0eSBjYW4gYmUgb3BlbmVkIGluIHR3byBtb2RlczogXCJwb3B1cFwiIGFuZCBcInJlZGlyZWN0XCIuIFRoaXNcbiAgICogZGVwZW5kcyBvbiB0aGUgYHRhcmdldGAgdmFsdWUsIGJ1dCBhbHNvIG9uIHRoZSBicm93c2VyL2Vudmlyb25tZW50LlxuICAgKlxuICAgKiBUaGUgYWxsb3dlZCBgdGFyZ2V0YCB2YWx1ZXMgYXJlIGBfYmxhbmtgLCBgX3RvcGAgYW5kIG5hbWUgdGFyZ2V0cy4gVGhlXG4gICAqIGBfc2VsZmAsIGBfcGFyZW50YCBhbmQgc2ltaWxhciB0YXJnZXRzIGFyZSBub3QgYWxsb3dlZC5cbiAgICpcbiAgICogVGhlIGBfdG9wYCB0YXJnZXQgaW5kaWNhdGVzIHRoYXQgdGhlIGFjdGl2aXR5IHNob3VsZCBiZSBvcGVuZWQgYXMgYVxuICAgKiBcInJlZGlyZWN0XCIsIHdoaWxlIG90aGVyIHRhcmdldHMgaW5kaWNhdGUgdGhhdCB0aGUgYWN0aXZpdHkgc2hvdWxkIGJlXG4gICAqIG9wZW5lZCBhcyBhIHBvcHVwLiBUaGUgYWN0aXZpdHkgY2xpZW50IHdpbGwgdHJ5IHRvIGhvbm9yIHRoZSByZXF1ZXN0ZWRcbiAgICogdGFyZ2V0LiBIb3dldmVyLCBpdCdzIG5vdCBhbHdheXMgcG9zc2libGUuIFNvbWUgZW52aXJvbm1lbnRzIGRvIG5vdFxuICAgKiBhbGxvdyBwb3B1cHMgYW5kIHRoZXkgZWl0aGVyIGZvcmNlIHJlZGlyZWN0IG9yIGZhaWwgdGhlIHdpbmRvdyBvcGVuXG4gICAqIHJlcXVlc3QuIEluIHRoaXMgY2FzZSwgdGhlIGFjdGl2aXR5IHdpbGwgdHJ5IHRvIGZhbGxiYWNrIHRvIHRoZSBcInJlZGlyZWN0XCJcbiAgICogbW9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRcbiAgICogQHBhcmFtIHs/T2JqZWN0PX0gb3B0X2FyZ3NcbiAgICogQHBhcmFtIHs/QWN0aXZpdHlPcGVuT3B0aW9ucz19IG9wdF9vcHRpb25zXG4gICAqIEByZXR1cm4ge3t0YXJnZXRXaW46ID9XaW5kb3d9fVxuICAgKi9cbiAgb3BlbihyZXF1ZXN0SWQsIHVybCwgdGFyZ2V0LCBvcHRfYXJncywgb3B0X29wdGlvbnMpIHtcbiAgICBjb25zdCBwb3J0ID0gdGhpcy5vcGVuV2luXyhyZXF1ZXN0SWQsIHVybCwgdGFyZ2V0LCBvcHRfYXJncywgb3B0X29wdGlvbnMpO1xuICAgIHJldHVybiB7dGFyZ2V0V2luOiBwb3J0LmdldFRhcmdldFdpbigpfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhbiBhY3Rpdml0eSBpbiBhIHNlcGFyYXRlIHdpbmRvdyBhbmQgdHJpZXMgdG8gc2V0dXAgbWVzc2FnaW5nIHdpdGhcbiAgICogdGhpcyB3aW5kb3cuXG4gICAqXG4gICAqIFNlZSBgb3BlbigpYCBtZXRob2QgZm9yIG1vcmUgZGV0YWlscywgaW5jbHVkaW5nIGBvblJlc3VsdGAgY2FsbGJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gICAqIEBwYXJhbSB7P09iamVjdD19IG9wdF9hcmdzXG4gICAqIEBwYXJhbSB7P0FjdGl2aXR5T3Blbk9wdGlvbnM9fSBvcHRfb3B0aW9uc1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhQWN0aXZpdHlNZXNzYWdpbmdQb3J0Pn1cbiAgICovXG4gIG9wZW5XaXRoTWVzc2FnaW5nKHJlcXVlc3RJZCwgdXJsLCB0YXJnZXQsIG9wdF9hcmdzLCBvcHRfb3B0aW9ucykge1xuICAgIGNvbnN0IHBvcnQgPSB0aGlzLm9wZW5XaW5fKHJlcXVlc3RJZCwgdXJsLCB0YXJnZXQsIG9wdF9hcmdzLCBvcHRfb3B0aW9ucyk7XG4gICAgcmV0dXJuIHBvcnQud2hlbkNvbm5lY3RlZCgpLnRoZW4oKCkgPT4gcG9ydCk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoZSBjYWxsYmFjayBmb3IgdGhlIHJlc3VsdCBvZiB0aGUgYWN0aXZpdHkgb3BlbmVkIHdpdGggdGhlXG4gICAqIHNwZWNpZmllZCBgcmVxdWVzdElkYCAoc2VlIHRoZSBgb3BlbigpYCBtZXRob2QpLiBUaGUgY2FsbGJhY2sgaXMgYVxuICAgKiBmdW5jdGlvbiB0aGF0IHRha2VzIGEgc2luZ2xlIGBBY3Rpdml0eVBvcnRgIGFyZ3VtZW50LiBUaGUgY2xpZW50XG4gICAqIGNhbiB1c2UgdGhpcyBvYmplY3QgdG8gdmVyaWZ5IHRoZSBwb3J0IHVzaW5nIGl0J3Mgb3JpZ2luLCB2ZXJpZmllZCBhbmRcbiAgICogc2VjdXJlIGNoYW5uZWwgZmxhZ3MuIFRoZW4gdGhlIGNsaWVudCBjYW4gY2FsbFxuICAgKiBgQWN0aXZpdHlQb3J0LmFjY2VwdFJlc3VsdCgpYCBtZXRob2QgdG8gYWNjZXB0IHRoZSByZXN1bHQuXG4gICAqXG4gICAqIFRoZSBhY3Rpdml0eSByZXN1bHQgaXMgaGFuZGxlZCB2aWEgYSBzZXBhcmF0ZSBjYWxsYmFjayBiZWNhdXNlIG9mIGFcbiAgICogcG9zc2libGUgcmVkaXJlY3QuIFNvIHVzZSBvZiBkaXJlY3QgY2FsbGJhY2tzIGFuZC9vciBwcm9taXNlcyBpcyBub3RcbiAgICogcG9zc2libGUgaW4gdGhhdCBjYXNlLlxuICAgKlxuICAgKiBBIHR5cGljYWwgaW1wbGVtZW50YXRpb24gd291bGQgbG9vayBsaWtlOlxuICAgKiBgYGBcbiAgICogcG9ydHMub25SZXN1bHQoJ3JlcXVlc3QxJywgZnVuY3Rpb24ocG9ydCkge1xuICAgKiAgIHBvcnQuYWNjZXB0UmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIE9ubHkgdmVyaWZpZWQgb3JpZ2lucyBhcmUgYWxsb3dlZC5cbiAgICogICAgIGlmIChyZXN1bHQub3JpZ2luID09IGV4cGVjdGVkT3JpZ2luICYmXG4gICAqICAgICAgICAgcmVzdWx0Lm9yaWdpblZlcmlmaWVkICYmXG4gICAqICAgICAgICAgcmVzdWx0LnNlY3VyZUNoYW5uZWwpIHtcbiAgICogICAgICAgaGFuZGxlUmVzdWx0Rm9yUmVxdWVzdDEocmVzdWx0KTtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICogfSlcbiAgICpcbiAgICogcG9ydHMub3BlbigncmVxdWVzdDEnLCByZXF1ZXN0MVVybCwgJ19ibGFuaycpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RJZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFBY3Rpdml0eVBvcnQpfSBjYWxsYmFja1xuICAgKi9cbiAgb25SZXN1bHQocmVxdWVzdElkLCBjYWxsYmFjaykge1xuICAgIGxldCBoYW5kbGVycyA9IHRoaXMucmVxdWVzdEhhbmRsZXJzX1tyZXF1ZXN0SWRdO1xuICAgIGlmICghaGFuZGxlcnMpIHtcbiAgICAgIGhhbmRsZXJzID0gW107XG4gICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyc19bcmVxdWVzdElkXSA9IGhhbmRsZXJzO1xuICAgIH1cbiAgICBoYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblxuICAgIC8vIENvbnN1bWUgYXZhaWxhYmxlIHJlc3VsdC5cbiAgICBjb25zdCBhdmFpbGFibGVSZXN1bHQgPSB0aGlzLmRpc2NvdmVyUmVzdWx0XyhyZXF1ZXN0SWQpO1xuICAgIGlmIChhdmFpbGFibGVSZXN1bHQpIHtcbiAgICAgIHRoaXMuY29uc3VtZVJlc3VsdF8oYXZhaWxhYmxlUmVzdWx0LCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVycm9yKX0gaGFuZGxlclxuICAgKi9cbiAgb25SZWRpcmVjdEVycm9yKGhhbmRsZXIpIHtcbiAgICB0aGlzLnJlZGlyZWN0RXJyb3JQcm9taXNlXy50aGVuKGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gICAqIEBwYXJhbSB7P09iamVjdD19IG9wdF9hcmdzXG4gICAqIEBwYXJhbSB7P0FjdGl2aXR5T3Blbk9wdGlvbnM9fSBvcHRfb3B0aW9uc1xuICAgKiBAcmV0dXJuIHshQWN0aXZpdHlXaW5kb3dQb3J0fVxuICAgKi9cbiAgb3Blbldpbl8ocmVxdWVzdElkLCB1cmwsIHRhcmdldCwgb3B0X2FyZ3MsIG9wdF9vcHRpb25zKSB7XG4gICAgY29uc3QgcG9ydCA9IG5ldyBBY3Rpdml0eVdpbmRvd1BvcnQoXG4gICAgICAgIHRoaXMud2luXywgcmVxdWVzdElkLCB1cmwsIHRhcmdldCwgb3B0X2FyZ3MsIG9wdF9vcHRpb25zKTtcbiAgICBwb3J0Lm9wZW4oKS50aGVuKCgpID0+IHtcbiAgICAgIC8vIEF3YWl0IHJlc3VsdCBpZiBwb3NzaWJsZS4gTm90aWNlIHRoYXQgd2hlbiBmYWxsaW5nIGJhY2sgdG8gXCJyZWRpcmVjdFwiLFxuICAgICAgLy8gdGhlIHJlc3VsdCB3aWxsIG5ldmVyIGFycml2ZSB0aHJvdWdoIHRoaXMgcG9ydC5cbiAgICAgIHRoaXMuY29uc3VtZVJlc3VsdEFsbF8ocmVxdWVzdElkLCBwb3J0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcG9ydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdElkXG4gICAqIEByZXR1cm4gez9BY3Rpdml0eVBvcnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkaXNjb3ZlclJlc3VsdF8ocmVxdWVzdElkKSB7XG4gICAgbGV0IHBvcnQgPSB0aGlzLnJlc3VsdEJ1ZmZlcl9bcmVxdWVzdElkXTtcbiAgICBpZiAoIXBvcnQgJiYgdGhpcy5mcmFnbWVudF8pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBvcnQgPSBkaXNjb3ZlclJlZGlyZWN0UG9ydChcbiAgICAgICAgICAgIHRoaXMud2luXywgdGhpcy5mcmFnbWVudF8sIHJlcXVlc3RJZCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93QXN5bmMoZSk7XG4gICAgICAgIHRoaXMucmVkaXJlY3RFcnJvclJlc29sdmVyXyhlKTtcbiAgICAgIH1cbiAgICAgIGlmIChwb3J0KSB7XG4gICAgICAgIHRoaXMucmVzdWx0QnVmZmVyX1tyZXF1ZXN0SWRdID0gcG9ydDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvcnQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQWN0aXZpdHlQb3J0fSBwb3J0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUFjdGl2aXR5UG9ydCl9IGNhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdW1lUmVzdWx0Xyhwb3J0LCBjYWxsYmFjaykge1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY2FsbGJhY2socG9ydCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RJZFxuICAgKiBAcGFyYW0geyFBY3Rpdml0eVBvcnR9IHBvcnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN1bWVSZXN1bHRBbGxfKHJlcXVlc3RJZCwgcG9ydCkge1xuICAgIC8vIEZpbmQgYW5kIGV4ZWN1dGUgaGFuZGxlcnMuXG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLnJlcXVlc3RIYW5kbGVyc19bcmVxdWVzdElkXTtcbiAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XG4gICAgICAgIHRoaXMuY29uc3VtZVJlc3VsdF8ocG9ydCwgaGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQnVmZmVyIHRoZSByZXN1bHQgZm9yIGNhbGxiYWNrcyB0aGF0IG1heSBhcnJpdmUgaW4gdGhlIGZ1dHVyZS5cbiAgICB0aGlzLnJlc3VsdEJ1ZmZlcl9bcmVxdWVzdElkXSA9IHBvcnQ7XG4gIH1cbn1cblxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBY3Rpdml0eVBvcnRzLFxuICBBY3Rpdml0eUlmcmFtZVBvcnQsXG4gIEFjdGl2aXR5TWVzc2FnaW5nUG9ydCxcbiAgQWN0aXZpdHlNb2RlLFxuICBBY3Rpdml0eU9wZW5PcHRpb25zLFxuICBBY3Rpdml0eVBvcnQsXG4gIEFjdGl2aXR5UmVxdWVzdCxcbiAgQWN0aXZpdHlSZXN1bHQsXG4gIEFjdGl2aXR5UmVzdWx0Q29kZSxcbiAgQWN0aXZpdHlXaW5kb3dQb3J0LFxuICBjcmVhdGVBYm9ydEVycm9yLFxuICBpc0Fib3J0RXJyb3IsXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0FuYWx5dGljc0V2ZW50LEV2ZW50T3JpZ2luYXRvcn0gZnJvbSAnLi4vcHJvdG8vYXBpX21lc3NhZ2VzJztcblxuLyoqIEBlbnVtIHtudW1iZXJ9ICAqL1xuZXhwb3J0IGNvbnN0IEZpbHRlclJlc3VsdCA9IHtcbiAgLyoqIFRoZSBldmVudCBpcyBhbGxvd2VkIHRvIHByb2NlZWQgdG8gdGhlIGxpc3RlbmVycy4gKi9cbiAgUFJPQ0VTU19FVkVOVDogMCxcbiAgLyoqIFRoZSBldmVudCBpcyBjYW5jZWxlZCBhbmQgdGhlIGxpc3RlbmVycyBhcmUgbm90IGluZm9ybWVkIGFib3V0IGl0LiAqL1xuICBDQU5DRUxfRVZFTlQ6IDEsXG59O1xuXG4vKipcbiAqIERlZmluZXMgYSBjbGllbnQgZXZlbnQgaW4gU3dHXG4gKiBQcm9wZXJ0aWVzOlxuICogLSBldmVudFR5cGU6IFJlcXVpcmVkLiBUaGUgQW5hbHl0aWNzRXZlbnQgdHlwZSB0aGF0IG9jY3VycmVkLlxuICogLSBldmVudE9yaWdpbmF0b3I6IFJlcXVpcmVkLiAgVGhlIGNvZGViYXNlIHRoYXQgaW5pdGlhdGVkIHRoZSBldmVudC5cbiAqIC0gaXNGcm9tVXNlckFjdGlvbjogT3B0aW9uYWwuICBUcnVlIGlmIHRoZSB1c2VyIHRvb2sgYW4gYWN0aW9uIHRvIGdlbmVyYXRlXG4gKiAgIHRoZSBldmVudC5cbiAqIC0gYWRkaXRpb25hbFBhcmFtZXRlcnM6IE9wdGlvbmFsLiAgQSBKU09OIG9iamVjdCB0byBzdG9yZSBnZW5lcmljIGRhdGEuXG4gKlxuICogIEB0eXBlZGVmIHt7XG4gKiAgICBldmVudFR5cGU6ICFBbmFseXRpY3NFdmVudCxcbiAqICAgIGV2ZW50T3JpZ2luYXRvcjogIUV2ZW50T3JpZ2luYXRvcixcbiAqICAgIGlzRnJvbVVzZXJBY3Rpb246ID9ib29sZWFuLFxuICogICAgYWRkaXRpb25hbFBhcmFtZXRlcnM6ID9PYmplY3QsXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IENsaWVudEV2ZW50O1xuXG4vKipcbiAqIEBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGNsYXNzIENsaWVudEV2ZW50TWFuYWdlckFwaSB7XG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gbG9nIGFuIGV2ZW50LiBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgd2lsbCBiZVxuICAgKiBpbnZva2VkIHVubGVzcyB0aGUgZXZlbnQgaXMgZmlsdGVyZWQuXG4gICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFDbGllbnRFdmVudCl9IGxpc3RlbmVyXG4gICAqL1xuICByZWdpc3RlckV2ZW50TGlzdGVuZXIobGlzdGVuZXIpIHsgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGZpbHRlcmVyIGZvciBldmVudHMgaWYgeW91IG5lZWQgdG8gcG90ZW50aWFsbHkgcHJldmVudCB0aGVcbiAgICogbGlzdGVuZXJzIGZyb20gaGVhcmluZyBhYm91dCBpdC4gIEEgZmlsdGVyZXIgc2hvdWxkIHJldHVyblxuICAgKiBGaWx0ZXJSZXN1bHQuQ0FOQ0VMX0VWRU5UIHRvIHByZXZlbnQgbGlzdGVuZXJzIGZyb20gaGVhcmluZyBhYm91dCB0aGVcbiAgICogZXZlbnQuXG4gICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFDbGllbnRFdmVudCk6RmlsdGVyUmVzdWx0fSBmaWx0ZXJlclxuICAgKi9cbiAgcmVnaXN0ZXJFdmVudEZpbHRlcmVyKGZpbHRlcmVyKSB7IH1cblxuICAvKipcbiAgICogQ2FsbCB0aGlzIGZ1bmN0aW9uIHRvIGxvZyBhbiBldmVudC4gIEl0IHdpbGwgaW1tZWRpYXRlbHkgdGhyb3cgYW4gZXJyb3IgaWZcbiAgICogdGhlIGV2ZW50IGlzIGludmFsaWQuICBJdCB3aWxsIHRoZW4gYXN5bmNocm9ub3VzbHkgY2FsbCB0aGUgZmlsdGVyZXJzIGFuZFxuICAgKiBzdG9wIHRoZSBldmVudCBpZiBhIGZpbHRlcmVyIGNhbmNlbHMgaXQuICBBZnRlciB0aGF0LCBpdCB3aWxsIGNhbGwgZWFjaFxuICAgKiBsaXN0ZW5lciBhc3luY2hyb25vdXNseS5cbiAgICogQHBhcmFtIHshQ2xpZW50RXZlbnR9IGV2ZW50XG4gICAqL1xuICBsb2dFdmVudChldmVudCkgeyB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7RW50aXRsZW1lbnRzfSBmcm9tICcuL2VudGl0bGVtZW50cyc7XG5pbXBvcnQge1B1cmNoYXNlRGF0YX0gZnJvbSAnLi9zdWJzY3JpYmUtcmVzcG9uc2UnO1xuaW1wb3J0IHtVc2VyRGF0YX0gZnJvbSAnLi91c2VyLWRhdGEnO1xuXG5cbi8qKlxuICogUHJvcGVydGllczpcbiAqIC0gZW50aXRsZW1lbnRzIC0gdGhlIGN1cnJlbnQgZW50aXRsZW1lbnRzLlxuICogLSBjb25zZW50IC0gd2hldGhlciB0byBhc2sgdGhlIHVzZXIgZm9yIGFjY291bnQgY3JlYXRpb24gY29uc2VudC5cbiAqICAgRGVmYXVsdCBpcyBgdHJ1ZWAuXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgZW50aXRsZW1lbnRzOiAoP0VudGl0bGVtZW50c3x1bmRlZmluZWQpLFxuICogICBjb25zZW50OiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogfX1cbiAqL1xuZXhwb3J0IGxldCBEZWZlcnJlZEFjY291bnRDcmVhdGlvblJlcXVlc3Q7XG5cblxuLyoqXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZEFjY291bnRDcmVhdGlvblJlc3BvbnNlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHshRW50aXRsZW1lbnRzfSBlbnRpdGxlbWVudHNcbiAgICogQHBhcmFtIHshVXNlckRhdGF9IHVzZXJEYXRhXG4gICAqIEBwYXJhbSB7IUFycmF5PCFQdXJjaGFzZURhdGE+fSBwdXJjaGFzZURhdGFMaXN0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTohUHJvbWlzZX0gY29tcGxldGVIYW5kbGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnRpdGxlbWVudHMsIHVzZXJEYXRhLCBwdXJjaGFzZURhdGFMaXN0LCBjb21wbGV0ZUhhbmRsZXIpIHtcbiAgICAvKiogQGNvbnN0IHshRW50aXRsZW1lbnRzfSAqL1xuICAgIHRoaXMuZW50aXRsZW1lbnRzID0gZW50aXRsZW1lbnRzO1xuICAgIC8qKiBAY29uc3QgeyFVc2VyRGF0YX0gKi9cbiAgICB0aGlzLnVzZXJEYXRhID0gdXNlckRhdGE7XG4gICAgLyoqIEBjb25zdCB7IUFycmF5PCFQdXJjaGFzZURhdGE+fSAqL1xuICAgIHRoaXMucHVyY2hhc2VEYXRhTGlzdCA9IHB1cmNoYXNlRGF0YUxpc3Q7XG4gICAgLy8gVE9ETyhkdm95dGVua28pOiBkZXByZWNhdGUuXG4gICAgLyoqIEBjb25zdCB7IVB1cmNoYXNlRGF0YX0gKi9cbiAgICB0aGlzLnB1cmNoYXNlRGF0YSA9IHB1cmNoYXNlRGF0YUxpc3RbMF07XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7ZnVuY3Rpb24oKTohUHJvbWlzZX0gKi9cbiAgICB0aGlzLmNvbXBsZXRlSGFuZGxlcl8gPSBjb21wbGV0ZUhhbmRsZXI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IURlZmVycmVkQWNjb3VudENyZWF0aW9uUmVzcG9uc2V9XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkQWNjb3VudENyZWF0aW9uUmVzcG9uc2UoXG4gICAgICAgIHRoaXMuZW50aXRsZW1lbnRzLFxuICAgICAgICB0aGlzLnVzZXJEYXRhLFxuICAgICAgICB0aGlzLnB1cmNoYXNlRGF0YUxpc3QsXG4gICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyXyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdlbnRpdGxlbWVudHMnOiB0aGlzLmVudGl0bGVtZW50cy5qc29uKCksXG4gICAgICAndXNlckRhdGEnOiB0aGlzLnVzZXJEYXRhLmpzb24oKSxcbiAgICAgICdwdXJjaGFzZURhdGFMaXN0JzogdGhpcy5wdXJjaGFzZURhdGFMaXN0Lm1hcChwZCA9PiBwZC5qc29uKCkpLFxuICAgICAgLy8gVE9ETyhkdm95dGVua28pOiBkZXByZWNhdGUuXG4gICAgICAncHVyY2hhc2VEYXRhJzogdGhpcy5wdXJjaGFzZURhdGEuanNvbigpLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dzIHRoZSByZWNlaXZpbmcgc2l0ZSB0byBjb21wbGV0ZS9hY2tub3dsZWRnZSB0aGF0IGl0IHJlZ2lzdGVyZWRcbiAgICogdGhlIHN1YnNjcmlwdGlvbiBpbmZvLiBUaGUgdHlwaWNhbCBhY3Rpb24gd291bGQgYmUgdG8gY3JlYXRlIGFuXG4gICAqIGFjY291bnQgKG9yIG1hdGNoIGFuIGV4aXN0aW5nIG9uZSkgYW5kIGFzc29jaWF0ZWQgdGhlIHN1YnNjcmlwdGlvbiB3aXRoXG4gICAqIHRoYXQgYWNjb3VudC5cbiAgICpcbiAgICogU3dHIHdpbGwgZGlzcGxheSBwcm9ncmVzcyBpbmRpY2F0b3IgdW50aWwgdGhpcyBtZXRob2QgaXMgY2FsbGVkIGFuZFxuICAgKiB1cG9uIHJlY2VpdmluZyB0aGlzIGNhbGwgd2lsbCBzaG93IHRoZSBjb25maXJtYXRpb24gdG8gdGhlIHVzZXIuXG4gICAqIFRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHdpbGwgeWllbGQgb25jZSB0aGUgdXNlciBjbG9zZXNcbiAgICogdGhlIGNvbmZpcm1hdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wbGV0ZUhhbmRsZXJfKCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtnZXRQcm9wZXJ0eUZyb21Kc29uU3RyaW5nfSBmcm9tICcuLi91dGlscy9qc29uJztcblxuLyoqXG4gKiBUaGUgaG9sZGVyIG9mIHRoZSBlbnRpdGxlbWVudHMgZm9yIGEgc2VydmljZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVudGl0bGVtZW50cyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmF3XG4gICAqIEBwYXJhbSB7IUFycmF5PCFFbnRpdGxlbWVudD59IGVudGl0bGVtZW50c1xuICAgKiBAcGFyYW0gez9zdHJpbmd9IGN1cnJlbnRQcm9kdWN0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVudGl0bGVtZW50cyl9IGFja0hhbmRsZXJcbiAgICogQHBhcmFtIHs/Ym9vbGVhbnx1bmRlZmluZWR9IGlzUmVhZHlUb1BheVxuICAgKiBAcGFyYW0gez9zdHJpbmd8dW5kZWZpbmVkfSBkZWNyeXB0ZWREb2N1bWVudEtleVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgc2VydmljZSxcbiAgICByYXcsXG4gICAgZW50aXRsZW1lbnRzLFxuICAgIGN1cnJlbnRQcm9kdWN0LFxuICAgIGFja0hhbmRsZXIsXG4gICAgaXNSZWFkeVRvUGF5LFxuICAgIGRlY3J5cHRlZERvY3VtZW50S2V5XG4gICkge1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnJhdyA9IHJhdztcbiAgICAvKiogQGNvbnN0IHshQXJyYXk8IUVudGl0bGVtZW50Pn0gKi9cbiAgICB0aGlzLmVudGl0bGVtZW50cyA9IGVudGl0bGVtZW50cztcbiAgICAvKiogQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMuaXNSZWFkeVRvUGF5ID0gaXNSZWFkeVRvUGF5IHx8IGZhbHNlO1xuICAgIC8qKiBAY29uc3Qgez9zdHJpbmd9ICovXG4gICAgdGhpcy5kZWNyeXB0ZWREb2N1bWVudEtleSA9IGRlY3J5cHRlZERvY3VtZW50S2V5IHx8IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHs/c3RyaW5nfSAqL1xuICAgIHRoaXMucHJvZHVjdF8gPSBjdXJyZW50UHJvZHVjdDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtmdW5jdGlvbighRW50aXRsZW1lbnRzKX0gKi9cbiAgICB0aGlzLmFja0hhbmRsZXJfID0gYWNrSGFuZGxlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshRW50aXRsZW1lbnRzfVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBFbnRpdGxlbWVudHMoXG4gICAgICB0aGlzLnNlcnZpY2UsXG4gICAgICB0aGlzLnJhdyxcbiAgICAgIHRoaXMuZW50aXRsZW1lbnRzLm1hcChlbnQgPT4gZW50LmNsb25lKCkpLFxuICAgICAgdGhpcy5wcm9kdWN0XyxcbiAgICAgIHRoaXMuYWNrSGFuZGxlcl8sXG4gICAgICB0aGlzLmlzUmVhZHlUb1BheSxcbiAgICAgIHRoaXMuZGVjcnlwdGVkRG9jdW1lbnRLZXlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqL1xuICBqc29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnc2VydmljZSc6IHRoaXMuc2VydmljZSxcbiAgICAgICdlbnRpdGxlbWVudHMnOiB0aGlzLmVudGl0bGVtZW50cy5tYXAoaXRlbSA9PiBpdGVtLmpzb24oKSksXG4gICAgICAnaXNSZWFkeVRvUGF5JzogdGhpcy5pc1JlYWR5VG9QYXksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHNvdXJjZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZW5hYmxlc1RoaXMoc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5hYmxlcyh0aGlzLnByb2R1Y3RfLCBzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc291cmNlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlbmFibGVzQW55KHNvdXJjZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbnRpdGxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5lbnRpdGxlbWVudHNbaV0ucHJvZHVjdHMubGVuZ3RoID4gMCAmJlxuICAgICAgICAoIXNvdXJjZSB8fCBzb3VyY2UgPT0gdGhpcy5lbnRpdGxlbWVudHNbaV0uc291cmNlKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGVzZSBlbnRpdGxlbWVudHMgZW5hYmxlIHRoZSBzcGVjaWZpZWQgcHJvZHVjdCwgb3B0aW9uYWxseSBhbHNvXG4gICAqIHJlc3RyaWN0aW5nIHRoZSBzb3VyY2UuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gcHJvZHVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IHNvdXJjZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZW5hYmxlcyhwcm9kdWN0LCBzb3VyY2UpIHtcbiAgICBpZiAoIXByb2R1Y3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICEhdGhpcy5nZXRFbnRpdGxlbWVudEZvcihwcm9kdWN0LCBzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IG1hdGNoaW5nIGVudGl0bGVtZW50IGZvciB0aGUgY3VycmVudCBwcm9kdWN0LFxuICAgKiBvcHRpb25hbGx5IGFsc28gbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCBzb3VyY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc291cmNlXG4gICAqIEByZXR1cm4gez9FbnRpdGxlbWVudH1cbiAgICovXG4gIGdldEVudGl0bGVtZW50Rm9yVGhpcyhzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRpdGxlbWVudEZvcih0aGlzLnByb2R1Y3RfLCBzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IG1hdGNoaW5nIGVudGl0bGVtZW50IGZvciB0aGUgc3BlY2lmaWVkIHByb2R1Y3QsXG4gICAqIG9wdGlvbmFsbHkgYWxzbyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHNvdXJjZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBwcm9kdWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc291cmNlXG4gICAqIEByZXR1cm4gez9FbnRpdGxlbWVudH1cbiAgICovXG4gIGdldEVudGl0bGVtZW50Rm9yKHByb2R1Y3QsIHNvdXJjZSkge1xuICAgIGlmIChwcm9kdWN0ICYmIHRoaXMuZW50aXRsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbnRpdGxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuZW50aXRsZW1lbnRzW2ldLmVuYWJsZXMocHJvZHVjdCkgJiZcbiAgICAgICAgICAoIXNvdXJjZSB8fCBzb3VyY2UgPT0gdGhpcy5lbnRpdGxlbWVudHNbaV0uc291cmNlKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGxlbWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgbWF0Y2hpbmcgZW50aXRsZW1lbnQgZm9yIHRoZSBzcGVjaWZpZWQgc291cmNlIHcvb1xuICAgKiBtYXRjaGluZyBhbnkgc3BlY2lmaWMgcHJvZHVjdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VcbiAgICogQHJldHVybiB7P0VudGl0bGVtZW50fVxuICAgKi9cbiAgZ2V0RW50aXRsZW1lbnRGb3JTb3VyY2Uoc291cmNlKSB7XG4gICAgaWYgKHRoaXMuZW50aXRsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbnRpdGxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuZW50aXRsZW1lbnRzW2ldLnN1YnNjcmlwdGlvblRva2VuICYmXG4gICAgICAgICAgc291cmNlID09IHRoaXMuZW50aXRsZW1lbnRzW2ldLnNvdXJjZVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGxlbWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQSAzcCBzaXRlIHNob3VsZCBjYWxsIHRoaXMgbWV0aG9kIHRvIGFja25vd2xlZGdlIHRoYXQgaXQgXCJzYXdcIiBhbmRcbiAgICogXCJ1bmRlcnN0b29kXCIgZW50aXRsZW1lbnRzLlxuICAgKi9cbiAgYWNrKCkge1xuICAgIHRoaXMuYWNrSGFuZGxlcl8odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgc2luZ2xlIGVudGl0bGVtZW50IG9iamVjdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEVudGl0bGVtZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VcbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvZHVjdHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1YnNjcmlwdGlvblRva2VuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihzb3VyY2UsIHByb2R1Y3RzLCBzdWJzY3JpcHRpb25Ub2tlbikge1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAvKiogQGNvbnN0IHshQXJyYXk8c3RyaW5nPn0gKi9cbiAgICB0aGlzLnByb2R1Y3RzID0gcHJvZHVjdHM7XG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uVG9rZW4gPSBzdWJzY3JpcHRpb25Ub2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshRW50aXRsZW1lbnR9XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEVudGl0bGVtZW50KFxuICAgICAgdGhpcy5zb3VyY2UsXG4gICAgICB0aGlzLnByb2R1Y3RzLnNsaWNlKDApLFxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25Ub2tlblxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdzb3VyY2UnOiB0aGlzLnNvdXJjZSxcbiAgICAgICdwcm9kdWN0cyc6IHRoaXMucHJvZHVjdHMsXG4gICAgICAnc3Vic2NyaXB0aW9uVG9rZW4nOiB0aGlzLnN1YnNjcmlwdGlvblRva2VuLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBwcm9kdWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlbmFibGVzKHByb2R1Y3QpIHtcbiAgICBpZiAoIXByb2R1Y3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gV2lsZGNhcmQgYWxsb3dzIHRoaXMgcHJvZHVjdC5cbiAgICBjb25zdCBlcSA9IHByb2R1Y3QuaW5kZXhPZignOicpO1xuICAgIGlmIChcbiAgICAgIGVxICE9IC0xICYmXG4gICAgICB0aGlzLnByb2R1Y3RzLmluY2x1ZGVzKHByb2R1Y3Quc3Vic3RyaW5nKDAsIGVxICsgMSkgKyAnKicpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdHMuaW5jbHVkZXMocHJvZHVjdCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBqc29uXG4gICAqIEByZXR1cm4geyFFbnRpdGxlbWVudH1cbiAgICovXG4gIHN0YXRpYyBwYXJzZUZyb21Kc29uKGpzb24pIHtcbiAgICBpZiAoIWpzb24pIHtcbiAgICAgIGpzb24gPSB7fTtcbiAgICB9XG4gICAgY29uc3Qgc291cmNlID0ganNvblsnc291cmNlJ10gfHwgJyc7XG4gICAgY29uc3QgcHJvZHVjdHMgPSBqc29uWydwcm9kdWN0cyddIHx8IFtdO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvblRva2VuID0ganNvblsnc3Vic2NyaXB0aW9uVG9rZW4nXTtcbiAgICByZXR1cm4gbmV3IEVudGl0bGVtZW50KHNvdXJjZSwgcHJvZHVjdHMsIHN1YnNjcmlwdGlvblRva2VuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgSlNPTiBpcyBleHBlY3RlZCBpbiBvbmUgb2YgdGhlIGZvcm1zOlxuICAgKiAtIFNpbmdsZSBlbnRpdGxlbWVudDogYHtwcm9kdWN0czogW10sIC4uLn1gLlxuICAgKiAtIEEgbGlzdCBvZiBlbnRpdGxlbWVudHM6IGBbe3Byb2R1Y3RzOiBbXSwgLi4ufSwgey4uLn1dYC5cbiAgICogQHBhcmFtIHshT2JqZWN0fCFBcnJheTwhT2JqZWN0Pn0ganNvblxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUVudGl0bGVtZW50Pn1cbiAgICovXG4gIHN0YXRpYyBwYXJzZUxpc3RGcm9tSnNvbihqc29uKSB7XG4gICAgY29uc3QganNvbkxpc3QgPSBBcnJheS5pc0FycmF5KGpzb24pXG4gICAgICA/IC8qKiBAdHlwZSB7IUFycmF5PE9iamVjdD59ICovIChqc29uKVxuICAgICAgOiBbanNvbl07XG4gICAgcmV0dXJuIGpzb25MaXN0Lm1hcChqc29uID0+IEVudGl0bGVtZW50LnBhcnNlRnJvbUpzb24oanNvbikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIFNLVSBhc3NvY2lhdGVkIHdpdGggdGhpcyBlbnRpdGxlbWVudC5cbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldFNrdSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLyoqIEB0eXBlIHs/c3RyaW5nfSAqLyAoZ2V0UHJvcGVydHlGcm9tSnNvblN0cmluZyhcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25Ub2tlbixcbiAgICAgICAgJ3Byb2R1Y3RJZCdcbiAgICAgICkgfHwgbnVsbClcbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE5IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFN1YnNjcmlwdGlvblN0YXRlID0ge1xuICAvLyB1c2VyJ3Mgc3Vic2NyaXB0aW9uIHN0YXRlIG5vdCBrbm93bi5cbiAgVU5LTk9XTjogJ3Vua25vd24nLFxuICAvLyB1c2VyIGlzIG5vdCBhIHN1YnNjcmliZXIuXG4gIE5PTl9TVUJTQ1JJQkVSOiAnbm9uX3N1YnNjcmliZXInLFxuICAvLyB1c2VyIGlzIGEgc3Vic2NyaWJlci5cbiAgU1VCU0NSSUJFUjogJ3N1YnNjcmliZXInLFxuICAvLyB1c2VyJ3Mgc3Vic2NyaXB0aW9uIGhhcyBleHBpcmVkLlxuICBQQVNUX1NVQlNDUklCRVI6ICdwYXN0X3N1YnNjcmliZXInLFxufTtcblxuLyoqXG4gKiBTdWJzY3JpcHRpb24gcmVsYXRlZCBldmVudHMuIExpc3RlZCBiZWxvdyBhcmUgZW51bSBzdHJpbmdzIHRoYXRcbiAqIHJlcHJlc2VudCBldmVudHMgcmVsYXRlZCB0byBTdWJzY3JpcHRpb24gZmxvdy4gRXZlbnQgcGFyYW1ldGVyc1xuICogdGhhdCBwcm92aWRlIG1vcmUgY29udGV4dCBhYm91dCB0aGUgZXZlbnQgYXJlIHNlbnQgYXMgYSBKU09OXG4gKiBibG9jayBvZiBkZXB0aCAxIGluIHRoZSBzZW5kRXZlbnQoKSBBUEkgY2FsbC5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudCA9IHtcbiAgLyoqXG4gICAqIElNUFJFU1NJT05fUEFZV0FMTCBldmVudC5cbiAgICogVXNlciBoaXRzIGEgcGF5d2FsbC5cbiAgICogRXZlcnkgaW1wcmVzc2lvbiBzaG91bGQgYmUgcXVhbGlmaWVkIGFzIGFjdGl2ZSBvciBwYXNzaXZlLlxuICAgKiBUaGUgZmllbGQgJ2FjdGl2ZScgb2YgUHJvcGVuc2l0eUV2ZW50LCB3aGljaCBjYXJyaWVzIHRoaXNcbiAgICogZXZlbnQsIG11c3QgYmUgc2V0IHRvIHRydWUgb3IgZmFsc2UgdG8gaW5kaWNhdGUgdGhpcy5cbiAgICogSWYgdGhlIHVzZXIgaGFzIHJ1biBvdXQgb2YgbWV0ZXJpbmcsIGFuZCB0aGF04oCZcyB3aHkgd2FzIHNob3duXG4gICAqIGEgcGF5d2FsbCwgdGhhdCB3b3VsZCBiZSBhIHBhc3NpdmUgaW1wcmVzc2lvbiBvZiB0aGUgcGF5d2FsbC5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIGNvbnN0IHByb3BlbnNpdHlFdmVudCA9IHtcbiAgICogIG5hbWU6ICdwYXl3YWxsJyxcbiAgICogIGFjdGl2ZTogZmFsc2UsXG4gICAqIH1cbiAgICovXG4gIElNUFJFU1NJT05fUEFZV0FMTDogJ3BheXdhbGwnLFxuICAvKipcbiAgICogSU1QUkVTU0lPTl9BRCBldmVudC5cbiAgICogVXNlciBoYXMgYmVlbiBzaG93biBhIHN1YnNjcmlwdGlvbiBhZC5cbiAgICogRXZlcnkgaW1wcmVzc2lvbiBzaG91bGQgYmUgcXVhbGlmaWVkIGFzIGFjdGl2ZSBvciBwYXNzaXZlLlxuICAgKiBUaGUgZmllbGQgJ2FjdGl2ZScgb2YgUHJvcGVuc2l0eUV2ZW50LCB3aGljaCBjYXJyaWVzIHRoaXNcbiAgICogZXZlbnQsIG11c3QgYmUgc2V0IHRvIHRydWUgb3IgZmFsc2UgdG8gaW5kaWNhdGUgdGhpcy5cbiAgICogVGhlIEpTT04gYmxvY2sgY2FuIHByb3ZpZGUgdGhlIG5hbWUgb2YgdGhlIHN1YnNjcmlwdGlvbiBhZFxuICAgKiBjcmVhdGl2ZSBvciBjYW1wYWlnbi4gQWQgaW1wcmVzc2lvbnMgYXJlIHVzdWFsbHkgcGFzc2l2ZS5cbiAgICogY29uc3QgcHJvcGVuc2l0eUV2ZW50ID0ge1xuICAgKiAgIG5hbWU6ICdhZF9zaG93bicsXG4gICAqICAgYWN0aXZlOiBmYWxzZSxcbiAgICogICBkYXRhOiB7J2FkX25hbWUnOiAnZmFsbF9hZCd9XG4gICAqIH1cbiAgICovXG4gIElNUFJFU1NJT05fQUQ6ICdhZF9zaG93bicsXG4gIC8qKlxuICAgKiBJTVBSRVNTSU9OX09GRkVSUyBldmVudC5cbiAgICogVXNlciBoYXMgYmVlbiBzaG93biBhIGxpc3Qgb2YgYXZhaWxhYmxlIG9mZmVycyBmb3Igc3Vic2NyaXB0aW9uLlxuICAgKiBFdmVyeSBpbXByZXNzaW9uIHNob3VsZCBiZSBxdWFsaWZpZWQgYXMgYWN0aXZlIG9yIHBhc3NpdmUuXG4gICAqIFRoZSBmaWVsZCAnYWN0aXZlJyBvZiBQcm9wZW5zaXR5RXZlbnQsIHdoaWNoIGNhcnJpZXMgdGhpc1xuICAgKiBldmVudCwgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBvciBmYWxzZSB0byBpbmRpY2F0ZSB0aGlzLlxuICAgKiBUaGUgSlNPTiBibG9jayBjYW4gcHJvdmlkZSBhIGxpc3Qgb2YgcHJvZHVjdHMgZGlzcGxheWVkLFxuICAgKiBhbmQgdGhlIHNvdXJjZSB0byBpbmRpY2F0ZSB3aHkgdGhlIHVzZXIgd2FzIHNob3duIHRoZSBvZmZlci5cbiAgICogTm90ZTogc291cmNlIGlzIG5vdCB0aGUgc2FtZSBhcyByZWZlcnJlci5cbiAgICogSW4gdGhlIGNhc2VzIGJlbG93LCB0aGUgdXNlciB0b29rIGFjdGlvbiBiZWZvcmUgc2VlaW5nIHRoZSBvZmZlcnMsXG4gICAqIGFuZCB0aGVyZWZvcmUgY29uc2lkZXJlZCBhY3RpdmUgaW1wcmVzc2lvbi5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIGNvbnN0IHByb3BlbnNpdHlFdmVudCA9IHtcbiAgICogICBuYW1lOiAnb2ZmZXJzX3Nob3duJyxcbiAgICogICBhY3RpdmU6IHRydWUsXG4gICAqICAgZGF0YTogeydvZmZlcnMnOiBbJ2Jhc2ljLW1vbnRobHknLCAncHJlbWl1bS13ZWVrbHknXSxcbiAgICogICAgICAgICAgICdzb3VyY2UnOiAnYWQtY2xpY2snfVxuICAgKiB9XG4gICAqIEZvciBleGFtcGxlOlxuICAgKiBjb25zdCBwcm9wZW5zaXR5RXZlbnQgPSB7XG4gICAqICAgbmFtZTogJ29mZmVyc19zaG93bicsXG4gICAqICAgYWN0aXZlOiB0cnVlLFxuICAgKiAgIGRhdGE6IHsnb2ZmZXJzJzogWydiYXNpYy1tb250aGx5JywgJ3ByZW1pdW0td2Vla2x5J10sXG4gICAqICAgICAgICAgICAnc291cmNlJzog4oCYbmF2aWdhdGUtdG8tb2ZmZXJzLXBhZ2XigJl9XG4gICAqIH1cbiAgICogSWYgdGhlIHVzZXIgd2FzIHNob3duIHRoZSBvZmZlcnMgYXMgYSByZXN1bHQgb2YgcGF5d2FsbCBtZXRlcmluZ1xuICAgKiBleHBpcmF0aW9uLCBpdCBpcyBjb25zaWRlcmVkIGEgcGFzc2l2ZSBpbXByZXNzaW9uLlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogY29uc3QgcHJvcGVuc2l0eUV2ZW50ID0ge1xuICAgKiAgIG5hbWU6ICdvZmZlcnNfc2hvd24nLFxuICAgKiAgIGFjdGl2ZTogZmFsc2UsXG4gICAqICAgZGF0YTogeydvZmZlcnMnOiBbJ2Jhc2ljLW1vbnRobHknLCAncHJlbWl1bS13ZWVrbHknXSxcbiAgICogICAgICAgICAgICdzb3VyY2UnOiDigJhwYXl3YWxsLW1ldGVyaW5nLWV4cGlyZWTigJl9XG4gICAqIH1cbiAgICovXG4gIElNUFJFU1NJT05fT0ZGRVJTOiAnb2ZmZXJzX3Nob3duJyxcbiAgLyoqXG4gICAqIEFDVElPTl9TVUJTQ1JJUFRJT05TX0xBTkRJTkdfUEFHRSBldmVudC5cbiAgICogVXNlciBoYXMgdGFrZW4gdGhlIGFjdGlvbiB0byBhcnJpdmUgYXQgYSBsYW5kaW5nIHBhZ2Ugb2YgdGhlXG4gICAqIHN1YnNjcmlwdGlvbiB3b3JrZmxvdy4gVGhlIGxhbmRpbmcgcGFnZSBzaG91bGQgc2F0aXNmeSBvbmUgb2ZcbiAgICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFuZCBoZW5jZSBiZSBhIHBhcnQgb2YgdGhlIGZ1bm5lbCB0b1xuICAgKiBnZXQgdGhlIHVzZXIgdG8gc3Vic2NyaWJlOlxuICAgKiAtIGhhdmUgYSBidXR0b24gdG8gbmF2aWdhdGUgdGhlIHVzZXIgdG8gYW4gb2ZmZXJzIHBhZ2UsIChpblxuICAgKiAgIHRoaXMgY2FzZSwgdGhlIG5leHQgZXZlbnQgd2lsbCBiZSBJTVBSRVNTSU9OX09GRkVSUywgd2l0aFxuICAgKiAgIHBhcmFtZXRlciAnc291cmNlJyBhcyBzdWJzY3JpcHRpb25zLWxhbmRpbmctcGFnZSBhbmRcbiAgICogICAnaXNfYWN0aXZlJyBzZXQgdG8gdHJ1ZSksXG4gICAqIC0gc2hvdyBvZmZlcnMgdGhlIHVzZXIgY2FuIHNlbGVjdCwgKGluIHRoaXMgY2FzZSwgdGhlIG5leHRcbiAgICogICBldmVudCB3aWxsIGJlIElNUFJFU1NJT05fT0ZGRVJTLCB3aXRoIGEgcGFyYW1ldGVyICdzb3VyY2UnXG4gICAqICAgYXMgbmF2aWdhdGUtdG8tb2ZmZXJzLXBhZ2UgYW5kICdpc19hY3RpdmUnIHNldCB0byB0cnVlKSxcbiAgICogLSBwcm92aWRlIGEgd2F5IHRvIHN0YXJ0IHRoZSBwYXltZW50IGZsb3cgZm9yIGEgc3BlY2lmaWMgb2ZmZXIuXG4gICAqICAgKGluIHRoaXMgY2FzZSwgdGhlIG5leHQgZXZlbnQgd2lsbCBiZSBBQ1RJT05fT0ZGRVJfU0VMRUNURURcbiAgICogICBvciBBQ1RJT05fUEFZTUVOVF9GTE9XX1NUQVJURUQgZGVwZW5kaW5nIG9uIGlmIHRoYXQgYnV0dG9uXG4gICAqICAgdG9vayB0aGUgdXNlciB0byBhIGNoZWNrb3V0IHBhZ2Ugb24gdGhlIHB1Ymxpc2hlcnMgc2l0ZSBvclxuICAgKiAgIGRpcmVjdGx5IHN0YXJ0ZWQgdGhlIHBheW1lbnQgZmxvdykuXG4gICAqIFRoZSBmaWVsZCAnYWN0aXZlJyBvZiBQcm9wZW5zaXR5RXZlbnQsIHdoaWNoIGNhcnJpZXMgdGhpc1xuICAgKiBldmVudCwgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBzaW5jZSB0aGlzIGlzIGEgdXNlciBhY3Rpb24uXG4gICAqIFRoZSBKU09OIGJsb2NrIHdpdGggdGhpcyBldmVudCBjYW4gcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gICAqIHN1Y2ggYXMgdGhlIHNvdXJjZSwgaW5kaWNhdGluZyB3aGF0IGNhdXNlZCB0aGUgdXNlciB0byBuYXZpZ2F0ZVxuICAgKiB0byB0aGlzIHBhZ2UuXG4gICAqIEZvciBleGFtcGxlOlxuICAgKiBjb25zdCBwcm9wZW5zaXR5RXZlbnQgPSB7XG4gICAqICAgbmFtZTogJ3N1YnNjcmlwdGlvbnNfbGFuZGluZ19wYWdlJyxcbiAgICogICBhY3RpdmU6IHRydWUsXG4gICAqICAgZGF0YTogeydzb3VyY2UnOiAnbWFya2V0aW5nX3ZpYV9lbWFpbCd9XG4gICAqIH1cbiAgICovXG4gIEFDVElPTl9TVUJTQ1JJUFRJT05TX0xBTkRJTkdfUEFHRTogJ3N1YnNjcmlwdGlvbnNfbGFuZGluZ19wYWdlJyxcbiAgLyoqXG4gICAqIEFDVElPTl9PRkZFUl9TRUxFQ1RFRCBldmVudC5cbiAgICogVXNlciBoYXMgc2VsZWN0ZWQgYW4gb2ZmZXIuXG4gICAqIFRoZSBmaWVsZCAnYWN0aXZlJyBvZiBQcm9wZW5zaXR5RXZlbnQsIHdoaWNoIGNhcnJpZXMgdGhpc1xuICAgKiBldmVudCwgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBzaW5jZSB0aGlzIGlzIGEgdXNlciBhY3Rpb24uXG4gICAqIFRoZSBKU09OIGJsb2NrIGNhbiBwcm92aWRlIHRoZSBwcm9kdWN0IHNlbGVjdGVkLlxuICAgKiBGb3IgZXhhbXBsZToge1xuICAgKiAgIG5hbWU6ICdvZmZlcl9zZWxlY3RlZCcsXG4gICAqICAgYWN0aXZlOiB0cnVlLFxuICAgKiAgIGRhdGE6IHtwcm9kdWN0JzogJ2Jhc2ljLW1vbnRobHknfVxuICAgKiB9XG4gICAqIFdoZW4gb2ZmZXIgc2VsZWN0aW9uIHN0YXJ0cyB0aGUgcGF5bWVudCBmbG93IGRpcmVjdGx5LFxuICAgKiB1c2UgdGhlIG5leHQgZXZlbnQgQUNUSU9OX1BBWU1FTlRfRkxPV19TVEFSVEVEIGluc3RlYWQuXG4gICAqL1xuICBBQ1RJT05fT0ZGRVJfU0VMRUNURUQ6ICdvZmZlcl9zZWxlY3RlZCcsXG4gIC8qKlxuICAgKiBBQ1RJT05fUEFZTUVOVF9GTE9XX1NUQVJURUQgZXZlbnQuXG4gICAqIFVzZXIgaGFzIHN0YXJ0ZWQgcGF5bWVudCBmbG93LlxuICAgKiBUaGUgZmllbGQgJ2FjdGl2ZScgb2YgUHJvcGVuc2l0eUV2ZW50LCB3aGljaCBjYXJyaWVzIHRoaXNcbiAgICogZXZlbnQsIG11c3QgYmUgc2V0IHRvIHRydWUgc2luY2UgdGhpcyBpcyBhIHVzZXIgYWN0aW9uLlxuICAgKiBUaGUgSlNPTiBibG9jayBjYW4gcHJvdmlkZSB0aGUgcHJvZHVjdCBzZWxlY3RlZC5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIGNvbnN0IHByb3BlbnNpdHlFdmVudCA9IHtcbiAgICogICBuYW1lOiAncGF5bWVudF9mbG93X3N0YXJ0ZWQnLFxuICAgKiAgIGFjdGl2ZTogdHJ1ZSxcbiAgICogICBkYXRhOiB7cHJvZHVjdCc6ICdiYXNpYy1tb250aGx5J31cbiAgICogfVxuICAgKi9cbiAgQUNUSU9OX1BBWU1FTlRfRkxPV19TVEFSVEVEOiAncGF5bWVudF9mbG93X3N0YXJ0JyxcbiAgLyoqXG4gICAqIEFDVElPTl9QQVlNRU5UX0NPTVBMRVRFRC5cbiAgICogVXNlciBoYXMgbWFkZSB0aGUgcGF5bWVudCBmb3IgYSBzdWJzY3JpcHRpb24uXG4gICAqIFRoZSBmaWVsZCAnYWN0aXZlJyBvZiBQcm9wZW5zaXR5RXZlbnQsIHdoaWNoIGNhcnJpZXMgdGhpc1xuICAgKiBldmVudCwgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBzaW5jZSB0aGlzIGlzIGEgdXNlciBhY3Rpb24uXG4gICAqIFRoZSBKU09OIGJsb2NrIGNhbiBwcm92aWRlIHRoZSBwcm9kdWN0IHVzZXIgcGFpZCBmb3IuXG4gICAqIEZvciBleGFtcGxlOlxuICAgKiBjb25zdCBwcm9wZW5zaXR5RXZlbnQgPSB7XG4gICAqICAgbmFtZTogJ3BheW1lbnRfY29tcGxldGUnLFxuICAgKiAgIGFjdGl2ZTogdHJ1ZSxcbiAgICogICBkYXRhOiB7cHJvZHVjdCc6ICdiYXNpYy1tb250aGx5J31cbiAgICogfVxuICAgKi9cbiAgQUNUSU9OX1BBWU1FTlRfQ09NUExFVEVEOiAncGF5bWVudF9jb21wbGV0ZScsXG4gIC8qKlxuICAgKiBFVkVOVF9DVVNUT006IGN1c3RvbSBwdWJsaXNoZXIgZXZlbnQuXG4gICAqIFRoZSBmaWVsZCAnYWN0aXZlJyBvZiBQcm9wZW5zaXR5RXZlbnQsIHdoaWNoIGNhcnJpZXMgdGhpc1xuICAgKiBldmVudCwgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBvciBmYWxzZSBkZXBlbmRpbmcgb24gaWYgdGhlIGV2ZW50XG4gICAqIHdhcyBnZW5lcmF0ZWQgYXMgYSByZXN1bHQgb2YgYSB1c2VyIGFjdGlvbi5cbiAgICogVGhlIEpTT04gYmxvY2sgY2FuIHByb3ZpZGUgdGhlIGV2ZW50IG5hbWUgZm9yIHRoZSBjdXN0b20gZXZlbnQuXG4gICAqIEZvciBleGFtcGxlOlxuICAgKiBjb25zdCBwcm9wZW5zaXR5RXZlbnQgPSB7XG4gICAqICAgbmFtZTogJ2N1c3RvbScsXG4gICAqICAgYWN0aXZlOiB0cnVlLFxuICAgKiAgIGRhdGE6IHtcbiAgICogICAgICdldmVudF9uYW1lJzogJ3NvY2lhbF9zaGFyZScsXG4gICAqICAgICAncGxhdGZvcm1fdXNlZCc6ICd3aGF0c2FwcCdcbiAgICogICB9XG4gICAqICB9XG4gICAqL1xuICBFVkVOVF9DVVNUT006ICdjdXN0b20nLFxufTtcblxuLyoqXG4gKiBQcm9wZW5zaXR5IEV2ZW50XG4gKiBQcm9wZXJ0aWVzOlxuICogLSBuYW1lOiBSZXF1aXJlZC4gTmFtZSBzaG91bGQgYmUgdmFsaWQgc3RyaW5nIGluIHRoZSBFdmVudFxuICogICAgICAgICBlbnVtIHdpdGhpbiBzcmMvYXBpL2xvZ2dlci1hcGkuanMuXG4gKiAtIGFjdGl2ZTogUmVxdWlyZWQuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZVxuICogICAgICAgICB1c2VyIHRvb2sgc29tZSBhY3Rpb24gdG8gcGFydGljaXBhdGUgaW4gdGhlIGZsb3dcbiAqICAgICAgICAgdGhhdCBnZW5lcmF0ZWQgdGhpcyBldmVudC4gRm9yIGltcHJlc3Npb24gZXZlbnQsXG4gKiAgICAgICAgIHRoaXMgaXMgc2V0IHRvIHRydWUgaWYgaXNfYWN0aXZlIGZpZWxkIHdvdWxkIGJlXG4gKiAgICAgICAgIHNldCB0byB0cnVlLCBhcyBkZXNjcmliZWQgaW4gZG9jdW1lbnRhdGlvbiBmb3JcbiAqICAgICAgICAgZW51bSBFdmVudC4gT3RoZXJ3aXNlLCBzZXQgdGhpcyBmaWVsZCB0byBmYWxzZS5cbiAqICAgICAgICAgRm9yIGFjdGlvbiBldmVudHMsIHRoaXMgZmllbGQgbXVzdCBhbHdheXMgYmUgc2V0XG4gKiAgICAgICAgIHRvIHRydWUuIFRoZSBjYWxsZXIgbXVzdCBhbHdheXMgc2V0IHRoaXMgZmllbGQuXG4gKiAtIGRhdGE6IE9wdGlvbmFsLiBKU09OIGJsb2NrIG9mIGRlcHRoICcxJyBwcm92aWRlcyBldmVudFxuICogICAgICAgICBwYXJhbWV0ZXJzLiBUaGUgZ3VpZGVsaW5lIHRvIGNyZWF0ZSB0aGlzIEpTT04gYmxvY2tcbiAqICAgICAgICAgdGhhdCBkZXNjcmliZXMgdGhlIGV2ZW50IGlzIHByb3ZpZGVkIGFnYWluc3QgZWFjaFxuICogICAgICAgICBlbnVtIGxpc3RlZCBpbiB0aGUgRXZlbnQgZW51bSBhYm92ZS5cbiAqXG4gKiAgQHR5cGVkZWYge3tcbiAqICAgIG5hbWU6IHN0cmluZyxcbiAqICAgIGFjdGl2ZTogYm9vbGVhbixcbiAqICAgIGRhdGE6ID9Kc29uT2JqZWN0LFxuICogfX1cbiAqL1xuZXhwb3J0IGxldCBQdWJsaXNoZXJFdmVudDtcblxuLyoqXG4gKiBAaW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dnZXJBcGkge1xuICAvKipcbiAgICogU2VuZCBhIGJ1eS1mbG93IGV2ZW50IHRoYXQgb2NjdXJyZWQgb24gdGhlIHB1Ymxpc2hlcidzIHNpdGUgdG8gR29vZ2xlLiAgVGhlXG4gICAqIHVsdGltYXRlIGRlc3RpbmF0aW9uIGlzIGNvbnRyb2xsZWQgYnkgY29uZmlndXJhdGlvbiBzZXR0aW5ncy4gIFB1Ymxpc2hlclxuICAgKiBjb25maWd1cmF0aW9uIGF2YWlsYWJsZTpcbiAgICogICBlbmFibGVQcm9wZW5zaXR5IC0gU2VuZHMgZGF0YSB0byB0aGUgUHJvcGVuc2l0eSB0byBTdWJzY3JpYmUgYWRzIHNlcnZlci5cbiAgICogICBlbmFibGVTd2dBbmFseXRpY3MgLSBTZW5kcyBkYXRhIHRvIEdvb2dsZSdzIGFuYWx5dGljcyBzZXJ2ZXIgZm9yIGJ1eS1mbG93XG4gICAqICAgICBjb21wYXJpc29uIHB1cnBvc2VzLlxuICAgKiBAcGFyYW0geyFQdWJsaXNoZXJFdmVudH0gdXNlckV2ZW50XG4gICAqL1xuICBzZW5kRXZlbnQodXNlckV2ZW50KSB7fVxuXG4gIC8qKlxuICAgKiBTZW5kIHVzZXIgc3Vic2NyaXB0aW9uIHN0YXRlIHVwb24gaW5pdGlhbCBkaXNjb3ZlcnkuXG4gICAqIEEgdXNlciBtYXkgaGF2ZSBhY3RpdmUgc3Vic2NyaXB0aW9ucyB0byBzb21lIHByb2R1Y3RzXG4gICAqIGFuZCBleHBpcmVkIHN1YnNjcmlwdGlvbnMgdG8gb3RoZXJzLiBNYWtlIG9uZSBBUEkgY2FsbFxuICAgKiBwZXIgc3Vic2NyaXB0aW9uIHN0YXRlIGFuZCBwcm92aWRlIGEgY29ycmVzcG9uZGluZ1xuICAgKiBsaXN0IG9mIHByb2R1Y3RzIHdpdGggYSBqc29uIG9iamVjdCBvZiBkZXB0aCAxLlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogICAgIHsncHJvZHVjdCc6IFsncHJvZHVjdDEnLCAncHJvZHVjdDInXX1cbiAgICogRWFjaCBjYWxsIHRvIHRoaXMgQVBJIHNob3VsZCBoYXZlIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgKiBhcyBhIHZhbGlkIHN0cmluZyBmcm9tIHRoZSBlbnVtIFN1YnNjcmlwdGlvblN0YXRlLlxuICAgKiBAcGFyYW0ge1N1YnNjcmlwdGlvblN0YXRlfSBzdGF0ZVxuICAgKiBAcGFyYW0gez9Kc29uT2JqZWN0fSBqc29uUHJvZHVjdHNcbiAgICovXG4gIHNlbmRTdWJzY3JpcHRpb25TdGF0ZShzdGF0ZSwganNvblByb2R1Y3RzKSB7fVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICovXG5leHBvcnQgY2xhc3MgT2ZmZXIge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2t1SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJpY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNrdUlkLCB0aXRsZSwgZGVzY3JpcHRpb24sIHByaWNlKSB7XG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc2t1SWQgPSBza3VJZDtcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMucHJpY2UgPSBwcmljZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICogYXMgTG9nZ2VyQXBpIGZyb20gJy4vbG9nZ2VyLWFwaSc7XG5cbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFByb3BlbnNpdHlUeXBlID0ge1xuICAvLyBQcm9wZW5zaXR5IHNjb3JlIGZvciBhIHVzZXIgdG8gc3Vic2NyaWJlIHRvIGEgcHVibGljYXRpb24uXG4gIEdFTkVSQUw6ICdnZW5lcmFsJyxcbiAgLy8gUHJvcGVuc2l0eSBzY29yZSB3aGVuIGJsb2NrZWQgYWNjZXNzIHRvIGNvbnRlbnQgYnkgcGF5d2FsbC5cbiAgUEFZV0FMTDogJ3BheXdhbGwnLFxufTtcblxuLyoqXG4gKiBUaGUgUHJvcGVuc2l0eSBTY29yZVxuICogLSB2YWx1ZTogUmVxdWlyZWQuIEEgbnVtYmVyIHRoYXQgaW5kaWNhdGVzIHRoZSBwcm9wZW5zaXR5IHRvIHN1YnNjcmliZS5cbiAqIC0gYnVja2V0ZWQ6IFJlcXVpcmVkLiBJbmRpY2F0ZXMgaWYgdGhlIHNjb3JlIGlzIGEgcmF3IHNjb3JlIFsxLTEwMF0gb3IgYnVja2V0ZWRbMS0yMF0uXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgdmFsdWU6IG51bWJlcixcbiAqICAgYnVja2V0ZWQ6IGJvb2xlYW4sXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IFNjb3JlO1xuXG4vKipcbiAqIFByb3BlbnNpdHkgU2NvcmUgRGV0YWlsXG4gKiBQcm9wZXJ0aWVzOlxuICogLSBwcm9kdWN0OiBSZXF1aXJlZC4gSW5kaWNhdGVzIHRoZSBwdWJsaWNhdGlvbl9pZDpwcm9kdWN0X2lkIGZvciB3aGljaCB0aGUgc2NvcmUgaXMgcHJvdmlkZWQuXG4gKiAtIHNjb3JlOiBPcHRpb25hbC4gV2hlbiBzY29yZSBpcyBhdmFpbGFibGUsIHRoaXMgZmllbGQgY29udGFpbnMgdGhlIHByb3BlbnNpdHkgc2NvcmUgZm9yIHRoaXMgcHJvZHVjdC5cbiAqIC0gZXJyb3I6IE9wdGlvbmFsLiBXaGVuIG5vIHNjb3JlIGlzIGF2YWlhbGJsZSwgYSBzdHJpbmcgcHJvdmlkZXMgdGhlIGVycm9yIG1lc3NhZ2UuXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgcHJvZHVjdDogc3RyaW5nLFxuICogICBzY29yZTogP1Njb3JlLFxuICogICBlcnJvcjogP3N0cmluZyxcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgU2NvcmVEZXRhaWw7XG5cbi8qKlxuICogVGhlIEJvZHkgZmllbGQgb2YgdGhlIFByb3BlbnNpdHkgU2NvcmUuXG4gKiBQcm9wZXJ0aWVzOlxuICogLSBzY29yZXM6IE9wdGlvbmFsLCBhbiBhcnJheSBvZiBzY29yZXMuIFdoZW4gaGVhZGVyIGluZGljYXRlcyBzbywgYXRsZWFzdCBvbmUgc2NvcmUgaXMgYXZhaWxhYmxlLlxuICogLSBlcnJvcjogT3B0aW9uYWwsIHN0cmluZyBkZXNjcmliaW5nIHdoeSwgaWYgbm8gc2NvcmVzIHdlcmUgcHJvdmlkZWQgYnkgdGhlIHNlcnZlci5cbiAqXG4gKiAgQHR5cGVkZWYge3tcbiAqICAgIHNjb3JlczogP0FycmF5PFNjb3JlRGV0YWlsPixcbiAqICAgIGVycm9yOiA/c3RyaW5nLFxuICogfX1cbiAqL1xuZXhwb3J0IGxldCBCb2R5O1xuXG4vKipcbiAqIFRoZSBIZWFkZXIgb2YgdGhlIFByb3BlbnNpdHkgU2NvcmUuXG4gKiBQcm9wZXJ0aWVzOlxuICogLSBvazogUmVxdWlyZWQuIHRydWUsIGlmIHByb3BlbnNpdHkgc2NvcmUgaXMgYXZhaWxhYmxlLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogIEB0eXBlZGVmIHt7XG4gKiAgICBvazogYm9vbGVhbixcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgSGVhZGVyO1xuXG4vKipcbiAqIFRoZSBQcm9wZW5zaXR5IFNjb3JlLlxuICogUHJvcGVydGllczpcbiAqIC0gaGVhZGVyOiBSZXF1aXJlZC4gUHJvdmlkZXMgdGhlIGhlYWRlciBvZiB0aGUgU2NvcmUgcmVzcG9uc2UuXG4gKiAtIGJvZHk6IFJlcXVpcmVkLiBQcm92aWRlcyB0aGUgYm9keSBvZiB0aGUgU2NvcmUgcmVzcG9uc2UuXG4gKlxuICogIEB0eXBlZGVmIHt7XG4gKiAgICBoZWFkZXI6IEhlYWRlcixcbiAqICAgIGJvZHk6IEJvZHksXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IFByb3BlbnNpdHlTY29yZTtcblxuLyoqXG4gKiBQcm9wZW5zaXR5IEV2ZW50XG4gKiAgIFBsZWFzZSBub3RlIHRoYXQgdGhlIHByaW1hcnkgZGVmaXRpb24gb2YgdGhpcyBvYmplY3QgaGFzIGNoYW5nZWQgdG9cbiAqICAgUHVibGlzaGVyRXZlbnQgYW5kIGlzIGRlZmluZWQgaW4gbG9nZ2VyLWFwaS5qcy4gIFRoZXNlIHR3byBvYmplY3RcbiAqICAgZGVmaW5pdGlvbnMgYXJlIGlkZW50aWNhbC5cbiAqIFByb3BlcnRpZXM6XG4gKiAtIG5hbWU6IFJlcXVpcmVkLiBOYW1lIHNob3VsZCBiZSB2YWxpZCBzdHJpbmcgaW4gdGhlIEV2ZW50XG4gKiAgICAgICAgIGVudW0gd2l0aGluIHNyYy9hcGkvbG9nZ2VyLWFwaS5qcy5cbiAqIC0gYWN0aXZlOiBSZXF1aXJlZC4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlXG4gKiAgICAgICAgIHVzZXIgdG9vayBzb21lIGFjdGlvbiB0byBwYXJ0aWNpcGF0ZSBpbiB0aGUgZmxvd1xuICogICAgICAgICB0aGF0IGdlbmVyYXRlZCB0aGlzIGV2ZW50LiBGb3IgaW1wcmVzc2lvbiBldmVudCxcbiAqICAgICAgICAgdGhpcyBpcyBzZXQgdG8gdHJ1ZSBpZiBpc19hY3RpdmUgZmllbGQgd291bGQgYmVcbiAqICAgICAgICAgc2V0IHRvIHRydWUsIGFzIGRlc2NyaWJlZCBpbiBkb2N1bWVudGF0aW9uIGZvclxuICogICAgICAgICBlbnVtIEV2ZW50LiBPdGhlcndpc2UsIHNldCB0aGlzIGZpZWxkIHRvIGZhbHNlLlxuICogICAgICAgICBGb3IgYWN0aW9uIGV2ZW50cywgdGhpcyBmaWVsZCBtdXN0IGFsd2F5cyBiZSBzZXRcbiAqICAgICAgICAgdG8gdHJ1ZS4gVGhlIGNhbGxlciBtdXN0IGFsd2F5cyBzZXQgdGhpcyBmaWVsZC5cbiAqIC0gZGF0YTogT3B0aW9uYWwuIEpTT04gYmxvY2sgb2YgZGVwdGggJzEnIHByb3ZpZGVzIGV2ZW50XG4gKiAgICAgICAgIHBhcmFtZXRlcnMuIFRoZSBndWlkZWxpbmUgdG8gY3JlYXRlIHRoaXMgSlNPTiBibG9ja1xuICogICAgICAgICB0aGF0IGRlc2NyaWJlcyB0aGUgZXZlbnQgaXMgcHJvdmlkZWQgYWdhaW5zdCBlYWNoXG4gKiAgICAgICAgIGVudW0gbGlzdGVkIGluIHRoZSBFdmVudCBlbnVtIGFib3ZlLlxuICpcbiAqICBAdHlwZWRlZiB7e1xuICogICAgbmFtZTogc3RyaW5nLFxuICogICAgYWN0aXZlOiBib29sZWFuLFxuICogICAgZGF0YTogP0pzb25PYmplY3QsXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IFByb3BlbnNpdHlFdmVudDtcblxuLypcbiAqIFBsZWFzZSBub3RlIHRoYXQgdGhlIGRlZmluaXRpb25zIG9mIEV2ZW50IGFuZCBTdWJzY3JpcHRpb25TdGF0ZSBoYXZlIG1vdmVkXG4gKiB0byBsb2dnZXItYXBpLmpzLiAgVGhpcyBpcyBub3cgdGhlIHByZWZlcnJlZCBpbnRlcmZhY2UgdG8gdXNlIGZvciBsb2dnaW5nXG4gKiBwdWJsaXNoZXIgZXZlbnRzIGFuZCBzZXR0aW5nIHRoZSB1c2VyJ3MgY3VycmVudCBzdWJzY3JpcHRpb24gc3RhdGUuXG4gKiBQcm9wZW5zaXR5IHdpbGwgY29udGludWUgdG8gZnVuY3Rpb24gYXMgYW4gZXZlbnQgbG9nZ2VyIHVudGlsIHdlIGFyZSBjZXJ0YWluXG4gKiBubyBwdWJsaXNoZXJzIGFyZSBhY3RpdmVseSB1c2luZyBpdCB0byBsb2cgZXZlbnRzLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnQgPSBMb2dnZXJBcGkuRXZlbnQ7XG5leHBvcnQgY29uc3QgU3Vic2NyaXB0aW9uU3RhdGUgPSBMb2dnZXJBcGkuU3Vic2NyaXB0aW9uU3RhdGU7XG5cbi8qKlxuICogQGV4dGVuZHMge0xvZ2dlckFwaS5Mb2dnZXJBcGl9XG4gKiBAaW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZW5zaXR5QXBpIGV4dGVuZHMgTG9nZ2VyQXBpLkxvZ2dlckFwaSB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIHByb3BlbnNpdHkgb2YgYSB1c2VyIHRvIHN1YnNjcmliZSBiYXNlZCBvbiB0aGUgdHlwZS5cbiAgICogVGhlIGFyZ3VtZW50IHNob3VsZCBiZSBhIHZhbGlkIHN0cmluZyBmcm9tIFByb3BlbnNpdHlUeXBlLlxuICAgKiBJZiBubyB0eXBlIGlzIHByb3ZpZGVkLCBHRU5FUkFMIHNjb3JlIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge1Byb3BlbnNpdHlUeXBlPX0gdHlwZVxuICAgKiBAcmV0dXJuIHs/UHJvbWlzZTwhUHJvcGVuc2l0eVNjb3JlPn1cbiAgICovXG4gIGdldFByb3BlbnNpdHkodHlwZSkge31cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtFbnRpdGxlbWVudHN9IGZyb20gJy4vZW50aXRsZW1lbnRzJztcbmltcG9ydCB7VXNlckRhdGF9IGZyb20gJy4vdXNlci1kYXRhJztcblxuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmliZVJlc3BvbnNlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJhd1xuICAgKiBAcGFyYW0geyFQdXJjaGFzZURhdGF9IHB1cmNoYXNlRGF0YVxuICAgKiBAcGFyYW0gez9Vc2VyRGF0YX0gdXNlckRhdGFcbiAgICogQHBhcmFtIHs/RW50aXRsZW1lbnRzfSBlbnRpdGxlbWVudHNcbiAgICogQHBhcmFtIHshc3RyaW5nfSBwcm9kdWN0VHlwZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IVByb21pc2V9IGNvbXBsZXRlSGFuZGxlclxuICAgKiBAcGFyYW0gez9zdHJpbmc9fSBvbGRTa3VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJhdywgcHVyY2hhc2VEYXRhLCB1c2VyRGF0YSwgZW50aXRsZW1lbnRzLCBwcm9kdWN0VHlwZSxcbiAgICAgIGNvbXBsZXRlSGFuZGxlciwgb2xkU2t1ID0gbnVsbCkge1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnJhdyA9IHJhdztcbiAgICAvKiogQGNvbnN0IHshUHVyY2hhc2VEYXRhfSAqL1xuICAgIHRoaXMucHVyY2hhc2VEYXRhID0gcHVyY2hhc2VEYXRhO1xuICAgIC8qKiBAY29uc3Qgez9Vc2VyRGF0YX0gKi9cbiAgICB0aGlzLnVzZXJEYXRhID0gdXNlckRhdGE7XG4gICAgLyoqIEBjb25zdCB7P0VudGl0bGVtZW50c30gKi9cbiAgICB0aGlzLmVudGl0bGVtZW50cyA9IGVudGl0bGVtZW50cztcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5wcm9kdWN0VHlwZSA9IHByb2R1Y3RUeXBlO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge2Z1bmN0aW9uKCk6IVByb21pc2V9ICovXG4gICAgdGhpcy5jb21wbGV0ZUhhbmRsZXJfID0gY29tcGxldGVIYW5kbGVyO1xuICAgIC8qKiBAY29uc3Qgez9zdHJpbmd9ICovXG4gICAgdGhpcy5vbGRTa3UgPSBvbGRTa3U7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IVN1YnNjcmliZVJlc3BvbnNlfVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVSZXNwb25zZShcbiAgICAgICAgdGhpcy5yYXcsXG4gICAgICAgIHRoaXMucHVyY2hhc2VEYXRhLFxuICAgICAgICB0aGlzLnVzZXJEYXRhLFxuICAgICAgICB0aGlzLmVudGl0bGVtZW50cyxcbiAgICAgICAgdGhpcy5wcm9kdWN0VHlwZSxcbiAgICAgICAgdGhpcy5jb21wbGV0ZUhhbmRsZXJfLFxuICAgICAgICB0aGlzLm9sZFNrdVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdwdXJjaGFzZURhdGEnOiB0aGlzLnB1cmNoYXNlRGF0YS5qc29uKCksXG4gICAgICAndXNlckRhdGEnOiB0aGlzLnVzZXJEYXRhID8gdGhpcy51c2VyRGF0YS5qc29uKCkgOiBudWxsLFxuICAgICAgJ2VudGl0bGVtZW50cyc6IHRoaXMuZW50aXRsZW1lbnRzID8gdGhpcy5lbnRpdGxlbWVudHMuanNvbigpIDogbnVsbCxcbiAgICAgICdvbGRTa3UnIDogdGhpcy5vbGRTa3UsXG4gICAgICAncHJvZHVjdFR5cGUnOiB0aGlzLnByb2R1Y3RUeXBlLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dzIHRoZSByZWNlaXZpbmcgc2l0ZSB0byBjb21wbGV0ZS9hY2tub3dsZWRnZSB0aGF0IGl0IHJlZ2lzdGVyZWRcbiAgICogdGhlIHN1YnNjcmlwdGlvbiBwdXJjaGFzZS4gVGhlIHR5cGljYWwgYWN0aW9uIHdvdWxkIGJlIHRvIGNyZWF0ZSBhblxuICAgKiBhY2NvdW50IChvciBtYXRjaCBhbiBleGlzdGluZyBvbmUpIGFuZCBhc3NvY2lhdGVkIHRoZSBwdXJjaGFzZSB3aXRoXG4gICAqIHRoYXQgYWNjb3VudC5cbiAgICpcbiAgICogU3dHIHdpbGwgZGlzcGxheSBwcm9ncmVzcyBpbmRpY2F0b3IgdW50aWwgdGhpcyBtZXRob2QgaXMgY2FsbGVkIGFuZFxuICAgKiB1cG9uIHJlY2VpdmluZyB0aGlzIGNhbGwgd2lsbCBzaG93IHRoZSBjb25maXJtYXRpb24gdG8gdGhlIHVzZXIuXG4gICAqIFRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHdpbGwgeWllbGQgb25jZSB0aGUgdXNlciBjbG9zZXNcbiAgICogdGhlIGNvbmZpcm1hdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wbGV0ZUhhbmRsZXJfKCk7XG4gIH1cbn1cblxuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIFB1cmNoYXNlRGF0YSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByYXdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpZ25hdHVyZVxuICAgKi9cbiAgY29uc3RydWN0b3IocmF3LCBzaWduYXR1cmUpIHtcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5yYXcgPSByYXc7XG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuZGF0YSA9IHJhdztcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IVB1cmNoYXNlRGF0YX1cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgUHVyY2hhc2VEYXRhKHRoaXMucmF3LCB0aGlzLnNpZ25hdHVyZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdkYXRhJzogdGhpcy5yYXcsXG4gICAgICAnc2lnbmF0dXJlJzogdGhpcy5zaWduYXR1cmUsXG4gICAgfTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0VudGl0bGVtZW50c30gZnJvbSAnLi9lbnRpdGxlbWVudHMnO1xuaW1wb3J0IHtPZmZlcn0gZnJvbSAnLi9vZmZlcic7XG5pbXBvcnQge1xuICBEZWZlcnJlZEFjY291bnRDcmVhdGlvblJlcXVlc3QsXG4gIERlZmVycmVkQWNjb3VudENyZWF0aW9uUmVzcG9uc2UsXG59IGZyb20gJy4vZGVmZXJyZWQtYWNjb3VudC1jcmVhdGlvbic7XG5pbXBvcnQge1N1YnNjcmliZVJlc3BvbnNlfSBmcm9tICcuL3N1YnNjcmliZS1yZXNwb25zZSc7XG5pbXBvcnQge1Byb3BlbnNpdHlBcGl9IGZyb20gJy4vcHJvcGVuc2l0eS1hcGknO1xuaW1wb3J0IHtMb2dnZXJBcGl9IGZyb20gJy4vbG9nZ2VyLWFwaSc7XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9ucyB7XG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IGluaXRpYWxpemVzIHRoZSBzdWJzY3JpcHRpb25zIHJ1bnRpbWUgd2l0aCBwdWJsaWNhdGlvbiBvclxuICAgKiBwcm9kdWN0IElELiBJZiBub3QgY2FsbGVkLCB0aGUgcnVudGltZSB3aWxsIGxvb2sgZm9yIHRoZSBpbml0aWFsaXphdGlvblxuICAgKiBwYXJhbWV0ZXJzIGluIHRoZSBwYWdlJ3MgbWFya3VwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdE9yUHVibGljYXRpb25JZFxuICAgKi9cbiAgaW5pdChwcm9kdWN0T3JQdWJsaWNhdGlvbklkKSB7fVxuXG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IGNvbmZpZ3VyZXMgdGhlIHJ1bnRpbWUgd2l0aCBub24tZGVmYXVsdCBwcm9wZXJ0aWVzLiBTZWVcbiAgICogYENvbmZpZ2AgZGVmaW5pdGlvbiBmb3IgZGV0YWlscy5cbiAgICogQHBhcmFtIHshQ29uZmlnfSBjb25maWdcbiAgICovXG4gIGNvbmZpZ3VyZShjb25maWcpIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZW50aXRsZW1lbnQgZmxvdy5cbiAgICovXG4gIHN0YXJ0KCkge31cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBlbnRpdGxlbWVudHMgdGhhdCBjYW4gYmUgZmV0Y2hlZCBhZ2Fpbi5cbiAgICovXG4gIHJlc2V0KCkge31cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBlbnRpdGxlbWVudHMgYW5kIGNsZWFycyBhbGwgb2YgdGhlIGNhY2hlcy5cbiAgICovXG4gIGNsZWFyKCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHs/c3RyaW5nPX0gZW5jcnlwdGVkRG9jdW1lbnRLZXlcbiAgICogQHJldHVybiB7IVByb21pc2U8IUVudGl0bGVtZW50cz59XG4gICAqL1xuICBnZXRFbnRpdGxlbWVudHMoZW5jcnlwdGVkRG9jdW1lbnRLZXkpIHt9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc3Vic2NyaWJlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFFbnRpdGxlbWVudHM+KX0gY2FsbGJhY2tcbiAgICovXG4gIHNldE9uRW50aXRsZW1lbnRzUmVzcG9uc2UoY2FsbGJhY2spIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzZXQgb2Ygb2ZmZXJzLlxuICAgKiBAcGFyYW0ge3tcbiAgICogICBwcm9kdWN0SWQ6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAgICogfT19IG9wdGlvbnNcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFycmF5PCFPZmZlcj4+fVxuICAgKi9cbiAgZ2V0T2ZmZXJzKG9wdGlvbnMpIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgT2ZmZXJzIGZsb3cuXG4gICAqIEBwYXJhbSB7IU9mZmVyc1JlcXVlc3Q9fSBvcHRpb25zXG4gICAqL1xuICBzaG93T2ZmZXJzKG9wdGlvbnMpIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgT2ZmZXJzIGZsb3cgZm9yIGEgc3Vic2NyaXB0aW9uIHVwZGF0ZS5cbiAgICogQHBhcmFtIHshT2ZmZXJzUmVxdWVzdD19IG9wdGlvbnNcbiAgICovXG4gIHNob3dVcGRhdGVPZmZlcnMob3B0aW9ucykge31cblxuICAvKipcbiAgICogU2hvdyBzdWJzY3JpcHRpb24gb3B0aW9uLlxuICAgKiBAcGFyYW0geyFPZmZlcnNSZXF1ZXN0PX0gb3B0aW9uc1xuICAgKi9cbiAgc2hvd1N1YnNjcmliZU9wdGlvbihvcHRpb25zKSB7fVxuXG4gIC8qKlxuICAgKiBTaG93IGFiYnJldmlhdGVkIG9mZmVycy5cbiAgICogQHBhcmFtIHshT2ZmZXJzUmVxdWVzdD19IG9wdGlvbnNcbiAgICovXG4gIHNob3dBYmJydk9mZmVyKG9wdGlvbnMpIHt9XG5cbiAgLyoqXG4gICAqIFNob3cgY29udHJpYnV0aW9uIG9wdGlvbnMgZm9yIHRoZSB1c2VycyB0byBzZWxlY3QgZnJvbS5cbiAgICogVGhlIG9wdGlvbnMgYXJlIGdyb3VwZWQgdG9nZXRoZXIgYnkgcGVyaW9kcyAoV2Vla2x5LCBNb250aGx5LCBldGMuKS5cbiAgICogVXNlciBjYW4gc2VsZWN0IHRoZSBhbW91bnQgdG8gY29udHJpYnV0ZSB0byBmcm9tIGF2YWlsYWJsZSBvcHRpb25zXG4gICAqIHRvIHRoZSBwdWJsaXNoZXIuIFRoZXNlIG9wdGlvbnMgYXJlIGJhc2VkIG9uIHRoZSBTS1VzIGRlZmluZWQgaW4gdGhlIFBsYXlcbiAgICogY29uc29sZSBmb3IgYSBnaXZlbiBwdWJsaWNhdGlvbi5cbiAgICogRWFjaCBTS1UgaGFzIEFtb3VudCwgUGVyaW9kLCBTS1VJZCBhbmQgb3RoZXIgYXR0cmlidXRlcy5cbiAgICogQHBhcmFtIHshT2ZmZXJzUmVxdWVzdD19IG9wdGlvbnNcbiAgICovXG4gIHNob3dDb250cmlidXRpb25PcHRpb25zKG9wdGlvbnMpIHt9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBuYXRpdmUgc3Vic2NyaWJlIHJlcXVlc3QuIFNldHRpbmcgdGhpcyBjYWxsYmFja1xuICAgKiB0cmlnZ2VycyB0aGUgXCJuYXRpdmVcIiBvcHRpb24gaW4gdGhlIG9mZmVycyBmbG93LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrXG4gICAqL1xuICBzZXRPbk5hdGl2ZVN1YnNjcmliZVJlcXVlc3QoY2FsbGJhY2spIHt9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc3Vic2NyaWJlIGNvbXBsZXRlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFTdWJzY3JpYmVSZXNwb25zZT4pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25TdWJzY3JpYmVSZXNwb25zZShjYWxsYmFjaykge31cblxuICAvKipcbiAgICogU3RhcnRzIHN1YnNjcmlwdGlvbiBwdXJjaGFzZSBmbG93LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2t1XG4gICAqL1xuICBzdWJzY3JpYmUoc2t1KSB7fVxuXG4gIC8qKlxuICAgKiBTdGFydHMgc3Vic2NyaXB0aW9uIHB1cmNoYXNlIGZsb3cuXG4gICAqIEBwYXJhbSB7U3Vic2NyaXB0aW9uUmVxdWVzdH0gc3Vic2NyaXB0aW9uUmVxdWVzdFxuICAgKi9cbiAgdXBkYXRlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblJlcXVlc3QpIHt9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY29udHJpYnV0aW9uIGNvbXBsZXRlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFTdWJzY3JpYmVSZXNwb25zZT4pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25Db250cmlidXRpb25SZXNwb25zZShjYWxsYmFjaykge31cblxuICAvKipcbiAgICogU2V0IHRoZSBwYXltZW50IGNvbXBsZXRlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFTdWJzY3JpYmVSZXNwb25zZT4pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25QYXltZW50UmVzcG9uc2UoY2FsbGJhY2spIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBjb250cmlidXRpb25zIHB1cmNoYXNlIGZsb3cuXG4gICAqIEBwYXJhbSB7c3RyaW5nfFN1YnNjcmlwdGlvblJlcXVlc3R9IHNrdU9yU3Vic2NyaXB0aW9uUmVxdWVzdFxuICAgKi9cbiAgY29udHJpYnV0ZShza3VPclN1YnNjcmlwdGlvblJlcXVlc3QpIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZGVmZXJyZWQgYWNjb3VudCBjcmVhdGlvbiBmbG93LlxuICAgKiBTZWUgYERlZmVycmVkQWNjb3VudENyZWF0aW9uUmVxdWVzdGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHBhcmFtIHs/RGVmZXJyZWRBY2NvdW50Q3JlYXRpb25SZXF1ZXN0PX0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhRGVmZXJyZWRBY2NvdW50Q3JlYXRpb25SZXNwb25zZT59XG4gICAqL1xuICBjb21wbGV0ZURlZmVycmVkQWNjb3VudENyZWF0aW9uKG9wdGlvbnMpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUxvZ2luUmVxdWVzdCl9IGNhbGxiYWNrXG4gICAqL1xuICBzZXRPbkxvZ2luUmVxdWVzdChjYWxsYmFjaykge31cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBsb2dpbiBwcm9tcHQgZmxvdy5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzaG93TG9naW5Qcm9tcHQoKSB7fVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGxvZ2luIG5vdGlmaWNhdGlvbiBmbG93LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHNob3dMb2dpbk5vdGlmaWNhdGlvbigpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2tcbiAgICovXG4gIHNldE9uTGlua0NvbXBsZXRlKGNhbGxiYWNrKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFQcm9taXNlfSBhY2NvdW50UHJvbWlzZSBQdWJsaXNoZXIncyBwcm9taXNlIHRvIGxvb2t1cCBhY2NvdW50LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdhaXRGb3JTdWJzY3JpcHRpb25Mb29rdXAoYWNjb3VudFByb21pc2UpIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgQWNjb3VudCBsaW5raW5nIGZsb3cuXG4gICAqIFRPRE8oZHBhcmlraCk6IGRlY2lkZSBpZiBpdCdzIG9ubHkgZXhwb3NlZCBmb3IgdGVzdGluZyBvciBQUk9EIHB1cnBvc2VzLlxuICAgKiBAcGFyYW0ge3thbXBSZWFkZXJJZDogKHN0cmluZ3x1bmRlZmluZWQpfT19IHBhcmFtc1xuICAgKi9cbiAgbGlua0FjY291bnQocGFyYW1zKSB7fVxuXG4gIC8qKlxuICAgKiBOb3RpZmllcyB0aGUgY2xpZW50IHRoYXQgYSBmbG93IGhhcyBiZWVuIHN0YXJ0ZWQuIFRoZSBuYW1lIG9mIHRoZSBmbG93XG4gICAqIGlzIHBhc3NlZCBhcyB0aGUgY2FsbGJhY2sgYXJndW1lbnQuIFRoZSBmbG93IG5hbWUgY29ycmVzcG9uZHMgdG8gdGhlXG4gICAqIG1ldGhvZCBuYW1lIGluIHRoaXMgaW50ZXJmYWNlLCBzdWNoIGFzIFwic2hvd09mZmVyc1wiLCBvciBcInN1YnNjcmliZVwiLlxuICAgKiBTZWUgYFN1YnNjcmlwdGlvbkZsb3dzYCBmb3IgdGhlIGZ1bGwgbGlzdC5cbiAgICpcbiAgICogQWxzbyBzZWUgYHNldE9uRmxvd0NhbmNlbGVkYCBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oe2Zsb3c6IHN0cmluZywgZGF0YTogIU9iamVjdH0pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25GbG93U3RhcnRlZChjYWxsYmFjaykge31cblxuICAvKipcbiAgICogTm90aWZpZXMgdGhlIGNsaWVudCB0aGF0IGEgZmxvdyBoYXMgYmVlbiBjYW5jZWxlZC4gVGhlIG5hbWUgb2YgdGhlIGZsb3dcbiAgICogaXMgcGFzc2VkIGFzIHRoZSBjYWxsYmFjayBhcmd1bWVudC4gVGhlIGZsb3cgbmFtZSBjb3JyZXNwb25kcyB0byB0aGVcbiAgICogbWV0aG9kIG5hbWUgaW4gdGhpcyBpbnRlcmZhY2UsIHN1Y2ggYXMgXCJzaG93T2ZmZXJzXCIsIG9yIFwic3Vic2NyaWJlXCIuXG4gICAqIFNlZSBgU3Vic2NyaXB0aW9uRmxvd3NgIGZvciB0aGUgZnVsbCBsaXN0LlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCBzb21lIG9mIHRoZSBmbG93cywgc3VjaCBhcyBcInN1YnNjcmliZVwiLCBjb3VsZCBhZGRpdGlvbmFsbHlcbiAgICogaGF2ZSB0aGVpciBvd24gXCJjYW5jZWxcIiBldmVudHMuXG4gICAqXG4gICAqIEFsc28gc2VlIGBzZXRPbkZsb3dTdGFydGVkYCBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oe2Zsb3c6IHN0cmluZywgZGF0YTogIU9iamVjdH0pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25GbG93Q2FuY2VsZWQoY2FsbGJhY2spIHt9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgc2F2ZSBzdWJzY3JpcHRpb25zIGZsb3cuXG4gICAqIEBwYXJhbSB7IVNhdmVTdWJzY3JpcHRpb25SZXF1ZXN0Q2FsbGJhY2t9IHJlcXVlc3RDYWxsYmFja1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZX0gYSBwcm9taXNlIGluZGljYXRpbmcgZmxvdyBpcyBzdGFydGVkXG4gICAqL1xuICBzYXZlU3Vic2NyaXB0aW9uKHJlcXVlc3RDYWxsYmFjaykge31cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBlbGVtZW50IHdpdGggdGhlIFN3RyBidXR0b24gc3R5bGUgYW5kIHRoZSBwcm92aWRlZCBjYWxsYmFjay5cbiAgICogVGhlIGRlZmF1bHQgdGhlbWUgaXMgXCJsaWdodFwiLlxuICAgKlxuICAgKiBAcGFyYW0geyFCdXR0b25PcHRpb25zfGZ1bmN0aW9uKCl9IG9wdGlvbnNPckNhbGxiYWNrXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGNhbGxiYWNrXG4gICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgKi9cbiAgY3JlYXRlQnV0dG9uKG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge31cblxuICAvKipcbiAgICogQXR0YWNoZXMgdGhlIFN3RyBidXR0b24gc3R5bGUgYW5kIHRoZSBwcm92aWRlZCBjYWxsYmFjayB0byBhbiBleGlzdGluZ1xuICAgKiBET00gZWxlbWVudC4gVGhlIGRlZmF1bHQgdGhlbWUgaXMgXCJsaWdodFwiLlxuICAgKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBidXR0b25cbiAgICogQHBhcmFtIHshQnV0dG9uT3B0aW9uc3xmdW5jdGlvbigpfSBvcHRpb25zT3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBjYWxsYmFja1xuICAgKi9cbiAgYXR0YWNoQnV0dG9uKGJ1dHRvbiwgb3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7fVxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBzbWFydEJ1dHRvbiBlbGVtZW50IGFuZCB0aGUgcHJvdmlkZWQgY2FsbGJhY2suXG4gICAqIFRoZSBkZWZhdWx0IHRoZW1lIGlzIFwibGlnaHRcIi5cbiAgICpcbiAgICogQHBhcmFtIHshRWxlbWVudH0gYnV0dG9uXG4gICAqIEBwYXJhbSB7IVNtYXJ0QnV0dG9uT3B0aW9uc3xmdW5jdGlvbigpfSBvcHRpb25zT3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBjYWxsYmFja1xuICAgKi9cbiAgYXR0YWNoU21hcnRCdXR0b24oYnV0dG9uLCBvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHt9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgcHJvcGVuc2l0eSBtb2R1bGUgdGhhdCBwcm92aWRlcyBBUElzIHRvXG4gICAqIGdldCBwcm9wZW5zaXR5IHNjb3JlcyBiYXNlZCBvbiB1c2VyIHN0YXRlIGFuZCBldmVudHNcbiAgICogQHJldHVybiB7IVByb21pc2U8UHJvcGVuc2l0eUFwaT59XG4gICAqL1xuICBnZXRQcm9wZW5zaXR5TW9kdWxlKCkge31cblxuICAvKiogQHJldHVybiB7IVByb21pc2U8TG9nZ2VyQXBpPn0gKi9cbiAgZ2V0TG9nZ2VyKCkge31cbn1cblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgU3Vic2NyaXB0aW9uRmxvd3MgPSB7XG4gIFNIT1dfT0ZGRVJTOiAnc2hvd09mZmVycycsXG4gIFNIT1dfU1VCU0NSSUJFX09QVElPTjogJ3Nob3dTdWJzY3JpYmVPcHRpb24nLFxuICBTSE9XX0FCQlJWX09GRkVSOiAnc2hvd0FiYnJ2T2ZmZXInLFxuICBTSE9XX0NPTlRSSUJVVElPTl9PUFRJT05TOiAnc2hvd0NvbnRyaWJ1dGlvbk9wdGlvbnMnLFxuICBTVUJTQ1JJQkU6ICdzdWJzY3JpYmUnLFxuICBDT05UUklCVVRFOiAnY29udHJpYnV0ZScsXG4gIENPTVBMRVRFX0RFRkVSUkVEX0FDQ09VTlRfQ1JFQVRJT046ICdjb21wbGV0ZURlZmVycmVkQWNjb3VudENyZWF0aW9uJyxcbiAgTElOS19BQ0NPVU5UOiAnbGlua0FjY291bnQnLFxuICBTSE9XX0xPR0lOX1BST01QVDogJ3Nob3dMb2dpblByb21wdCcsXG4gIFNIT1dfTE9HSU5fTk9USUZJQ0FUSU9OOiAnc2hvd0xvZ2luTm90aWZpY2F0aW9uJyxcbn07XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzOlxuICogLSB3aW5kb3dPcGVuTW9kZSAtIGVpdGhlciBcImF1dG9cIiBvciBcInJlZGlyZWN0XCIuIFRoZSBcInJlZGlyZWN0XCIgdmFsdWUgd2lsbFxuICogICBmb3JjZSByZWRpcmVjdCBmbG93IGZvciBhbnkgd2luZG93Lm9wZW4gb3BlcmF0aW9uLCBpbmNsdWRpbmcgcGF5bWVudHMuXG4gKiAgIFRoZSBcImF1dG9cIiB2YWx1ZSBlaXRoZXIgdXNlcyBhIHJlZGlyZWN0IG9yIGEgcG9wdXAgZmxvdyBkZXBlbmRpbmcgb25cbiAqICAgd2hhdCdzIHBvc3NpYmxlIG9uIGEgc3BlY2lmaWMgZW52aXJvbm1lbnQuIERlZmF1bHRzIHRvIFwiYXV0b1wiLlxuICogLSBlbmFibGVTd2dBbmFseXRpY3MgLSBpZiBzZXQgdG8gdHJ1ZSB0aGVuIGV2ZW50cyBsb2dnZWQgYnkgdGhlIHB1Ymxpc2hlcidzXG4gKiAgIGNsaWVudCB3aWxsIGJlIHNlbnQgdG8gR29vZ2xlJ3MgU3dHIGFuYWx5dGljcyBzZXJ2aWNlLiAgVGhpcyBpbmZvcm1hdGlvbiBpc1xuICogICB1c2VkIHRvIGNvbXBhcmUgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgR29vZ2xlJ3MgYnV5LWZsb3cgZXZlbnRzIHRvIHRob3NlXG4gKiAgIGdlbmVyYXRlZCBieSB0aGUgcHVibGlzaGVyJ3MgY2xpZW50IGNvZGUuICBUaGlzIGluY2x1ZGVzIGV2ZW50cyBzZW50IHRvXG4gKiAgIGJvdGggUHJvcGVuc2l0eUFwaSBhbmQgTG9nZ2VyQXBpLlxuICogLSBlbmFibGVQcm9wZW5zaXR5IC0gSWYgdHJ1ZSBldmVudHMgZnJvbSB0aGUgbG9nZ2VyIGFwaSBhcmUgc2VudCB0byB0aGVcbiAqICAgcHJvcGVuc2l0eSBzZXJ2ZXIuICBOb3RlIGV2ZW50cyBmcm9tIHRoZSBsZWdhY3kgcHJvcGVuc2l0eSBlbmRwb2ludCBhcmVcbiAqICAgYWx3YXlzIHNlbnQuXG4gKiBAdHlwZWRlZiB7e1xuICogICBleHBlcmltZW50czogKCFBcnJheTxzdHJpbmc+fHVuZGVmaW5lZCksXG4gKiAgIHdpbmRvd09wZW5Nb2RlOiAoIVdpbmRvd09wZW5Nb2RlfHVuZGVmaW5lZCksXG4gKiAgIGFuYWx5dGljc01vZGU6ICghQW5hbHl0aWNzTW9kZXx1bmRlZmluZWQpLFxuICogICBlbmFibGVTd2dBbmFseXRpY3M6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiAgIGVuYWJsZVByb3BlbnNpdHk6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IENvbmZpZztcblxuLyoqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQW5hbHl0aWNzTW9kZSA9IHtcbiAgREVGQVVMVDogMCxcbiAgSU1QUkVTU0lPTlM6IDEsXG59O1xuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBXaW5kb3dPcGVuTW9kZSA9IHtcbiAgQVVUTzogJ2F1dG8nLFxuICBSRURJUkVDVDogJ3JlZGlyZWN0Jyxcbn07XG5cbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFJlcGxhY2VTa3VQcm9yYXRpb25Nb2RlID0ge1xuICAvLyBUaGUgcmVwbGFjZW1lbnQgdGFrZXMgZWZmZWN0IGltbWVkaWF0ZWx5LCBhbmQgdGhlIHJlbWFpbmluZyB0aW1lIHdpbGxcbiAgLy8gYmUgcHJvcmF0ZWQgYW5kIGNyZWRpdGVkIHRvIHRoZSB1c2VyLiBUaGlzIGlzIHRoZSBjdXJyZW50IGRlZmF1bHRcbiAgLy8gYmVoYXZpb3IuXG4gIElNTUVESUFURV9XSVRIX1RJTUVfUFJPUkFUSU9OOiAnSU1NRURJQVRFX1dJVEhfVElNRV9QUk9SQVRJT04nLFxufTtcblxuLyoqXG4gKiBUaGUgT2ZmZXJzL0NvbnRyaWJ1dGlvbnMgVUkgaXMgcmVuZGVyZWQgZGlmZmVyZW50bHkgYmFzZWQgb24gdGhlXG4gKiBQcm9kdWN0VHlwZS4gVGhlIFByb2R1Y3RUeXBlIHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIFBheW1lbnRzIGZsb3csIGFuZFxuICogdGhlbiBwYXNzZWQgYmFjayB0byB0aGUgUGF5bWVudHMgY29uZmlybWF0aW9uIHBhZ2UgdG8gcmVuZGVyIG1lc3NhZ2VzL3RleHRcbiAqIGJhc2VkIG9uIHRoZSBQcm9kdWN0VHlwZS5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBQcm9kdWN0VHlwZSA9IHtcbiAgU1VCU0NSSVBUSU9OOiAnU1VCU0NSSVBUSU9OJyxcbiAgVUlfQ09OVFJJQlVUSU9OOiAnVUlfQ09OVFJJQlVUSU9OJyxcbn07XG5cbi8qKlxuICogQHJldHVybiB7IUNvbmZpZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb25maWcoKSB7XG4gIHJldHVybiB7XG4gICAgd2luZG93T3Blbk1vZGU6IFdpbmRvd09wZW5Nb2RlLkFVVE8sXG4gICAgYW5hbHl0aWNzTW9kZTogQW5hbHl0aWNzTW9kZS5ERUZBVUxULFxuICAgIGVuYWJsZVN3Z0FuYWx5dGljczogZmFsc2UsXG4gICAgZW5hYmxlUHJvcGVuc2l0eTogZmFsc2UsXG4gIH07XG59XG5cbi8qKlxuICogUHJvcGVydGllczpcbiAqIC0gc2t1cyAtIGEgbGlzdCBvZiBTS1VzIHRvIHJldHVybiBmcm9tIHRoZSBkZWZpbmVkIG9yIGRlZmF1bHQgbGlzdC4gVGhlXG4gKiAgIG9yZGVyIGlzIHByZXNlcnZlZC5cbiAqIC0gbGlzdCAtIGEgcHJlZGVmaW5lZCBsaXN0IG9mIFNLVXMuIFVzZSBvZiB0aGlzIHByb3BlcnR5IGlzIHVuY29tbW9uLlxuICogICBQb3NzaWJsZSB2YWx1ZXMgYXJlIFwiZGVmYXVsdFwiIGFuZCBcImFtcFwiLiBEZWZhdWx0IGlzIFwiZGVmYXVsdFwiLlxuICogLSBpc0Nsb3NhYmxlIC0gYSBib29sZWFuIHZhbHVlIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB2aWV3IGlzIGNsb3NhYmxlLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHNrdXM6ICghQXJyYXk8c3RyaW5nPnx1bmRlZmluZWQpLFxuICogICBsaXN0OiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIGlzQ2xvc2FibGU6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IE9mZmVyc1JlcXVlc3Q7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgbGlua1JlcXVlc3RlZDogYm9vbGVhbixcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgTG9naW5SZXF1ZXN0O1xuXG4vKipcbiAqIFByb3BlcnRpZXM6XG4gKiAtIG9uZSBhbmQgb25seSBvbmUgb2YgXCJ0b2tlblwiIG9yIFwiYXV0aENvZGVcIlxuICogQXV0aENvZGUgcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hY3Rpb25zL2lkZW50aXR5L29hdXRoMi1jb2RlLWZsb3dcbiAqIFRva2VuIHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYWN0aW9ucy9pZGVudGl0eS9vYXV0aDItaW1wbGljaXQtZmxvd1xuICogQHR5cGVkZWYge3tcbiAqICAgdG9rZW46IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgYXV0aENvZGU6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgU2F2ZVN1YnNjcmlwdGlvblJlcXVlc3Q7XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHJldHJpZXZpbmcgc3Vic2NyaXB0aW9uIHJlcXVlc3RcbiAqXG4gKiBAY2FsbGJhY2sgU2F2ZVN1YnNjcmlwdGlvblJlcXVlc3RDYWxsYmFja1xuICogQHJldHVybiB7IVByb21pc2U8U2F2ZVN1YnNjcmlwdGlvblJlcXVlc3Q+IHwgIVNhdmVTdWJzY3JpcHRpb25SZXF1ZXN0fSByZXF1ZXN0XG4gKi9cbmV4cG9ydCBsZXQgU2F2ZVN1YnNjcmlwdGlvblJlcXVlc3RDYWxsYmFjaztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzOlxuICogLSBsYW5nOiBTZXRzIHRoZSBidXR0b24gU1ZHIGFuZCB0aXRsZS4gRGVmYXVsdCBpcyBcImVuXCIuXG4gKiAtIHRoZW1lOiBcImxpZ2h0XCIgb3IgXCJkYXJrXCIuIERlZmF1bHQgaXMgXCJsaWdodFwiLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHRoZW1lOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIGxhbmc6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgQnV0dG9uT3B0aW9ucztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzOlxuICogLSBsYW5nOiBTZXRzIHRoZSBidXR0b24gU1ZHIGFuZCB0aXRsZS4gRGVmYXVsdCBpcyBcImVuXCIuXG4gKiAtIHRoZW1lOiBcImxpZ2h0XCIgb3IgXCJkYXJrXCIuIERlZmF1bHQgaXMgXCJsaWdodFwiLlxuICogLSBtZXNzYWdlVGV4dENvbG9yOiBPdmVycmlkZXMgdGhlbWUgY29sb3IgZm9yIG1lc3NhZ2UgdGV4dC4gKGV4OiBcIiMwOWZcIilcbiAqXG4gKiBAdHlwZWRlZiB7e1xuICogICB0aGVtZTogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICBsYW5nOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIG1lc3NhZ2VUZXh0Q29sb3I6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgU21hcnRCdXR0b25PcHRpb25zO1xuXG4vKipcbiAqIFByb3BlcnRpZXM6XG4gKiAtIHNrdTogUmVxdWlyZWQuIFNrdSB0byBhZGQgdG8gdGhlIHVzZXIncyBzdWJzY3JpcHRpb25zLlxuICogLSBvbGRTa3U6IE9wdGlvbmFsLiBUaGlzIGlzIGlmIHlvdSB3YW50IHRvIHJlcGxhY2Ugb25lIHNrdSB3aXRoIGFub3RoZXIuIEZvclxuICogIGV4YW1wbGUsIGlmIGEgdXNlciB3YW50cyB0byB1cGdyYWRlIG9yIGRvd25ncmFkZSB0aGVpciBjdXJyZW50IHN1YnNjcmlwdGlvbi5cbiAqIC0gcHJvcmF0aW9uTW9kZTogT3B0aW9uYWwuIFdoZW4gcmVwbGFjaW5nIGEgc3Vic2NyaXB0aW9uIHlvdSBjYW4gZGVjaWRlIG9uIGFcbiAqICBzcGVjaWZpYyBwcm9yYXRpb24gbW9kZSB0byBjaGFyZ2UgdGhlIHVzZXIuXG4gKiAgVGhlIGRlZmF1bHQgaXMgSU1NRURJQVRFX1dJVEhfVElNRV9QUk9SQVRJT04uXG4gKiAtIG9uZVRpbWU6IE9wdGlvbmFsLiBXaGVuIGEgdXNlciBjaG9vc2VzIGEgY29udHJpYnV0aW9uLCB0aGV5IGhhdmUgdGhlIG9wdGlvblxuICogIHRvIG1ha2UgaXQgbm9uLXJlY3VycmluZy5cbiAqXG4gKiAgQHR5cGVkZWYge3tcbiAqICAgIHNrdUlkOiBzdHJpbmcsXG4gKiAgICBvbGRTa3U6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgIHJlcGxhY2VTa3VQcm9yYXRpb25Nb2RlOiAoUmVwbGFjZVNrdVByb3JhdGlvbk1vZGV8dW5kZWZpbmVkKSxcbiAqICAgIG9uZVRpbWU6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IFN1YnNjcmlwdGlvblJlcXVlc3Q7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2VyRGF0YSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFRva2VuXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gZGF0YVxuICAgKi9cbiAgY29uc3RydWN0b3IoaWRUb2tlbiwgZGF0YSkge1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLmlkVG9rZW4gPSBpZFRva2VuO1xuICAgIC8qKiBAY29uc3QgeyFPYmplY3R9ICovXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLmlkID0gZGF0YVsnc3ViJ107XG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuZW1haWwgPSBkYXRhWydlbWFpbCddO1xuICAgIC8qKiBAY29uc3Qge2Jvb2xlYW59ICovXG4gICAgdGhpcy5lbWFpbFZlcmlmaWVkID0gZGF0YVsnZW1haWxfdmVyaWZpZWQnXTtcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5uYW1lID0gZGF0YVsnbmFtZSddO1xuICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLmdpdmVuTmFtZSA9IGRhdGFbJ2dpdmVuX25hbWUnXTtcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5mYW1pbHlOYW1lID0gZGF0YVsnZmFtaWx5X25hbWUnXTtcbiAgICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5waWN0dXJlVXJsID0gZGF0YVsncGljdHVyZSddO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFVc2VyRGF0YX1cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgVXNlckRhdGEodGhpcy5pZFRva2VuLCB0aGlzLmRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqL1xuICBqc29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnaWQnOiB0aGlzLmlkLFxuICAgICAgJ2VtYWlsJzogdGhpcy5lbWFpbCxcbiAgICAgICdlbWFpbFZlcmlmaWVkJzogdGhpcy5lbWFpbFZlcmlmaWVkLFxuICAgICAgJ25hbWUnOiB0aGlzLm5hbWUsXG4gICAgICAnZ2l2ZW5OYW1lJzogdGhpcy5naXZlbk5hbWUsXG4gICAgICAnZmFtaWx5TmFtZSc6IHRoaXMuZmFtaWx5TmFtZSxcbiAgICAgICdwaWN0dXJlVXJsJzogdGhpcy5waWN0dXJlVXJsLFxuICAgIH07XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIEFjdGl2aXR5SWZyYW1lUG9ydCBhcyBXZWJBY3Rpdml0eUlmcmFtZVBvcnQsXG4gIEFjdGl2aXR5UG9ydHMgYXMgV2ViQWN0aXZpdHlQb3J0cyxcbn0gZnJvbSAnd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMnO1xuaW1wb3J0IHtkZXNlcmlhbGl6ZSwgZ2V0TGFiZWx9IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgQWN0aXZpdHlQb3J0RGVmIHtcbiAgLyoqXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCF3ZWItYWN0aXZpdGllcy9hY3Rpdml0eS1wb3J0cy5BY3Rpdml0eVJlc3VsdD59XG4gICAqL1xuICBhY2NlcHRSZXN1bHQoKSB7fVxufVxuLyoqXG4gKiBAaW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBjbGFzcyBBY3Rpdml0eVBvcnQgZXh0ZW5kcyBBY3Rpdml0eVBvcnREZWYge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgbW9kZSBvZiB0aGUgYWN0aXZpdHk6IGlmcmFtZSwgcG9wdXAgb3IgcmVkaXJlY3QuXG4gICAqIEByZXR1cm4geyF3ZWItYWN0aXZpdGllcy9hY3Rpdml0eS1wb3J0cy5BY3Rpdml0eU1vZGV9XG4gICAqL1xuICBnZXRNb2RlKCkge31cblxuICAvKipcbiAgICogQWNjZXB0cyB0aGUgcmVzdWx0IHdoZW4gcmVhZHkuIFRoZSBjbGllbnQgc2hvdWxkIHZlcmlmeSB0aGUgYWN0aXZpdHknc1xuICAgKiBtb2RlLCBvcmlnaW4sIHZlcmlmaWNhdGlvbiBhbmQgc2VjdXJlIGNoYW5uZWwgZmxhZ3MgYmVmb3JlIGRlY2lkaW5nXG4gICAqIHdoZXRoZXIgb3Igbm90IHRvIHRydXN0IHRoZSByZXN1bHQuXG4gICAqXG4gICAqIFJldHVybnMgdGhlIHByb21pc2UgdGhhdCB5aWVsZHMgd2hlbiB0aGUgYWN0aXZpdHkgaGFzIGJlZW4gY29tcGxldGVkIGFuZFxuICAgKiBlaXRoZXIgYSByZXN1bHQsIGEgY2FuY2VsYXRpb24gb3IgYSBmYWlsdXJlIGhhcyBiZWVuIHJldHVybmVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMuQWN0aXZpdHlSZXN1bHQ+fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFjY2VwdFJlc3VsdCgpIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgeWllbGRzIHdoZW4gdGhlIGlmcmFtZSBpcyByZWFkeSB0byBiZSBpbnRlcmFjdGVkXG4gICAqIHdpdGguXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgd2hlblJlYWR5KCkge31cblxuICAvKipcbiAgICogV2FpdHMgdW50aWwgdGhlIGFjdGl2aXR5IHBvcnQgaXMgY29ubmVjdGVkIHRvIHRoZSBob3N0LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIGNvbm5lY3QoKSB7fVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0IHRoZSBhY3Rpdml0eSBiaW5kaW5nIGFuZCBjbGVhbnVwIGxpc3RlbmVycy5cbiAgICovXG4gIGRpc2Nvbm5lY3QoKSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIGhhbmRsZSByZXNpemUgcmVxdWVzdHMuIE9uY2Ugc3VjY2Vzc2Z1bGx5IHJlc2l6ZWQsXG4gICAqIGVuc3VyZSB0byBjYWxsIGByZXNpemVkKClgIG1ldGhvZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpfSB1bnVzZWRDYWxsYmFja1xuICAgKi9cbiAgb25SZXNpemVSZXF1ZXN0KHVudXNlZENhbGxiYWNrKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyEuLi9wcm90by9hcGlfbWVzc2FnZXMuTWVzc2FnZX0gdW51c2VkUmVxdWVzdFxuICAgKi9cbiAgZXhlY3V0ZSh1bnVzZWRSZXF1ZXN0KSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFmdW5jdGlvbihuZXc6IFQpfSB1bnVzZWRNZXNzYWdlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oT2JqZWN0KX0gdW51c2VkQ2FsbGJhY2tcbiAgICogQHRlbXBsYXRlIFRcbiAgICovXG4gIG9uKHVudXNlZE1lc3NhZ2UsIHVudXNlZENhbGxiYWNrKSB7fVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIGJhY2sgdG8gdGhlIGFjdGl2aXR5IGltcGxlbWVudGF0aW9uIHRoYXQgdGhlIGNsaWVudCBoYXMgdXBkYXRlZFxuICAgKiB0aGUgYWN0aXZpdHkncyBzaXplLlxuICAgKi9cbiAgcmVzaXplZCgpIHt9XG59XG4vKipcbiAqIEBpbXBsZW1lbnRzIHtBY3Rpdml0eVBvcnREZWZ9XG4gKi9cbmNsYXNzIEFjdGl2aXR5UG9ydERlcHJlY2F0ZWQge1xuICAvKipcbiAgICogQHBhcmFtIHshd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMuQWN0aXZpdHlQb3J0fSBwb3J0XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwb3J0KSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5UG9ydH0gKi9cbiAgICB0aGlzLnBvcnRfID0gcG9ydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMuQWN0aXZpdHlSZXN1bHQ+fVxuICAgKi9cbiAgYWNjZXB0UmVzdWx0KCkge1xuICAgIHJldHVybiB0aGlzLnBvcnRfLmFjY2VwdFJlc3VsdCgpO1xuICB9XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge0FjdGl2aXR5UG9ydERlZn1cbiAqL1xuZXhwb3J0IGNsYXNzIEFjdGl2aXR5SWZyYW1lUG9ydCB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MSUZyYW1lRWxlbWVudH0gaWZyYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHs/T2JqZWN0PX0gYXJnc1xuICAgKi9cbiAgY29uc3RydWN0b3IoaWZyYW1lLCB1cmwsIGFyZ3MpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMuQWN0aXZpdHlJZnJhbWVQb3J0fSAqL1xuICAgIHRoaXMuaWZyYW1lUG9ydF8gPSBuZXcgV2ViQWN0aXZpdHlJZnJhbWVQb3J0KGlmcmFtZSwgdXJsLCBhcmdzKTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgZnVuY3Rpb24oIU9iamVjdCk+fSAqL1xuICAgIHRoaXMuY2FsbGJhY2tNYXBfID0ge307XG4gICAgLyoqIEBwcml2YXRlIHs/ZnVuY3Rpb24oIS4uL3Byb3RvL2FwaV9tZXNzYWdlcy5NZXNzYWdlKX0gKi9cbiAgICB0aGlzLmNhbGxiYWNrT3JpZ2luYWxfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHlpZWxkcyB3aGVuIHRoZSBpZnJhbWUgaXMgcmVhZHkgdG8gYmUgaW50ZXJhY3RlZFxuICAgKiB3aXRoLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdoZW5SZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5pZnJhbWVQb3J0Xy53aGVuUmVhZHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0cyB1bnRpbCB0aGUgYWN0aXZpdHkgcG9ydCBpcyBjb25uZWN0ZWQgdG8gdGhlIGhvc3QuXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgY29ubmVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5pZnJhbWVQb3J0Xy5jb25uZWN0KCkudGhlbigoKSA9PiB7XG4gICAgICAvLyBBdHRhY2ggYSBjYWxsYmFjayB0byByZWNlaXZlIG1lc3NhZ2VzIGFmdGVyIGNvbm5lY3Rpb24gY29tcGxldGVcbiAgICAgIHRoaXMuaWZyYW1lUG9ydF8ub25NZXNzYWdlKGRhdGEgPT4ge1xuICAgICAgICBpZiAodGhpcy5jYWxsYmFja09yaWdpbmFsXykge1xuICAgICAgICAgIHRoaXMuY2FsbGJhY2tPcmlnaW5hbF8oZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBkYXRhICYmIGRhdGFbJ1JFU1BPTlNFJ107XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2IgPSB0aGlzLmNhbGxiYWNrTWFwX1tyZXNwb25zZVswXV07XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgIGNiKGRlc2VyaWFsaXplKHJlc3BvbnNlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgdGhlIGFjdGl2aXR5IGJpbmRpbmcgYW5kIGNsZWFudXAgbGlzdGVuZXJzLlxuICAgKi9cbiAgZGlzY29ubmVjdCgpIHtcbiAgICB0aGlzLmlmcmFtZVBvcnRfLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtb2RlIG9mIHRoZSBhY3Rpdml0eTogaWZyYW1lLCBwb3B1cCBvciByZWRpcmVjdC5cbiAgICogQHJldHVybiB7IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5TW9kZX1cbiAgICovXG4gIGdldE1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWZyYW1lUG9ydF8uZ2V0TW9kZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgdGhlIHJlc3VsdCB3aGVuIHJlYWR5LiBUaGUgY2xpZW50IHNob3VsZCB2ZXJpZnkgdGhlIGFjdGl2aXR5J3NcbiAgICogbW9kZSwgb3JpZ2luLCB2ZXJpZmljYXRpb24gYW5kIHNlY3VyZSBjaGFubmVsIGZsYWdzIGJlZm9yZSBkZWNpZGluZ1xuICAgKiB3aGV0aGVyIG9yIG5vdCB0byB0cnVzdCB0aGUgcmVzdWx0LlxuICAgKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9taXNlIHRoYXQgeWllbGRzIHdoZW4gdGhlIGFjdGl2aXR5IGhhcyBiZWVuIGNvbXBsZXRlZCBhbmRcbiAgICogZWl0aGVyIGEgcmVzdWx0LCBhIGNhbmNlbGF0aW9uIG9yIGEgZmFpbHVyZSBoYXMgYmVlbiByZXR1cm5lZC5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5UmVzdWx0Pn1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhY2NlcHRSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWZyYW1lUG9ydF8uYWNjZXB0UmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBoYW5kbGUgcmVzaXplIHJlcXVlc3RzLiBPbmNlIHN1Y2Nlc3NmdWxseSByZXNpemVkLFxuICAgKiBlbnN1cmUgdG8gY2FsbCBgcmVzaXplZCgpYCBtZXRob2QuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24obnVtYmVyKX0gY2FsbGJhY2tcbiAgICovXG4gIG9uUmVzaXplUmVxdWVzdChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmlmcmFtZVBvcnRfLm9uUmVzaXplUmVxdWVzdChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshLi4vcHJvdG8vYXBpX21lc3NhZ2VzLk1lc3NhZ2V9IHJlcXVlc3RcbiAgICovXG4gIGV4ZWN1dGUocmVxdWVzdCkge1xuICAgIHRoaXMuaWZyYW1lUG9ydF8ubWVzc2FnZSh7J1JFUVVFU1QnOiByZXF1ZXN0LnRvQXJyYXkoKX0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG5ldzogVCl9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtmdW5jdGlvbighLi4vcHJvdG8vYXBpX21lc3NhZ2VzLk1lc3NhZ2UpfSBjYWxsYmFja1xuICAgKiBAdGVtcGxhdGUgVFxuICAgKi9cbiAgb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBsYWJlbCA9IGdldExhYmVsKG1lc3NhZ2UpO1xuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhIHR5cGUnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY2FsbGJhY2tNYXBfW2xhYmVsXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHR5cGUgb3IgZHVwbGljYXRlIGNhbGxiYWNrIGZvciAnLCBsYWJlbCk7XG4gICAgfVxuICAgIHRoaXMuY2FsbGJhY2tNYXBfW2xhYmVsXSA9IGNhbGxiYWNrO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25hbHMgYmFjayB0byB0aGUgYWN0aXZpdHkgaW1wbGVtZW50YXRpb24gdGhhdCB0aGUgY2xpZW50IGhhcyB1cGRhdGVkXG4gICAqIHRoZSBhY3Rpdml0eSdzIHNpemUuXG4gICAqL1xuICByZXNpemVkKCkge1xuICAgIHRoaXMuaWZyYW1lUG9ydF8ucmVzaXplZCgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY3Rpdml0eVBvcnRzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL3J1bnRpbWUvZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL3J1bnRpbWUvZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5UG9ydHN9ICovXG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXyA9IG5ldyBXZWJBY3Rpdml0eVBvcnRzKGRlcHMud2luKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgY2xpZW50IHZlcnNpb24sIHB1YmxpY2F0aW9uLCBwcm9kdWN0IGFuZCBsb2dnaW5nIGNvbnRleHQgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7P09iamVjdD19IGFyZ3NcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIGFkZERlZmF1bHRBcmd1bWVudHMoYXJncykge1xuICAgIGNvbnN0IGRlcHMgPSB0aGlzLmRlcHNfO1xuICAgIGNvbnN0IHBhZ2VDb25maWcgPSBkZXBzLnBhZ2VDb25maWcoKTtcbiAgICBjb25zdCBjb250ZXh0ID0gZGVwcy5hbmFseXRpY3MoKS5nZXRDb250ZXh0KCk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgICdhbmFseXRpY3NDb250ZXh0JzogY29udGV4dC50b0FycmF5KCksXG4gICAgICAgICdwdWJsaWNhdGlvbklkJzogcGFnZUNvbmZpZy5nZXRQdWJsaWNhdGlvbklkKCksXG4gICAgICAgICdwcm9kdWN0SWQnOiBwYWdlQ29uZmlnLmdldFByb2R1Y3RJZCgpLFxuICAgICAgICAnX2NsaWVudCc6ICdTd0cgJGludGVybmFsUnVudGltZVZlcnNpb24kJyxcbiAgICAgIH0sXG4gICAgICBhcmdzIHx8IHt9XG4gICAgKTtcbiAgfVxuXG4gIC8qXG4gICAqIFN0YXJ0IGFuIGFjdGl2aXR5IHdpdGhpbiB0aGUgc3BlY2lmaWVkIGlmcmFtZS5cbiAgICogQHBhcmFtIHshSFRNTElGcmFtZUVsZW1lbnR9IGlmcmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7P09iamVjdD19IGFyZ3NcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFjdGl2aXR5SWZyYW1lUG9ydD59XG4gICAqL1xuICBvcGVuQWN0aXZpdHlJZnJhbWVQb3J0XyhpZnJhbWUsIHVybCwgYXJncykge1xuICAgIGNvbnN0IGFjdGl2aXR5UG9ydCA9IG5ldyBBY3Rpdml0eUlmcmFtZVBvcnQoaWZyYW1lLCB1cmwsIGFyZ3MpO1xuICAgIHJldHVybiBhY3Rpdml0eVBvcnQuY29ubmVjdCgpLnRoZW4oKCkgPT4gYWN0aXZpdHlQb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhbiBhY3Rpdml0eSB3aXRoaW4gdGhlIHNwZWNpZmllZCBpZnJhbWUuXG4gICAqIEBwYXJhbSB7IUhUTUxJRnJhbWVFbGVtZW50fSBpZnJhbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0gez9PYmplY3Q9fSBhcmdzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFkZERlZmF1bHRBcmd1bWVudHNcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFjdGl2aXR5SWZyYW1lUG9ydD59XG4gICAqL1xuICBvcGVuSWZyYW1lKGlmcmFtZSwgdXJsLCBhcmdzLCBhZGREZWZhdWx0QXJndW1lbnRzID0gZmFsc2UpIHtcbiAgICBpZiAoYWRkRGVmYXVsdEFyZ3VtZW50cykge1xuICAgICAgYXJncyA9IHRoaXMuYWRkRGVmYXVsdEFyZ3VtZW50cyhhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3BlbkFjdGl2aXR5SWZyYW1lUG9ydF8oaWZyYW1lLCB1cmwsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIGFjdGl2aXR5IGluIGEgc2VwYXJhdGUgd2luZG93LiBUaGUgcmVzdWx0IHdpbGwgYmUgZGVsaXZlcmVkXG4gICAqIHRvIHRoZSBgb25SZXN1bHRgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBUaGUgYWN0aXZpdHkgY2FuIGJlIG9wZW5lZCBpbiB0d28gbW9kZXM6IFwicG9wdXBcIiBhbmQgXCJyZWRpcmVjdFwiLiBUaGlzXG4gICAqIGRlcGVuZHMgb24gdGhlIGB0YXJnZXRgIHZhbHVlLCBidXQgYWxzbyBvbiB0aGUgYnJvd3Nlci9lbnZpcm9ubWVudC5cbiAgICpcbiAgICogVGhlIGFsbG93ZWQgYHRhcmdldGAgdmFsdWVzIGFyZSBgX2JsYW5rYCwgYF90b3BgIGFuZCBuYW1lIHRhcmdldHMuIFRoZVxuICAgKiBgX3NlbGZgLCBgX3BhcmVudGAgYW5kIHNpbWlsYXIgdGFyZ2V0cyBhcmUgbm90IGFsbG93ZWQuXG4gICAqXG4gICAqIFRoZSBgX3RvcGAgdGFyZ2V0IGluZGljYXRlcyB0aGF0IHRoZSBhY3Rpdml0eSBzaG91bGQgYmUgb3BlbmVkIGFzIGFcbiAgICogXCJyZWRpcmVjdFwiLCB3aGlsZSBvdGhlciB0YXJnZXRzIGluZGljYXRlIHRoYXQgdGhlIGFjdGl2aXR5IHNob3VsZCBiZVxuICAgKiBvcGVuZWQgYXMgYSBwb3B1cC4gVGhlIGFjdGl2aXR5IGNsaWVudCB3aWxsIHRyeSB0byBob25vciB0aGUgcmVxdWVzdGVkXG4gICAqIHRhcmdldC4gSG93ZXZlciwgaXQncyBub3QgYWx3YXlzIHBvc3NpYmxlLiBTb21lIGVudmlyb25tZW50cyBkbyBub3RcbiAgICogYWxsb3cgcG9wdXBzIGFuZCB0aGV5IGVpdGhlciBmb3JjZSByZWRpcmVjdCBvciBmYWlsIHRoZSB3aW5kb3cgb3BlblxuICAgKiByZXF1ZXN0LiBJbiB0aGlzIGNhc2UsIHRoZSBhY3Rpdml0eSB3aWxsIHRyeSB0byBmYWxsYmFjayB0byB0aGUgXCJyZWRpcmVjdFwiXG4gICAqIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gICAqIEBwYXJhbSB7P09iamVjdD19IGFyZ3NcbiAgICogQHBhcmFtIHs/d2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMuQWN0aXZpdHlPcGVuT3B0aW9ucz19IG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFuPX0gYWRkRGVmYXVsdEFyZ3VtZW50c1xuICAgKiBAcmV0dXJuIHt7dGFyZ2V0V2luOiA/V2luZG93fX1cbiAgICovXG4gIG9wZW4ocmVxdWVzdElkLCB1cmwsIHRhcmdldCwgYXJncywgb3B0aW9ucywgYWRkRGVmYXVsdEFyZ3VtZW50cyA9IGZhbHNlKSB7XG4gICAgaWYgKGFkZERlZmF1bHRBcmd1bWVudHMpIHtcbiAgICAgIGFyZ3MgPSB0aGlzLmFkZERlZmF1bHRBcmd1bWVudHMoYXJncyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFjdGl2aXR5UG9ydHNfLm9wZW4ocmVxdWVzdElkLCB1cmwsIHRhcmdldCwgYXJncywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoZSBjYWxsYmFjayBmb3IgdGhlIHJlc3VsdCBvZiB0aGUgYWN0aXZpdHkgb3BlbmVkIHdpdGggdGhlXG4gICAqIHNwZWNpZmllZCBgcmVxdWVzdElkYCAoc2VlIHRoZSBgb3BlbigpYCBtZXRob2QpLiBUaGUgY2FsbGJhY2sgaXMgYVxuICAgKiBmdW5jdGlvbiB0aGF0IHRha2VzIGEgc2luZ2xlIGBBY3Rpdml0eVBvcnRgIGFyZ3VtZW50LiBUaGUgY2xpZW50XG4gICAqIGNhbiB1c2UgdGhpcyBvYmplY3QgdG8gdmVyaWZ5IHRoZSBwb3J0IHVzaW5nIGl0J3Mgb3JpZ2luLCB2ZXJpZmllZCBhbmRcbiAgICogc2VjdXJlIGNoYW5uZWwgZmxhZ3MuIFRoZW4gdGhlIGNsaWVudCBjYW4gY2FsbFxuICAgKiBgQWN0aXZpdHlQb3J0LmFjY2VwdFJlc3VsdCgpYCBtZXRob2QgdG8gYWNjZXB0IHRoZSByZXN1bHQuXG4gICAqXG4gICAqIFRoZSBhY3Rpdml0eSByZXN1bHQgaXMgaGFuZGxlZCB2aWEgYSBzZXBhcmF0ZSBjYWxsYmFjayBiZWNhdXNlIG9mIGFcbiAgICogcG9zc2libGUgcmVkaXJlY3QuIFNvIHVzZSBvZiBkaXJlY3QgY2FsbGJhY2tzIGFuZC9vciBwcm9taXNlcyBpcyBub3RcbiAgICogcG9zc2libGUgaW4gdGhhdCBjYXNlLlxuICAgKlxuICAgKiBBIHR5cGljYWwgaW1wbGVtZW50YXRpb24gd291bGQgbG9vayBsaWtlOlxuICAgKiBgYGBcbiAgICogcG9ydHMub25SZXN1bHQoJ3JlcXVlc3QxJywgZnVuY3Rpb24ocG9ydCkge1xuICAgKiAgIHBvcnQuYWNjZXB0UmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIE9ubHkgdmVyaWZpZWQgb3JpZ2lucyBhcmUgYWxsb3dlZC5cbiAgICogICAgIGlmIChyZXN1bHQub3JpZ2luID09IGV4cGVjdGVkT3JpZ2luICYmXG4gICAqICAgICAgICAgcmVzdWx0Lm9yaWdpblZlcmlmaWVkICYmXG4gICAqICAgICAgICAgcmVzdWx0LnNlY3VyZUNoYW5uZWwpIHtcbiAgICogICAgICAgaGFuZGxlUmVzdWx0Rm9yUmVxdWVzdDEocmVzdWx0KTtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICogfSlcbiAgICpcbiAgICogcG9ydHMub3BlbigncmVxdWVzdDEnLCByZXF1ZXN0MVVybCwgJ19ibGFuaycpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RJZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFBY3Rpdml0eVBvcnREZWYpfSBjYWxsYmFja1xuICAgKi9cbiAgb25SZXN1bHQocmVxdWVzdElkLCBjYWxsYmFjaykge1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18ub25SZXN1bHQocmVxdWVzdElkLCBwb3J0ID0+IHtcbiAgICAgIGNhbGxiYWNrKG5ldyBBY3Rpdml0eVBvcnREZXByZWNhdGVkKHBvcnQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFcnJvcil9IGhhbmRsZXJcbiAgICovXG4gIG9uUmVkaXJlY3RFcnJvcihoYW5kbGVyKSB7XG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXy5vblJlZGlyZWN0RXJyb3IoaGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5UG9ydHN9XG4gICAqL1xuICBnZXRPcmlnaW5hbFdlYkFjdGl2aXR5UG9ydHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlQb3J0c187XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtEaWFsb2d9IGZyb20gJy4vZGlhbG9nJztcbmltcG9ydCB7R3JheXBhbmV9IGZyb20gJy4vZ3JheXBhbmUnO1xuaW1wb3J0IHtpc0NhbmNlbEVycm9yfSBmcm9tICcuLi91dGlscy9lcnJvcnMnO1xuXG5jb25zdCBQT1BVUF9aX0lOREVYID0gMjE0NzQ4MzY0NztcblxuLyoqXG4gKiBUaGUgY2xhc3MgZm9yIHRoZSB0b3AgbGV2ZWwgZGlhbG9nLlxuICogQGZpbmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBEaWFsb2dNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL21vZGVsL2RvYy5Eb2N9IGRvY1xuICAgKi9cbiAgY29uc3RydWN0b3IoZG9jKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL21vZGVsL2RvYy5Eb2N9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/RGlhbG9nfSAqL1xuICAgIHRoaXMuZGlhbG9nXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlPCFEaWFsb2c+fSAqL1xuICAgIHRoaXMub3BlblByb21pc2VfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFHcmF5cGFuZX0gKi9cbiAgICB0aGlzLnBvcHVwR3JheXBhbmVfID0gbmV3IEdyYXlwYW5lKGRvYywgUE9QVVBfWl9JTkRFWCk7XG5cbiAgICAvKiogQHByaXZhdGUgez9XaW5kb3d9ICovXG4gICAgdGhpcy5wb3B1cFdpbl8gPSBudWxsO1xuXG4gICAgdGhpcy5wb3B1cEdyYXlwYW5lXy5nZXRFbGVtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wb3B1cFdpbl8pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnBvcHVwV2luXy5mb2N1cygpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gSWdub3JlIGVycm9yLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFuPX0gaGlkZGVuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCFEaWFsb2c+fVxuICAgKi9cbiAgb3BlbkRpYWxvZyhoaWRkZW4gPSBmYWxzZSkge1xuICAgIGlmICghdGhpcy5vcGVuUHJvbWlzZV8pIHtcbiAgICAgIHRoaXMuZGlhbG9nXyA9IG5ldyBEaWFsb2codGhpcy5kb2NfKTtcbiAgICAgIHRoaXMub3BlblByb21pc2VfID0gdGhpcy5kaWFsb2dfLm9wZW4oaGlkZGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3BlblByb21pc2VfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vdmlldy5WaWV3fSB2aWV3XG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGhpZGRlblxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIG9wZW5WaWV3KHZpZXcsIGhpZGRlbiA9IGZhbHNlKSB7XG4gICAgdmlldy53aGVuQ29tcGxldGUoKS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgaWYgKGlzQ2FuY2VsRXJyb3IocmVhc29uKSkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlVmlldyh2aWV3KTtcbiAgICAgIH1cbiAgICAgIHRocm93IHJlYXNvbjtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5vcGVuRGlhbG9nKGhpZGRlbikudGhlbihkaWFsb2cgPT4ge1xuICAgICAgcmV0dXJuIGRpYWxvZy5vcGVuVmlldyh2aWV3KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez8uL3ZpZXcuVmlld30gdmlld1xuICAgKi9cbiAgY29tcGxldGVWaWV3KHZpZXcpIHtcbiAgICAvLyBHaXZlIGEgc21hbGwgYW1vdW50IG9mIHRpbWUgZm9yIGFub3RoZXIgdmlldyB0byB0YWtlIG92ZXIgdGhlIGRpYWxvZy5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmRpYWxvZ18gJiYgdGhpcy5kaWFsb2dfLmdldEN1cnJlbnRWaWV3KCkgPT0gdmlldykge1xuICAgICAgICB0aGlzLmNsb3NlXygpO1xuICAgICAgfVxuICAgIH0sIDEwMCk7XG4gIH1cblxuICAvKipcbiAgICovXG4gIGNvbXBsZXRlQWxsKCkge1xuICAgIGlmICh0aGlzLmRpYWxvZ18pIHtcbiAgICAgIHRoaXMuY2xvc2VfKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnBvcHVwR3JheXBhbmVfLmlzQXR0YWNoZWQoKSkge1xuICAgICAgdGhpcy5wb3B1cEdyYXlwYW5lXy5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGNsb3NlXygpIHtcbiAgICB0aGlzLmRpYWxvZ18uY2xvc2UoKTtcbiAgICB0aGlzLmRpYWxvZ18gPSBudWxsO1xuICAgIHRoaXMub3BlblByb21pc2VfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9XaW5kb3d8dW5kZWZpbmVkfSB0YXJnZXRXaW5cbiAgICovXG4gIHBvcHVwT3BlbmVkKHRhcmdldFdpbikge1xuICAgIHRoaXMucG9wdXBXaW5fID0gdGFyZ2V0V2luIHx8IG51bGw7XG4gICAgaWYgKCF0aGlzLnBvcHVwR3JheXBhbmVfLmlzQXR0YWNoZWQoKSkge1xuICAgICAgdGhpcy5wb3B1cEdyYXlwYW5lXy5hdHRhY2goKTtcbiAgICB9XG4gICAgdGhpcy5wb3B1cEdyYXlwYW5lXy5zaG93KCk7XG4gIH1cblxuICAvKipcbiAgICovXG4gIHBvcHVwQ2xvc2VkKCkge1xuICAgIHRoaXMucG9wdXBXaW5fID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5wb3B1cEdyYXlwYW5lXy5oaWRlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWdub3JlLlxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0NTUyBhcyBESUFMT0dfQ1NTfSBmcm9tICcuLi8uLi9idWlsZC9jc3MvdWkvdWkuY3NzJztcbmltcG9ydCB7RnJpZW5kbHlJZnJhbWV9IGZyb20gJy4vZnJpZW5kbHktaWZyYW1lJztcbmltcG9ydCB7R3JheXBhbmV9IGZyb20gJy4vZ3JheXBhbmUnO1xuaW1wb3J0IHtMb2FkaW5nVmlld30gZnJvbSAnLi4vdWkvbG9hZGluZy12aWV3JztcbmltcG9ydCB7XG4gIGNyZWF0ZUVsZW1lbnQsXG4gIGluamVjdFN0eWxlU2hlZXQsXG4gIHJlbW92ZUNoaWxkcmVuLFxuICByZW1vdmVFbGVtZW50LFxufSBmcm9tICcuLi91dGlscy9kb20nO1xuaW1wb3J0IHtyZXNvbHZlRG9jfSBmcm9tICcuLi9tb2RlbC9kb2MnO1xuaW1wb3J0IHtzZXRJbXBvcnRhbnRTdHlsZXMsIHNldFN0eWxlc30gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHt0cmFuc2l0aW9ufSBmcm9tICcuLi91dGlscy9hbmltYXRpb24nO1xuXG5jb25zdCBaX0lOREVYID0gMjE0NzQ4MzY0NztcblxuLyoqXG4gKiBEZWZhdWx0IGlmcmFtZSBpbXBvcnRhbnQgc3R5bGVzLlxuICogTm90ZTogVGhlIGlmcmFtZSByZXNwb25zaXZlbmVzcyBtZWRpYSBxdWVyeSBzdHlsZSBpcyBpbmplY3RlZCBpbiB0aGVcbiAqIHB1Ymxpc2hlcidzIHBhZ2Ugc2luY2Ugc3R5bGUgYXR0cmlidXRlIGNhbiBub3QgaW5jbHVkZSBtZWRpYSBxdWVyeS5cbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHN0cmluZ3xudW1iZXI+fVxuICovXG5jb25zdCByb290RWxlbWVudEltcG9ydGFudFN0eWxlcyA9IHtcbiAgJ21pbi1oZWlnaHQnOiAnNTBweCcsXG4gICdib3JkZXInOiAnbm9uZScsXG4gICdkaXNwbGF5JzogJ2Jsb2NrJyxcbiAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgJ3otaW5kZXgnOiBaX0lOREVYLFxuICAnYm94LXNpemluZyc6ICdib3JkZXItYm94Jyxcbn07XG5cbi8qKlxuICogUmVzZXQgdmlldyBzdHlsZXMuXG4gKiBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyPn1cbiAqL1xuY29uc3QgcmVzZXRWaWV3U3R5bGVzID0ge1xuICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAndG9wJzogJzAnLFxuICAnbGVmdCc6ICcwJyxcbiAgJ3JpZ2h0JzogJzAnLFxuICAnYm90dG9tJzogJzAnLFxuICAnb3BhY2l0eSc6IDAsXG4gIC8qIFRoZXNlIGxpbmVzIGFyZSBhIHdvcmsgYXJvdW5kIHRvIHRoaXMgaXNzdWUgaW4gaU9TOiAgICAgKi9cbiAgLyogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NTE5OCAgICAgICAgICAqL1xuICAnaGVpZ2h0JzogMCxcbiAgJ21heC1oZWlnaHQnOiAnMTAwJScsXG4gICdtYXgtd2lkdGgnOiAnMTAwJScsXG4gICdtaW4taGVpZ2h0JzogJzEwMCUnLFxuICAnbWluLXdpZHRoJzogJzEwMCUnLFxuICAnd2lkdGgnOiAwLFxufTtcblxuLyoqXG4gKiBQb3NpdGlvbiBvZiB0aGUgZGlhbG9nLlxuICogQGNvbnN0IEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFBvc2l0aW9uQXQgPSB7XG4gIEJPVFRPTTogJ0JPVFRPTScsXG4gIFRPUDogJ1RPUCcsXG4gIEZMT0FUOiAnRkxPQVQnLFxuICBGVUxMOiAnRlVMTCcsXG59O1xuXG4vKipcbiAqIFRoZSBjbGFzcyBmb3IgdGhlIHRvcCBsZXZlbCBkaWFsb2cuXG4gKiBAZmluYWxcbiAqL1xuZXhwb3J0IGNsYXNzIERpYWxvZyB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkaWFsb2cgZm9yIHRoZSBwcm92aWRlZCBkb2MuXG4gICAqIEBwYXJhbSB7IS4uL21vZGVsL2RvYy5Eb2N9IGRvY1xuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyPj19IGltcG9ydGFudFN0eWxlc1xuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyPj19IHN0eWxlc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZG9jLCBpbXBvcnRhbnRTdHlsZXMgPSB7fSwgc3R5bGVzID0ge30pIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vbW9kZWwvZG9jLkRvY30gKi9cbiAgICB0aGlzLmRvY18gPSBkb2M7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRnJpZW5kbHlJZnJhbWV9ICovXG4gICAgdGhpcy5pZnJhbWVfID0gbmV3IEZyaWVuZGx5SWZyYW1lKGRvYy5nZXRXaW4oKS5kb2N1bWVudCwge1xuICAgICAgJ2NsYXNzJzogJ3N3Zy1kaWFsb2cnLFxuICAgIH0pO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUdyYXlwYW5lfSAqL1xuICAgIHRoaXMuZ3JheXBhbmVfID0gbmV3IEdyYXlwYW5lKGRvYywgWl9JTkRFWCAtIDEpO1xuXG4gICAgY29uc3QgbW9kaWZpZWRJbXBvcnRhbnRTdHlsZXMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICByb290RWxlbWVudEltcG9ydGFudFN0eWxlcyxcbiAgICAgIGltcG9ydGFudFN0eWxlc1xuICAgICk7XG4gICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuaWZyYW1lXy5nZXRFbGVtZW50KCksIG1vZGlmaWVkSW1wb3J0YW50U3R5bGVzKTtcblxuICAgIHNldFN0eWxlcyh0aGlzLmlmcmFtZV8uZ2V0RWxlbWVudCgpLCBzdHlsZXMpO1xuXG4gICAgLyoqIEBwcml2YXRlIHtMb2FkaW5nVmlld30gKi9cbiAgICB0aGlzLmxvYWRpbmdWaWV3XyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9FbGVtZW50fSAqL1xuICAgIHRoaXMuY29udGFpbmVyXyA9IG51bGw7IC8vIERlcGVuZHMgb24gY29uc3RydWN0ZWQgZG9jdW1lbnQgaW5zaWRlIGlmcmFtZS5cblxuICAgIC8qKiBAcHJpdmF0ZSB7Py4vdmlldy5WaWV3fSAqL1xuICAgIHRoaXMudmlld18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/UHJvbWlzZX0gKi9cbiAgICB0aGlzLmFuaW1hdGluZ18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuaGlkZGVuXyA9IGZhbHNlO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/Li92aWV3LlZpZXd9ICovXG4gICAgdGhpcy5wcmV2aW91c1Byb2dyZXNzVmlld18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMudXNlRml4ZWRMYXllcl8gPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgZGlhbG9nIGFuZCBidWlsZHMgdGhlIGlmcmFtZSBjb250YWluZXIuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGhpZGRlblxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhRGlhbG9nPn1cbiAgICovXG4gIG9wZW4oaGlkZGVuID0gZmFsc2UpIHtcbiAgICBjb25zdCBpZnJhbWUgPSB0aGlzLmlmcmFtZV87XG4gICAgaWYgKGlmcmFtZS5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgb3BlbmVkJyk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoLlxuICAgIHRoaXMuZG9jXy5nZXRCb2R5KCkuYXBwZW5kQ2hpbGQoaWZyYW1lLmdldEVsZW1lbnQoKSk7IC8vIEZpcmVzIG9ubG9hZC5cblxuICAgIHRoaXMuZ3JheXBhbmVfLmF0dGFjaCgpO1xuXG4gICAgaWYgKGhpZGRlbikge1xuICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKGlmcmFtZS5nZXRFbGVtZW50KCksIHtcbiAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyxcbiAgICAgICAgJ29wYWNpdHknOiAwLFxuICAgICAgfSk7XG4gICAgICB0aGlzLmhpZGRlbl8gPSBoaWRkZW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd18oKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy51c2VGaXhlZExheWVyXykge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jX1xuICAgICAgICAuYWRkVG9GaXhlZExheWVyKGlmcmFtZS5nZXRFbGVtZW50KCkpXG4gICAgICAgIC50aGVuKCgpID0+IGlmcmFtZS53aGVuUmVhZHkoKSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYnVpbGRJZnJhbWVfKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaWZyYW1lLndoZW5SZWFkeSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmJ1aWxkSWZyYW1lXygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCB0aGUgaWZyYW1lIHdpdGggdGhlIHN0eWxpbmcgYWZ0ZXIgaWZyYW1lIGlzIGxvYWRlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJ1aWxkSWZyYW1lXygpIHtcbiAgICBjb25zdCBpZnJhbWUgPSB0aGlzLmlmcmFtZV87XG4gICAgY29uc3QgaWZyYW1lQm9keSA9IGlmcmFtZS5nZXRCb2R5KCk7XG4gICAgY29uc3QgaWZyYW1lRG9jID0gLyoqIEB0eXBlIHshSFRNTERvY3VtZW50fSAqLyAodGhpcy5pZnJhbWVfLmdldERvY3VtZW50KCkpO1xuXG4gICAgLy8gSW5qZWN0IEdvb2dsZSBmb250cyBpbiA8SEVBRD4gc2VjdGlvbiBvZiB0aGUgaWZyYW1lLlxuICAgIGluamVjdFN0eWxlU2hlZXQocmVzb2x2ZURvYyhpZnJhbWVEb2MpLCBESUFMT0dfQ1NTKTtcblxuICAgIC8vIEFkZCBMb2FkaW5nIGluZGljYXRvci5cbiAgICB0aGlzLmxvYWRpbmdWaWV3XyA9IG5ldyBMb2FkaW5nVmlldyhpZnJhbWVEb2MpO1xuICAgIGlmcmFtZUJvZHkuYXBwZW5kQ2hpbGQodGhpcy5sb2FkaW5nVmlld18uZ2V0RWxlbWVudCgpKTtcblxuICAgIC8vIENvbnRhaW5lciBmb3IgYWxsIGR5bmFtaWMgY29udGVudCwgaW5jbHVkaW5nIDNQIGlmcmFtZS5cbiAgICB0aGlzLmNvbnRhaW5lcl8gPSBjcmVhdGVFbGVtZW50KGlmcmFtZURvYywgJ3N3Zy1jb250YWluZXInLCB7fSk7XG4gICAgaWZyYW1lQm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcl8pO1xuICAgIHRoaXMuc2V0UG9zaXRpb25fKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBkaWFsb2cuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFuaW1hdGVkXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgY2xvc2UoYW5pbWF0ZWQgPSB0cnVlKSB7XG4gICAgbGV0IGFuaW1hdGluZztcbiAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgIGFuaW1hdGluZyA9IHRoaXMuYW5pbWF0ZV8oKCkgPT4ge1xuICAgICAgICB0aGlzLmdyYXlwYW5lXy5oaWRlKC8qIGFuaW1hdGUgKi8gdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0cmFuc2l0aW9uKFxuICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudCgpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgxMDAlKScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAzMDAsXG4gICAgICAgICAgJ2Vhc2Utb3V0J1xuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuaW1hdGluZyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW5nLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgaWZyYW1lRWwgPSB0aGlzLmlmcmFtZV8uZ2V0RWxlbWVudCgpO1xuICAgICAgaWZyYW1lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWVFbCk7XG5cbiAgICAgIHRoaXMucmVtb3ZlUGFkZGluZ1RvSHRtbF8oKTtcbiAgICAgIHRoaXMuZ3JheXBhbmVfLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjb250YWluZXIgd2l0aGluIHRoZSBkaWFsb2cuXG4gICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgKi9cbiAgZ2V0Q29udGFpbmVyKCkge1xuICAgIGlmICghdGhpcy5jb250YWluZXJfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBvcGVuZWQgeWV0Jyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcl87XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgYXR0YWNoZWQgaWZyYW1lIGluc3RhbmNlLlxuICAgKiBAcmV0dXJuIHshRnJpZW5kbHlJZnJhbWV9XG4gICAqL1xuICBnZXRJZnJhbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWZyYW1lXztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBJZnJhbWUgZWxlbWVudC5cbiAgICogQHJldHVybiB7IUhUTUxJRnJhbWVFbGVtZW50fVxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5pZnJhbWVfLmdldEVsZW1lbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgbmV4dCB2aWV3LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZW50cnlUcmFuc2l0aW9uVG9OZXh0Vmlld18oKSB7XG4gICAgaWYgKHRoaXMudmlld18gJiYgdGhpcy52aWV3Xy5oYXNMb2FkaW5nSW5kaWNhdG9yKCkpIHtcbiAgICAgIC8vIFRlbXBvcmFyaWx5IGNhY2hlIHRoZSBvbGQgdmlldy5cbiAgICAgIHRoaXMucHJldmlvdXNQcm9ncmVzc1ZpZXdfID0gdGhpcy52aWV3XztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2luY2UgbG9hZGluZyBpbmRpY2F0b3Igd2lsbCBiZSBzaG93biwgcmVtb3ZlIGNvbnRlbnRzIG9mIG9sZCB2aWV3LlxuICAgICAgcmVtb3ZlQ2hpbGRyZW4odGhpcy5nZXRDb250YWluZXIoKSk7XG4gICAgICAvLyBXaGVuIGxvYWRpbmcgaW5kaWNhdG9yIHdhcyBub3QgZGlzcGxheWVkIGluIHRoZSBwcmV2aW91cyB2aWV3LFxuICAgICAgLy8gbG9hZGluZyBpbmRpY2F0b3IgbXVzdCBiZSBkaXNwbGF5ZWQgd2hpbGUgdHJhbnNpdGlvbmluZyB0byBuZXcgdmlldy5cbiAgICAgIHRoaXMubG9hZGluZ1ZpZXdfLnNob3coKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNpdGlvbiBvdXQgb2YgYW4gb2xkIHZpZXcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBleGl0VHJhbnNpdGlvbkZyb21PbGRWaWV3XygpIHtcbiAgICAvLyBJZiBwcmV2aW91cyB2aWV3IGlzIHN0aWxsIGFyb3VuZCwgcmVtb3ZlIGl0LlxuICAgIGlmICh0aGlzLnByZXZpb3VzUHJvZ3Jlc3NWaWV3Xykge1xuICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLnByZXZpb3VzUHJvZ3Jlc3NWaWV3Xy5nZXRFbGVtZW50KCkpO1xuICAgICAgdGhpcy5wcmV2aW91c1Byb2dyZXNzVmlld18gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvYWRpbmdWaWV3Xy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEByZXR1cm4gez8uL3ZpZXcuVmlld30gKi9cbiAgZ2V0Q3VycmVudFZpZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlld187XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIGdpdmVuIHZpZXcgYW5kIHJlbW92ZXMgZXhpc3RpbmcgdmlldyBmcm9tIHRoZSBET00gaWYgYW55LlxuICAgKiBAcGFyYW0geyEuL3ZpZXcuVmlld30gdmlld1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIG9wZW5WaWV3KHZpZXcpIHtcbiAgICBzZXRJbXBvcnRhbnRTdHlsZXModmlldy5nZXRFbGVtZW50KCksIHJlc2V0Vmlld1N0eWxlcyk7XG4gICAgdGhpcy5lbnRyeVRyYW5zaXRpb25Ub05leHRWaWV3XygpO1xuXG4gICAgdGhpcy52aWV3XyA9IHZpZXc7XG4gICAgdGhpcy5nZXRDb250YWluZXIoKS5hcHBlbmRDaGlsZCh2aWV3LmdldEVsZW1lbnQoKSk7XG5cbiAgICAvLyBJZiB0aGUgY3VycmVudCB2aWV3IHNob3VsZCBmYWRlIHRoZSBwYXJlbnQgZG9jdW1lbnQuXG4gICAgaWYgKHZpZXcuc2hvdWxkRmFkZUJvZHkoKSAmJiAhdGhpcy5oaWRkZW5fKSB7XG4gICAgICB0aGlzLmdyYXlwYW5lXy5zaG93KC8qIGFuaW1hdGUgKi8gdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZXcuaW5pdCh0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgIHNldEltcG9ydGFudFN0eWxlcyh2aWV3LmdldEVsZW1lbnQoKSwge1xuICAgICAgICAnb3BhY2l0eSc6IDEsXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLmhpZGRlbl8pIHtcbiAgICAgICAgaWYgKHZpZXcuc2hvdWxkRmFkZUJvZHkoKSkge1xuICAgICAgICAgIHRoaXMuZ3JheXBhbmVfLnNob3coLyogYW5pbWF0ZWQgKi8gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG93XygpO1xuICAgICAgfVxuICAgICAgdGhpcy5leGl0VHJhbnNpdGlvbkZyb21PbGRWaWV3XygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGlmcmFtZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNob3dfKCkge1xuICAgIHRoaXMuYW5pbWF0ZV8oKCkgPT4ge1xuICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuZ2V0RWxlbWVudCgpLCB7XG4gICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgxMDAlKScsXG4gICAgICAgICdvcGFjdGl5JzogMSxcbiAgICAgICAgJ3Zpc2liaWxpdHknOiAndmlzaWJsZScsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uKFxuICAgICAgICB0aGlzLmdldEVsZW1lbnQoKSxcbiAgICAgICAge1xuICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgwKScsXG4gICAgICAgICAgJ29wYWNpdHknOiAxLFxuICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICB9LFxuICAgICAgICAzMDAsXG4gICAgICAgICdlYXNlLW91dCdcbiAgICAgICk7XG4gICAgfSk7XG4gICAgdGhpcy5oaWRkZW5fID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplcyB0aGUgZGlhbG9nIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIHshLi92aWV3LlZpZXd9IHZpZXdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBhbmltYXRlZFxuICAgKiBAcmV0dXJuIHs/UHJvbWlzZX1cbiAgICovXG4gIHJlc2l6ZVZpZXcodmlldywgaGVpZ2h0LCBhbmltYXRlZCA9IHRydWUpIHtcbiAgICBpZiAodGhpcy52aWV3XyAhPSB2aWV3KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gdGhpcy5nZXRNYXhBbGxvd2VkSGVpZ2h0XyhoZWlnaHQpO1xuXG4gICAgbGV0IGFuaW1hdGluZztcbiAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgIGNvbnN0IG9sZEhlaWdodCA9IHRoaXMuZ2V0RWxlbWVudCgpLm9mZnNldEhlaWdodDtcbiAgICAgIGlmIChuZXdIZWlnaHQgPj0gb2xkSGVpZ2h0KSB7XG4gICAgICAgIC8vIEV4cGFuZC5cbiAgICAgICAgYW5pbWF0aW5nID0gdGhpcy5hbmltYXRlXygoKSA9PiB7XG4gICAgICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuZ2V0RWxlbWVudCgpLCB7XG4gICAgICAgICAgICAnaGVpZ2h0JzogYCR7bmV3SGVpZ2h0fXB4YCxcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlWSgke25ld0hlaWdodCAtIG9sZEhlaWdodH1weClgLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uKFxuICAgICAgICAgICAgdGhpcy5nZXRFbGVtZW50KCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgwKScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMzAwLFxuICAgICAgICAgICAgJ2Vhc2Utb3V0J1xuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ29sbGFwc2UuXG4gICAgICAgIGFuaW1hdGluZyA9IHRoaXMuYW5pbWF0ZV8oKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uKFxuICAgICAgICAgICAgdGhpcy5nZXRFbGVtZW50KCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlWSgke29sZEhlaWdodCAtIG5ld0hlaWdodH1weClgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDMwMCxcbiAgICAgICAgICAgICdlYXNlLW91dCdcbiAgICAgICAgICApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuZ2V0RWxlbWVudCgpLCB7XG4gICAgICAgICAgICAgICdoZWlnaHQnOiBgJHtuZXdIZWlnaHR9cHhgLFxuICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoMCknLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5nZXRFbGVtZW50KCksIHtcbiAgICAgICAgJ2hlaWdodCc6IGAke25ld0hlaWdodH1weGAsXG4gICAgICB9KTtcbiAgICAgIGFuaW1hdGluZyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW5nLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVQYWRkaW5nVG9IdG1sXyhoZWlnaHQpO1xuICAgICAgdmlldy5yZXNpemVkKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOiFQcm9taXNlfSBjYWxsYmFja1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFuaW1hdGVfKGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgd2FpdCA9IHRoaXMuYW5pbWF0aW5nXyB8fCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICByZXR1cm4gKHRoaXMuYW5pbWF0aW5nXyA9IHdhaXRcbiAgICAgIC50aGVuKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAvLyBJZ25vcmUgZXJyb3JzIHRvIG1ha2Ugc3VyZSBhbmltYXRpb25zIGRvbid0IGdldCBzdHVjay5cbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmFuaW1hdGluZ18gPSBudWxsO1xuICAgICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWF4aW11bSBhbGxvd2VkIGhlaWdodCBmb3IgY3VycmVudCB2aWV3cG9ydC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRNYXhBbGxvd2VkSGVpZ2h0XyhoZWlnaHQpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oaGVpZ2h0LCB0aGlzLmRvY18uZ2V0V2luKCkuLypPSyovIGlubmVySGVpZ2h0ICogMC45KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBlbGVtZW50J3MgaGVpZ2h0LlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRIZWlnaHRfKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnQoKS5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGRpYWxvZy4gQ3VycmVudGx5ICdCT1RUT00nIGlzIHNldCBieSBkZWZhdWx0LlxuICAgKi9cbiAgc2V0UG9zaXRpb25fKCkge1xuICAgIHNldEltcG9ydGFudFN0eWxlcyh0aGlzLmdldEVsZW1lbnQoKSwgdGhpcy5nZXRQb3NpdGlvblN0eWxlXygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgdGhlIHBhZGRpbmcgdG8gdGhlIGNvbnRhaW5pbmcgcGFnZSBzbyBhcyB0byBub3QgaGlkZSB0aGUgY29udGVudFxuICAgKiBiZWhpbmQgdGhlIHBvcHVwLCBpZiByZW5kZXJlZCBhdCB0aGUgYm90dG9tLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3SGVpZ2h0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1cGRhdGVQYWRkaW5nVG9IdG1sXyhuZXdIZWlnaHQpIHtcbiAgICBpZiAodGhpcy5pbmZlclBvc2l0aW9uXygpID09IFBvc2l0aW9uQXQuQk9UVE9NKSB7XG4gICAgICBjb25zdCBib3R0b21QYWRkaW5nID0gbmV3SGVpZ2h0ICsgMjA7IC8vIEFkZCBzb21lIGV4dHJhIHBhZGRpbmcuXG4gICAgICBjb25zdCBodG1sRWxlbWVudCA9IHRoaXMuZG9jXy5nZXRSb290RWxlbWVudCgpO1xuICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKGh0bWxFbGVtZW50LCB7XG4gICAgICAgICdwYWRkaW5nLWJvdHRvbSc6IGAke2JvdHRvbVBhZGRpbmd9cHhgLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgcHJldmlvdWx5IGFkZGVkIGJvdHRvbSBwYWRkaW5nIGZyb20gdGhlIGRvY3VtZW50LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVtb3ZlUGFkZGluZ1RvSHRtbF8oKSB7XG4gICAgdGhpcy5kb2NfLmdldFJvb3RFbGVtZW50KCkuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3BhZGRpbmctYm90dG9tJyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIGRpYWxvZy4gQ3VycmVudGx5IGRpYWxvZyBpcyBwb3NpdGlvbmVkIGF0XG4gICAqIHRoZSBib3R0b20gb25seS4gVGhpcyBjb3VsZCBjaGFuZ2UgaW4gZnV0dXJlIHRvIGFkanVzdCB0aGUgZGlhbG9nIHBvc2l0aW9uXG4gICAqIGJhc2VkIG9uIHRoZSBzY3JlZW4gc2l6ZS5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaW5mZXJQb3NpdGlvbl8oKSB7XG4gICAgcmV0dXJuIFBvc2l0aW9uQXQuQk9UVE9NO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlcyByZXF1aXJlZCB0byBwb3N0aW9uIHRoZSBkaWFsb2cuXG4gICAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFBvc2l0aW9uU3R5bGVfKCkge1xuICAgIGNvbnN0IGRpYWxvZ1Bvc2l0aW9uID0gdGhpcy5pbmZlclBvc2l0aW9uXygpO1xuICAgIHN3aXRjaCAoZGlhbG9nUG9zaXRpb24pIHtcbiAgICAgIGNhc2UgUG9zaXRpb25BdC5CT1RUT006XG4gICAgICAgIHJldHVybiB7J2JvdHRvbSc6IDB9O1xuICAgICAgY2FzZSBQb3NpdGlvbkF0LlRPUDpcbiAgICAgICAgcmV0dXJuIHsndG9wJzogMH07XG4gICAgICBjYXNlIFBvc2l0aW9uQXQuRkxPQVQ6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICAgICAndG9wJzogJzUwJScsXG4gICAgICAgICAgJ2xlZnQnOiAnNTAlJyxcbiAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgIH07XG4gICAgICBjYXNlIFBvc2l0aW9uQXQuRlVMTDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgJ3RvcCc6IDAsXG4gICAgICAgICAgJ2JvdHRvbSc6IDAsXG4gICAgICAgIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geydib3R0b20nOiAwfTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtjcmVhdGVFbGVtZW50LCBpc0Nvbm5lY3RlZH0gZnJvbSAnLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7cmVzZXRBbGxTdHlsZXN9IGZyb20gJy4uL3V0aWxzL3N0eWxlJztcblxuLyoqIEBjb25zdCB7IU9iamVjdDxzdHJpbmd8bnVtYmVyPn0gKi9cbmNvbnN0IGZyaWVuZGx5SWZyYW1lQXR0cmlidXRlcyA9IHtcbiAgJ2ZyYW1lYm9yZGVyJzogMCxcbiAgJ3Njcm9sbGluZyc6ICdubycsXG4gICdzcmMnOiAnYWJvdXQ6YmxhbmsnLFxufTtcblxuLyoqXG4gKiBUaGUgY2xhc3MgZm9yIGJ1aWxkaW5nIGZyaWVuZGx5IGlmcmFtZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZyaWVuZGx5SWZyYW1lIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nfG51bWJlcj49fSBhdHRyc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZG9jLCBhdHRycyA9IHt9KSB7XG4gICAgY29uc3QgbWVyZ2VkQXR0cnMgPSBPYmplY3QuYXNzaWduKHt9LCBmcmllbmRseUlmcmFtZUF0dHJpYnV0ZXMsIGF0dHJzKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSAvKiogQHR5cGUgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi8gKGNyZWF0ZUVsZW1lbnQoXG4gICAgICBkb2MsXG4gICAgICAnaWZyYW1lJyxcbiAgICAgIG1lcmdlZEF0dHJzXG4gICAgKSk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgbmV3IGlmcmFtZSBkb2VzIG5vdCBpbmhlcml0IGFueSBDU1Mgc3R5bGVzLlxuICAgIHJlc2V0QWxsU3R5bGVzKHRoaXMuaWZyYW1lXyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZX0gKi9cbiAgICB0aGlzLnJlYWR5XyA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5pZnJhbWVfLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBwcm9taXNlIGlzIHJlc29sdmVkLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdoZW5SZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeV87XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgaWZyYW1lIGVsZW1lbnQuXG4gICAqIEByZXR1cm4geyFIVE1MSUZyYW1lRWxlbWVudH1cbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWZyYW1lXztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBkb2N1bWVudCBvYmplY3Qgb2YgdGhlIGlmcmFtZSBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHshRG9jdW1lbnR9XG4gICAqL1xuICBnZXREb2N1bWVudCgpIHtcbiAgICBjb25zdCBkb2MgPVxuICAgICAgdGhpcy5nZXRFbGVtZW50KCkuY29udGVudERvY3VtZW50IHx8XG4gICAgICAodGhpcy5nZXRFbGVtZW50KCkuY29udGVudFdpbmRvdyAmJlxuICAgICAgICB0aGlzLmdldEVsZW1lbnQoKS5jb250ZW50V2luZG93LmRvY3VtZW50KTtcblxuICAgIGlmICghZG9jKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBsb2FkZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvYztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBib2R5IG9mIHRoZSBpZnJhbWUuXG4gICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgKi9cbiAgZ2V0Qm9keSgpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKHRoaXMuZ2V0RG9jdW1lbnQoKS5ib2R5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBpZnJhbWUgaXMgY29ubmVjdGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIGlzQ29ubmVjdGVkKHRoaXMuZ2V0RWxlbWVudCgpKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge3NldEltcG9ydGFudFN0eWxlc30gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHt0cmFuc2l0aW9ufSBmcm9tICcuLi91dGlscy9hbmltYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgR3JheXBhbmUge1xuICAvKipcbiAgICogQHBhcmFtIHshLi4vbW9kZWwvZG9jLkRvY30gZG9jXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6SW5kZXhcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvYywgekluZGV4KSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL21vZGVsL2RvYy5Eb2N9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUVsZW1lbnR9ICovXG4gICAgdGhpcy5mYWRlQmFja2dyb3VuZF8gPSB0aGlzLmRvY19cbiAgICAgIC5nZXRXaW4oKVxuICAgICAgLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N3Zy1wb3B1cC1iYWNrZ3JvdW5kJyk7XG4gICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuZmFkZUJhY2tncm91bmRfLCB7XG4gICAgICAnei1pbmRleCc6IHpJbmRleCxcbiAgICAgICdkaXNwbGF5JzogJ25vbmUnLFxuICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICd0b3AnOiAwLFxuICAgICAgJ3JpZ2h0JzogMCxcbiAgICAgICdib3R0b20nOiAwLFxuICAgICAgJ2xlZnQnOiAwLFxuICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAncmdiYSgzMiwgMzMsIDM2LCAuNiknLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5mYWRlQmFja2dyb3VuZF87XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQXR0YWNoZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5mYWRlQmFja2dyb3VuZF8ucGFyZW50Tm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyB0aGUgZ3JheXBhbmUgdG8gdGhlIGRvY3VtZW50LlxuICAgKi9cbiAgYXR0YWNoKCkge1xuICAgIHRoaXMuZG9jXy5nZXRCb2R5KCkuYXBwZW5kQ2hpbGQodGhpcy5mYWRlQmFja2dyb3VuZF8pO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGFjaGVzIHRoZSBncmF5cGFuZSB0byB0aGUgZG9jdW1lbnQuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZG9jXy5nZXRCb2R5KCkucmVtb3ZlQ2hpbGQodGhpcy5mYWRlQmFja2dyb3VuZF8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIHRoZSBncmF5cGFuZS5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gYW5pbWF0ZWRcbiAgICogQHJldHVybiB7IVByb21pc2V8dW5kZWZpbmVkfVxuICAgKi9cbiAgc2hvdyhhbmltYXRlZCA9IHRydWUpIHtcbiAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5mYWRlQmFja2dyb3VuZF8sIHtcbiAgICAgICdkaXNwbGF5JzogJ2Jsb2NrJyxcbiAgICAgICdvcGFjaXR5JzogYW5pbWF0ZWQgPyAwIDogMSxcbiAgICB9KTtcbiAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uKFxuICAgICAgICB0aGlzLmZhZGVCYWNrZ3JvdW5kXyxcbiAgICAgICAge1xuICAgICAgICAgICdvcGFjaXR5JzogMSxcbiAgICAgICAgfSxcbiAgICAgICAgMzAwLFxuICAgICAgICAnZWFzZS1vdXQnXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgZ3JheXBhbmUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFuaW1hdGVkXG4gICAqIEByZXR1cm4geyFQcm9taXNlfHVuZGVmaW5lZH1cbiAgICovXG4gIGhpZGUoYW5pbWF0ZWQgPSB0cnVlKSB7XG4gICAgaWYgKGFuaW1hdGVkKSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbihcbiAgICAgICAgdGhpcy5mYWRlQmFja2dyb3VuZF8sXG4gICAgICAgIHtcbiAgICAgICAgICAnb3BhY2l0eSc6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIDMwMCxcbiAgICAgICAgJ2Vhc2Utb3V0J1xuICAgICAgKS50aGVuKCgpID0+IHtcbiAgICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuZmFkZUJhY2tncm91bmRfLCB7J2Rpc3BsYXknOiAnbm9uZSd9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5mYWRlQmFja2dyb3VuZF8sIHsnZGlzcGxheSc6ICdub25lJ30pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogYWJzdHJhY3QgVmlldyBDbGFzcy4gVXNlZCB0byByZW5kZXIgdGhlIGNvbnRlbnQgd2l0aGluIHRoZSBEaWFsb2cuIFRoZVxuICogZXh0ZW5kZWQgY2xhc3MgaGFzIGFjdHVhbCBjb250ZW50LlxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3IHtcbiAgLyoqXG4gICAqIEVtcHR5IGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpZnJhbWUgZWxlbWVudC5cbiAgICogQHJldHVybiB7IUVsZW1lbnR9XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGlhbG9nLkRpYWxvZ30gdW51c2VkRGlhbG9nXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGluaXQodW51c2VkRGlhbG9nKSB7fVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIHRoZSBjb250ZW50LlxuICAgKi9cbiAgcmVzaXplZCgpIHtcbiAgICAvLyBEbyBub3RoaW5nIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGlmIG5lZWRlZC5cbiAgfVxuXG4gIC8qKlxuICAgKiBBY2NlcHQgdGhlIHJlc3VsdC5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgd2hlbkNvbXBsZXRlKCkge31cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBzaG91bGRGYWRlQm9keSgpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgaGFzTG9hZGluZ0luZGljYXRvcigpIHt9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogVGhlIGVudHJ5IHBvaW50IGZvciBydW50aW1lIChzd2cuanMpLlxuICovXG5cbmltcG9ydCAnLi9wb2x5ZmlsbHMnO1xuaW1wb3J0IHtpbnN0YWxsUnVudGltZX0gZnJvbSAnLi9ydW50aW1lL3J1bnRpbWUnO1xuaW1wb3J0IHtsb2d9IGZyb20gJy4vdXRpbHMvbG9nJztcblxubG9nKCdTdWJzY3JpcHRpb25zIFJ1bnRpbWU6ICRpbnRlcm5hbFJ1bnRpbWVWZXJzaW9uJCcpO1xuXG5pbnN0YWxsUnVudGltZShzZWxmKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtpc0RvY3VtZW50UmVhZHksIHdoZW5Eb2N1bWVudFJlYWR5fSBmcm9tICcuLi91dGlscy9kb2N1bWVudC1yZWFkeSc7XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgRG9jIHtcbiAgLyoqXG4gICAqIEByZXR1cm4geyFXaW5kb3d9XG4gICAqL1xuICBnZXRXaW4oKSB7fVxuXG4gIC8qKlxuICAgKiBUaGUgYERvY3VtZW50YCBub2RlIG9yIGFuYWxvZy5cbiAgICogQHJldHVybiB7IU5vZGV9XG4gICAqL1xuICBnZXRSb290Tm9kZSgpIHt9XG5cbiAgLyoqXG4gICAqIFRoZSBgRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50YCBlbGVtZW50IG9yIGFuYWxvZy5cbiAgICogQHJldHVybiB7IUVsZW1lbnR9XG4gICAqL1xuICBnZXRSb290RWxlbWVudCgpIHt9XG5cbiAgLyoqXG4gICAqIFRoZSBgRG9jdW1lbnQuaGVhZGAgZWxlbWVudCBvciBhbmFsb2cuIFJldHVybnMgYG51bGxgIGlmIG5vdCBhdmFpbGFibGVcbiAgICogeWV0LlxuICAgKiBAcmV0dXJuIHshRWxlbWVudH1cbiAgICovXG4gIGdldEhlYWQoKSB7fVxuXG4gIC8qKlxuICAgKiBUaGUgYERvY3VtZW50LmJvZHlgIGVsZW1lbnQgb3IgYW5hbG9nLiBSZXR1cm5zIGBudWxsYCBpZiBub3QgYXZhaWxhYmxlXG4gICAqIHlldC5cbiAgICogQHJldHVybiB7P0VsZW1lbnR9XG4gICAqL1xuICBnZXRCb2R5KCkge31cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZG9jdW1lbnQgaGFzIGJlZW4gZnVsbHkgY29uc3RydWN0ZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc1JlYWR5KCkge31cblxuICAvKipcbiAgICogUmVzb2x2ZWQgd2hlbiBkb2N1bWVudCBoYXMgYmVlbiBmdWxseSBjb25zdHJ1Y3RlZC5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICB3aGVuUmVhZHkoKSB7fVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBlbGVtZW50IHRvIHRoZSBmaXhlZCBsYXllci5cbiAgICogQHBhcmFtIHshRWxlbWVudH0gdW51c2VkRWxlbWVudFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICpcbiAgICogVGhpcyBpcyBhIG5vLW9wIGZvciBleGNlcHQgaW4gQU1QIG9uIGlPUyA8IDEzLjAuXG4gICAqL1xuICBhZGRUb0ZpeGVkTGF5ZXIodW51c2VkRWxlbWVudCkge31cbn1cblxuLyoqIEBpbXBsZW1lbnRzIHtEb2N9ICovXG5leHBvcnQgY2xhc3MgR2xvYmFsRG9jIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd3whRG9jdW1lbnR9IHdpbk9yRG9jXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3aW5PckRvYykge1xuICAgIGNvbnN0IGlzV2luID0gISF3aW5PckRvYy5kb2N1bWVudDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IC8qKiBAdHlwZSB7IVdpbmRvd30gKi8gKGlzV2luXG4gICAgICA/IC8qKiBAdHlwZSB7IVdpbmRvd30gKi8gKHdpbk9yRG9jKVxuICAgICAgOiAvKiogQHR5cGUgeyFEb2N1bWVudH0gKi8gKHdpbk9yRG9jKS5kZWZhdWx0Vmlldyk7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IURvY3VtZW50fSAqL1xuICAgIHRoaXMuZG9jXyA9IGlzV2luXG4gICAgICA/IC8qKiBAdHlwZSB7IVdpbmRvd30gKi8gKHdpbk9yRG9jKS5kb2N1bWVudFxuICAgICAgOiAvKiogQHR5cGUgeyFEb2N1bWVudH0gKi8gKHdpbk9yRG9jKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0V2luKCkge1xuICAgIHJldHVybiB0aGlzLndpbl87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFJvb3ROb2RlKCkge1xuICAgIHJldHVybiB0aGlzLmRvY187XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFJvb3RFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmRvY18uZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRIZWFkKCkge1xuICAgIC8vIGBkb2N1bWVudC5oZWFkYCBhbHdheXMgaGFzIGEgY2hhbmNlIHRvIGJlIHBhcnNlZCwgYXQgbGVhc3QgcGFydGlhbGx5LlxuICAgIHJldHVybiAvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAodGhpcy5kb2NfLmhlYWQpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRCb2R5KCkge1xuICAgIHJldHVybiB0aGlzLmRvY18uYm9keTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gaXNEb2N1bWVudFJlYWR5KHRoaXMuZG9jXyk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHdoZW5SZWFkeSgpIHtcbiAgICByZXR1cm4gd2hlbkRvY3VtZW50UmVhZHkodGhpcy5kb2NfKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYWRkVG9GaXhlZExheWVyKHVudXNlZEVsZW1lbnQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyFEb2N1bWVudHwhV2luZG93fCFEb2N9IGlucHV0XG4gKiBAcmV0dXJuIHshRG9jfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZURvYyhpbnB1dCkge1xuICAvLyBJcyBpdCBhIGBEb2N1bWVudGBcbiAgaWYgKC8qKiBAdHlwZSB7IURvY3VtZW50fSAqLyAoaW5wdXQpLm5vZGVUeXBlID09PSAvKiBET0NVTUVOVCAqLyA5KSB7XG4gICAgcmV0dXJuIG5ldyBHbG9iYWxEb2MoLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovIChpbnB1dCkpO1xuICB9XG4gIC8vIElzIGl0IGEgYFdpbmRvd2A/XG4gIGlmICgvKiogQHR5cGUgeyFXaW5kb3d9ICovIChpbnB1dCkuZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gbmV3IEdsb2JhbERvYygvKiogQHR5cGUgeyFXaW5kb3d9ICovIChpbnB1dCkpO1xuICB9XG4gIHJldHVybiAvKiogQHR5cGUgeyFEb2N9ICovIChpbnB1dCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7RG9jLCByZXNvbHZlRG9jfSBmcm9tICcuL2RvYyc7XG5pbXBvcnQge1BhZ2VDb25maWd9IGZyb20gJy4vcGFnZS1jb25maWcnO1xuaW1wb3J0IHtkZWJ1Z0xvZ30gZnJvbSAnLi4vdXRpbHMvbG9nJztcbmltcG9ydCB7aGFzTmV4dE5vZGVJbkRvY3VtZW50T3JkZXJ9IGZyb20gJy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQge2lzQXJyYXl9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcbmltcG9ydCB7dHJ5UGFyc2VKc29ufSBmcm9tICcuLi91dGlscy9qc29uJztcblxuY29uc3QgQUxSRUFEWV9TRUVOID0gJ19fU1dHLVNFRU5fXyc7XG5jb25zdCBDT05UUk9MX0ZMQUcgPSAnc3Vic2NyaXB0aW9ucy1jb250cm9sJztcblxuY29uc3QgQUxMT1dFRF9UWVBFUyA9IFtcbiAgJ0NyZWF0aXZlV29yaycsXG4gICdBcnRpY2xlJyxcbiAgJ05ld3NBcnRpY2xlJyxcbiAgJ0Jsb2cnLFxuICAnQ29tbWVudCcsXG4gICdDb3Vyc2UnLFxuICAnSG93VG8nLFxuICAnTWVzc2FnZScsXG4gICdSZXZpZXcnLFxuICAnV2ViUGFnZScsXG5dO1xuXG4vLyBSZWdFeHAgZm9yIHF1aWNrbHkgc2Nhbm5pbmcgTEQrSlNPTiBmb3IgYWxsb3dlZCB0eXBlc1xuY29uc3QgUkVfQUxMT1dFRF9UWVBFUyA9IG5ldyBSZWdFeHAoQUxMT1dFRF9UWVBFUy5qb2luKCd8JykpO1xuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2VDb25maWdSZXNvbHZlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d8IURvY3VtZW50fCFEb2N9IHdpbk9yRG9jXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3aW5PckRvYykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFEb2N9ICovXG4gICAgdGhpcy5kb2NfID0gcmVzb2x2ZURvYyh3aW5PckRvYyk7XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbigoIVBhZ2VDb25maWd8IVByb21pc2UpKX0gKi9cbiAgICB0aGlzLmNvbmZpZ1Jlc29sdmVyXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZTwhUGFnZUNvbmZpZz59ICovXG4gICAgdGhpcy5jb25maWdQcm9taXNlXyA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jb25maWdSZXNvbHZlcl8gPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU1ldGFQYXJzZXJ9ICovXG4gICAgdGhpcy5tZXRhUGFyc2VyXyA9IG5ldyBNZXRhUGFyc2VyKHRoaXMuZG9jXyk7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUpzb25MZFBhcnNlcn0gKi9cbiAgICB0aGlzLmxkUGFyc2VyXyA9IG5ldyBKc29uTGRQYXJzZXIodGhpcy5kb2NfKTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshTWljcm9kYXRhUGFyc2VyfSAqL1xuICAgIHRoaXMubWljcm9kYXRhUGFyc2VyXyA9IG5ldyBNaWNyb2RhdGFQYXJzZXIodGhpcy5kb2NfKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhUGFnZUNvbmZpZz59XG4gICAqL1xuICByZXNvbHZlQ29uZmlnKCkge1xuICAgIC8vIFRyeSByZXNvbHZlIHRoZSBjb25maWcgYXQgZGlmZmVyZW50IHRpbWVzLlxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4odGhpcy5jaGVjay5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmRvY18ud2hlblJlYWR5KCkudGhlbih0aGlzLmNoZWNrLmJpbmQodGhpcykpO1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ1Byb21pc2VfO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9QYWdlQ29uZmlnfVxuICAgKi9cbiAgY2hlY2soKSB7XG4gICAgLy8gQWxyZWFkeSByZXNvbHZlZC5cbiAgICBpZiAoIXRoaXMuY29uZmlnUmVzb2x2ZXJfKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGNvbmZpZyA9IHRoaXMubWV0YVBhcnNlcl8uY2hlY2soKTtcbiAgICBpZiAoIWNvbmZpZykge1xuICAgICAgY29uZmlnID0gdGhpcy5sZFBhcnNlcl8uY2hlY2soKTtcbiAgICB9XG4gICAgaWYgKCFjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IHRoaXMubWljcm9kYXRhUGFyc2VyXy5jaGVjaygpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICAvLyBQcm9kdWN0IElEIGhhcyBiZWVuIGZvdW5kOiBpbml0aWFsaXplIHRoZSByZXN0IG9mIHRoZSBjb25maWcuXG4gICAgICB0aGlzLmNvbmZpZ1Jlc29sdmVyXyhjb25maWcpO1xuICAgICAgdGhpcy5jb25maWdSZXNvbHZlcl8gPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kb2NfLmlzUmVhZHkoKSkge1xuICAgICAgdGhpcy5jb25maWdSZXNvbHZlcl8oXG4gICAgICAgIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTm8gY29uZmlnIGNvdWxkIGJlIGRpc2NvdmVyZWQgaW4gdGhlIHBhZ2UnKSlcbiAgICAgICk7XG4gICAgICB0aGlzLmNvbmZpZ1Jlc29sdmVyXyA9IG51bGw7XG4gICAgfVxuICAgIGRlYnVnTG9nKGNvbmZpZyk7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxufVxuXG5jbGFzcyBUeXBlQ2hlY2tlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogQ2hlY2sgdmFsdWUgZnJvbSBqc29uXG4gICAqIEBwYXJhbSB7P0FycmF5fHN0cmluZ30gdmFsdWVcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBleHBlY3RlZFR5cGVzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBjaGVja1ZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jaGVja0FycmF5KHRoaXMudG9BcnJheV8odmFsdWUpLCBleHBlY3RlZFR5cGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgc3BhY2UgZGVsaW1pdGVkIGxpc3Qgb2YgdHlwZXNcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBpdGVtdHlwZVxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGV4cGVjdGVkVHlwZXNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGNoZWNrU3RyaW5nKGl0ZW10eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gICAgaWYgKCFpdGVtdHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jaGVja0FycmF5KGl0ZW10eXBlLnNwbGl0KC9cXHMrLyksIGV4cGVjdGVkVHlwZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8P3N0cmluZz59IHR5cGVBcnJheVxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGV4cGVjdGVkVHlwZXNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGNoZWNrQXJyYXkodHlwZUFycmF5LCBleHBlY3RlZFR5cGVzKSB7XG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgdHlwZUFycmF5LmZvckVhY2goY2FuZGlkYXRlVHlwZSA9PiB7XG4gICAgICBmb3VuZCA9XG4gICAgICAgIGZvdW5kIHx8XG4gICAgICAgIGV4cGVjdGVkVHlwZXMuaW5jbHVkZXMoXG4gICAgICAgICAgY2FuZGlkYXRlVHlwZS5yZXBsYWNlKC9eaHR0cDpcXC9cXC9zY2hlbWEub3JnXFwvL2ksICcnKVxuICAgICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuXG4gIC8qXG4gICAqIEBwYXJhbSB7P0FycmF5fHN0cmluZ30gdmFsdWVcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0b0FycmF5Xyh2YWx1ZSkge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgfVxufVxuXG5jbGFzcyBNZXRhUGFyc2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IURvY30gZG9jXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRG9jfSAqL1xuICAgIHRoaXMuZG9jXyA9IGRvYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/UGFnZUNvbmZpZ31cbiAgICovXG4gIGNoZWNrKCkge1xuICAgIGlmICghdGhpcy5kb2NfLmdldEJvZHkoKSkge1xuICAgICAgLy8gV2FpdCB1bnRpbCB0aGUgd2hvbGUgYDxoZWFkPmAgaXMgcGFyc2VkLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIGZpbmQgcHJvZHVjdCBpZC5cbiAgICBjb25zdCBwcm9kdWN0SWQgPSBnZXRNZXRhVGFnKFxuICAgICAgdGhpcy5kb2NfLmdldFJvb3ROb2RlKCksXG4gICAgICAnc3Vic2NyaXB0aW9ucy1wcm9kdWN0LWlkJ1xuICAgICk7XG4gICAgaWYgKCFwcm9kdWN0SWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIElzIGxvY2tlZD9cbiAgICBjb25zdCBhY2Nlc3NpYmxlRm9yRnJlZSA9IGdldE1ldGFUYWcoXG4gICAgICB0aGlzLmRvY18uZ2V0Um9vdE5vZGUoKSxcbiAgICAgICdzdWJzY3JpcHRpb25zLWFjY2Vzc2libGUtZm9yLWZyZWUnXG4gICAgKTtcbiAgICBjb25zdCBsb2NrZWQgPVxuICAgICAgKGFjY2Vzc2libGVGb3JGcmVlICYmIGFjY2Vzc2libGVGb3JGcmVlLnRvTG93ZXJDYXNlKCkgPT0gJ2ZhbHNlJykgfHxcbiAgICAgIGZhbHNlO1xuXG4gICAgcmV0dXJuIG5ldyBQYWdlQ29uZmlnKHByb2R1Y3RJZCwgbG9ja2VkKTtcbiAgfVxufVxuXG5jbGFzcyBKc29uTGRQYXJzZXIge1xuICAvKipcbiAgICogQHBhcmFtIHshRG9jfSBkb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvYykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFEb2N9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgQGZ1bmN0aW9uICovXG4gICAgdGhpcy5jaGVja1R5cGVfID0gbmV3IFR5cGVDaGVja2VyKCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P1BhZ2VDb25maWd9XG4gICAqL1xuICBjaGVjaygpIHtcbiAgICBpZiAoIXRoaXMuZG9jXy5nZXRCb2R5KCkpIHtcbiAgICAgIC8vIFdhaXQgdW50aWwgdGhlIHdob2xlIGA8aGVhZD5gIGlzIHBhcnNlZC5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGRvbVJlYWR5ID0gdGhpcy5kb2NfLmlzUmVhZHkoKTtcblxuICAgIC8vIHR5cGU6ICdhcHBsaWNhdGlvbi9sZCtqc29uJ1xuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5kb2NfXG4gICAgICAuZ2V0Um9vdE5vZGUoKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdFt0eXBlPVwiYXBwbGljYXRpb24vbGQranNvblwiXScpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgIGlmIChcbiAgICAgICAgZWxlbWVudFtBTFJFQURZX1NFRU5dIHx8XG4gICAgICAgICFlbGVtZW50LnRleHRDb250ZW50IHx8XG4gICAgICAgICghZG9tUmVhZHkgJiYgIWhhc05leHROb2RlSW5Eb2N1bWVudE9yZGVyKGVsZW1lbnQpKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZWxlbWVudFtBTFJFQURZX1NFRU5dID0gdHJ1ZTtcbiAgICAgIGlmICghUkVfQUxMT1dFRF9UWVBFUy50ZXN0KGVsZW1lbnQudGV4dENvbnRlbnQpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcG9zc2libGVDb25maWcgPSB0aGlzLnRyeUV4dHJhY3RDb25maWdfKGVsZW1lbnQpO1xuICAgICAgaWYgKHBvc3NpYmxlQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbmZpZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcmV0dXJuIHs/UGFnZUNvbmZpZ31cbiAgICovXG4gIHRyeUV4dHJhY3RDb25maWdfKGVsZW1lbnQpIHtcbiAgICBjb25zdCBqc29uID0gdHJ5UGFyc2VKc29uKGVsZW1lbnQudGV4dENvbnRlbnQpO1xuICAgIGlmICghanNvbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gTXVzdCBiZSBhbiBBTExPV0VEX1RZUEVcbiAgICBpZiAoIXRoaXMuY2hlY2tUeXBlXy5jaGVja1ZhbHVlKGpzb25bJ0B0eXBlJ10sIEFMTE9XRURfVFlQRVMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBNdXN0IGhhdmUgYSBpc1BhcnRPZltAdHlwZT1Qcm9kdWN0XS5cbiAgICBsZXQgcHJvZHVjdElkID0gbnVsbDtcbiAgICBjb25zdCBwYXJ0T2ZBcnJheSA9IHRoaXMudmFsdWVBcnJheV8oanNvbiwgJ2lzUGFydE9mJyk7XG4gICAgaWYgKHBhcnRPZkFycmF5KSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRPZkFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb2R1Y3RJZCA9IHRoaXMuZGlzY292ZXJQcm9kdWN0SWRfKHBhcnRPZkFycmF5W2ldKTtcbiAgICAgICAgaWYgKHByb2R1Y3RJZCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcHJvZHVjdElkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBGb3VuZCBwcm9kdWN0IGlkLCBqdXN0IGNoZWNrIGZvciB0aGUgYWNjZXNzIGZsYWcuXG4gICAgY29uc3QgaXNBY2Nlc3NpYmxlRm9yRnJlZSA9IHRoaXMuYm9vbF8oXG4gICAgICB0aGlzLnNpbmdsZVZhbHVlXyhqc29uLCAnaXNBY2Nlc3NpYmxlRm9yRnJlZScpLFxuICAgICAgLyogZGVmYXVsdCAqLyB0cnVlXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgUGFnZUNvbmZpZyhwcm9kdWN0SWQsICFpc0FjY2Vzc2libGVGb3JGcmVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVmXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBib29sXyh2YWx1ZSwgZGVmKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBsb3dlcmNhc2UgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyY2FzZSA9PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlcmNhc2UgPT0gJ3RydWUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0ganNvblxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZGlzY292ZXJQcm9kdWN0SWRfKGpzb24pIHtcbiAgICAvLyBNdXN0IGhhdmUgdHlwZSBgUHJvZHVjdGAuXG4gICAgaWYgKCF0aGlzLmNoZWNrVHlwZV8uY2hlY2tWYWx1ZShqc29uWydAdHlwZSddLCBbJ1Byb2R1Y3QnXSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHs/c3RyaW5nfSAqLyAodGhpcy5zaW5nbGVWYWx1ZV8oanNvbiwgJ3Byb2R1Y3RJRCcpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFPYmplY3R9IGpzb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7P0FycmF5fVxuICAgKi9cbiAgdmFsdWVBcnJheV8oanNvbiwgbmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0ganNvbltuYW1lXTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshT2JqZWN0fSBqc29uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICBzaW5nbGVWYWx1ZV8oanNvbiwgbmFtZSkge1xuICAgIGNvbnN0IHZhbHVlQXJyYXkgPSB0aGlzLnZhbHVlQXJyYXlfKGpzb24sIG5hbWUpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVBcnJheSAmJiB2YWx1ZUFycmF5WzBdO1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSAnJyA/IG51bGwgOiB2YWx1ZTtcbiAgfVxufVxuXG5jbGFzcyBNaWNyb2RhdGFQYXJzZXIge1xuICAvKipcbiAgICogQHBhcmFtIHshRG9jfSBkb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvYykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFEb2N9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuICAgIC8qKiBAcHJpdmF0ZSB7P2Jvb2xlYW59ICovXG4gICAgdGhpcy5hY2Nlc3NfID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5wcm9kdWN0SWRfID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IEBmdW5jdGlvbiAqL1xuICAgIHRoaXMuY2hlY2tUeXBlXyA9IG5ldyBUeXBlQ2hlY2tlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFsc2UgaWYgYWNjZXNzIGlzIHJlc3RyaWN0ZWQsIG90aGVyd2lzZSB0cnVlXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3QgQW4gZWxlbWVudCB0aGF0IGlzIGFuIGl0ZW0gb2YgdHlwZSBpbiBBTExPV0VEX1RZUEVTIGxpc3RcbiAgICogQHJldHVybiB7P2Jvb2xlYW59IGxvY2tlZCBhY2Nlc3NcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRpc2NvdmVyQWNjZXNzXyhyb290KSB7XG4gICAgY29uc3QgQUxSRUFEWV9TRUVOID0gJ2FscmVhZHlTZWVuRm9yQWNjZXNzSW5mbyc7XG4gICAgY29uc3Qgbm9kZUxpc3QgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaXRlbXByb3A9J2lzQWNjZXNzaWJsZUZvckZyZWUnXVwiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgbm9kZUxpc3RbaV07IGkrKykge1xuICAgICAgY29uc3QgZWxlbWVudCA9IG5vZGVMaXN0W2ldO1xuICAgICAgY29uc3QgY29udGVudCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgfHwgZWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzVmFsaWRFbGVtZW50XyhlbGVtZW50LCByb290LCBBTFJFQURZX1NFRU4pKSB7XG4gICAgICAgIGxldCBhY2Nlc3NGb3JGcmVlID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRlbnQudG9Mb3dlckNhc2UoKSA9PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY2Nlc3NGb3JGcmVlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZW50LnRvTG93ZXJDYXNlKCkgPT0gJ2ZhbHNlJykge1xuICAgICAgICAgIGFjY2Vzc0ZvckZyZWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjZXNzRm9yRnJlZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpZXMgaWYgYW4gZWxlbWVudCBpcyB2YWxpZCBiYXNlZCBvbiB0aGUgZm9sbG93aW5nXG4gICAqIC0gY2hpbGQgb2YgYW4gaXRlbSBvZiBvbmUgdGhlIHRoZSBBTExPV0VEX1RZUEVTXG4gICAqIC0gbm90IGEgY2hpbGQgb2YgYW4gaXRlbSBvZiBhbnkgb3RoZXIgdHlwZVxuICAgKiAtIG5vdCBzZWVuIGJlZm9yZSwgbWFya2VkIHVzaW5nIHRoZSBhbHJlYWR5U2VlbiB0YWdcbiAgICogQHBhcmFtIHs/RWxlbWVudH0gY3VycmVudCB0aGUgZWxlbWVudCB0byBiZSB2ZXJpZmllZFxuICAgKiBAcGFyYW0geyFFbGVtZW50fSByb290IHRoZSBwYXJlbnQgdG8gdHJhY2sgdXAgdG9cbiAgICogQHBhcmFtIHshc3RyaW5nfSBhbHJlYWR5U2VlbiB1c2VkIHRvIHRhZyBhbHJlYWR5IHZpc2l0ZWQgbm9kZXNcbiAgICogQHJldHVybiB7IWJvb2xlYW59IHZhbGlkIG5vZGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzVmFsaWRFbGVtZW50XyhjdXJyZW50LCByb290LCBhbHJlYWR5U2Vlbikge1xuICAgIGZvciAoXG4gICAgICBsZXQgbm9kZSA9IGN1cnJlbnQ7XG4gICAgICBub2RlICYmICFub2RlW2FscmVhZHlTZWVuXTtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgICApIHtcbiAgICAgIG5vZGVbYWxyZWFkeVNlZW5dID0gdHJ1ZTtcbiAgICAgIC8vIGRvY3VtZW50IG5vZGVzIGRvbid0IGhhdmUgaGFzQXR0cmlidXRlXG4gICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2l0ZW1zY29wZScpKSB7XG4gICAgICAgIC8qKns/c3RyaW5nfSAqL1xuICAgICAgICBjb25zdCB0eXBlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2l0ZW10eXBlJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrVHlwZV8uY2hlY2tTdHJpbmcodHlwZSwgQUxMT1dFRF9UWVBFUyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRhaW5zIHRoZSBwcm9kdWN0IElEIHRoYXQgbWVldHMgdGhlIHJlcXVpcmVtZW50c1xuICAgKiAtIGNoaWxkIG9mIGFuIGl0ZW0gb2Ygb25lIG9mIEFMTE9XRURfVFlQRVNcbiAgICogLSBOb3QgYSBjaGlsZCBvZiBhbiBpdGVtIG9mIHR5cGUgJ1NlY3Rpb24nXG4gICAqIC0gY2hpbGQgb2YgYW4gaXRlbSBvZiB0eXBlICdwcm9kdWN0SUQnXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3QgQW4gZWxlbWVudCB0aGF0IGlzIGFuIGl0ZW0gb2YgYW4gQUxMT1dFRF9UWVBFU1xuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBwcm9kdWN0IElELCBpZiBmb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGlzY292ZXJQcm9kdWN0SWRfKHJvb3QpIHtcbiAgICBjb25zdCBBTFJFQURZX1NFRU4gPSAnYWxyZWFkeVNlZW5Gb3JQcm9kdWN0SW5mbyc7XG4gICAgY29uc3Qgbm9kZUxpc3QgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpdGVtcHJvcD1cInByb2R1Y3RJRFwiXScpO1xuICAgIGZvciAobGV0IGkgPSAwOyBub2RlTGlzdFtpXTsgaSsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gbm9kZUxpc3RbaV07XG4gICAgICBjb25zdCBjb250ZW50ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSB8fCBlbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgY29uc3QgaXRlbSA9IGVsZW1lbnQuY2xvc2VzdCgnW2l0ZW10eXBlXVtpdGVtc2NvcGVdJyk7XG4gICAgICBjb25zdCB0eXBlID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2l0ZW10eXBlJyk7XG4gICAgICBpZiAodHlwZS5pbmRleE9mKCdodHRwOi8vc2NoZW1hLm9yZy9Qcm9kdWN0JykgPD0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1ZhbGlkRWxlbWVudF8oaXRlbS5wYXJlbnRFbGVtZW50LCByb290LCBBTFJFQURZX1NFRU4pKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIFBhZ2VDb25maWcgaWYgYXZhaWxhYmxlXG4gICAqIEByZXR1cm4gez9QYWdlQ29uZmlnfSBQYWdlQ29uZmlnIGZvdW5kIHNvIGZhclxuICAgKi9cbiAgZ2V0UGFnZUNvbmZpZ18oKSB7XG4gICAgbGV0IGxvY2tlZCA9IG51bGw7XG4gICAgaWYgKHRoaXMuYWNjZXNzXyAhPSBudWxsKSB7XG4gICAgICBsb2NrZWQgPSAhdGhpcy5hY2Nlc3NfO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kb2NfLmlzUmVhZHkoKSkge1xuICAgICAgLy8gRGVmYXVsdCB0byB1bmxvY2tlZFxuICAgICAgbG9ja2VkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb2R1Y3RJZF8gIT0gbnVsbCAmJiBsb2NrZWQgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBQYWdlQ29uZmlnKHRoaXMucHJvZHVjdElkXywgbG9ja2VkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgcGFnZSBjb25maWcgZnJvbSBNaWNyb2RhdGEgaW4gdGhlIERPTVxuICAgKiBAcmV0dXJuIHs/UGFnZUNvbmZpZ30gUGFnZUNvbmZpZyBmb3VuZFxuICAgKi9cbiAgdHJ5RXh0cmFjdENvbmZpZ18oKSB7XG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0UGFnZUNvbmZpZ18oKTtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIC8vIEdyYWIgYWxsIHRoZSBub2RlcyB3aXRoIGFuIGl0ZW10eXBlIGFuZCBmaWx0ZXIgZm9yIG91ciBhbGxvd2VkIHR5cGVzXG4gICAgY29uc3Qgbm9kZUxpc3QgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcbiAgICAgIC5jYWxsKHRoaXMuZG9jXy5nZXRSb290Tm9kZSgpLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpdGVtc2NvcGVdW2l0ZW10eXBlXScpKVxuICAgICAgLmZpbHRlcihub2RlID0+XG4gICAgICAgIHRoaXMuY2hlY2tUeXBlXy5jaGVja1N0cmluZyhcbiAgICAgICAgICBub2RlLmdldEF0dHJpYnV0ZSgnaXRlbXR5cGUnKSxcbiAgICAgICAgICBBTExPV0VEX1RZUEVTXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgbm9kZUxpc3RbaV0gJiYgY29uZmlnID09IG51bGw7IGkrKykge1xuICAgICAgY29uc3QgZWxlbWVudCA9IG5vZGVMaXN0W2ldO1xuICAgICAgaWYgKHRoaXMuYWNjZXNzXyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuYWNjZXNzXyA9IHRoaXMuZGlzY292ZXJBY2Nlc3NfKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnByb2R1Y3RJZF8pIHtcbiAgICAgICAgdGhpcy5wcm9kdWN0SWRfID0gdGhpcy5kaXNjb3ZlclByb2R1Y3RJZF8oZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBjb25maWcgPSB0aGlzLmdldFBhZ2VDb25maWdfKCk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P1BhZ2VDb25maWd9XG4gICAqL1xuICBjaGVjaygpIHtcbiAgICBpZiAoIXRoaXMuZG9jXy5nZXRCb2R5KCkpIHtcbiAgICAgIC8vIFdhaXQgdW50aWwgdGhlIHdob2xlIGA8aGVhZD5gIGlzIHBhcnNlZC5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cnlFeHRyYWN0Q29uZmlnXygpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHshTm9kZX0gcm9vdE5vZGVcbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cm9sRmxhZyhyb290Tm9kZSkge1xuICAvLyBMb29rIGZvciB0aGUgZmxhZyBpbiBgbWV0YWAuXG4gIGNvbnN0IGZsYWcgPSBnZXRNZXRhVGFnKHJvb3ROb2RlLCBDT05UUk9MX0ZMQUcpO1xuICBpZiAoZmxhZykge1xuICAgIHJldHVybiBmbGFnO1xuICB9XG4gIC8vIExvb2sgZm9yIHRoZSBmbGFnIGluIGBzY3JpcHRgLlxuICBjb25zdCBlbCA9IHJvb3ROb2RlLnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFske0NPTlRST0xfRkxBR31dYCk7XG4gIGlmIChlbCkge1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoQ09OVFJPTF9GTEFHKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBmcm9tIGNvbnRlbnQgYXR0cmlidXRlIG9mIGEgbWV0YSB0YWcgd2l0aCBnaXZlbiBuYW1lLlxuICpcbiAqIElmIG11bHRpcGxlIHRhZ3MgYXJlIGZvdW5kLCB0aGUgZmlyc3QgdmFsdWUgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHshTm9kZX0gcm9vdE5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSB0YWcgbmFtZSB0byBsb29rIGZvci5cbiAqIEByZXR1cm4gez9zdHJpbmd9IGF0dHJpYnV0ZSB2YWx1ZSBvciBlbXB0eSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRNZXRhVGFnKHJvb3ROb2RlLCBuYW1lKSB7XG4gIGNvbnN0IGVsID0gcm9vdE5vZGUucXVlcnlTZWxlY3RvcihgbWV0YVtuYW1lPVwiJHtuYW1lfVwiXWApO1xuICBpZiAoZWwpIHtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCdjb250ZW50Jyk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKiBAcGFja2FnZSBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RG9jQ2xhc3NGb3JUZXN0aW5nKCkge1xuICByZXR1cm4gRG9jO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2VDb25maWcge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RPclB1YmxpY2F0aW9uSWRcbiAgICogQHBhcmFtIHtib29sZWFufSBsb2NrZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb2R1Y3RPclB1YmxpY2F0aW9uSWQsIGxvY2tlZCkge1xuICAgIGxldCBwdWJsaWNhdGlvbklkLCBwcm9kdWN0SWQsIGxhYmVsO1xuICAgIGNvbnN0IGRpdiA9IHByb2R1Y3RPclB1YmxpY2F0aW9uSWQuaW5kZXhPZignOicpO1xuICAgIGlmIChkaXYgIT0gLTEpIHtcbiAgICAgIC8vIFRoZSBhcmd1bWVudCBpcyBhIHByb2R1Y3QgaWQuXG4gICAgICBwcm9kdWN0SWQgPSBwcm9kdWN0T3JQdWJsaWNhdGlvbklkO1xuICAgICAgcHVibGljYXRpb25JZCA9IHByb2R1Y3RJZC5zdWJzdHJpbmcoMCwgZGl2KTtcbiAgICAgIGxhYmVsID0gcHJvZHVjdElkLnN1YnN0cmluZyhkaXYgKyAxKTtcbiAgICAgIGlmIChsYWJlbCA9PSAnKicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aWxkY2FyZCBkaXNhbGxvd2VkJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBhcmd1bWVudCBpcyBhIHB1YmxpY2F0aW9uIGlkLlxuICAgICAgcHVibGljYXRpb25JZCA9IHByb2R1Y3RPclB1YmxpY2F0aW9uSWQ7XG4gICAgICBwcm9kdWN0SWQgPSBudWxsO1xuICAgICAgbGFiZWwgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnB1YmxpY2F0aW9uSWRfID0gcHVibGljYXRpb25JZDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHs/c3RyaW5nfSAqL1xuICAgIHRoaXMucHJvZHVjdElkXyA9IHByb2R1Y3RJZDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHs/c3RyaW5nfSAqL1xuICAgIHRoaXMubGFiZWxfID0gbGFiZWw7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmxvY2tlZF8gPSBsb2NrZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0UHVibGljYXRpb25JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wdWJsaWNhdGlvbklkXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZ2V0UHJvZHVjdElkKCkge1xuICAgIHJldHVybiB0aGlzLnByb2R1Y3RJZF87XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldExhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmxhYmVsXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNMb2NrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9ja2VkXztcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgTG9hZHMgYWxsIHBvbHlmaWxscyBuZWVkZWQgYnkgdGhlIHByb2plY3QuXG4gKiBUaGlzIGxpc3Qgc2hvdWxkIG5vdCBnZXQgbG9uZ2VyIHdpdGhvdXQgYSB2ZXJ5IGdvb2QgcmVhc29uLlxuICovXG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbEFycmF5SW5jbHVkZXN9IGZyb20gJy4vcG9seWZpbGxzL2FycmF5LWluY2x1ZGVzJztcbmltcG9ydCB7aW5zdGFsbCBhcyBpbnN0YWxsRE9NVG9rZW5MaXN0VG9nZ2xlfSBmcm9tICcuL3BvbHlmaWxscy9kb210b2tlbmxpc3QtdG9nZ2xlJztcbmltcG9ydCB7aW5zdGFsbCBhcyBpbnN0YWxsRG9jQ29udGFpbnN9IGZyb20gJy4vcG9seWZpbGxzL2RvY3VtZW50LWNvbnRhaW5zJztcbmltcG9ydCB7aW5zdGFsbCBhcyBpbnN0YWxsTWF0aFNpZ259IGZyb20gJy4vcG9seWZpbGxzL21hdGgtc2lnbic7XG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbE9iamVjdEFzc2lnbn0gZnJvbSAnLi9wb2x5ZmlsbHMvb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbE9iamVjdFZhbHVlc30gZnJvbSAnLi9wb2x5ZmlsbHMvb2JqZWN0LXZhbHVlcyc7XG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbFByb21pc2V9IGZyb20gJy4vcG9seWZpbGxzL3Byb21pc2UnO1xuXG5pbnN0YWxsRE9NVG9rZW5MaXN0VG9nZ2xlKHNlbGYpO1xuaW5zdGFsbE1hdGhTaWduKHNlbGYpO1xuaW5zdGFsbE9iamVjdEFzc2lnbihzZWxmKTtcbmluc3RhbGxPYmplY3RWYWx1ZXMoc2VsZik7XG5pbnN0YWxsUHJvbWlzZShzZWxmKTtcbmluc3RhbGxEb2NDb250YWlucyhzZWxmKTtcbmluc3RhbGxBcnJheUluY2x1ZGVzKHNlbGYpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCBpcyBpbiB0aGUgYXJyYXkgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IGZyb21JbmRleFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEB0aGlzIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gaW5jbHVkZXModmFsdWUsIGZyb21JbmRleCA9IDApIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGg7XG4gIGxldCBpID0gZnJvbUluZGV4ID49IDAgPyBmcm9tSW5kZXggOiBNYXRoLm1heChsZW4gKyBmcm9tSW5kZXgsIDApO1xuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3Qgb3RoZXIgPSB0aGlzW2ldO1xuICAgIC8vIElmIHZhbHVlIGhhcyBiZWVuIGZvdW5kIE9SICh2YWx1ZSBpcyBOYU4gQU5EIG90aGVyIGlzIE5hTilcbiAgICAvKmVzbGludCBcIm5vLXNlbGYtY29tcGFyZVwiOiAwKi9cbiAgICBpZiAob3RoZXIgPT09IHZhbHVlIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBBcnJheS5jb250YWlucyBwb2x5ZmlsbCBpZiBpdCBkb2VzIG5vdCBleGlzdC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsKHdpbikge1xuICBpZiAoIXdpbi5BcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgICB3aW4uT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2luY2x1ZGVzJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBpbmNsdWRlcyxcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBgZG9jdW1lbnQuY29udGFpbnMoKWAgbWV0aG9kLiBOb3RpY2UgdGhhdCBhY2NvcmRpbmcgdG8gc3BlY1xuICogYGRvY3VtZW50LmNvbnRhaW5zYCBpcyBpbmNsdXNpb25hcnkuXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvY29udGFpbnNcbiAqIEBwYXJhbSB7P05vZGV9IG5vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAdGhpcyB7Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZG9jdW1lbnRDb250YWluc1BvbHlmaWxsKG5vZGUpIHtcbiAgLy8gUGVyIHNwZWMsIFwiY29udGFpbnNcIiBtZXRob2QgaXMgaW5jbHVzaW9uYXJ5XG4gIC8vIGkuZS4gYG5vZGUuY29udGFpbnMobm9kZSkgPT0gdHJ1ZWAuIEhvd2V2ZXIsIHdlIHN0aWxsIG5lZWQgdG8gdGVzdFxuICAvLyBlcXVhbGl0eSB0byB0aGUgZG9jdW1lbnQgaXRzZWxmLlxuICByZXR1cm4gbm9kZSA9PSB0aGlzIHx8IHRoaXMuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKG5vZGUpO1xufVxuXG4vKipcbiAqIFBvbHlmaWxscyBgSFRNTERvY3VtZW50LmNvbnRhaW5zYCBBUEkuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCh3aW4pIHtcbiAgaWYgKCF3aW4uSFRNTERvY3VtZW50LnByb3RvdHlwZS5jb250YWlucykge1xuICAgIHdpbi5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luLkhUTUxEb2N1bWVudC5wcm90b3R5cGUsICdjb250YWlucycsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogZG9jdW1lbnRDb250YWluc1BvbHlmaWxsLFxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIGBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZSh0b2tlbiwgZm9yY2UpYCBtZXRob2QuXG4gKiBUaGlzIGlzIHNwZWNpYWxseSBpbXBvcnRhbnQgYmVjYXVzZSBJRSBkb2VzIG5vdCBzdXBwb3J0IGBmb3JjZWAgYXR0cmlidXRlLlxuICogU2VlIGh0dHBzOi8vZ29vLmdsL2hnS05ZWSBmb3IgZGV0YWlscy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlblxuICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VcbiAqIEB0aGlzIHtET01Ub2tlbkxpc3R9XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBkb21Ub2tlbkxpc3RUb2dnbGVQb2x5ZmlsbCh0b2tlbiwgZm9yY2UpIHtcbiAgY29uc3QgcmVtb3ZlID0gZm9yY2UgPT09IHVuZGVmaW5lZCA/IHRoaXMuY29udGFpbnModG9rZW4pIDogIWZvcmNlO1xuICBpZiAocmVtb3ZlKSB7XG4gICAgdGhpcy5yZW1vdmUodG9rZW4pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFkZCh0b2tlbik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQb2x5ZmlsbHMgYERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlYCBBUEkgaW4gSUUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCh3aW4pIHtcbiAgaWYgKGlzSWUod2luKSAmJiB3aW4uRE9NVG9rZW5MaXN0KSB7XG4gICAgd2luLk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW4uRE9NVG9rZW5MaXN0LnByb3RvdHlwZSwgJ3RvZ2dsZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogZG9tVG9rZW5MaXN0VG9nZ2xlUG9seWZpbGwsXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgYSBJRSBicm93c2VyLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzSWUod2luKSB7XG4gIHJldHVybiAvVHJpZGVudHxNU0lFfElFTW9iaWxlL2kudGVzdCh3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUGFyc2VzIHRoZSBudW1iZXIgeCBhbmQgcmV0dXJucyBpdHMgc2lnbi4gRm9yIHBvc2l0aXZlIHggcmV0dXJucyAxLCBmb3JcbiAqIG5lZ2F0aXZlLCAtMS4gRm9yIDAgYW5kIC0wLCByZXR1cm5zIDAgYW5kIC0wIHJlc3BlY3RpdmVseS4gRm9yIGFueSBudW1iZXJcbiAqIHRoYXQgcGFyc2VzIHRvIE5hTiwgcmV0dXJucyBOYU4uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgeCA9IE51bWJlcih4KTtcblxuICAvLyBJZiB4IGlzIDAsIC0wLCBvciBOYU4sIHJldHVybiBpdC5cbiAgaWYgKCF4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cblxuICByZXR1cm4geCA+IDAgPyAxIDogLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgTWF0aC5zaWduIHBvbHlmaWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmICghd2luLk1hdGguc2lnbikge1xuICAgIHdpbi5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luLk1hdGgsICdzaWduJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBzaWduLFxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDb3BpZXMgdmFsdWVzIG9mIGFsbCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0aWVzIGZyb20gb25lIG9yIG1vcmUgc291cmNlXG4gKiBvYmplY3RzIChwcm92aWRlZCBhcyBleHRlbmRlZCBhcmd1bWVudHMgdG8gdGhlIGZ1bmN0aW9uKSB0byBhIHRhcmdldCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHshT2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSB2YXJfYXJnc1xuICogQHJldHVybnMgeyFPYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCB2YXJfYXJncykge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIGNvbnN0IG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgT2JqZWN0LmFzc2lnbiBwb2x5ZmlsbCBpZiBpdCBkb2VzIG5vdCBleGlzdC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsKHdpbikge1xuICBpZiAoIXdpbi5PYmplY3QuYXNzaWduKSB7XG4gICAgd2luLk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW4uT2JqZWN0LCAnYXNzaWduJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBhc3NpZ24sXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEltcGxlbWVudHMgYE9iamVjdC52YWx1ZXNgIEFQSS5cbiAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfb2JqZWN0cy9PYmplY3QvdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7IUFycmF5PCo+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzKHRhcmdldCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICBmb3IgKGNvbnN0IGtleSBpbiB0YXJnZXQpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKHRhcmdldFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBPYmplY3QudmFsdWVzIHBvbHlmaWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmICghd2luLk9iamVjdC52YWx1ZXMpIHtcbiAgICB3aW4uT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbi5PYmplY3QsICd2YWx1ZXMnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHZhbHVlcyxcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ3Byb21pc2UtcGpzL3Byb21pc2UnO1xuXG4vKipcbiAqIFNldHMgdGhlIFByb21pc2UgcG9seWZpbGwgaWYgaXQgZG9lcyBub3QgZXhpc3QuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCh3aW4pIHtcbiAgaWYgKCF3aW4uUHJvbWlzZSkge1xuICAgIHdpbi5Qcm9taXNlID0gLyoqIEB0eXBlIHs/fSAqLyAoUHJvbWlzZSk7XG4gICAgLy8gSW4gYmFiZWwgdGhlICogZXhwb3J0IGlzIGFuIE9iamVjdCB3aXRoIGEgZGVmYXVsdCBwcm9wZXJ0eS5cbiAgICAvLyBJbiBjbG9zdXJlIGNvbXBpbGVyIGl0IGlzIHRoZSBQcm9taXNlIGZ1bmN0aW9uIGl0c2VsZi5cbiAgICBpZiAoUHJvbWlzZS5kZWZhdWx0KSB7XG4gICAgICB3aW4uUHJvbWlzZSA9IFByb21pc2UuZGVmYXVsdDtcbiAgICB9XG4gICAgLy8gV2UgY29weSB0aGUgaW5kaXZpZHVhbCBzdGF0aWMgbWV0aG9kcywgYmVjYXVzZSBjbG9zdXJlXG4gICAgLy8gY29tcGlsZXIgZmxhdHRlbnMgdGhlIHBvbHlmaWxsIG5hbWVzcGFjZS5cbiAgICB3aW4uUHJvbWlzZS5yZXNvbHZlID0gUHJvbWlzZS5yZXNvbHZlO1xuICAgIHdpbi5Qcm9taXNlLnJlamVjdCA9IFByb21pc2UucmVqZWN0O1xuICAgIHdpbi5Qcm9taXNlLmFsbCA9IFByb21pc2UuYWxsO1xuICAgIHdpbi5Qcm9taXNlLnJhY2UgPSBQcm9taXNlLnJhY2U7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5jbGFzcyBNZXNzYWdlIHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGxhYmVsKCkge31cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5fVxuICAgKi9cbiAgdG9BcnJheSgpIHt9XG59XG5cbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xuY29uc3QgQW5hbHl0aWNzRXZlbnQgPSB7XG4gIFVOS05PV046IDAsXG4gIElNUFJFU1NJT05fUEFZV0FMTDogMSxcbiAgSU1QUkVTU0lPTl9BRDogMixcbiAgSU1QUkVTU0lPTl9PRkZFUlM6IDMsXG4gIElNUFJFU1NJT05fU1VCU0NSSUJFX0JVVFRPTjogNCxcbiAgSU1QUkVTU0lPTl9TTUFSVEJPWDogNSxcbiAgSU1QUkVTU0lPTl9TV0dfQlVUVE9OOiA2LFxuICBJTVBSRVNTSU9OX0NMSUNLX1RPX1NIT1dfT0ZGRVJTOiA3LFxuICBJTVBSRVNTSU9OX0NMSUNLX1RPX1NIT1dfT0ZGRVJTX09SX0FMUkVBRFlfU1VCU0NSSUJFRDogOCxcbiAgSU1QUkVTU0lPTl9TVUJTQ1JJUFRJT05fQ09NUExFVEU6IDksXG4gIElNUFJFU1NJT05fQUNDT1VOVF9DSEFOR0VEOiAxMCxcbiAgSU1QUkVTU0lPTl9QQUdFX0xPQUQ6IDExLFxuICBJTVBSRVNTSU9OX0xJTks6IDEyLFxuICBJTVBSRVNTSU9OX1NBVkVfU1VCU0NSX1RPX0dPT0dMRTogMTMsXG4gIElNUFJFU1NJT05fR09PR0xFX1VQREFURUQ6IDE0LFxuICBJTVBSRVNTSU9OX1NIT1dfT0ZGRVJTX1NNQVJUQk9YOiAxNSxcbiAgSU1QUkVTU0lPTl9TSE9XX09GRkVSU19TV0dfQlVUVE9OOiAxNixcbiAgSU1QUkVTU0lPTl9TRUxFQ1RfT0ZGRVJfU01BUlRCT1g6IDE3LFxuICBJTVBSRVNTSU9OX1NFTEVDVF9PRkZFUl9TV0dfQlVUVE9OOiAxOCxcbiAgQUNUSU9OX1NVQlNDUklCRTogMTAwMCxcbiAgQUNUSU9OX1BBWU1FTlRfQ09NUExFVEU6IDEwMDEsXG4gIEFDVElPTl9BQ0NPVU5UX0NSRUFURUQ6IDEwMDIsXG4gIEFDVElPTl9BQ0NPVU5UX0FDS05PV0xFREdFRDogMTAwMyxcbiAgQUNUSU9OX1NVQlNDUklQVElPTlNfTEFORElOR19QQUdFOiAxMDA0LFxuICBBQ1RJT05fUEFZTUVOVF9GTE9XX1NUQVJURUQ6IDEwMDUsXG4gIEFDVElPTl9PRkZFUl9TRUxFQ1RFRDogMTAwNixcbiAgQUNUSU9OX1NXR19CVVRUT05fQ0xJQ0s6IDEwMDcsXG4gIEFDVElPTl9WSUVXX09GRkVSUzogMTAwOCxcbiAgQUNUSU9OX0FMUkVBRFlfU1VCU0NSSUJFRDogMTAwOSxcbiAgQUNUSU9OX05FV19ERUZFUlJFRF9BQ0NPVU5UOiAxMDEwLFxuICBBQ1RJT05fTElOS19DT05USU5VRTogMTAxMSxcbiAgQUNUSU9OX0xJTktfQ0FOQ0VMOiAxMDEyLFxuICBBQ1RJT05fR09PR0xFX1VQREFURURfQ0xPU0U6IDEwMTMsXG4gIEFDVElPTl9VU0VSX0NBTkNFTEVEX1BBWUZMT1c6IDEwMTQsXG4gIEFDVElPTl9TQVZFX1NVQlNDUl9UT19HT09HTEVfQ09OVElOVUU6IDEwMTUsXG4gIEFDVElPTl9TQVZFX1NVQlNDUl9UT19HT09HTEVfQ0FOQ0VMOiAxMDE2LFxuICBBQ1RJT05fU1dHX0JVVFRPTl9TSE9XX09GRkVSU19DTElDSzogMTAxNyxcbiAgQUNUSU9OX1NXR19CVVRUT05fU0VMRUNUX09GRkVSX0NMSUNLOiAxMDE4LFxuICBFVkVOVF9QQVlNRU5UX0ZBSUxFRDogMjAwMCxcbiAgRVZFTlRfQ1VTVE9NOiAzMDAwLFxuICBFVkVOVF9DT05GSVJNX1RYX0lEOiAzMDAxLFxuICBFVkVOVF9DSEFOR0VEX1RYX0lEOiAzMDAyLFxuICBFVkVOVF9HUEFZX05PX1RYX0lEOiAzMDAzLFxuICBFVkVOVF9HUEFZX0NBTk5PVF9DT05GSVJNX1RYX0lEOiAzMDA0LFxuICBFVkVOVF9HT09HTEVfVVBEQVRFRDogMzAwNSxcbiAgRVZFTlRfU1VCU0NSSVBUSU9OX1NUQVRFOiA0MDAwLFxufTtcbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xuY29uc3QgRXZlbnRPcmlnaW5hdG9yID0ge1xuICBVTktOT1dOX0NMSUVOVDogMCxcbiAgU1dHX0NMSUVOVDogMSxcbiAgQU1QX0NMSUVOVDogMixcbiAgUFJPUEVOU0lUWV9DTElFTlQ6IDMsXG4gIFNXR19TRVJWRVI6IDQsXG4gIFBVQkxJU0hFUl9DTElFTlQ6IDUsXG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtNZXNzYWdlfVxuICovXG5jbGFzcyBBY2NvdW50Q3JlYXRpb25SZXF1ZXN0IHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMuY29tcGxldGVfID0gKGRhdGFbMV0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/Ym9vbGVhbn1cbiAgICovXG4gIGdldENvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBsZXRlXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBzZXRDb21wbGV0ZSh2YWx1ZSkge1xuICAgIHRoaXMuY29tcGxldGVfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMubGFiZWwoKSwgIC8vIG1lc3NhZ2UgbGFiZWxcbiAgICAgIHRoaXMuY29tcGxldGVfLCAgLy8gZmllbGQgMSAtIGNvbXBsZXRlXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdBY2NvdW50Q3JlYXRpb25SZXF1ZXN0JztcbiAgfVxufVxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtNZXNzYWdlfVxuICovXG5jbGFzcyBBbHJlYWR5U3Vic2NyaWJlZFJlc3BvbnNlIHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMuc3Vic2NyaWJlck9yTWVtYmVyXyA9IChkYXRhWzFdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMV07XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMubGlua1JlcXVlc3RlZF8gPSAoZGF0YVsyXSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9ib29sZWFufVxuICAgKi9cbiAgZ2V0U3Vic2NyaWJlck9yTWVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLnN1YnNjcmliZXJPck1lbWJlcl87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgc2V0U3Vic2NyaWJlck9yTWVtYmVyKHZhbHVlKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVyT3JNZW1iZXJfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P2Jvb2xlYW59XG4gICAqL1xuICBnZXRMaW5rUmVxdWVzdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmxpbmtSZXF1ZXN0ZWRfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHNldExpbmtSZXF1ZXN0ZWQodmFsdWUpIHtcbiAgICB0aGlzLmxpbmtSZXF1ZXN0ZWRfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMubGFiZWwoKSwgIC8vIG1lc3NhZ2UgbGFiZWxcbiAgICAgIHRoaXMuc3Vic2NyaWJlck9yTWVtYmVyXywgIC8vIGZpZWxkIDEgLSBzdWJzY3JpYmVyX29yX21lbWJlclxuICAgICAgdGhpcy5saW5rUmVxdWVzdGVkXywgIC8vIGZpZWxkIDIgLSBsaW5rX3JlcXVlc3RlZFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnQWxyZWFkeVN1YnNjcmliZWRSZXNwb25zZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7TWVzc2FnZX1cbiAqL1xuY2xhc3MgQW5hbHl0aWNzQ29udGV4dCB7XG4gLyoqXG4gICogQHBhcmFtIHshQXJyYXk9fSBkYXRhXG4gICovXG4gIGNvbnN0cnVjdG9yKGRhdGEgPSBbXSkge1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMuZW1iZWRkZXJPcmlnaW5fID0gKGRhdGFbMV0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsxXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLnRyYW5zYWN0aW9uSWRfID0gKGRhdGFbMl0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsyXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLnJlZmVycmluZ09yaWdpbl8gPSAoZGF0YVszXSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzNdO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMudXRtU291cmNlXyA9IChkYXRhWzRdID09IG51bGwpID8gbnVsbCA6IGRhdGFbNF07XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy51dG1DYW1wYWlnbl8gPSAoZGF0YVs1XSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzVdO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMudXRtTWVkaXVtXyA9IChkYXRhWzZdID09IG51bGwpID8gbnVsbCA6IGRhdGFbNl07XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5za3VfID0gKGRhdGFbN10gPT0gbnVsbCkgPyBudWxsIDogZGF0YVs3XTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Jvb2xlYW59ICovXG4gICAgdGhpcy5yZWFkeVRvUGF5XyA9IChkYXRhWzhdID09IG51bGwpID8gbnVsbCA6IGRhdGFbOF07XG5cbiAgICAvKiogQHByaXZhdGUgeyFBcnJheTxzdHJpbmc+fSAqL1xuICAgIHRoaXMubGFiZWxfID0gZGF0YVs5XSB8fCBbXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLmNsaWVudFZlcnNpb25fID0gKGRhdGFbMTBdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMTBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRFbWJlZGRlck9yaWdpbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbWJlZGRlck9yaWdpbl87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXRFbWJlZGRlck9yaWdpbih2YWx1ZSkge1xuICAgIHRoaXMuZW1iZWRkZXJPcmlnaW5fID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb25JZF87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXRUcmFuc2FjdGlvbklkKHZhbHVlKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbklkXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRSZWZlcnJpbmdPcmlnaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmZXJyaW5nT3JpZ2luXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldFJlZmVycmluZ09yaWdpbih2YWx1ZSkge1xuICAgIHRoaXMucmVmZXJyaW5nT3JpZ2luXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRVdG1Tb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudXRtU291cmNlXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldFV0bVNvdXJjZSh2YWx1ZSkge1xuICAgIHRoaXMudXRtU291cmNlXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRVdG1DYW1wYWlnbigpIHtcbiAgICByZXR1cm4gdGhpcy51dG1DYW1wYWlnbl87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXRVdG1DYW1wYWlnbih2YWx1ZSkge1xuICAgIHRoaXMudXRtQ2FtcGFpZ25fID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldFV0bU1lZGl1bSgpIHtcbiAgICByZXR1cm4gdGhpcy51dG1NZWRpdW1fO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0VXRtTWVkaXVtKHZhbHVlKSB7XG4gICAgdGhpcy51dG1NZWRpdW1fID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldFNrdSgpIHtcbiAgICByZXR1cm4gdGhpcy5za3VfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0U2t1KHZhbHVlKSB7XG4gICAgdGhpcy5za3VfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P2Jvb2xlYW59XG4gICAqL1xuICBnZXRSZWFkeVRvUGF5KCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5VG9QYXlfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHNldFJlYWR5VG9QYXkodmFsdWUpIHtcbiAgICB0aGlzLnJlYWR5VG9QYXlfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gICAqL1xuICBnZXRMYWJlbExpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gICAqL1xuICBzZXRMYWJlbExpc3QodmFsdWUpIHtcbiAgICB0aGlzLmxhYmVsXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRDbGllbnRWZXJzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudFZlcnNpb25fO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0Q2xpZW50VmVyc2lvbih2YWx1ZSkge1xuICAgIHRoaXMuY2xpZW50VmVyc2lvbl8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXl9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5sYWJlbCgpLCAgLy8gbWVzc2FnZSBsYWJlbFxuICAgICAgdGhpcy5lbWJlZGRlck9yaWdpbl8sICAvLyBmaWVsZCAxIC0gZW1iZWRkZXJfb3JpZ2luXG4gICAgICB0aGlzLnRyYW5zYWN0aW9uSWRfLCAgLy8gZmllbGQgMiAtIHRyYW5zYWN0aW9uX2lkXG4gICAgICB0aGlzLnJlZmVycmluZ09yaWdpbl8sICAvLyBmaWVsZCAzIC0gcmVmZXJyaW5nX29yaWdpblxuICAgICAgdGhpcy51dG1Tb3VyY2VfLCAgLy8gZmllbGQgNCAtIHV0bV9zb3VyY2VcbiAgICAgIHRoaXMudXRtQ2FtcGFpZ25fLCAgLy8gZmllbGQgNSAtIHV0bV9jYW1wYWlnblxuICAgICAgdGhpcy51dG1NZWRpdW1fLCAgLy8gZmllbGQgNiAtIHV0bV9tZWRpdW1cbiAgICAgIHRoaXMuc2t1XywgIC8vIGZpZWxkIDcgLSBza3VcbiAgICAgIHRoaXMucmVhZHlUb1BheV8sICAvLyBmaWVsZCA4IC0gcmVhZHlfdG9fcGF5XG4gICAgICB0aGlzLmxhYmVsXywgIC8vIGZpZWxkIDkgLSBsYWJlbFxuICAgICAgdGhpcy5jbGllbnRWZXJzaW9uXywgIC8vIGZpZWxkIDEwIC0gY2xpZW50X3ZlcnNpb25cbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ0FuYWx5dGljc0NvbnRleHQnO1xuICB9XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge01lc3NhZ2V9XG4gKi9cbmNsYXNzIEFuYWx5dGljc0V2ZW50TWV0YSB7XG4gLyoqXG4gICogQHBhcmFtIHshQXJyYXk9fSBkYXRhXG4gICovXG4gIGNvbnN0cnVjdG9yKGRhdGEgPSBbXSkge1xuXG4gICAgLyoqIEBwcml2YXRlIHs/RXZlbnRPcmlnaW5hdG9yfSAqL1xuICAgIHRoaXMuZXZlbnRPcmlnaW5hdG9yXyA9IChkYXRhWzFdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMV07XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMuaXNGcm9tVXNlckFjdGlvbl8gPSAoZGF0YVsyXSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9FdmVudE9yaWdpbmF0b3J9XG4gICAqL1xuICBnZXRFdmVudE9yaWdpbmF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRPcmlnaW5hdG9yXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFdmVudE9yaWdpbmF0b3J9IHZhbHVlXG4gICAqL1xuICBzZXRFdmVudE9yaWdpbmF0b3IodmFsdWUpIHtcbiAgICB0aGlzLmV2ZW50T3JpZ2luYXRvcl8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/Ym9vbGVhbn1cbiAgICovXG4gIGdldElzRnJvbVVzZXJBY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNGcm9tVXNlckFjdGlvbl87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgc2V0SXNGcm9tVXNlckFjdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuaXNGcm9tVXNlckFjdGlvbl8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXl9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5sYWJlbCgpLCAgLy8gbWVzc2FnZSBsYWJlbFxuICAgICAgdGhpcy5ldmVudE9yaWdpbmF0b3JfLCAgLy8gZmllbGQgMSAtIGV2ZW50X29yaWdpbmF0b3JcbiAgICAgIHRoaXMuaXNGcm9tVXNlckFjdGlvbl8sICAvLyBmaWVsZCAyIC0gaXNfZnJvbV91c2VyX2FjdGlvblxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnQW5hbHl0aWNzRXZlbnRNZXRhJztcbiAgfVxufVxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtNZXNzYWdlfVxuICovXG5jbGFzcyBBbmFseXRpY3NSZXF1ZXN0IHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9BbmFseXRpY3NDb250ZXh0fSAqL1xuICAgIHRoaXMuY29udGV4dF8gPSAoZGF0YVsxXSA9PSBudWxsIHx8IGRhdGFbMV0gPT0gdW5kZWZpbmVkKSA/IG51bGwgOiBuZXdcbiAgICAgICAgQW5hbHl0aWNzQ29udGV4dChkYXRhWzFdKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0FuYWx5dGljc0V2ZW50fSAqL1xuICAgIHRoaXMuZXZlbnRfID0gKGRhdGFbMl0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsyXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0FuYWx5dGljc0V2ZW50TWV0YX0gKi9cbiAgICB0aGlzLm1ldGFfID0gKGRhdGFbM10gPT0gbnVsbCB8fCBkYXRhWzNdID09IHVuZGVmaW5lZCkgPyBudWxsIDogbmV3XG4gICAgICAgIEFuYWx5dGljc0V2ZW50TWV0YShkYXRhWzNdKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0V2ZW50UGFyYW1zfSAqL1xuICAgIHRoaXMucGFyYW1zXyA9IChkYXRhWzRdID09IG51bGwgfHwgZGF0YVs0XSA9PSB1bmRlZmluZWQpID8gbnVsbCA6IG5ld1xuICAgICAgICBFdmVudFBhcmFtcyhkYXRhWzRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/QW5hbHl0aWNzQ29udGV4dH1cbiAgICovXG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dF87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQW5hbHl0aWNzQ29udGV4dH0gdmFsdWVcbiAgICovXG4gIHNldENvbnRleHQodmFsdWUpIHtcbiAgICB0aGlzLmNvbnRleHRfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P0FuYWx5dGljc0V2ZW50fVxuICAgKi9cbiAgZ2V0RXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFuYWx5dGljc0V2ZW50fSB2YWx1ZVxuICAgKi9cbiAgc2V0RXZlbnQodmFsdWUpIHtcbiAgICB0aGlzLmV2ZW50XyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9BbmFseXRpY3NFdmVudE1ldGF9XG4gICAqL1xuICBnZXRNZXRhKCkge1xuICAgIHJldHVybiB0aGlzLm1ldGFfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFuYWx5dGljc0V2ZW50TWV0YX0gdmFsdWVcbiAgICovXG4gIHNldE1ldGEodmFsdWUpIHtcbiAgICB0aGlzLm1ldGFfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P0V2ZW50UGFyYW1zfVxuICAgKi9cbiAgZ2V0UGFyYW1zKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtc187XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRXZlbnRQYXJhbXN9IHZhbHVlXG4gICAqL1xuICBzZXRQYXJhbXModmFsdWUpIHtcbiAgICB0aGlzLnBhcmFtc18gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXl9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5sYWJlbCgpLCAgLy8gbWVzc2FnZSBsYWJlbFxuICAgICAgdGhpcy5jb250ZXh0XyA/IHRoaXMuY29udGV4dF8udG9BcnJheSgpIDogW10sIC8vIGZpZWxkIDEgLSBjb250ZXh0XG4gICAgICB0aGlzLmV2ZW50XywgIC8vIGZpZWxkIDIgLSBldmVudFxuICAgICAgdGhpcy5tZXRhXyA/IHRoaXMubWV0YV8udG9BcnJheSgpIDogW10sIC8vIGZpZWxkIDMgLSBtZXRhXG4gICAgICB0aGlzLnBhcmFtc18gPyB0aGlzLnBhcmFtc18udG9BcnJheSgpIDogW10sIC8vIGZpZWxkIDQgLSBwYXJhbXNcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ0FuYWx5dGljc1JlcXVlc3QnO1xuICB9XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge01lc3NhZ2V9XG4gKi9cbmNsYXNzIEVudGl0bGVtZW50c1Jlc3BvbnNlIHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5qd3RfID0gKGRhdGFbMV0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZ2V0Snd0KCkge1xuICAgIHJldHVybiB0aGlzLmp3dF87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXRKd3QodmFsdWUpIHtcbiAgICB0aGlzLmp3dF8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXl9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5sYWJlbCgpLCAgLy8gbWVzc2FnZSBsYWJlbFxuICAgICAgdGhpcy5qd3RfLCAgLy8gZmllbGQgMSAtIGp3dFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnRW50aXRsZW1lbnRzUmVzcG9uc2UnO1xuICB9XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge01lc3NhZ2V9XG4gKi9cbmNsYXNzIEV2ZW50UGFyYW1zIHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5zbWFydGJveE1lc3NhZ2VfID0gKGRhdGFbMV0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsxXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLmdwYXlUcmFuc2FjdGlvbklkXyA9IChkYXRhWzJdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMl07XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMuaGFkTG9nZ2VkXyA9IChkYXRhWzNdID09IG51bGwpID8gbnVsbCA6IGRhdGFbM107XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5za3VfID0gKGRhdGFbNF0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVs0XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZ2V0U21hcnRib3hNZXNzYWdlKCkge1xuICAgIHJldHVybiB0aGlzLnNtYXJ0Ym94TWVzc2FnZV87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXRTbWFydGJveE1lc3NhZ2UodmFsdWUpIHtcbiAgICB0aGlzLnNtYXJ0Ym94TWVzc2FnZV8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZ2V0R3BheVRyYW5zYWN0aW9uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3BheVRyYW5zYWN0aW9uSWRfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0R3BheVRyYW5zYWN0aW9uSWQodmFsdWUpIHtcbiAgICB0aGlzLmdwYXlUcmFuc2FjdGlvbklkXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9ib29sZWFufVxuICAgKi9cbiAgZ2V0SGFkTG9nZ2VkKCkge1xuICAgIHJldHVybiB0aGlzLmhhZExvZ2dlZF87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgc2V0SGFkTG9nZ2VkKHZhbHVlKSB7XG4gICAgdGhpcy5oYWRMb2dnZWRfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldFNrdSgpIHtcbiAgICByZXR1cm4gdGhpcy5za3VfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0U2t1KHZhbHVlKSB7XG4gICAgdGhpcy5za3VfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMubGFiZWwoKSwgIC8vIG1lc3NhZ2UgbGFiZWxcbiAgICAgIHRoaXMuc21hcnRib3hNZXNzYWdlXywgIC8vIGZpZWxkIDEgLSBzbWFydGJveF9tZXNzYWdlXG4gICAgICB0aGlzLmdwYXlUcmFuc2FjdGlvbklkXywgIC8vIGZpZWxkIDIgLSBncGF5X3RyYW5zYWN0aW9uX2lkXG4gICAgICB0aGlzLmhhZExvZ2dlZF8sICAvLyBmaWVsZCAzIC0gaGFkX2xvZ2dlZFxuICAgICAgdGhpcy5za3VfLCAgLy8gZmllbGQgNCAtIHNrdVxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnRXZlbnRQYXJhbXMnO1xuICB9XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge01lc3NhZ2V9XG4gKi9cbmNsYXNzIExpbmtTYXZlVG9rZW5SZXF1ZXN0IHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5hdXRoQ29kZV8gPSAoZGF0YVsxXSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzFdO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMudG9rZW5fID0gKGRhdGFbMl0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZ2V0QXV0aENvZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aENvZGVfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0QXV0aENvZGUodmFsdWUpIHtcbiAgICB0aGlzLmF1dGhDb2RlXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRUb2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy50b2tlbl87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXRUb2tlbih2YWx1ZSkge1xuICAgIHRoaXMudG9rZW5fID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMubGFiZWwoKSwgIC8vIG1lc3NhZ2UgbGFiZWxcbiAgICAgIHRoaXMuYXV0aENvZGVfLCAgLy8gZmllbGQgMSAtIGF1dGhfY29kZVxuICAgICAgdGhpcy50b2tlbl8sICAvLyBmaWVsZCAyIC0gdG9rZW5cbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ0xpbmtTYXZlVG9rZW5SZXF1ZXN0JztcbiAgfVxufVxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtNZXNzYWdlfVxuICovXG5jbGFzcyBMaW5raW5nSW5mb1Jlc3BvbnNlIHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMucmVxdWVzdGVkXyA9IChkYXRhWzFdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMV07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P2Jvb2xlYW59XG4gICAqL1xuICBnZXRSZXF1ZXN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdGVkXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBzZXRSZXF1ZXN0ZWQodmFsdWUpIHtcbiAgICB0aGlzLnJlcXVlc3RlZF8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXl9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5sYWJlbCgpLCAgLy8gbWVzc2FnZSBsYWJlbFxuICAgICAgdGhpcy5yZXF1ZXN0ZWRfLCAgLy8gZmllbGQgMSAtIHJlcXVlc3RlZFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnTGlua2luZ0luZm9SZXNwb25zZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7TWVzc2FnZX1cbiAqL1xuY2xhc3MgU2t1U2VsZWN0ZWRSZXNwb25zZSB7XG4gLyoqXG4gICogQHBhcmFtIHshQXJyYXk9fSBkYXRhXG4gICovXG4gIGNvbnN0cnVjdG9yKGRhdGEgPSBbXSkge1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMuc2t1XyA9IChkYXRhWzFdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMV07XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5vbGRTa3VfID0gKGRhdGFbMl0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsyXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Jvb2xlYW59ICovXG4gICAgdGhpcy5vbmVUaW1lXyA9IChkYXRhWzNdID09IG51bGwpID8gbnVsbCA6IGRhdGFbM107XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5wbGF5T2ZmZXJfID0gKGRhdGFbNF0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVs0XTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLm9sZFBsYXlPZmZlcl8gPSAoZGF0YVs1XSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzVdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRTa3UoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2t1XztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldFNrdSh2YWx1ZSkge1xuICAgIHRoaXMuc2t1XyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRPbGRTa3UoKSB7XG4gICAgcmV0dXJuIHRoaXMub2xkU2t1XztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldE9sZFNrdSh2YWx1ZSkge1xuICAgIHRoaXMub2xkU2t1XyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9ib29sZWFufVxuICAgKi9cbiAgZ2V0T25lVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vbmVUaW1lXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBzZXRPbmVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5vbmVUaW1lXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRQbGF5T2ZmZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheU9mZmVyXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldFBsYXlPZmZlcih2YWx1ZSkge1xuICAgIHRoaXMucGxheU9mZmVyXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBnZXRPbGRQbGF5T2ZmZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMub2xkUGxheU9mZmVyXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldE9sZFBsYXlPZmZlcih2YWx1ZSkge1xuICAgIHRoaXMub2xkUGxheU9mZmVyXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFBcnJheX1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbXG4gICAgICB0aGlzLmxhYmVsKCksICAvLyBtZXNzYWdlIGxhYmVsXG4gICAgICB0aGlzLnNrdV8sICAvLyBmaWVsZCAxIC0gc2t1XG4gICAgICB0aGlzLm9sZFNrdV8sICAvLyBmaWVsZCAyIC0gb2xkX3NrdVxuICAgICAgdGhpcy5vbmVUaW1lXywgIC8vIGZpZWxkIDMgLSBvbmVfdGltZVxuICAgICAgdGhpcy5wbGF5T2ZmZXJfLCAgLy8gZmllbGQgNCAtIHBsYXlfb2ZmZXJcbiAgICAgIHRoaXMub2xkUGxheU9mZmVyXywgIC8vIGZpZWxkIDUgLSBvbGRfcGxheV9vZmZlclxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnU2t1U2VsZWN0ZWRSZXNwb25zZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7TWVzc2FnZX1cbiAqL1xuY2xhc3MgU21hcnRCb3hNZXNzYWdlIHtcbiAvKipcbiAgKiBAcGFyYW0geyFBcnJheT19IGRhdGFcbiAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG5cbiAgICAvKiogQHByaXZhdGUgez9ib29sZWFufSAqL1xuICAgIHRoaXMuaXNDbGlja2VkXyA9IChkYXRhWzFdID09IG51bGwpID8gbnVsbCA6IGRhdGFbMV07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P2Jvb2xlYW59XG4gICAqL1xuICBnZXRJc0NsaWNrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDbGlja2VkXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBzZXRJc0NsaWNrZWQodmFsdWUpIHtcbiAgICB0aGlzLmlzQ2xpY2tlZF8gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXl9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5sYWJlbCgpLCAgLy8gbWVzc2FnZSBsYWJlbFxuICAgICAgdGhpcy5pc0NsaWNrZWRfLCAgLy8gZmllbGQgMSAtIGlzX2NsaWNrZWRcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ1NtYXJ0Qm94TWVzc2FnZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7TWVzc2FnZX1cbiAqL1xuY2xhc3MgU3Vic2NyaWJlUmVzcG9uc2Uge1xuIC8qKlxuICAqIEBwYXJhbSB7IUFycmF5PX0gZGF0YVxuICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhID0gW10pIHtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Jvb2xlYW59ICovXG4gICAgdGhpcy5zdWJzY3JpYmVfID0gKGRhdGFbMV0gPT0gbnVsbCkgPyBudWxsIDogZGF0YVsxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/Ym9vbGVhbn1cbiAgICovXG4gIGdldFN1YnNjcmliZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHNldFN1YnNjcmliZSh2YWx1ZSkge1xuICAgIHRoaXMuc3Vic2NyaWJlXyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFBcnJheX1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbXG4gICAgICB0aGlzLmxhYmVsKCksICAvLyBtZXNzYWdlIGxhYmVsXG4gICAgICB0aGlzLnN1YnNjcmliZV8sICAvLyBmaWVsZCAxIC0gc3Vic2NyaWJlXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdTdWJzY3JpYmVSZXNwb25zZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7TWVzc2FnZX1cbiAqL1xuY2xhc3MgVmlld1N1YnNjcmlwdGlvbnNSZXNwb25zZSB7XG4gLyoqXG4gICogQHBhcmFtIHshQXJyYXk9fSBkYXRhXG4gICovXG4gIGNvbnN0cnVjdG9yKGRhdGEgPSBbXSkge1xuXG4gICAgLyoqIEBwcml2YXRlIHs/Ym9vbGVhbn0gKi9cbiAgICB0aGlzLm5hdGl2ZV8gPSAoZGF0YVsxXSA9PSBudWxsKSA/IG51bGwgOiBkYXRhWzFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9ib29sZWFufVxuICAgKi9cbiAgZ2V0TmF0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLm5hdGl2ZV87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgc2V0TmF0aXZlKHZhbHVlKSB7XG4gICAgdGhpcy5uYXRpdmVfID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFycmF5fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMubGFiZWwoKSwgIC8vIG1lc3NhZ2UgbGFiZWxcbiAgICAgIHRoaXMubmF0aXZlXywgIC8vIGZpZWxkIDEgLSBuYXRpdmVcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ1ZpZXdTdWJzY3JpcHRpb25zUmVzcG9uc2UnO1xuICB9XG59XG5cbmNvbnN0IFBST1RPX01BUCA9IHtcbiAgJ0FjY291bnRDcmVhdGlvblJlcXVlc3QnOiBBY2NvdW50Q3JlYXRpb25SZXF1ZXN0LFxuICAnQWxyZWFkeVN1YnNjcmliZWRSZXNwb25zZSc6IEFscmVhZHlTdWJzY3JpYmVkUmVzcG9uc2UsXG4gICdBbmFseXRpY3NDb250ZXh0JzogQW5hbHl0aWNzQ29udGV4dCxcbiAgJ0FuYWx5dGljc0V2ZW50TWV0YSc6IEFuYWx5dGljc0V2ZW50TWV0YSxcbiAgJ0FuYWx5dGljc1JlcXVlc3QnOiBBbmFseXRpY3NSZXF1ZXN0LFxuICAnRW50aXRsZW1lbnRzUmVzcG9uc2UnOiBFbnRpdGxlbWVudHNSZXNwb25zZSxcbiAgJ0V2ZW50UGFyYW1zJzogRXZlbnRQYXJhbXMsXG4gICdMaW5rU2F2ZVRva2VuUmVxdWVzdCc6IExpbmtTYXZlVG9rZW5SZXF1ZXN0LFxuICAnTGlua2luZ0luZm9SZXNwb25zZSc6IExpbmtpbmdJbmZvUmVzcG9uc2UsXG4gICdTa3VTZWxlY3RlZFJlc3BvbnNlJzogU2t1U2VsZWN0ZWRSZXNwb25zZSxcbiAgJ1NtYXJ0Qm94TWVzc2FnZSc6IFNtYXJ0Qm94TWVzc2FnZSxcbiAgJ1N1YnNjcmliZVJlc3BvbnNlJzogU3Vic2NyaWJlUmVzcG9uc2UsXG4gICdWaWV3U3Vic2NyaXB0aW9uc1Jlc3BvbnNlJzogVmlld1N1YnNjcmlwdGlvbnNSZXNwb25zZSxcbn07XG5cbi8qKlxuICogVXRpbGl0eSB0byBkZXNlcmlhbGl6ZSBhIGJ1ZmZlclxuICogQHBhcmFtIHshQXJyYXl9IGRhdGFcbiAqIEByZXR1cm4geyFNZXNzYWdlfVxuICovXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gIC8qKiB7P3N0cmluZ30gKi9cbiAgY29uc3Qga2V5ID0gZGF0YSA/IGRhdGFbMF0gOiBudWxsO1xuICBpZiAoa2V5KSB7XG4gICAgY29uc3QgY3RvciA9IFBST1RPX01BUFtrZXldO1xuICAgIGlmIChjdG9yKSB7XG4gICAgICByZXR1cm4gbmV3IGN0b3IoZGF0YSk7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignRGVzZXJpYWxpemF0aW9uIGZhaWxlZCBmb3IgJyArIGRhdGEpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OiBUKX0gbWVzc2FnZVR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIGdldExhYmVsKG1lc3NhZ2VUeXBlKSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSAvKiogQHR5cGUgeyFNZXNzYWdlfSAqLyAobmV3IG1lc3NhZ2VUeXBlKCkpO1xuICByZXR1cm4gbWVzc2FnZS5sYWJlbCgpO1xufVxuXG5leHBvcnQge1xuICBBY2NvdW50Q3JlYXRpb25SZXF1ZXN0LFxuICBBbHJlYWR5U3Vic2NyaWJlZFJlc3BvbnNlLFxuICBBbmFseXRpY3NDb250ZXh0LFxuICBBbmFseXRpY3NFdmVudCxcbiAgQW5hbHl0aWNzRXZlbnRNZXRhLFxuICBBbmFseXRpY3NSZXF1ZXN0LFxuICBFbnRpdGxlbWVudHNSZXNwb25zZSxcbiAgRXZlbnRPcmlnaW5hdG9yLFxuICBFdmVudFBhcmFtcyxcbiAgTGlua1NhdmVUb2tlblJlcXVlc3QsXG4gIExpbmtpbmdJbmZvUmVzcG9uc2UsXG4gIE1lc3NhZ2UsXG4gIFNrdVNlbGVjdGVkUmVzcG9uc2UsXG4gIFNtYXJ0Qm94TWVzc2FnZSxcbiAgU3Vic2NyaWJlUmVzcG9uc2UsXG4gIFZpZXdTdWJzY3JpcHRpb25zUmVzcG9uc2UsXG4gIGRlc2VyaWFsaXplLFxuICBnZXRMYWJlbCxcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEFuYWx5dGljc0NvbnRleHQsXG4gIEFuYWx5dGljc0V2ZW50LFxuICBBbmFseXRpY3NFdmVudE1ldGEsXG4gIEFuYWx5dGljc1JlcXVlc3QsXG4gIEV2ZW50T3JpZ2luYXRvcixcbiAgRXZlbnRQYXJhbXMsXG59IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge0NsaWVudEV2ZW50TWFuYWdlcn0gZnJvbSAnLi9jbGllbnQtZXZlbnQtbWFuYWdlcic7XG5pbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gJy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQge2ZlQXJncywgZmVVcmx9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHtnZXRPbkV4cGVyaW1lbnRzfSBmcm9tICcuL2V4cGVyaW1lbnRzJztcbmltcG9ydCB7Z2V0VXVpZH0gZnJvbSAnLi4vdXRpbHMvc3RyaW5nJztcbmltcG9ydCB7cGFyc2VRdWVyeVN0cmluZywgcGFyc2VVcmx9IGZyb20gJy4uL3V0aWxzL3VybCc7XG5pbXBvcnQge3NldEltcG9ydGFudFN0eWxlc30gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuXG4vKiogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbmNvbnN0IGlmcmFtZVN0eWxlcyA9IHtcbiAgZGlzcGxheTogJ25vbmUnLFxufTtcblxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9kZXBzLkRlcHNEZWZ9IGRlcHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlcHMpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vbW9kZWwvZG9jLkRvY30gKi9cbiAgICB0aGlzLmRvY18gPSBkZXBzLmRvYygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSAvKiogQHR5cGUgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi8gKGNyZWF0ZUVsZW1lbnQoXG4gICAgICB0aGlzLmRvY18uZ2V0V2luKCkuZG9jdW1lbnQsXG4gICAgICAnaWZyYW1lJyxcbiAgICAgIHt9XG4gICAgKSk7XG5cbiAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5pZnJhbWVfLCBpZnJhbWVTdHlsZXMpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3JjXyA9IGZlVXJsKCcvc2VydmljZWlmcmFtZScpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMucHVibGljYXRpb25JZF8gPSBkZXBzLnBhZ2VDb25maWcoKS5nZXRQdWJsaWNhdGlvbklkKCk7XG5cbiAgICB0aGlzLmFyZ3NfID0gZmVBcmdzKHtcbiAgICAgIHB1YmxpY2F0aW9uSWQ6IHRoaXMucHVibGljYXRpb25JZF8sXG4gICAgfSk7XG5cbiAgICAvKiogQHByaXZhdGUgQHR5cGUgeyFib29sZWFufSAqL1xuICAgIHRoaXMuZXZlckxvZ2dlZF8gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIEBjb25zdCB7IUFuYWx5dGljc0NvbnRleHR9XG4gICAgICovXG4gICAgdGhpcy5jb250ZXh0XyA9IG5ldyBBbmFseXRpY3NDb250ZXh0KCk7XG5cbiAgICB0aGlzLmNvbnRleHRfLnNldFRyYW5zYWN0aW9uSWQoZ2V0VXVpZCgpKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2U8IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5SWZyYW1lUG9ydD59ICovXG4gICAgdGhpcy5zZXJ2aWNlUmVhZHlfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2V9ICovXG4gICAgdGhpcy5sYXN0QWN0aW9uXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQ2xpZW50RXZlbnRNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IGRlcHMuZXZlbnRNYW5hZ2VyKCk7XG4gICAgdGhpcy5ldmVudE1hbmFnZXJfLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihcbiAgICAgIHRoaXMuaGFuZGxlQ2xpZW50RXZlbnRfLmJpbmQodGhpcylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2FjdGlvbklkXG4gICAqL1xuICBzZXRUcmFuc2FjdGlvbklkKHRyYW5zYWN0aW9uSWQpIHtcbiAgICB0aGlzLmNvbnRleHRfLnNldFRyYW5zYWN0aW9uSWQodHJhbnNhY3Rpb25JZCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25JZCgpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0aGlzLmNvbnRleHRfLmdldFRyYW5zYWN0aW9uSWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGdldFNrdSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Xy5nZXRTa3UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2t1XG4gICAqL1xuICBzZXRTa3Uoc2t1KSB7XG4gICAgdGhpcy5jb250ZXh0Xy5zZXRTa3Uoc2t1KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBsYWJlbHNcbiAgICovXG4gIGFkZExhYmVscyhsYWJlbHMpIHtcbiAgICBpZiAobGFiZWxzICYmIGxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBuZXdMYWJlbHMgPSBbXS5jb25jYXQodGhpcy5jb250ZXh0Xy5nZXRMYWJlbExpc3QoKSk7XG4gICAgICBsYWJlbHMuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgICAgIGlmIChuZXdMYWJlbHMuaW5kZXhPZihsYWJlbCkgPT0gLTEpIHtcbiAgICAgICAgICBuZXdMYWJlbHMucHVzaChsYWJlbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb250ZXh0Xy5zZXRMYWJlbExpc3QobmV3TGFiZWxzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUhUTUxJRnJhbWVFbGVtZW50fVxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5pZnJhbWVfO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFF1ZXJ5U3RyaW5nXygpIHtcbiAgICByZXR1cm4gdGhpcy5kb2NfLmdldFdpbigpLmxvY2F0aW9uLnNlYXJjaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRSZWZlcnJlcl8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jXy5nZXRXaW4oKS5kb2N1bWVudC5yZWZlcnJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0Q29udGV4dF8oKSB7XG4gICAgY29uc3QgdXRtUGFyYW1zID0gcGFyc2VRdWVyeVN0cmluZyh0aGlzLmdldFF1ZXJ5U3RyaW5nXygpKTtcbiAgICB0aGlzLmNvbnRleHRfLnNldFJlZmVycmluZ09yaWdpbihwYXJzZVVybCh0aGlzLmdldFJlZmVycmVyXygpKS5vcmlnaW4pO1xuICAgIGNvbnN0IGNhbXBhaWduID0gdXRtUGFyYW1zWyd1dG1fY2FtcGFpZ24nXTtcbiAgICBjb25zdCBtZWRpdW0gPSB1dG1QYXJhbXNbJ3V0bV9tZWRpdW0nXTtcbiAgICBjb25zdCBzb3VyY2UgPSB1dG1QYXJhbXNbJ3V0bV9zb3VyY2UnXTtcbiAgICBpZiAoY2FtcGFpZ24pIHtcbiAgICAgIHRoaXMuY29udGV4dF8uc2V0VXRtQ2FtcGFpZ24oY2FtcGFpZ24pO1xuICAgIH1cbiAgICBpZiAobWVkaXVtKSB7XG4gICAgICB0aGlzLmNvbnRleHRfLnNldFV0bU1lZGl1bShtZWRpdW0pO1xuICAgIH1cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLmNvbnRleHRfLnNldFV0bVNvdXJjZShzb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRleHRfLnNldENsaWVudFZlcnNpb24oJ1N3RyAkaW50ZXJuYWxSdW50aW1lVmVyc2lvbiQnKTtcbiAgICB0aGlzLmFkZExhYmVscyhnZXRPbkV4cGVyaW1lbnRzKHRoaXMuZG9jXy5nZXRXaW4oKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlJZnJhbWVQb3J0Pn1cbiAgICovXG4gIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5zZXJ2aWNlUmVhZHlfKSB7XG4gICAgICAvLyBUT0RPKHNvaGFuaXJhbyk6IFBvdGVudGlhbGx5IGRvIHRoaXMgZXZlbiBlYXJsaWVyXG4gICAgICB0aGlzLmRvY18uZ2V0Qm9keSgpLmFwcGVuZENoaWxkKHRoaXMuZ2V0RWxlbWVudCgpKTtcbiAgICAgIHRoaXMuc2VydmljZVJlYWR5XyA9IHRoaXMuYWN0aXZpdHlQb3J0c19cbiAgICAgICAgLm9wZW5JZnJhbWUodGhpcy5pZnJhbWVfLCB0aGlzLnNyY18sIHRoaXMuYXJnc18pXG4gICAgICAgIC50aGVuKHBvcnQgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0Q29udGV4dF8oKTtcbiAgICAgICAgICByZXR1cm4gcG9ydC53aGVuUmVhZHkoKS50aGVuKCgpID0+IHBvcnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZVJlYWR5XztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUmVhZHlUb1BheVxuICAgKi9cbiAgc2V0UmVhZHlUb1BheShpc1JlYWR5VG9QYXkpIHtcbiAgICB0aGlzLmNvbnRleHRfLnNldFJlYWR5VG9QYXkoaXNSZWFkeVRvUGF5KTtcbiAgfVxuXG4gIC8qKlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5kb2NfLmdldEJvZHkoKS5yZW1vdmVDaGlsZCh0aGlzLmdldEVsZW1lbnQoKSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUFuYWx5dGljc0NvbnRleHR9XG4gICAqL1xuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHRfO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbnkgbG9ncyBoYXZlIGFscmVhZHkgYmUgc2VudCB0byB0aGUgYW5hbHl0aWNzIHNlcnZlci5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldEhhc0xvZ2dlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVyTG9nZ2VkXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyEuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpLkNsaWVudEV2ZW50fSBldmVudFxuICAgKiBAcmV0dXJuIHshQW5hbHl0aWNzUmVxdWVzdH1cbiAgICovXG4gIGNyZWF0ZUxvZ1JlcXVlc3RfKGV2ZW50KSB7XG4gICAgY29uc3QgbWV0YSA9IG5ldyBBbmFseXRpY3NFdmVudE1ldGEoKTtcbiAgICBtZXRhLnNldEV2ZW50T3JpZ2luYXRvcihldmVudC5ldmVudE9yaWdpbmF0b3IpO1xuICAgIG1ldGEuc2V0SXNGcm9tVXNlckFjdGlvbihldmVudC5pc0Zyb21Vc2VyQWN0aW9uKTtcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgQW5hbHl0aWNzUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Quc2V0RXZlbnQoZXZlbnQuZXZlbnRUeXBlKTtcbiAgICByZXF1ZXN0LnNldENvbnRleHQodGhpcy5jb250ZXh0Xyk7XG4gICAgcmVxdWVzdC5zZXRNZXRhKG1ldGEpO1xuICAgIGlmIChldmVudC5hZGRpdGlvbmFsUGFyYW1ldGVycyBpbnN0YW5jZW9mIEV2ZW50UGFyYW1zKSB7XG4gICAgICByZXF1ZXN0LnNldFBhcmFtcyhldmVudC5hZGRpdGlvbmFsUGFyYW1ldGVycyk7XG4gICAgfSAvLyBJZ25vcmUgZXZlbnQuYWRkaXRpb25hbFBhcmFtZXRlcnMuICBJdCBtYXkgaGF2ZSBkYXRhIHdlIHNob3VsZG4ndCBsb2cuXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHNob3VsZExvZ1B1Ymxpc2hlckV2ZW50c18oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVwc18uY29uZmlnKCkuZW5hYmxlU3dnQW5hbHl0aWNzID09PSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL2FwaS9jbGllbnQtZXZlbnQtbWFuYWdlci1hcGkuQ2xpZW50RXZlbnR9IGV2ZW50XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzaG91bGRBbHdheXNMb2dFdmVudF8oZXZlbnQpIHtcbiAgICAvKiBBTVBfQ0xJRU5UIGV2ZW50cyBhcmUgY29uc2lkZXJlZCBwdWJsaXNoZXIgZXZlbnRzIGFuZCB3ZSBnZW5lcmFsbHkgb25seVxuICAgICAqIGxvZyB0aG9zZSBpZiB0aGUgcHVibGlzaGVyIGRlY2lkZWQgdG8gZW5hYmxlIHB1Ymxpc2hlciBldmVudCBsb2dnaW5nIGZvclxuICAgICAqIHByaXZhY3kgcHVycG9zZXMuICBUaGUgcGFnZSBsb2FkIGV2ZW50IGlzIG5vdCBwcml2YXRlIGFuZCBpcyBuZWNlc3NhcnlcbiAgICAgKiBqdXN0IHNvIHdlIGtub3cgdGhlIHVzZXIgaXMgaW4gQU1QLCBzbyB3ZSB3aWxsIGxvZyBpdCByZWdhcmRsZXNzIG9mXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICByZXR1cm4gKFxuICAgICAgZXZlbnQuZXZlbnRUeXBlID09PSBBbmFseXRpY3NFdmVudC5JTVBSRVNTSU9OX1BBR0VfTE9BRCAmJlxuICAgICAgZXZlbnQuZXZlbnRPcmlnaW5hdG9yID09PSBFdmVudE9yaWdpbmF0b3IuQU1QX0NMSUVOVFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogIExpc3RlbnMgZm9yIG5ldyBldmVudHMgZnJvbSB0aGUgZXZlbnRzIG1hbmFnZXIgYW5kIGhhbmRsZXMgbG9nZ2luZ1xuICAgKiBAcGFyYW0geyEuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpLkNsaWVudEV2ZW50fSBldmVudFxuICAgKi9cbiAgaGFuZGxlQ2xpZW50RXZlbnRfKGV2ZW50KSB7XG4gICAgLy90aGlzIGV2ZW50IGlzIGp1c3QgdXNlZCB0byBjb21tdW5pY2F0ZSBpbmZvcm1hdGlvbiBpbnRlcm5hbGx5LiAgSXQgc2hvdWxkXG4gICAgLy9ub3QgYmUgcmVwb3J0ZWQgdG8gdGhlIFN3RyBhbmFseXRpY3Mgc2VydmljZS5cbiAgICBpZiAoZXZlbnQuZXZlbnRUeXBlID09PSBBbmFseXRpY3NFdmVudC5FVkVOVF9TVUJTQ1JJUFRJT05fU1RBVEUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBDbGllbnRFdmVudE1hbmFnZXIuaXNQdWJsaXNoZXJFdmVudChldmVudCkgJiZcbiAgICAgICF0aGlzLnNob3VsZExvZ1B1Ymxpc2hlckV2ZW50c18oKSAmJlxuICAgICAgIXRoaXMuc2hvdWxkQWx3YXlzTG9nRXZlbnRfKGV2ZW50KVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxhc3RBY3Rpb25fID0gdGhpcy5zdGFydCgpLnRoZW4ocG9ydCA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5jcmVhdGVMb2dSZXF1ZXN0XyhldmVudCk7XG4gICAgICB0aGlzLmV2ZXJMb2dnZWRfID0gdHJ1ZTtcbiAgICAgIHBvcnQuZXhlY3V0ZShyZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0FuYWx5dGljc0V2ZW50fSBmcm9tICcuLi9wcm90by9hcGlfbWVzc2FnZXMnO1xuaW1wb3J0IHtTbWFydFN1YnNjcmlwdGlvbkJ1dHRvbkFwaSwgVGhlbWV9IGZyb20gJy4vc21hcnQtYnV0dG9uLWFwaSc7XG5pbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gJy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQge21zZ30gZnJvbSAnLi4vdXRpbHMvaTE4bic7XG5cbi8qKlxuICogVGhlIGJ1dHRvbiB0aXRsZSBzaG91bGQgbWF0Y2ggdGhhdCBvZiBidXR0b24ncyBTVkcuXG4gKi9cbi8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59ICovXG5jb25zdCBUSVRMRV9MQU5HX01BUCA9IHtcbiAgJ2VuJzogJ1N1YnNjcmliZSB3aXRoIEdvb2dsZScsXG4gICdhcic6ICdHb29nbGUg2KfYtNiq2LHZg8Kg2YXYuScsXG4gICdkZSc6ICdBYm9ubmllcmVuIG1pdCBHb29nbGUnLFxuICAnZXMnOiAnU3VzY3LDrWJldGUgY29uIEdvb2dsZScsXG4gICdlcy1sYXRhbSc6ICdTdXNjcsOtYmV0ZSBjb24gR29vZ2xlJyxcbiAgJ2VzLWxhdG4nOiAnU3VzY3LDrWJldGUgY29uIEdvb2dsZScsXG4gICdmcic6IFwiUydhYm9ubmVyIGF2ZWMgR29vZ2xlXCIsXG4gICdoaSc6ICdHb29nbGUg4KSV4KWHIOClm+CksOCkv+Ckr+ClhyDgpLjgpKbgpLjgpY3gpK/gpKTgpL4nLFxuICAnaWQnOiAnQmVybGFuZ2dhbmFuIGRlbmdhbiBHb29nbGUnLFxuICAnaXQnOiAnQWJib25hdGkgY29uIEdvb2dsZScsXG4gICdqcCc6ICdHb29nbGUg44Gn6LO86KqtJyxcbiAgJ2tvJzogJ0dvb2dsZSDsnYQg7Ya17ZWc6rWs64+FJyxcbiAgJ21zJzogJ0xhbmdnYW4gZGVuZ2FuIEdvb2dsZScsXG4gICdubCc6ICdBYm9ubmVyZW4gdmlhIEdvb2dsZScsXG4gICdubyc6ICdBYm9ubmVyIG1lZCBHb29nbGUnLFxuICAncGwnOiAnU3Vic2tyeWJ1aiB6IEdvb2dsZScsXG4gICdwdCc6ICdTdWJzY3JldmVyIGNvbSBvIEdvb2dsZScsXG4gICdwdC1icic6ICdBc3NpbmUgY29tIG8gR29vZ2xlJyxcbiAgJ3J1JzogJ9Cf0L7QtNC/0Lhja2Eg0YfQtdGA0LXQtyBHb29nbGUnLFxuICAnc2UnOiAnUHJlbnVtZXJlcmEgbWVkIEdvb2dsZScsXG4gICd0aCc6ICfguKrguKHguLHguITguKPguJ/guLLguJkgR29vZ2xlJyxcbiAgJ3RyJzogJ0dvb2dsZSBpbGUgQWJvbmUgT2wnLFxuICAndWsnOiAn0J/RltC00L/QuNGB0LDRgtC40YHRjyDRh9C10YDQtdC3IEdvb2dsZScsXG4gICd6aC10dyc6ICfpgI/pgY4gR29vZ2xlIOiogumWsScsXG59O1xuXG4vKlxuICogUHJvcGVydGllczpcbiAqIC0gbGFuZzogU2V0cyB0aGUgYnV0dG9uIFNWRyBhbmQgdGl0bGUuIERlZmF1bHQgaXMgXCJlblwiLlxuICogLSB0aGVtZTogXCJsaWdodFwiIG9yIFwiZGFya1wiLiBEZWZhdWx0IGlzIFwibGlnaHRcIi5cbiAqXG4gKiBAdHlwZWRlZiB7e1xuICogICBvcHRpb25zOiAoIS4uL2FwaS9zdWJzY3JpcHRpb25zLlNtYXJ0QnV0dG9uT3B0aW9uc3whLi4vYXBpL3N1YnNjcmlwdGlvbnMuQnV0dG9uT3B0aW9ucyksXG4gKiAgIGNsaWNrRnVuOiAoIWZ1bmN0aW9uKEV2ZW50KTo/KSxcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgQnV0dG9uUGFyYW1zO1xuXG4vKipcbiAqIFRoZSBidXR0b24gc3R5bGVzaGVldCBjYW4gYmUgZm91bmQgaW4gdGhlIGAvYXNzZXRzL3N3Zy1idXR0b24uY3NzYC5cbiAqIEl0J3MgcHJvZHVjZWQgYnkgdGhlIGBndWxwIGFzc2V0c2AgdGFzayBhbmQgZGVwbG95ZWQgdG9cbiAqIGBodHRwczovL25ld3MuZ29vZ2xlLmNvbS9zd2cvanMvdjEvc3dnLWJ1dHRvbi5jc3NgLlxuICovXG5leHBvcnQgY2xhc3MgQnV0dG9uQXBpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL21vZGVsL2RvYy5Eb2N9IGRvY1xuICAgKiBAcGFyYW0geyFQcm9taXNlPCEuL3J1bnRpbWUuQ29uZmlndXJlZFJ1bnRpbWU+fSBjb25maWd1cmVkUnVudGltZVByb21pc2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvYywgY29uZmlndXJlZFJ1bnRpbWVQcm9taXNlKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL21vZGVsL2RvYy5Eb2N9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2U8IS4vcnVudGltZS5Db25maWd1cmVkUnVudGltZT59ICovXG4gICAgdGhpcy5jb25maWd1cmVkUnVudGltZVByb21pc2VfID0gY29uZmlndXJlZFJ1bnRpbWVQcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqL1xuICBpbml0KCkge1xuICAgIGNvbnN0IGhlYWQgPSB0aGlzLmRvY18uZ2V0SGVhZCgpO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9ICckYXNzZXRzJC9zd2ctYnV0dG9uLmNzcyc7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBoZWFkLnF1ZXJ5U2VsZWN0b3IoYGxpbmtbaHJlZj1cIiR7dXJsfVwiXWApO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiLi4uXCIgdHlwZT1cInRleHQvY3NzXCI+XG4gICAgaGVhZC5hcHBlbmRDaGlsZChcbiAgICAgIGNyZWF0ZUVsZW1lbnQodGhpcy5kb2NfLmdldFdpbigpLmRvY3VtZW50LCAnbGluaycsIHtcbiAgICAgICAgJ3JlbCc6ICdzdHlsZXNoZWV0JyxcbiAgICAgICAgJ3R5cGUnOiAndGV4dC9jc3MnLFxuICAgICAgICAnaHJlZic6IHVybCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5CdXR0b25PcHRpb25zfGZ1bmN0aW9uKCl9IG9wdGlvbnNPckNhbGxiYWNrXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGNhbGxiYWNrXG4gICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgKi9cbiAgY3JlYXRlKG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUVsZW1lbnQodGhpcy5kb2NfLmdldFdpbigpLmRvY3VtZW50LCAnYnV0dG9uJywge30pO1xuICAgIHJldHVybiB0aGlzLmF0dGFjaChidXR0b24sIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudH0gYnV0dG9uXG4gICAqIEBwYXJhbSB7Li4vYXBpL3N1YnNjcmlwdGlvbnMuQnV0dG9uT3B0aW9uc3xmdW5jdGlvbigpfSBvcHRpb25zT3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBjYWxsYmFja1xuICAgKiBAcmV0dXJuIHshRWxlbWVudH1cbiAgICovXG4gIGF0dGFjaChidXR0b24sIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnNldHVwQnV0dG9uQW5kR2V0UGFyYW1zXyhcbiAgICAgIGJ1dHRvbixcbiAgICAgIG9wdGlvbnNPckNhbGxiYWNrLFxuICAgICAgY2FsbGJhY2tcbiAgICApLm9wdGlvbnM7XG5cbiAgICBjb25zdCB0aGVtZSA9IG9wdGlvbnNbJ3RoZW1lJ107XG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoYHN3Zy1idXR0b24tJHt0aGVtZX1gKTtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgIGlmIChvcHRpb25zWydsYW5nJ10pIHtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2xhbmcnLCBvcHRpb25zWydsYW5nJ10pO1xuICAgIH1cbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0aXRsZScsIG1zZyhUSVRMRV9MQU5HX01BUCwgYnV0dG9uKSB8fCAnJyk7XG4gICAgdGhpcy5sb2dTd2dFdmVudF8oQW5hbHl0aWNzRXZlbnQuSU1QUkVTU0lPTl9TV0dfQlVUVE9OKTtcblxuICAgIHJldHVybiBidXR0b247XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQW5hbHl0aWNzRXZlbnR9IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpc0Zyb21Vc2VyQWN0aW9uXG4gICAqL1xuICBsb2dTd2dFdmVudF8oZXZlbnRUeXBlLCBpc0Zyb21Vc2VyQWN0aW9uKSB7XG4gICAgdGhpcy5jb25maWd1cmVkUnVudGltZVByb21pc2VfLnRoZW4oY29uZmlndXJlZFJ1bnRpbWUgPT4ge1xuICAgICAgY29uZmlndXJlZFJ1bnRpbWUuZXZlbnRNYW5hZ2VyKCkubG9nU3dnRXZlbnQoZXZlbnRUeXBlLCBpc0Zyb21Vc2VyQWN0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gey4uL2FwaS9zdWJzY3JpcHRpb25zLkJ1dHRvbk9wdGlvbnN8Li4vYXBpL3N1YnNjcmlwdGlvbnMuU21hcnRCdXR0b25PcHRpb25zfGZ1bmN0aW9uKCl9IG9wdGlvbnNPckNhbGxiYWNrXG4gICAqIEByZXR1cm4geyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5CdXR0b25PcHRpb25zfCEuLi9hcGkvc3Vic2NyaXB0aW9ucy5TbWFydEJ1dHRvbk9wdGlvbnN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRPcHRpb25zXyhvcHRpb25zT3JDYWxsYmFjaykge1xuICAgIGNvbnN0IG9wdGlvbnMgPVxuICAgICAgLyoqIEB0eXBlIHshLi4vYXBpL3N1YnNjcmlwdGlvbnMuQnV0dG9uT3B0aW9uc3whLi4vYXBpL3N1YnNjcmlwdGlvbnMuU21hcnRCdXR0b25PcHRpb25zfSAqLyAob3B0aW9uc09yQ2FsbGJhY2sgJiZcbiAgICAgIHR5cGVvZiBvcHRpb25zT3JDYWxsYmFjayAhPSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9uc09yQ2FsbGJhY2tcbiAgICAgICAgOiB7J3RoZW1lJzogVGhlbWUuTElHSFR9KTtcblxuICAgIGNvbnN0IHRoZW1lID0gb3B0aW9uc1sndGhlbWUnXTtcbiAgICBpZiAodGhlbWUgIT09IFRoZW1lLkxJR0hUICYmIHRoZW1lICE9PSBUaGVtZS5EQVJLKSB7XG4gICAgICBvcHRpb25zWyd0aGVtZSddID0gVGhlbWUuTElHSFQ7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Py4uL2FwaS9zdWJzY3JpcHRpb25zLkJ1dHRvbk9wdGlvbnN8Py4uL2FwaS9zdWJzY3JpcHRpb25zLlNtYXJ0QnV0dG9uT3B0aW9uc3xmdW5jdGlvbigpfSBvcHRpb25zT3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBjYWxsYmFja1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbigpfGZ1bmN0aW9uKEV2ZW50KTpib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0Q2FsbGJhY2tfKG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge2Z1bmN0aW9uKCl8ZnVuY3Rpb24oRXZlbnQpOmJvb2xlYW59ICovICgodHlwZW9mIG9wdGlvbnNPckNhbGxiYWNrID09XG4gICAgICAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9uc09yQ2FsbGJhY2tcbiAgICAgICAgOiBudWxsKSB8fCBjYWxsYmFjaylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IGJ1dHRvblxuICAgKiBAcGFyYW0gey4uL2FwaS9zdWJzY3JpcHRpb25zLlNtYXJ0QnV0dG9uT3B0aW9uc3xmdW5jdGlvbigpfC4uL2FwaS9zdWJzY3JpcHRpb25zLkJ1dHRvbk9wdGlvbnN9IG9wdGlvbnNPckNhbGxiYWNrXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGNhbGxiYWNrRnVuXG4gICAqIEByZXR1cm4ge0J1dHRvblBhcmFtc31cbiAgICovXG4gIHNldHVwQnV0dG9uQW5kR2V0UGFyYW1zXyhidXR0b24sIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFja0Z1bikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnNfKG9wdGlvbnNPckNhbGxiYWNrKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuZ2V0Q2FsbGJhY2tfKG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFja0Z1bik7XG4gICAgY29uc3QgY2xpY2tGdW4gPSBldmVudCA9PiB7XG4gICAgICB0aGlzLmxvZ1N3Z0V2ZW50XyhBbmFseXRpY3NFdmVudC5BQ1RJT05fU1dHX0JVVFRPTl9DTElDSywgdHJ1ZSk7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrRnVuKTtcbiAgICByZXR1cm4ge29wdGlvbnMsIGNsaWNrRnVufTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0geyFFbGVtZW50fSBidXR0b25cbiAgICogQHBhcmFtIHsuLi9hcGkvc3Vic2NyaXB0aW9ucy5TbWFydEJ1dHRvbk9wdGlvbnN8ZnVuY3Rpb24oKX0gb3B0aW9uc09yQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gY2FsbGJhY2tcbiAgICogQHJldHVybiB7IUVsZW1lbnR9XG4gICAqL1xuICBhdHRhY2hTbWFydEJ1dHRvbihkZXBzLCBidXR0b24sIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuc2V0dXBCdXR0b25BbmRHZXRQYXJhbXNfKFxuICAgICAgYnV0dG9uLFxuICAgICAgb3B0aW9uc09yQ2FsbGJhY2ssXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gICAgLy8gQWRkIHJlcXVpcmVkIENTUyBjbGFzcywgaWYgbWlzc2luZy5cbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnc3dnLXNtYXJ0LWJ1dHRvbicpO1xuICAgIHJldHVybiBuZXcgU21hcnRTdWJzY3JpcHRpb25CdXR0b25BcGkoXG4gICAgICBkZXBzLFxuICAgICAgYnV0dG9uLFxuICAgICAgcGFyYW1zLm9wdGlvbnMsXG4gICAgICBwYXJhbXMuY2xpY2tGdW5cbiAgICApLnN0YXJ0KCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7d2Fybn0gZnJvbSAnLi4vdXRpbHMvbG9nJztcblxuLyoqIEBlbnVtIHtudW1iZXJ9ICovXG5jb25zdCBDYWxsYmFja0lkID0ge1xuICBFTlRJVExFTUVOVFM6IDEsXG4gIFNVQlNDUklCRV9SRVFVRVNUOiAyLFxuICBQQVlNRU5UX1JFU1BPTlNFOiAzLFxuICBMT0dJTl9SRVFVRVNUOiA0LFxuICBMSU5LX1BST0dSRVNTOiA1LFxuICBMSU5LX0NPTVBMRVRFOiA2LFxuICBGTE9XX1NUQVJURUQ6IDcsXG4gIEZMT1dfQ0FOQ0VMRUQ6IDgsXG59O1xuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIENhbGxiYWNrcyB7XG4gIC8qKlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxDYWxsYmFja0lkLCBmdW5jdGlvbigqKT59ICovXG4gICAgdGhpcy5jYWxsYmFja3NfID0ge307XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxDYWxsYmFja0lkLCAqPn0gKi9cbiAgICB0aGlzLnJlc3VsdEJ1ZmZlcl8gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCEuLi9hcGkvZW50aXRsZW1lbnRzLkVudGl0bGVtZW50cz4pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25FbnRpdGxlbWVudHNSZXNwb25zZShjYWxsYmFjaykge1xuICAgIHRoaXMuc2V0Q2FsbGJhY2tfKENhbGxiYWNrSWQuRU5USVRMRU1FTlRTLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshUHJvbWlzZTwhLi4vYXBpL2VudGl0bGVtZW50cy5FbnRpdGxlbWVudHM+fSBwcm9taXNlXG4gICAqL1xuICB0cmlnZ2VyRW50aXRsZW1lbnRzUmVzcG9uc2UocHJvbWlzZSkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXJfKFxuICAgICAgQ2FsbGJhY2tJZC5FTlRJVExFTUVOVFMsXG4gICAgICBwcm9taXNlLnRoZW4ocmVzID0+IHJlcy5jbG9uZSgpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc0VudGl0bGVtZW50c1Jlc3BvbnNlUGVuZGluZygpIHtcbiAgICByZXR1cm4gISF0aGlzLnJlc3VsdEJ1ZmZlcl9bQ2FsbGJhY2tJZC5FTlRJVExFTUVOVFNdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIS4uL2FwaS9zdWJzY3JpcHRpb25zLkxvZ2luUmVxdWVzdCl9IGNhbGxiYWNrXG4gICAqL1xuICBzZXRPbkxvZ2luUmVxdWVzdChjYWxsYmFjaykge1xuICAgIHRoaXMuc2V0Q2FsbGJhY2tfKENhbGxiYWNrSWQuTE9HSU5fUkVRVUVTVCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLkxvZ2luUmVxdWVzdH0gcmVxdWVzdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjYWxsYmFjayBoYXMgYmVlbiBmb3VuZC5cbiAgICovXG4gIHRyaWdnZXJMb2dpblJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXJfKENhbGxiYWNrSWQuTE9HSU5fUkVRVUVTVCwgcmVxdWVzdCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25MaW5rUHJvZ3Jlc3MoY2FsbGJhY2spIHtcbiAgICB0aGlzLnNldENhbGxiYWNrXyhDYWxsYmFja0lkLkxJTktfUFJPR1JFU1MsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjYWxsYmFjayBoYXMgYmVlbiBmb3VuZC5cbiAgICovXG4gIHRyaWdnZXJMaW5rUHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcl8oQ2FsbGJhY2tJZC5MSU5LX1BST0dSRVNTLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKi9cbiAgcmVzZXRMaW5rUHJvZ3Jlc3MoKSB7XG4gICAgdGhpcy5yZXNldENhbGxiYWNrXyhDYWxsYmFja0lkLkxJTktfUFJPR1JFU1MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2tcbiAgICovXG4gIHNldE9uTGlua0NvbXBsZXRlKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zZXRDYWxsYmFja18oQ2FsbGJhY2tJZC5MSU5LX0NPTVBMRVRFLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY2FsbGJhY2sgaGFzIGJlZW4gZm91bmQuXG4gICAqL1xuICB0cmlnZ2VyTGlua0NvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXJfKENhbGxiYWNrSWQuTElOS19DT01QTEVURSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc0xpbmtDb21wbGV0ZVBlbmRpbmcoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5yZXN1bHRCdWZmZXJfW0NhbGxiYWNrSWQuTElOS19DT01QTEVURV07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25TdWJzY3JpYmVSZXF1ZXN0KGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zZXRDYWxsYmFja18oQ2FsbGJhY2tJZC5TVUJTQ1JJQkVfUkVRVUVTVCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGNhbGxiYWNrIGhhcyBiZWVuIGZvdW5kLlxuICAgKi9cbiAgdHJpZ2dlclN1YnNjcmliZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcl8oQ2FsbGJhY2tJZC5TVUJTQ1JJQkVfUkVRVUVTVCwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1N1YnNjcmliZVJlcXVlc3RDYWxsYmFjaygpIHtcbiAgICByZXR1cm4gISF0aGlzLmNhbGxiYWNrc19bQ2FsbGJhY2tJZC5TVUJTQ1JJQkVfUkVRVUVTVF07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbighUHJvbWlzZTwhLi4vYXBpL3N1YnNjcmliZS1yZXNwb25zZS5TdWJzY3JpYmVSZXNwb25zZT4pfSBjYWxsYmFja1xuICAgKi9cbiAgc2V0T25TdWJzY3JpYmVSZXNwb25zZShjYWxsYmFjaykge1xuICAgIHdhcm4oXG4gICAgICBgW3N3Zy5qczpzZXRPblN1YnNjcmliZVJlc3BvbnNlXTogVGhpcyBtZXRob2QgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHN3aXRjaCB1c2FnZXMgdG8gJ3NldE9uUGF5bWVudFJlc3BvbnNlJ2BcbiAgICApO1xuICAgIHRoaXMuc2V0Q2FsbGJhY2tfKENhbGxiYWNrSWQuUEFZTUVOVF9SRVNQT05TRSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIVByb21pc2U8IS4uL2FwaS9zdWJzY3JpYmUtcmVzcG9uc2UuU3Vic2NyaWJlUmVzcG9uc2U+KX0gY2FsbGJhY2tcbiAgICovXG4gIHNldE9uQ29udHJpYnV0aW9uUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICB3YXJuKFxuICAgICAgYFtzd2cuanM6c2V0T25Db250cmlidXRpb25SZXNwb25zZV06IFRoaXMgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzd2l0Y2ggdXNhZ2VzIHRvICdzZXRPblBheW1lbnRSZXNwb25zZSdgXG4gICAgKTtcbiAgICB0aGlzLnNldENhbGxiYWNrXyhDYWxsYmFja0lkLlBBWU1FTlRfUkVTUE9OU0UsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCEuLi9hcGkvc3Vic2NyaWJlLXJlc3BvbnNlLlN1YnNjcmliZVJlc3BvbnNlPil9IGNhbGxiYWNrXG4gICAqL1xuICBzZXRPblBheW1lbnRSZXNwb25zZShjYWxsYmFjaykge1xuICAgIHRoaXMuc2V0Q2FsbGJhY2tfKENhbGxiYWNrSWQuUEFZTUVOVF9SRVNQT05TRSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVByb21pc2U8IS4uL2FwaS9zdWJzY3JpYmUtcmVzcG9uc2UuU3Vic2NyaWJlUmVzcG9uc2U+fSByZXNwb25zZVByb21pc2VcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY2FsbGJhY2sgaGFzIGJlZW4gZm91bmQuXG4gICAqL1xuICB0cmlnZ2VyUGF5bWVudFJlc3BvbnNlKHJlc3BvbnNlUHJvbWlzZSkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXJfKFxuICAgICAgQ2FsbGJhY2tJZC5QQVlNRU5UX1JFU1BPTlNFLFxuICAgICAgcmVzcG9uc2VQcm9taXNlLnRoZW4ocmVzID0+IHJlcy5jbG9uZSgpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1BheW1lbnRSZXNwb25zZVBlbmRpbmcoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5yZXN1bHRCdWZmZXJfW0NhbGxiYWNrSWQuUEFZTUVOVF9SRVNQT05TRV07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbih7Zmxvdzogc3RyaW5nLCBkYXRhOiAhT2JqZWN0fSl9IGNhbGxiYWNrXG4gICAqL1xuICBzZXRPbkZsb3dTdGFydGVkKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zZXRDYWxsYmFja18oQ2FsbGJhY2tJZC5GTE9XX1NUQVJURUQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmxvd1xuICAgKiBAcGFyYW0geyFPYmplY3Q9fSBkYXRhXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGNhbGxiYWNrIGhhcyBiZWVuIGZvdW5kLlxuICAgKi9cbiAgdHJpZ2dlckZsb3dTdGFydGVkKGZsb3csIGRhdGEgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXJfKENhbGxiYWNrSWQuRkxPV19TVEFSVEVELCB7XG4gICAgICBmbG93LFxuICAgICAgZGF0YSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHtmbG93OiBzdHJpbmcsIGRhdGE6ICFPYmplY3R9KX0gY2FsbGJhY2tcbiAgICovXG4gIHNldE9uRmxvd0NhbmNlbGVkKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zZXRDYWxsYmFja18oQ2FsbGJhY2tJZC5GTE9XX0NBTkNFTEVELCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZsb3dcbiAgICogQHBhcmFtIHshT2JqZWN0PX0gZGF0YVxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjYWxsYmFjayBoYXMgYmVlbiBmb3VuZC5cbiAgICovXG4gIHRyaWdnZXJGbG93Q2FuY2VsZWQoZmxvdywgZGF0YSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcl8oQ2FsbGJhY2tJZC5GTE9XX0NBTkNFTEVELCB7XG4gICAgICBmbG93LFxuICAgICAgZGF0YSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFDYWxsYmFja0lkfSBpZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD8pfSBjYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0Q2FsbGJhY2tfKGlkLCBjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLmNhbGxiYWNrc19baWRdKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgW3N3Zy5qc106IFlvdSBoYXZlIHJlZ2lzdGVyZWQgbXVsdGlwbGUgY2FsbGJhY2tzIGZvciB0aGUgc2FtZSByZXNwb25zZS5gXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmNhbGxiYWNrc19baWRdID0gY2FsbGJhY2s7XG4gICAgLy8gSWYgcmVzdWx0IGFscmVhZHkgZXhpc3QsIGV4ZWN1dGUgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgaWYgKGlkIGluIHRoaXMucmVzdWx0QnVmZmVyXykge1xuICAgICAgdGhpcy5leGVjdXRlQ2FsbGJhY2tfKGlkLCBjYWxsYmFjaywgdGhpcy5yZXN1bHRCdWZmZXJfW2lkXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUNhbGxiYWNrSWR9IGlkXG4gICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcl8oaWQsIGRhdGEpIHtcbiAgICB0aGlzLnJlc3VsdEJ1ZmZlcl9baWRdID0gZGF0YTtcbiAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuY2FsbGJhY2tzX1tpZF07XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmV4ZWN1dGVDYWxsYmFja18oaWQsIGNhbGxiYWNrLCBkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuICEhY2FsbGJhY2s7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQ2FsbGJhY2tJZH0gaWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlc2V0Q2FsbGJhY2tfKGlkKSB7XG4gICAgaWYgKGlkIGluIHRoaXMucmVzdWx0QnVmZmVyXykge1xuICAgICAgZGVsZXRlIHRoaXMucmVzdWx0QnVmZmVyX1tpZF07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUNhbGxiYWNrSWR9IGlkXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZXhlY3V0ZUNhbGxiYWNrXyhpZCwgY2FsbGJhY2ssIGRhdGEpIHtcbiAgICAvLyBBbHdheXMgZXhlY3V0ZSBjYWxsYmFja3MgaW4gYSBtaWNyb3Rhc2suXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgIHRoaXMucmVzZXRDYWxsYmFja18oaWQpO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE5IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7QW5hbHl0aWNzRXZlbnQsIEV2ZW50T3JpZ2luYXRvcn0gZnJvbSAnLi4vcHJvdG8vYXBpX21lc3NhZ2VzJztcbmltcG9ydCB7RmlsdGVyUmVzdWx0fSBmcm9tICcuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpJztcbmltcG9ydCB7aXNCb29sZWFuLCBpc0VudW1WYWx1ZSwgaXNGdW5jdGlvbiwgaXNPYmplY3R9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcbmltcG9ydCB7bG9nfSBmcm9tICcuLi91dGlscy9sb2cnO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBkZXNjcmliZSBhbiBpc3N1ZSB3aXRoIGFuIGV2ZW50IG9iamVjdFxuICogQHBhcmFtIHshc3RyaW5nfSB2YWx1ZU5hbWVcbiAqIEBwYXJhbSB7Pyp9IHZhbHVlXG4gKiBAcmV0dXJucyB7IXN0cmluZ31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXZlbnRFcnJvck1lc3NhZ2UodmFsdWVOYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gJ0V2ZW50IGhhcyBhbiBpbnZhbGlkICcgKyB2YWx1ZU5hbWUgKyAnKCcgKyB2YWx1ZSArICcpJztcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGV2ZW50IGlzIGludmFsaWQuXG4gKiBAcGFyYW0geyEuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpLkNsaWVudEV2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUV2ZW50KGV2ZW50KSB7XG4gIGlmICghaXNPYmplY3QoZXZlbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBtdXN0IGJlIGEgdmFsaWQgb2JqZWN0Jyk7XG4gIH1cblxuICBpZiAoIWlzRW51bVZhbHVlKEFuYWx5dGljc0V2ZW50LCBldmVudC5ldmVudFR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGNyZWF0ZUV2ZW50RXJyb3JNZXNzYWdlKCdldmVudFR5cGUnLCBldmVudC5ldmVudFR5cGUpKTtcbiAgfVxuXG4gIGlmICghaXNFbnVtVmFsdWUoRXZlbnRPcmlnaW5hdG9yLCBldmVudC5ldmVudE9yaWdpbmF0b3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgY3JlYXRlRXZlbnRFcnJvck1lc3NhZ2UoJ2V2ZW50T3JpZ2luYXRvcicsIGV2ZW50LmV2ZW50T3JpZ2luYXRvcilcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgICFpc09iamVjdChldmVudC5hZGRpdGlvbmFsUGFyYW1ldGVycykgJiZcbiAgICBldmVudC5hZGRpdGlvbmFsUGFyYW1ldGVycyAhPSBudWxsXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGNyZWF0ZUV2ZW50RXJyb3JNZXNzYWdlKFxuICAgICAgICAnYWRkaXRpb25hbFBhcmFtZXRlcnMnLFxuICAgICAgICBldmVudC5hZGRpdGlvbmFsUGFyYW1ldGVyc1xuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBpZiAoZXZlbnQuaXNGcm9tVXNlckFjdGlvbiAhPSBudWxsICYmICFpc0Jvb2xlYW4oZXZlbnQuaXNGcm9tVXNlckFjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBjcmVhdGVFdmVudEVycm9yTWVzc2FnZSgnaXNGcm9tVXNlckFjdGlvbicsIGV2ZW50LmlzRnJvbVVzZXJBY3Rpb24pXG4gICAgKTtcbiAgfVxufVxuXG4vKiogQGltcGxlbWVudHMgey4uL2FwaS9jbGllbnQtZXZlbnQtbWFuYWdlci1hcGkuQ2xpZW50RXZlbnRNYW5hZ2VyQXBpfSAqL1xuZXhwb3J0IGNsYXNzIENsaWVudEV2ZW50TWFuYWdlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpLkNsaWVudEV2ZW50fSBldmVudFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzUHVibGlzaGVyRXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZXZlbnQuZXZlbnRPcmlnaW5hdG9yID09PSBFdmVudE9yaWdpbmF0b3IuUFJPUEVOU0lUWV9DTElFTlQgfHxcbiAgICAgIGV2ZW50LmV2ZW50T3JpZ2luYXRvciA9PT0gRXZlbnRPcmlnaW5hdG9yLlBVQkxJU0hFUl9DTElFTlQgfHxcbiAgICAgIGV2ZW50LmV2ZW50T3JpZ2luYXRvciA9PT0gRXZlbnRPcmlnaW5hdG9yLkFNUF9DTElFTlRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb21pc2V9IGNvbmZpZ3VyZWRQcm9taXNlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWd1cmVkUHJvbWlzZSkge1xuICAgIC8qKiBAcHJpdmF0ZSB7IUFycmF5PGZ1bmN0aW9uKCEuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpLkNsaWVudEV2ZW50KT59ICovXG4gICAgdGhpcy5saXN0ZW5lcnNfID0gW107XG5cbiAgICAvKiogQHByaXZhdGUgeyFBcnJheTxmdW5jdGlvbighLi4vYXBpL2NsaWVudC1ldmVudC1tYW5hZ2VyLWFwaS5DbGllbnRFdmVudCk6IUZpbHRlclJlc3VsdD59ICovXG4gICAgdGhpcy5maWx0ZXJlcnNfID0gW107XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlfSAqL1xuICAgIHRoaXMubGFzdEFjdGlvbl8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2V9ICovXG4gICAgdGhpcy5pc1JlYWR5UHJvbWlzZV8gPSBjb25maWd1cmVkUHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVzXG4gICAqL1xuICByZWdpc3RlckV2ZW50TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50IG1hbmFnZXIgbGlzdGVuZXJzIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVyc18ucHVzaChsaXN0ZW5lcik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlc1xuICAgKi9cbiAgcmVnaXN0ZXJFdmVudEZpbHRlcmVyKGZpbHRlcmVyKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGZpbHRlcmVyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBtYW5hZ2VyIGZpbHRlcmVycyBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdGhpcy5maWx0ZXJlcnNfLnB1c2goZmlsdGVyZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZXNcbiAgICovXG4gIGxvZ0V2ZW50KGV2ZW50KSB7XG4gICAgdmFsaWRhdGVFdmVudChldmVudCk7XG4gICAgdGhpcy5sYXN0QWN0aW9uXyA9IHRoaXMuaXNSZWFkeVByb21pc2VfLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChsZXQgZmlsdGVyZXIgPSAwOyBmaWx0ZXJlciA8IHRoaXMuZmlsdGVyZXJzXy5sZW5ndGg7IGZpbHRlcmVyKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodGhpcy5maWx0ZXJlcnNfW2ZpbHRlcmVyXShldmVudCkgPT09IEZpbHRlclJlc3VsdC5DQU5DRUxfRVZFTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2coZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGxpc3RlbmVyID0gMDsgbGlzdGVuZXIgPCB0aGlzLmxpc3RlbmVyc18ubGVuZ3RoOyBsaXN0ZW5lcisrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNfW2xpc3RlbmVyXShldmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2coZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGV2ZW50IHdpdGggdGhlIGFyZ3VtZW50cyBwcm92aWRlZCBhbmQgY2FsbHMgbG9nRXZlbnQuXG4gICAqIEBwYXJhbSB7IUFuYWx5dGljc0V2ZW50fSBldmVudFR5cGVcbiAgICogQHBhcmFtIHs/Ym9vbGVhbj19IGlzRnJvbVVzZXJBY3Rpb25cbiAgICogQHBhcmFtIHsuLi9wcm90by9hcGlfbWVzc2FnZXMuRXZlbnRQYXJhbXM9fSBldmVudFBhcmFtc1xuICAgKi9cbiAgbG9nU3dnRXZlbnQoZXZlbnRUeXBlLCBpc0Zyb21Vc2VyQWN0aW9uID0gZmFsc2UsIGV2ZW50UGFyYW1zID0gbnVsbCkge1xuICAgIHRoaXMubG9nRXZlbnQoe1xuICAgICAgZXZlbnRUeXBlLFxuICAgICAgZXZlbnRPcmlnaW5hdG9yOiBFdmVudE9yaWdpbmF0b3IuU1dHX0NMSUVOVCxcbiAgICAgIGlzRnJvbVVzZXJBY3Rpb24sXG4gICAgICBhZGRpdGlvbmFsUGFyYW1ldGVyczogZXZlbnRQYXJhbXMsXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtBY3Rpdml0eUlmcmFtZVZpZXd9IGZyb20gJy4uL3VpL2FjdGl2aXR5LWlmcmFtZS12aWV3JztcbmltcG9ydCB7XG4gIEFscmVhZHlTdWJzY3JpYmVkUmVzcG9uc2UsXG4gIFNrdVNlbGVjdGVkUmVzcG9uc2UsXG59IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge1BheVN0YXJ0Rmxvd30gZnJvbSAnLi9wYXktZmxvdyc7XG5pbXBvcnQge1Byb2R1Y3RUeXBlLCBTdWJzY3JpcHRpb25GbG93c30gZnJvbSAnLi4vYXBpL3N1YnNjcmlwdGlvbnMnO1xuaW1wb3J0IHtmZUFyZ3MsIGZlVXJsfSBmcm9tICcuL3NlcnZpY2VzJztcblxuLyoqXG4gKiBUaGUgY2xhc3MgZm9yIENvbnRyaWJ1dGlvbnMgZmxvdy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyaWJ1dGlvbnNGbG93IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqIEBwYXJhbSB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLk9mZmVyc1JlcXVlc3R8dW5kZWZpbmVkfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzLCBvcHRpb25zKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLk9mZmVyc1JlcXVlc3R8dW5kZWZpbmVkfSAqL1xuICAgIHRoaXMub3B0aW9uc18gPSBvcHRpb25zO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSBkZXBzLndpbigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRlcHMuZGlhbG9nTWFuYWdlcigpO1xuXG4gICAgY29uc3QgaXNDbG9zYWJsZSA9IChvcHRpb25zICYmIG9wdGlvbnMuaXNDbG9zYWJsZSkgfHwgdHJ1ZTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFBY3Rpdml0eUlmcmFtZVZpZXd9ICovXG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfID0gbmV3IEFjdGl2aXR5SWZyYW1lVmlldyhcbiAgICAgIHRoaXMud2luXyxcbiAgICAgIHRoaXMuYWN0aXZpdHlQb3J0c18sXG4gICAgICBmZVVybCgnL2NvbnRyaWJ1dGlvbnNpZnJhbWUnKSxcbiAgICAgIGZlQXJncyh7XG4gICAgICAgICdwcm9kdWN0SWQnOiBkZXBzLnBhZ2VDb25maWcoKS5nZXRQcm9kdWN0SWQoKSxcbiAgICAgICAgJ3B1YmxpY2F0aW9uSWQnOiBkZXBzLnBhZ2VDb25maWcoKS5nZXRQdWJsaWNhdGlvbklkKCksXG4gICAgICAgICdwcm9kdWN0VHlwZSc6IFByb2R1Y3RUeXBlLlVJX0NPTlRSSUJVVElPTixcbiAgICAgICAgJ2xpc3QnOiAob3B0aW9ucyAmJiBvcHRpb25zLmxpc3QpIHx8ICdkZWZhdWx0JyxcbiAgICAgICAgJ3NrdXMnOiAob3B0aW9ucyAmJiBvcHRpb25zLnNrdXMpIHx8IG51bGwsXG4gICAgICAgICdpc0Nsb3NhYmxlJzogaXNDbG9zYWJsZSxcbiAgICAgIH0pLFxuICAgICAgLyogc2hvdWxkRmFkZUJvZHkgKi8gdHJ1ZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBbHJlYWR5U3Vic2NyaWJlZFJlc3BvbnNlfSByZXNwb25zZVxuICAgKi9cbiAgaGFuZGxlTGlua1JlcXVlc3RfKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLmdldFN1YnNjcmliZXJPck1lbWJlcigpKSB7XG4gICAgICB0aGlzLmRlcHNfLmNhbGxiYWNrcygpLnRyaWdnZXJMb2dpblJlcXVlc3Qoe1xuICAgICAgICBsaW5rUmVxdWVzdGVkOiAhIXJlc3BvbnNlLmdldExpbmtSZXF1ZXN0ZWQoKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NrdVNlbGVjdGVkUmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqL1xuICBzdGFydFBheUZsb3dfKHJlc3BvbnNlKSB7XG4gICAgY29uc3Qgc2t1ID0gcmVzcG9uc2UuZ2V0U2t1KCk7XG4gICAgY29uc3QgaXNPbmVUaW1lID0gcmVzcG9uc2UuZ2V0T25lVGltZSgpO1xuICAgIGlmIChza3UpIHtcbiAgICAgIGlmIChpc09uZVRpbWUpIHtcbiAgICAgICAgY29uc3QgLyoqIEB0eXBlIHsuLi9hcGkvc3Vic2NyaXB0aW9ucy5TdWJzY3JpcHRpb25SZXF1ZXN0fSAqLyBjb250cmlidXRpb25SZXF1ZXN0ID0ge1xuICAgICAgICAgICAgc2t1SWQ6IHNrdSxcbiAgICAgICAgICAgIG9uZVRpbWU6IGlzT25lVGltZSxcbiAgICAgICAgICB9O1xuICAgICAgICBuZXcgUGF5U3RhcnRGbG93KFxuICAgICAgICAgIHRoaXMuZGVwc18sXG4gICAgICAgICAgY29udHJpYnV0aW9uUmVxdWVzdCxcbiAgICAgICAgICBQcm9kdWN0VHlwZS5VSV9DT05UUklCVVRJT05cbiAgICAgICAgKS5zdGFydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3IFBheVN0YXJ0Rmxvdyh0aGlzLmRlcHNfLCBza3UsIFByb2R1Y3RUeXBlLlVJX0NPTlRSSUJVVElPTikuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjb250cmlidXRpb25zIGZsb3cgb3IgYWxyZWFkeU1lbWJlciBmbG93LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHN0YXJ0KCkge1xuICAgIC8vIFN0YXJ0L2NhbmNlbCBldmVudHMuXG4gICAgdGhpcy5kZXBzX1xuICAgICAgLmNhbGxiYWNrcygpXG4gICAgICAudHJpZ2dlckZsb3dTdGFydGVkKFN1YnNjcmlwdGlvbkZsb3dzLlNIT1dfQ09OVFJJQlVUSU9OX09QVElPTlMpO1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5vbkNhbmNlbCgoKSA9PiB7XG4gICAgICB0aGlzLmRlcHNfXG4gICAgICAgIC5jYWxsYmFja3MoKVxuICAgICAgICAudHJpZ2dlckZsb3dDYW5jZWxlZChTdWJzY3JpcHRpb25GbG93cy5TSE9XX0NPTlRSSUJVVElPTl9PUFRJT05TKTtcbiAgICB9KTtcbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18ub24oXG4gICAgICBBbHJlYWR5U3Vic2NyaWJlZFJlc3BvbnNlLFxuICAgICAgdGhpcy5oYW5kbGVMaW5rUmVxdWVzdF8uYmluZCh0aGlzKVxuICAgICk7XG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLm9uKFxuICAgICAgU2t1U2VsZWN0ZWRSZXNwb25zZSxcbiAgICAgIHRoaXMuc3RhcnRQYXlGbG93Xy5iaW5kKHRoaXMpXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLmRpYWxvZ01hbmFnZXJfLm9wZW5WaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtBY3Rpdml0eUlmcmFtZVZpZXd9IGZyb20gJy4uL3VpL2FjdGl2aXR5LWlmcmFtZS12aWV3JztcbmltcG9ydCB7QW5hbHl0aWNzRXZlbnR9IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge0RlZmVycmVkQWNjb3VudENyZWF0aW9uUmVzcG9uc2V9IGZyb20gJy4uL2FwaS9kZWZlcnJlZC1hY2NvdW50LWNyZWF0aW9uJztcbmltcG9ydCB7Snd0SGVscGVyfSBmcm9tICcuLi91dGlscy9qd3QnO1xuaW1wb3J0IHtQYXlDb21wbGV0ZUZsb3d9IGZyb20gJy4vcGF5LWZsb3cnO1xuaW1wb3J0IHtQdXJjaGFzZURhdGEsIFN1YnNjcmliZVJlc3BvbnNlfSBmcm9tICcuLi9hcGkvc3Vic2NyaWJlLXJlc3BvbnNlJztcbmltcG9ydCB7U3Vic2NyaXB0aW9uRmxvd3N9IGZyb20gJy4uL2FwaS9zdWJzY3JpcHRpb25zJztcbmltcG9ydCB7VXNlckRhdGF9IGZyb20gJy4uL2FwaS91c2VyLWRhdGEnO1xuaW1wb3J0IHtmZUFyZ3MsIGZlVXJsfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7aXNDYW5jZWxFcnJvcn0gZnJvbSAnLi4vdXRpbHMvZXJyb3JzJztcblxuLyoqXG4gKiBUaGUgZmxvdyB0byBpbml0aWF0ZSBkZWZlcnJlZCBhY2NvdW50IHByb2Nlc3MuXG4gKiBTZWUgYFN1YnNjcmlwdGlvbnMuY29tcGxldGVEZWZlcnJlZEFjY291bnRDcmVhdGlvbmAgQVBJLlxuICovXG5leHBvcnQgY2xhc3MgRGVmZXJyZWRBY2NvdW50RmxvdyB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0gez8uLi9hcGkvZGVmZXJyZWQtYWNjb3VudC1jcmVhdGlvbi5EZWZlcnJlZEFjY291bnRDcmVhdGlvblJlcXVlc3R9IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlcHMsIG9wdGlvbnMpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9kZXBzLkRlcHNEZWZ9ICovXG4gICAgdGhpcy5kZXBzXyA9IGRlcHM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IGRlcHMud2luKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9hY3Rpdml0aWVzLkFjdGl2aXR5UG9ydHN9ICovXG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXyA9IGRlcHMuYWN0aXZpdGllcygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvZGlhbG9nLW1hbmFnZXIuRGlhbG9nTWFuYWdlcn0gKi9cbiAgICB0aGlzLmRpYWxvZ01hbmFnZXJfID0gZGVwcy5kaWFsb2dNYW5hZ2VyKCk7XG5cbiAgICAvKiogQHByaXZhdGUgez9BY3Rpdml0eUlmcmFtZVZpZXd9ICovXG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2V9ICovXG4gICAgdGhpcy5vcGVuUHJvbWlzZV8gPSBudWxsO1xuXG4gICAgLyoqIEB0eXBlIHshLi4vYXBpL2RlZmVycmVkLWFjY291bnQtY3JlYXRpb24uRGVmZXJyZWRBY2NvdW50Q3JlYXRpb25SZXF1ZXN0fSAqL1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgZW50aXRsZW1lbnRzOiBudWxsLFxuICAgICAgY29uc2VudDogdHJ1ZSxcbiAgICB9O1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9hcGkvZGVmZXJyZWQtYWNjb3VudC1jcmVhdGlvbi5EZWZlcnJlZEFjY291bnRDcmVhdGlvblJlcXVlc3R9ICovXG4gICAgdGhpcy5vcHRpb25zXyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMgfHwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZGVmZXJyZWQgYWNjb3VudCBmbG93LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhRGVmZXJyZWRBY2NvdW50Q3JlYXRpb25SZXNwb25zZT59XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICBjb25zdCBlbnRpdGxlbWVudHMgPSB0aGlzLm9wdGlvbnNfLmVudGl0bGVtZW50cztcblxuICAgIC8vIEZvciBub3csIGVudGl0bGVtZW50cyBhcmUgcmVxdWlyZWQgdG8gYmUgcHJlc2VudCBhbmQgaGF2ZSB0aGUgR29vZ2xlXG4gICAgLy8gdG9rZW4uIFRoaXMgaXMgc3RyaWN0bHkgbm90IHJlcXVpcmVkIGZvciB0aGUgaW1wbGVtZW50YXRpb24uIEJ1dCBpdCdzXG4gICAgLy8gcHJlZmVycmFibGUgQVBJLXdpc2UgYXQgdGhpcyB0aW1lLlxuICAgIGlmICghZW50aXRsZW1lbnRzIHx8ICFlbnRpdGxlbWVudHMuZ2V0RW50aXRsZW1lbnRGb3JTb3VyY2UoJ2dvb2dsZScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVudGl0bGVtZW50cyB3aXRoIFwiZ29vZ2xlXCIgc291cmNlJyk7XG4gICAgfVxuXG4gICAgLy8gU3RhcnQvY2FuY2VsIGV2ZW50cy5cbiAgICB0aGlzLmRlcHNfXG4gICAgICAuY2FsbGJhY2tzKClcbiAgICAgIC50cmlnZ2VyRmxvd1N0YXJ0ZWQoU3Vic2NyaXB0aW9uRmxvd3MuQ09NUExFVEVfREVGRVJSRURfQUNDT1VOVF9DUkVBVElPTik7XG5cbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18gPSBuZXcgQWN0aXZpdHlJZnJhbWVWaWV3KFxuICAgICAgdGhpcy53aW5fLFxuICAgICAgdGhpcy5hY3Rpdml0eVBvcnRzXyxcbiAgICAgIGZlVXJsKCcvcmVjb3ZlcmlmcmFtZScpLFxuICAgICAgZmVBcmdzKHtcbiAgICAgICAgJ3B1YmxpY2F0aW9uSWQnOiB0aGlzLmRlcHNfLnBhZ2VDb25maWcoKS5nZXRQdWJsaWNhdGlvbklkKCksXG4gICAgICAgICdwcm9kdWN0SWQnOiB0aGlzLmRlcHNfLnBhZ2VDb25maWcoKS5nZXRQcm9kdWN0SWQoKSxcbiAgICAgICAgJ2VudGl0bGVtZW50cyc6IChlbnRpdGxlbWVudHMgJiYgZW50aXRsZW1lbnRzLnJhdykgfHwgbnVsbCxcbiAgICAgICAgJ2NvbnNlbnQnOiB0aGlzLm9wdGlvbnNfLmNvbnNlbnQsXG4gICAgICB9KSxcbiAgICAgIC8qIHNob3VsZEZhZGVCb2R5ICovIHRydWVcbiAgICApO1xuXG4gICAgdGhpcy5vcGVuUHJvbWlzZV8gPSB0aGlzLmRpYWxvZ01hbmFnZXJfLm9wZW5WaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5hY2NlcHRSZXN1bHQoKS50aGVuKFxuICAgICAgcmVzdWx0ID0+IHtcbiAgICAgICAgLy8gVGhlIGNvbnNlbnQgcGFydCBpcyBjb21wbGV0ZS5cbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ29uc2VudFJlc3BvbnNlXyhcbiAgICAgICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovIChyZXN1bHQuZGF0YSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICByZWFzb24gPT4ge1xuICAgICAgICBpZiAoaXNDYW5jZWxFcnJvcihyZWFzb24pKSB7XG4gICAgICAgICAgdGhpcy5kZXBzX1xuICAgICAgICAgICAgLmNhbGxiYWNrcygpXG4gICAgICAgICAgICAudHJpZ2dlckZsb3dDYW5jZWxlZChcbiAgICAgICAgICAgICAgU3Vic2NyaXB0aW9uRmxvd3MuQ09NUExFVEVfREVGRVJSRURfQUNDT1VOVF9DUkVBVElPTlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRpYWxvZ01hbmFnZXJfLmNvbXBsZXRlVmlldyh0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gZGF0YVxuICAgKiBAcmV0dXJuIHshRGVmZXJyZWRBY2NvdW50Q3JlYXRpb25SZXNwb25zZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUNvbnNlbnRSZXNwb25zZV8oZGF0YSkge1xuICAgIHRoaXMuZGVwc18uZW50aXRsZW1lbnRzTWFuYWdlcigpLmJsb2NrTmV4dE5vdGlmaWNhdGlvbigpO1xuXG4gICAgLy8gUGFyc2UgdGhlIHJlc3BvbnNlLlxuICAgIGNvbnN0IGVudGl0bGVtZW50c0p3dCA9IGRhdGFbJ2VudGl0bGVtZW50cyddO1xuICAgIGNvbnN0IGlkVG9rZW4gPSBkYXRhWydpZFRva2VuJ107XG4gICAgY29uc3QgcHJvZHVjdFR5cGUgPSBkYXRhWydwcm9kdWN0VHlwZSddO1xuICAgIGNvbnN0IGVudGl0bGVtZW50cyA9IHRoaXMuZGVwc19cbiAgICAgIC5lbnRpdGxlbWVudHNNYW5hZ2VyKClcbiAgICAgIC5wYXJzZUVudGl0bGVtZW50cyh7J3NpZ25lZEVudGl0bGVtZW50cyc6IGVudGl0bGVtZW50c0p3dH0pO1xuICAgIGNvbnN0IHVzZXJEYXRhID0gbmV3IFVzZXJEYXRhKFxuICAgICAgaWRUb2tlbixcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKG5ldyBKd3RIZWxwZXIoKS5kZWNvZGUoaWRUb2tlbikpXG4gICAgKTtcbiAgICBjb25zdCBwdXJjaGFzZURhdGFMaXN0ID0gZGF0YVsncHVyY2hhc2VEYXRhTGlzdCddXG4gICAgICA/IGRhdGFbJ3B1cmNoYXNlRGF0YUxpc3QnXS5tYXAoXG4gICAgICAgICAgcGQgPT4gbmV3IFB1cmNoYXNlRGF0YShwZFsnZGF0YSddLCBwZFsnc2lnbmF0dXJlJ10pXG4gICAgICAgIClcbiAgICAgIDogW1xuICAgICAgICAgIC8vIFRPRE8oZHZveXRlbmtvKTogY2xlYW51cC9kZXByZWNhdGUuXG4gICAgICAgICAgbmV3IFB1cmNoYXNlRGF0YShcbiAgICAgICAgICAgIGRhdGFbJ3B1cmNoYXNlRGF0YSddWydkYXRhJ10sXG4gICAgICAgICAgICBkYXRhWydwdXJjaGFzZURhdGEnXVsnc2lnbmF0dXJlJ11cbiAgICAgICAgICApLFxuICAgICAgICBdO1xuXG4gICAgLy8gRm9yIG5vdywgd2UnbGwgdXNlIHRoZSBgUGF5Q29tcGxldGVGbG93YCBhcyBhIFwiY3JlYXRpbmcgYWNjb3VudFwiIGZsb3cuXG4gICAgLy8gQnV0IHRoaXMgY2FuIGJlIGV2ZW50dWFsbHkgaW1wbGVtZW50ZWQgYnkgdGhlIHNhbWUgaWZyYW1lLlxuICAgIGNvbnN0IGNyZWF0aW5nRmxvdyA9IG5ldyBQYXlDb21wbGV0ZUZsb3codGhpcy5kZXBzXyk7XG4gICAgY29uc3QgY29tcGxldGVIYW5kbGVyID0gY3JlYXRpbmdGbG93LmNvbXBsZXRlLmJpbmQoY3JlYXRpbmdGbG93KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IERlZmVycmVkQWNjb3VudENyZWF0aW9uUmVzcG9uc2UoXG4gICAgICBlbnRpdGxlbWVudHMsXG4gICAgICB1c2VyRGF0YSxcbiAgICAgIHB1cmNoYXNlRGF0YUxpc3QsXG4gICAgICBjb21wbGV0ZUhhbmRsZXJcbiAgICApO1xuXG4gICAgdGhpcy5kZXBzX1xuICAgICAgLmV2ZW50TWFuYWdlcigpXG4gICAgICAubG9nU3dnRXZlbnQoQW5hbHl0aWNzRXZlbnQuQUNUSU9OX05FV19ERUZFUlJFRF9BQ0NPVU5ULCB0cnVlKTtcblxuICAgIC8vIFN0YXJ0IHRoZSBcInN5bmNcIiBmbG93LlxuICAgIGNyZWF0aW5nRmxvdy5zdGFydChcbiAgICAgIG5ldyBTdWJzY3JpYmVSZXNwb25zZShcbiAgICAgICAgJycsIC8vIHJhdyBmaWVsZCBkb2Vzbid0IG1hdHRlciBpbiB0aGlzIGNhc2VcbiAgICAgICAgcHVyY2hhc2VEYXRhTGlzdFswXSxcbiAgICAgICAgdXNlckRhdGEsXG4gICAgICAgIGVudGl0bGVtZW50cyxcbiAgICAgICAgcHJvZHVjdFR5cGUsXG4gICAgICAgICgpID0+IFByb21pc2UucmVzb2x2ZSgpIC8vIGNvbXBsZXRlSGFuZGxlciBkb2Vzbid0IG1hdHRlciBpbiB0aGlzIGNhc2VcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiogQGludGVyZmFjZSAqL1xuZXhwb3J0IGNsYXNzIERlcHNEZWYge1xuICAvKipcbiAgICogQHJldHVybiB7IS4uL21vZGVsL2RvYy5Eb2N9XG4gICAqL1xuICBkb2MoKSB7fVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshV2luZG93fVxuICAgKi9cbiAgd2luKCkge31cblxuICAvKipcbiAgICogQHJldHVybiB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLkNvbmZpZ31cbiAgICovXG4gIGNvbmZpZygpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyEuLi9tb2RlbC9wYWdlLWNvbmZpZy5QYWdlQ29uZmlnfVxuICAgKi9cbiAgcGFnZUNvbmZpZygpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c31cbiAgICovXG4gIGFjdGl2aXRpZXMoKSB7fVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshLi9wYXktY2xpZW50LlBheUNsaWVudH1cbiAgICovXG4gIHBheUNsaWVudCgpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9XG4gICAqL1xuICBkaWFsb2dNYW5hZ2VyKCkge31cblxuICAvKipcbiAgICogQHJldHVybiB7IS4vZW50aXRsZW1lbnRzLW1hbmFnZXIuRW50aXRsZW1lbnRzTWFuYWdlcn1cbiAgICovXG4gIGVudGl0bGVtZW50c01hbmFnZXIoKSB7fVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshLi9jYWxsYmFja3MuQ2FsbGJhY2tzfVxuICAgKi9cbiAgY2FsbGJhY2tzKCkge31cblxuICAvKipcbiAgICogQHJldHVybiB7IS4uL3J1bnRpbWUvc3RvcmFnZS5TdG9yYWdlfVxuICAgKi9cbiAgc3RvcmFnZSgpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyEuLi9ydW50aW1lL2FuYWx5dGljcy1zZXJ2aWNlLkFuYWx5dGljc1NlcnZpY2V9XG4gICAqL1xuICBhbmFseXRpY3MoKSB7fVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshLi4vcnVudGltZS9qc2Vycm9yLkpzRXJyb3J9XG4gICAqL1xuICBqc2Vycm9yKCkge31cblxuICAvKipcbiAgICogQHJldHVybiB7IS4uL3J1bnRpbWUvY2xpZW50LWV2ZW50LW1hbmFnZXIuQ2xpZW50RXZlbnRNYW5hZ2VyfVxuICAgKi9cbiAgZXZlbnRNYW5hZ2VyKCkge31cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtFbnRpdGxlbWVudCwgRW50aXRsZW1lbnRzfSBmcm9tICcuLi9hcGkvZW50aXRsZW1lbnRzJztcbmltcG9ydCB7Snd0SGVscGVyfSBmcm9tICcuLi91dGlscy9qd3QnO1xuaW1wb3J0IHtUb2FzdH0gZnJvbSAnLi4vdWkvdG9hc3QnO1xuaW1wb3J0IHtmZUFyZ3MsIGZlVXJsfSBmcm9tICcuLi9ydW50aW1lL3NlcnZpY2VzJztcbmltcG9ydCB7c2VydmljZVVybH0gZnJvbSAnLi9zZXJ2aWNlcyc7XG5cbmNvbnN0IFNFUlZJQ0VfSUQgPSAnc3Vic2NyaWJlLmdvb2dsZS5jb20nO1xuY29uc3QgVE9BU1RfU1RPUkFHRV9LRVkgPSAndG9hc3QnO1xuY29uc3QgRU5UU19TVE9SQUdFX0tFWSA9ICdlbnRzJztcbmNvbnN0IElTX1JFQURZX1RPX1BBWV9TVE9SQUdFX0tFWSA9ICdpc3JlYWR5dG9wYXknO1xuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIEVudGl0bGVtZW50c01hbmFnZXIge1xuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHBhcmFtIHshLi4vbW9kZWwvcGFnZS1jb25maWcuUGFnZUNvbmZpZ30gcGFnZUNvbmZpZ1xuICAgKiBAcGFyYW0geyEuL2ZldGNoZXIuRmV0Y2hlcn0gZmV0Y2hlclxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKi9cbiAgY29uc3RydWN0b3Iod2luLCBwYWdlQ29uZmlnLCBmZXRjaGVyLCBkZXBzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vbW9kZWwvcGFnZS1jb25maWcuUGFnZUNvbmZpZ30gKi9cbiAgICB0aGlzLnBhZ2VDb25maWdfID0gcGFnZUNvbmZpZztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnB1YmxpY2F0aW9uSWRfID0gdGhpcy5wYWdlQ29uZmlnXy5nZXRQdWJsaWNhdGlvbklkKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9mZXRjaGVyLkZldGNoZXJ9ICovXG4gICAgdGhpcy5mZXRjaGVyXyA9IGZldGNoZXI7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9kZXBzLkRlcHNEZWZ9ICovXG4gICAgdGhpcy5kZXBzXyA9IGRlcHM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshSnd0SGVscGVyfSAqL1xuICAgIHRoaXMuand0SGVscGVyXyA9IG5ldyBKd3RIZWxwZXIoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2U8IUVudGl0bGVtZW50cz59ICovXG4gICAgdGhpcy5yZXNwb25zZVByb21pc2VfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMucG9zaXRpdmVSZXRyaWVzXyA9IDA7XG5cbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5ibG9ja05leHROb3RpZmljYXRpb25fID0gZmFsc2U7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9zdG9yYWdlLlN0b3JhZ2V9ICovXG4gICAgdGhpcy5zdG9yYWdlXyA9IGRlcHMuc3RvcmFnZSgpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL3J1bnRpbWUvYW5hbHl0aWNzLXNlcnZpY2UuQW5hbHl0aWNzU2VydmljZX0gKi9cbiAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2VfID0gZGVwcy5hbmFseXRpY3MoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5Db25maWd9ICovXG4gICAgdGhpcy5jb25maWdfID0gZGVwcy5jb25maWcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBleHBlY3RQb3NpdGl2ZVxuICAgKi9cbiAgcmVzZXQoZXhwZWN0UG9zaXRpdmUpIHtcbiAgICB0aGlzLnJlc3BvbnNlUHJvbWlzZV8gPSBudWxsO1xuICAgIHRoaXMucG9zaXRpdmVSZXRyaWVzXyA9IE1hdGgubWF4KFxuICAgICAgdGhpcy5wb3NpdGl2ZVJldHJpZXNfLFxuICAgICAgZXhwZWN0UG9zaXRpdmUgPyAzIDogMFxuICAgICk7XG4gICAgaWYgKGV4cGVjdFBvc2l0aXZlKSB7XG4gICAgICB0aGlzLnN0b3JhZ2VfLnJlbW92ZShFTlRTX1NUT1JBR0VfS0VZKTtcbiAgICAgIHRoaXMuc3RvcmFnZV8ucmVtb3ZlKElTX1JFQURZX1RPX1BBWV9TVE9SQUdFX0tFWSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgb2YgdGhlIGVudGl0bGVtZW50cyBzdGF0ZSBhbmQgY2FjaGUuXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLnJlc3BvbnNlUHJvbWlzZV8gPSBudWxsO1xuICAgIHRoaXMucG9zaXRpdmVSZXRyaWVzXyA9IDA7XG4gICAgdGhpcy51bmJsb2NrTmV4dE5vdGlmaWNhdGlvbigpO1xuICAgIHRoaXMuc3RvcmFnZV8ucmVtb3ZlKEVOVFNfU1RPUkFHRV9LRVkpO1xuICAgIHRoaXMuc3RvcmFnZV8ucmVtb3ZlKFRPQVNUX1NUT1JBR0VfS0VZKTtcbiAgICB0aGlzLnN0b3JhZ2VfLnJlbW92ZShJU19SRUFEWV9UT19QQVlfU1RPUkFHRV9LRVkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFF1ZXJ5U3RyaW5nXygpIHtcbiAgICByZXR1cm4gdGhpcy53aW5fLmxvY2F0aW9uLnNlYXJjaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9zdHJpbmc9fSBlbmNyeXB0ZWREb2N1bWVudEtleVxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhRW50aXRsZW1lbnRzPn1cbiAgICovXG4gIGdldEVudGl0bGVtZW50cyhlbmNyeXB0ZWREb2N1bWVudEtleSkge1xuICAgIGlmICghdGhpcy5yZXNwb25zZVByb21pc2VfKSB7XG4gICAgICB0aGlzLnJlc3BvbnNlUHJvbWlzZV8gPSB0aGlzLmdldEVudGl0bGVtZW50c0Zsb3dfKGVuY3J5cHRlZERvY3VtZW50S2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVzcG9uc2VQcm9taXNlXy50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5pc1JlYWR5VG9QYXkgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2VfLnNldFJlYWR5VG9QYXkocmVzcG9uc2UuaXNSZWFkeVRvUGF5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmF3XG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGlzUmVhZHlUb1BheVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcHVzaE5leHRFbnRpdGxlbWVudHMocmF3LCBpc1JlYWR5VG9QYXkpIHtcbiAgICBjb25zdCBlbnRpdGxlbWVudHMgPSB0aGlzLmdldFZhbGlkSnd0RW50aXRsZW1lbnRzXyhcbiAgICAgIHJhdyxcbiAgICAgIC8qIHJlcXVpcmVOb25FeHBpcmVkICovIHRydWUsXG4gICAgICBpc1JlYWR5VG9QYXlcbiAgICApO1xuICAgIGlmIChlbnRpdGxlbWVudHMgJiYgZW50aXRsZW1lbnRzLmVuYWJsZXNUaGlzKCkpIHtcbiAgICAgIHRoaXMuc3RvcmFnZV8uc2V0KEVOVFNfU1RPUkFHRV9LRVksIHJhdyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P3N0cmluZz19IGVuY3J5cHRlZERvY3VtZW50S2V5XG4gICAqIEByZXR1cm4geyFQcm9taXNlPCFFbnRpdGxlbWVudHM+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0RW50aXRsZW1lbnRzRmxvd18oZW5jcnlwdGVkRG9jdW1lbnRLZXkpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVudGl0bGVtZW50c1dpdGhDYWNoaW5nXyhlbmNyeXB0ZWREb2N1bWVudEtleSkudGhlbihcbiAgICAgIGVudGl0bGVtZW50cyA9PiB7XG4gICAgICAgIHRoaXMub25FbnRpdGxlbWVudHNGZXRjaGVkXyhlbnRpdGxlbWVudHMpO1xuICAgICAgICByZXR1cm4gZW50aXRsZW1lbnRzO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/c3RyaW5nPX0gZW5jcnlwdGVkRG9jdW1lbnRLZXlcbiAgICogQHJldHVybiB7IVByb21pc2U8IUVudGl0bGVtZW50cz59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmZXRjaEVudGl0bGVtZW50c1dpdGhDYWNoaW5nXyhlbmNyeXB0ZWREb2N1bWVudEtleSkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLnN0b3JhZ2VfLmdldChFTlRTX1NUT1JBR0VfS0VZKSxcbiAgICAgIHRoaXMuc3RvcmFnZV8uZ2V0KElTX1JFQURZX1RPX1BBWV9TVE9SQUdFX0tFWSksXG4gICAgXSkudGhlbihjYWNoZWRWYWx1ZXMgPT4ge1xuICAgICAgY29uc3QgcmF3ID0gY2FjaGVkVmFsdWVzWzBdO1xuICAgICAgY29uc3QgaXJ0cCA9IGNhY2hlZFZhbHVlc1sxXTtcbiAgICAgIC8vIFRyeSBjYWNoZSBmaXJzdC5cbiAgICAgIGlmIChyYXcgJiYgIWVuY3J5cHRlZERvY3VtZW50S2V5KSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZ2V0VmFsaWRKd3RFbnRpdGxlbWVudHNfKFxuICAgICAgICAgIHJhdyxcbiAgICAgICAgICAvKiByZXF1aXJlTm9uRXhwaXJlZCAqLyB0cnVlLFxuICAgICAgICAgIGlydHBTdHJpbmdUb0Jvb2xlYW4oaXJ0cClcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGNhY2hlZCAmJiBjYWNoZWQuZW5hYmxlc1RoaXMoKSkge1xuICAgICAgICAgIC8vIEFscmVhZHkgaGF2ZSBhIHBvc2l0aXZlIHJlc3BvbnNlLlxuICAgICAgICAgIHRoaXMucG9zaXRpdmVSZXRyaWVzXyA9IDA7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gSWYgY2FjaGUgZGlkbid0IG1hdGNoLCBwZXJmb3JtIGZldGNoLlxuICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hFbnRpdGxlbWVudHNfKGVuY3J5cHRlZERvY3VtZW50S2V5KS50aGVuKGVudHMgPT4ge1xuICAgICAgICAvLyBJZiBlbnRpdGxlbWVudHMgbWF0Y2ggdGhlIHByb2R1Y3QsIHN0b3JlIHRoZW0gaW4gY2FjaGUuXG4gICAgICAgIGlmIChlbnRzICYmIGVudHMuZW5hYmxlc1RoaXMoKSAmJiBlbnRzLnJhdykge1xuICAgICAgICAgIHRoaXMuc3RvcmFnZV8uc2V0KEVOVFNfU1RPUkFHRV9LRVksIGVudHMucmF3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cztcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P3N0cmluZz19IGVuY3J5cHRlZERvY3VtZW50S2V5XG4gICAqIEByZXR1cm4geyFQcm9taXNlPCFFbnRpdGxlbWVudHM+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZmV0Y2hFbnRpdGxlbWVudHNfKGVuY3J5cHRlZERvY3VtZW50S2V5KSB7XG4gICAgLy8gVE9ETyhkdm95dGVua28pOiBSZXBsYWNlIHJldHJpZXMgd2l0aCBjb25zaXN0ZW50IGZldGNoLlxuICAgIGxldCBwb3NpdGl2ZVJldHJpZXMgPSB0aGlzLnBvc2l0aXZlUmV0cmllc187XG4gICAgdGhpcy5wb3NpdGl2ZVJldHJpZXNfID0gMDtcbiAgICBjb25zdCBhdHRlbXB0ID0gKCkgPT4ge1xuICAgICAgcG9zaXRpdmVSZXRyaWVzLS07XG4gICAgICByZXR1cm4gdGhpcy5mZXRjaF8oZW5jcnlwdGVkRG9jdW1lbnRLZXkpLnRoZW4oZW50aXRsZW1lbnRzID0+IHtcbiAgICAgICAgaWYgKGVudGl0bGVtZW50cy5lbmFibGVzVGhpcygpIHx8IHBvc2l0aXZlUmV0cmllcyA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGVudGl0bGVtZW50cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgdGhpcy53aW5fLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShhdHRlbXB0KCkpO1xuICAgICAgICAgIH0sIDU1MCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gYXR0ZW1wdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHNldFRvYXN0U2hvd24odmFsdWUpIHtcbiAgICB0aGlzLnN0b3JhZ2VfLnNldChUT0FTVF9TVE9SQUdFX0tFWSwgdmFsdWUgPyAnMScgOiAnMCcpO1xuICB9XG5cbiAgLyoqXG4gICAqL1xuICBibG9ja05leHROb3RpZmljYXRpb24oKSB7XG4gICAgdGhpcy5ibG9ja05leHROb3RpZmljYXRpb25fID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKi9cbiAgdW5ibG9ja05leHROb3RpZmljYXRpb24oKSB7XG4gICAgdGhpcy5ibG9ja05leHROb3RpZmljYXRpb25fID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVGhlIEpTT04gbXVzdCBlaXRoZXIgY29udGFpbiBhIFwic2lnbmVkRW50aXRsZW1lbnRzXCIgd2l0aCBKV1QsIG9yXG4gICAqIFwiZW50aXRsZW1lbnRzXCIgZmllbGQgd2l0aCBwbGFpbiBKU09OIG9iamVjdC5cbiAgICogQHBhcmFtIHshT2JqZWN0fSBqc29uXG4gICAqIEByZXR1cm4geyFFbnRpdGxlbWVudHN9XG4gICAqL1xuICBwYXJzZUVudGl0bGVtZW50cyhqc29uKSB7XG4gICAgY29uc3QgaXNSZWFkeVRvUGF5ID0ganNvblsnaXNSZWFkeVRvUGF5J107XG4gICAgaWYgKGlzUmVhZHlUb1BheSA9PSBudWxsKSB7XG4gICAgICB0aGlzLnN0b3JhZ2VfLnJlbW92ZShJU19SRUFEWV9UT19QQVlfU1RPUkFHRV9LRVkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0b3JhZ2VfLnNldChJU19SRUFEWV9UT19QQVlfU1RPUkFHRV9LRVksIFN0cmluZyhpc1JlYWR5VG9QYXkpKTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmVkRGF0YSA9IGpzb25bJ3NpZ25lZEVudGl0bGVtZW50cyddO1xuICAgIGNvbnN0IGRlY3J5cHRlZERvY3VtZW50S2V5ID0ganNvblsnZGVjcnlwdGVkRG9jdW1lbnRLZXknXTtcbiAgICBpZiAoc2lnbmVkRGF0YSkge1xuICAgICAgY29uc3QgZW50aXRsZW1lbnRzID0gdGhpcy5nZXRWYWxpZEp3dEVudGl0bGVtZW50c18oXG4gICAgICAgIHNpZ25lZERhdGEsXG4gICAgICAgIC8qIHJlcXVpcmVOb25FeHBpcmVkICovIGZhbHNlLFxuICAgICAgICBpc1JlYWR5VG9QYXksXG4gICAgICAgIGRlY3J5cHRlZERvY3VtZW50S2V5XG4gICAgICApO1xuICAgICAgaWYgKGVudGl0bGVtZW50cykge1xuICAgICAgICByZXR1cm4gZW50aXRsZW1lbnRzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwbGFpbkVudGl0bGVtZW50cyA9IGpzb25bJ2VudGl0bGVtZW50cyddO1xuICAgICAgaWYgKHBsYWluRW50aXRsZW1lbnRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVudGl0bGVtZW50c18oXG4gICAgICAgICAgJycsXG4gICAgICAgICAgcGxhaW5FbnRpdGxlbWVudHMsXG4gICAgICAgICAgaXNSZWFkeVRvUGF5LFxuICAgICAgICAgIGRlY3J5cHRlZERvY3VtZW50S2V5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEVtcHR5IHJlc3BvbnNlLlxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUVudGl0bGVtZW50c18oJycsIFtdLCBpc1JlYWR5VG9QYXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByYXdcbiAgICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlTm9uRXhwaXJlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpc1JlYWR5VG9QYXlcbiAgICogQHBhcmFtIHs/c3RyaW5nPX0gZGVjcnlwdGVkRG9jdW1lbnRLZXlcbiAgICogQHJldHVybiB7P0VudGl0bGVtZW50c31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFZhbGlkSnd0RW50aXRsZW1lbnRzXyhcbiAgICByYXcsXG4gICAgcmVxdWlyZU5vbkV4cGlyZWQsXG4gICAgaXNSZWFkeVRvUGF5LFxuICAgIGRlY3J5cHRlZERvY3VtZW50S2V5XG4gICkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBqd3QgPSB0aGlzLmp3dEhlbHBlcl8uZGVjb2RlKHJhdyk7XG4gICAgICBpZiAocmVxdWlyZU5vbkV4cGlyZWQpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgZXhwID0gand0WydleHAnXTtcbiAgICAgICAgaWYgKHBhcnNlRmxvYXQoZXhwKSAqIDEwMDAgPCBub3cpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZW50aXRsZW1lbnRzQ2xhaW0gPSBqd3RbJ2VudGl0bGVtZW50cyddO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGVudGl0bGVtZW50c0NsYWltICYmXG4gICAgICAgICAgdGhpcy5jcmVhdGVFbnRpdGxlbWVudHNfKFxuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgZW50aXRsZW1lbnRzQ2xhaW0sXG4gICAgICAgICAgICBpc1JlYWR5VG9QYXksXG4gICAgICAgICAgICBkZWNyeXB0ZWREb2N1bWVudEtleVxuICAgICAgICAgICkpIHx8XG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWdub3JlIHRoZSBlcnJvci5cbiAgICAgIHRoaXMud2luXy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmF3XG4gICAqIEBwYXJhbSB7IU9iamVjdHwhQXJyYXk8IU9iamVjdD59IGpzb25cbiAgICogQHBhcmFtIHtib29sZWFuPX0gaXNSZWFkeVRvUGF5XG4gICAqIEBwYXJhbSB7P3N0cmluZz19IGRlY3J5cHRlZERvY3VtZW50S2V5XG4gICAqIEByZXR1cm4geyFFbnRpdGxlbWVudHN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVFbnRpdGxlbWVudHNfKHJhdywganNvbiwgaXNSZWFkeVRvUGF5LCBkZWNyeXB0ZWREb2N1bWVudEtleSkge1xuICAgIHJldHVybiBuZXcgRW50aXRsZW1lbnRzKFxuICAgICAgU0VSVklDRV9JRCxcbiAgICAgIHJhdyxcbiAgICAgIEVudGl0bGVtZW50LnBhcnNlTGlzdEZyb21Kc29uKGpzb24pLFxuICAgICAgdGhpcy5wYWdlQ29uZmlnXy5nZXRQcm9kdWN0SWQoKSxcbiAgICAgIHRoaXMuYWNrXy5iaW5kKHRoaXMpLFxuICAgICAgaXNSZWFkeVRvUGF5LFxuICAgICAgZGVjcnlwdGVkRG9jdW1lbnRLZXlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVudGl0bGVtZW50c30gZW50aXRsZW1lbnRzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkVudGl0bGVtZW50c0ZldGNoZWRfKGVudGl0bGVtZW50cykge1xuICAgIC8vIFNraXAgYW55IG5vdGlmaWNhdGlvbnMgYW5kIHRvYXN0IGlmIG90aGVyIGZsb3dzIGFyZSBvbmdvaW5nLlxuICAgIC8vIFRPRE8oZHZveXRlbmtvKTogd2hhdCdzIHRoZSByaWdodCBhY3Rpb24gd2hlbiBwYXkgZmxvdyB3YXMgY2FuY2VsZWQ/XG4gICAgY29uc3QgYmxvY2tOb3RpZmljYXRpb24gPSB0aGlzLmJsb2NrTmV4dE5vdGlmaWNhdGlvbl87XG4gICAgdGhpcy5ibG9ja05leHROb3RpZmljYXRpb25fID0gZmFsc2U7XG4gICAgaWYgKGJsb2NrTm90aWZpY2F0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTm90aWZ5IG9uIHRoZSByZWNlaXZlZCBlbnRpdGxlbWVudHMuXG4gICAgdGhpcy5kZXBzX1xuICAgICAgLmNhbGxiYWNrcygpXG4gICAgICAudHJpZ2dlckVudGl0bGVtZW50c1Jlc3BvbnNlKFByb21pc2UucmVzb2x2ZShlbnRpdGxlbWVudHMpKTtcblxuICAgIC8vIFNob3cgYSB0b2FzdCBpZiBuZWVkZWQuXG4gICAgdGhpcy5tYXliZVNob3dUb2FzdF8oZW50aXRsZW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbnRpdGxlbWVudHN9IGVudGl0bGVtZW50c1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIG1heWJlU2hvd1RvYXN0XyhlbnRpdGxlbWVudHMpIHtcbiAgICBjb25zdCBlbnRpdGxlbWVudCA9IGVudGl0bGVtZW50cy5nZXRFbnRpdGxlbWVudEZvclRoaXMoKTtcbiAgICBpZiAoIWVudGl0bGVtZW50KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHN0b3JhZ2UgYml0IGlzIHNldC4gSXQncyBvbmx5IHNldCBieSB0aGUgYEVudGl0bGVtZW50cy5hY2tgXG4gICAgLy8gbWV0aG9kLlxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VfLmdldChUT0FTVF9TVE9SQUdFX0tFWSkudGhlbih2YWx1ZSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT0gJzEnKSB7XG4gICAgICAgIC8vIEFscmVhZHkgc2hvd247XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlbnRpdGxlbWVudCkge1xuICAgICAgICB0aGlzLnNob3dUb2FzdF8oZW50aXRsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVudGl0bGVtZW50fSBlbnRpdGxlbWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2hvd1RvYXN0XyhlbnRpdGxlbWVudCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IGVudGl0bGVtZW50LnNvdXJjZSB8fCAnZ29vZ2xlJztcbiAgICByZXR1cm4gbmV3IFRvYXN0KFxuICAgICAgdGhpcy5kZXBzXyxcbiAgICAgIGZlVXJsKCcvdG9hc3RpZnJhbWUnKSxcbiAgICAgIGZlQXJncyh7XG4gICAgICAgICdwdWJsaWNhdGlvbklkJzogdGhpcy5wdWJsaWNhdGlvbklkXyxcbiAgICAgICAgJ3NvdXJjZSc6IHNvdXJjZSxcbiAgICAgIH0pXG4gICAgKS5vcGVuKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRW50aXRsZW1lbnRzfSBlbnRpdGxlbWVudHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFja18oZW50aXRsZW1lbnRzKSB7XG4gICAgaWYgKGVudGl0bGVtZW50cy5nZXRFbnRpdGxlbWVudEZvclRoaXMoKSkge1xuICAgICAgdGhpcy5zZXRUb2FzdFNob3duKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9zdHJpbmc9fSBlbmNyeXB0ZWREb2N1bWVudEtleVxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhRW50aXRsZW1lbnRzPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZldGNoXyhlbmNyeXB0ZWREb2N1bWVudEtleSkge1xuICAgIGxldCB1cmwgPVxuICAgICAgJy9wdWJsaWNhdGlvbi8nICtcbiAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnB1YmxpY2F0aW9uSWRfKSArXG4gICAgICAnL2VudGl0bGVtZW50cyc7XG4gICAgaWYgKGVuY3J5cHRlZERvY3VtZW50S2V5KSB7XG4gICAgICAvL1RPRE8oY2hlbnNoYXkpOiBNYWtlIHRoaXMgYSAnUG9zdCcuXG4gICAgICB1cmwgKz0gJz9jcnlwdD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGVuY3J5cHRlZERvY3VtZW50S2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hlcl9cbiAgICAgIC5mZXRjaENyZWRlbnRpYWxlZEpzb24oc2VydmljZVVybCh1cmwpKVxuICAgICAgLnRoZW4oanNvbiA9PiB0aGlzLnBhcnNlRW50aXRsZW1lbnRzKGpzb24pKTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgU3RyaW5nIHZhbHVlIG9mIGlzUmVhZHlUb1BheVxuICogKGZyb20gSlNPTiBvciBDYWNoZSkgdG8gYSBib29sZWFuIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufHVuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlydHBTdHJpbmdUb0Jvb2xlYW4odmFsdWUpIHtcbiAgc3dpdGNoICh2YWx1ZSkge1xuICAgIGNhc2UgJ3RydWUnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnZmFsc2UnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE5IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7QW5hbHl0aWNzRXZlbnR9IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge0V2ZW50fSBmcm9tICcuLi9hcGkvbG9nZ2VyLWFwaSc7XG5cbi8qKiBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLEFuYWx5dGljc0V2ZW50Pn0gKi9cbmNvbnN0IFB1Ymxpc2hlckV2ZW50VG9BbmFseXRpY3NFdmVudCA9IHtcbiAgW0V2ZW50LklNUFJFU1NJT05fUEFZV0FMTF06IEFuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fUEFZV0FMTCxcbiAgW0V2ZW50LklNUFJFU1NJT05fQURdOiBBbmFseXRpY3NFdmVudC5JTVBSRVNTSU9OX0FELFxuICBbRXZlbnQuSU1QUkVTU0lPTl9PRkZFUlNdOiBBbmFseXRpY3NFdmVudC5JTVBSRVNTSU9OX09GRkVSUyxcbiAgW0V2ZW50LkFDVElPTl9TVUJTQ1JJUFRJT05TX0xBTkRJTkdfUEFHRV06XG4gICAgQW5hbHl0aWNzRXZlbnQuQUNUSU9OX1NVQlNDUklQVElPTlNfTEFORElOR19QQUdFLFxuICBbRXZlbnQuQUNUSU9OX09GRkVSX1NFTEVDVEVEXTogQW5hbHl0aWNzRXZlbnQuQUNUSU9OX09GRkVSX1NFTEVDVEVELFxuICBbRXZlbnQuQUNUSU9OX1BBWU1FTlRfRkxPV19TVEFSVEVEXTpcbiAgICBBbmFseXRpY3NFdmVudC5BQ1RJT05fUEFZTUVOVF9GTE9XX1NUQVJURUQsXG4gIFtFdmVudC5BQ1RJT05fUEFZTUVOVF9DT01QTEVURURdOiBBbmFseXRpY3NFdmVudC5BQ1RJT05fUEFZTUVOVF9DT01QTEVURSxcbiAgW0V2ZW50LkVWRU5UX0NVU1RPTV06IEFuYWx5dGljc0V2ZW50LkVWRU5UX0NVU1RPTSxcbn07XG5cbi8qKiBAY29uc3QgeyFPYmplY3Q8bnVtYmVyLD9FdmVudD59ICovXG5jb25zdCBBbmFseXRpY3NFdmVudFRvUHVibGlzaGVyRXZlbnQgPSB7XG4gIFtBbmFseXRpY3NFdmVudC5VTktOT1dOXTogbnVsbCxcbiAgW0FuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fUEFZV0FMTF06IEV2ZW50LklNUFJFU1NJT05fUEFZV0FMTCxcbiAgW0FuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fQURdOiBFdmVudC5JTVBSRVNTSU9OX0FELFxuICBbQW5hbHl0aWNzRXZlbnQuSU1QUkVTU0lPTl9PRkZFUlNdOiBFdmVudC5JTVBSRVNTSU9OX09GRkVSUyxcbiAgW0FuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fU1VCU0NSSUJFX0JVVFRPTl06IG51bGwsXG4gIFtBbmFseXRpY3NFdmVudC5JTVBSRVNTSU9OX1NNQVJUQk9YXTogbnVsbCxcbiAgW0FuYWx5dGljc0V2ZW50LkFDVElPTl9TVUJTQ1JJQkVdOiBudWxsLFxuICBbQW5hbHl0aWNzRXZlbnQuQUNUSU9OX1BBWU1FTlRfQ09NUExFVEVdOiBFdmVudC5BQ1RJT05fUEFZTUVOVF9DT01QTEVURUQsXG4gIFtBbmFseXRpY3NFdmVudC5BQ1RJT05fQUNDT1VOVF9DUkVBVEVEXTogbnVsbCxcbiAgW0FuYWx5dGljc0V2ZW50LkFDVElPTl9BQ0NPVU5UX0FDS05PV0xFREdFRF06IG51bGwsXG4gIFtBbmFseXRpY3NFdmVudC5BQ1RJT05fU1VCU0NSSVBUSU9OU19MQU5ESU5HX1BBR0VdOlxuICAgIEV2ZW50LkFDVElPTl9TVUJTQ1JJUFRJT05TX0xBTkRJTkdfUEFHRSxcbiAgW0FuYWx5dGljc0V2ZW50LkFDVElPTl9QQVlNRU5UX0ZMT1dfU1RBUlRFRF06XG4gICAgRXZlbnQuQUNUSU9OX1BBWU1FTlRfRkxPV19TVEFSVEVELFxuICBbQW5hbHl0aWNzRXZlbnQuQUNUSU9OX09GRkVSX1NFTEVDVEVEXTogRXZlbnQuQUNUSU9OX09GRkVSX1NFTEVDVEVELFxuICBbQW5hbHl0aWNzRXZlbnQuRVZFTlRfUEFZTUVOVF9GQUlMRURdOiBudWxsLFxuICBbQW5hbHl0aWNzRXZlbnQuRVZFTlRfQ1VTVE9NXTogRXZlbnQuRVZFTlRfQ1VTVE9NLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHByb3BlbnNpdHkgZXZlbnQgZW51bSBpbnRvIGFuIGFuYWx5dGljcyBldmVudCBlbnVtLlxuICogQHBhcmFtIHshRXZlbnR8c3RyaW5nfSBwcm9wZW5zaXR5RXZlbnRcbiAqIEByZXR1cm5zIHshQW5hbHl0aWNzRXZlbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoZXJFdmVudFRvQW5hbHl0aWNzRXZlbnQocHJvcGVuc2l0eUV2ZW50KSB7XG4gIHJldHVybiBQdWJsaXNoZXJFdmVudFRvQW5hbHl0aWNzRXZlbnRbcHJvcGVuc2l0eUV2ZW50XTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhbmFseXRpY3MgZXZlbnQgZW51bSBpbnRvIGEgcHJvcGVuc2l0eSBldmVudCBlbnVtLlxuICogQHBhcmFtIHshQW5hbHl0aWNzRXZlbnR9IGFuYWx5dGljc0V2ZW50XG4gKiBAcmV0dXJucyB7P0V2ZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl0aWNzRXZlbnRUb1B1Ymxpc2hlckV2ZW50KGFuYWx5dGljc0V2ZW50KSB7XG4gIHJldHVybiBBbmFseXRpY3NFdmVudFRvUHVibGlzaGVyRXZlbnRbYW5hbHl0aWNzRXZlbnRdO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBFeHBlcmltZW50RmxhZ3MgPSB7XG4gIC8qKlxuICAgKiBFbmFibGVzIEdQYXkgQVBJIGluIFN3Ry5cbiAgICogQ2xlYW51cCBpc3N1ZTogIzQwNi5cbiAgICovXG4gIEdQQVlfQVBJOiAnZ3BheS1hcGknLFxuXG4gIC8qKlxuICAgKiBFbmFibGVzIEdQYXkgbmF0aXZlIHN1cHBvcnQuXG4gICAqIENsZWFudXAgaXNzdWU6ICM0NDEuXG4gICAqL1xuICBHUEFZX05BVElWRTogJ2dwYXktbmF0aXZlJyxcblxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgZmVhdHVyZSB0aGF0IGFsbG93cyB5b3UgdG8gcmVwbGFjZSBvbmUgc3Vic2NyaXB0aW9uXG4gICAqIGZvciBhbm90aGVyIGluIHRoZSBzdWJzY3JpYmUoKSBBUEkuXG4gICAqL1xuICBSRVBMQUNFX1NVQlNDUklQVElPTjogJ3JlcGxhY2Utc3Vic2NyaXB0aW9uJyxcblxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgY29udHJpYnV0aW9ucyBmZWF0dXJlLlxuICAgKiBERVBSRUNBVEVELiBUaGlzIGZsYWcgY2FuIGJlIHJlbW92ZWQgb25jZSBub3QgdXNlZCBieSBhbnlvbmUuXG4gICAqL1xuICBDT05UUklCVVRJT05TOiAnY29udHJpYnV0aW9ucycsXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIFByb3BlbnNpdHkgZmVhdHVyZVxuICAgKi9cbiAgUFJPUEVOU0lUWTogJ3Byb3BlbnNpdHknLFxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBTbWFydGJveCBmZWF0dXJlLlxuICAgKi9cbiAgU01BUlRCT1g6ICdzbWFydGJveCcsXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdXNpbmcgbmV3IEFjdGl2aXRpZXMgQVBJc1xuICAgKi9cbiAgSEVKSVJBOiAnaGVqaXJhJyxcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7RXJyb3JVdGlsc30gZnJvbSAnLi4vdXRpbHMvZXJyb3JzJztcbmltcG9ydCB7cGFyc2VRdWVyeVN0cmluZ30gZnJvbSAnLi4vdXRpbHMvdXJsJztcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKlxuICogQ2xpZW50LXNpZGUgZXhwZXJpbWVudHMgaW4gU3dHLlxuICpcbiAqIFRoZSBleHBlcmltZW50cyBjYW4gYmUgc2V0IGluIGEgZmV3IGRpZmZlcmVudCB3YXlzOlxuICogIDEuIEJ5IGd1bHAgYnVpbGQgcnVsZXMgdXNpbmcgYC0tZXhwZXJpbWVudHM9JHtleHBlcmltZW50c1N0cmluZ31gIGFyZ3VtZW50LlxuICogIDIuIEJ5IGAjc3dnLmV4cGVyaW1lbnRzPSR7ZXhwZXJpbWVudHNTdHJpbmd9YCBwYXJhbWV0ZXIgaW4gdGhlIFVSTCdzXG4gKiAgICAgZnJhZ21lbnQuXG4gKiAgMy4gQnkgYHN3Zy5jb25maWd1cmUoe2V4cGVyaW1lbnRzOiBbYXJyYXldfSlgIGNhbGwuXG4gKlxuICogVGhlIGAke2V4cGVyaW1lbnRzU3RyaW5nfWAgaXMgZGVmaW5lZCBhcyBmb2xsb3dpbmc6XG4gKiAgLSBleHBlcmltZW50U3RyaW5nID0gKGV4cGVyaW1lbnRTcGVjLCkqXG4gKiAgLSBleHBlcmltZW50U3BlYyA9IGV4cGVyaW1lbnRJZCB8IGV4cGVyaW1lbnRJZCAnPScgbnVtMTAwICgnYycpP1xuICpcbiAqIFNvbWUgZXhhbXBsZXM6XG4gKiAgLSBgQSxCYCAtIGRlZmluZXMgdHdvIGV4cGVyaW1lbnRzIFwiQVwiIGFuZCBcIkJcIiB0aGF0IHdpbGwgYmUgdHVybmVkIG9uLlxuICogIC0gYEE6MTAwLEI6MTAwYCAtIHRoZSBzYW1lOiBcIkFcIiBhbmQgXCJCXCIgd2lsbCBiZSB0dXJuZWQgb24uXG4gKiAgLSBgQTowYCAtIHRoZSBleHBlcmltZW50IFwiQVwiIHdpbGwgYmUgZGlzYWJsZWQuXG4gKiAgLSBgQToxYCAtIGVuYWJsZSB0aGUgZXhwZXJpbWVudCBcIkFcIiBpbiAxJSBvZiBpbXByZXNzaW9ucy5cbiAqICAtIGBBOjEwY2AgLSBlbmFibGUgdGhlIGV4cGVyaW1lbnQgXCJBXCIgaW4gMTAlIG9mIGltcHJlc3Npb25zIHdpdGggMTAlXG4gKiAgICBjb250cm9sLiBJbiB0aGlzIGNhc2UsIDIwJSBvZiB0aGUgaW1wcmVzc2lvbnMgd2lsbCBiZSBzcGxpdCBpbnRvIHR3b1xuICogICAgY2F0ZWdvcmllczogZXhwZXJpbWVudCBhbmQgY29udHJvbC4gTm90aWNlLCBhIGNvbnRyb2wgY2FuIGJlIHJlcXVlc3RlZFxuICogICAgb25seSBmb3IgdGhlIGZyYWN0aW9uIHVuZGVyIDIwJS5cbiAqL1xuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFNlbGVjdGlvbiA9IHtcbiAgRVhQRVJJTUVOVDogJ2UnLFxuICBDT05UUk9MOiAnYycsXG59O1xuXG4vKipcbiAqIEEgY29tbWEtc2VwYXJhdGVkIHNldCBvZiBleHBlcmltZW50cy5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmxldCBleHBlcmltZW50c1N0cmluZyA9ICckZXhwZXJpbWVudHMkJztcblxuLyoqXG4gKiBBIHBhcnNlZCBtYXAgb2YgZXhwZXJpbWVudHMuXG4gKiBAdHlwZSB7P09iamVjdDxzdHJpbmcsIGJvb2xlYW4+fVxuICovXG5sZXQgZXhwZXJpbWVudE1hcCA9IG51bGw7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEBwYWNrYWdlIFZpc2libGUgZm9yIHRlc3Rpbmcgb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEV4cGVyaW1lbnRzU3RyaW5nRm9yVGVzdGluZyhzKSB7XG4gIGV4cGVyaW1lbnRzU3RyaW5nID0gcztcbiAgZXhwZXJpbWVudE1hcCA9IG51bGw7XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IHRoZSBleHBlcmltZW50cyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgYW5kIHJldHVybnMgdGhlbS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj59XG4gKi9cbmZ1bmN0aW9uIGdldEV4cGVyaW1lbnRzKHdpbikge1xuICBpZiAoIWV4cGVyaW1lbnRNYXApIHtcbiAgICBleHBlcmltZW50TWFwID0ge307XG4gICAgbGV0IGNvbWJpbmVkRXhwZXJpbWVudFN0cmluZyA9IGV4cGVyaW1lbnRzU3RyaW5nO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcod2luLmxvY2F0aW9uLmhhc2gpO1xuICAgICAgY29uc3QgZXhwZXJpbWVudFN0cmluZ0Zyb21IYXNoID0gcXVlcnlbJ3N3Zy5leHBlcmltZW50cyddO1xuICAgICAgaWYgKGV4cGVyaW1lbnRTdHJpbmdGcm9tSGFzaCkge1xuICAgICAgICBjb21iaW5lZEV4cGVyaW1lbnRTdHJpbmcgKz0gJywnICsgZXhwZXJpbWVudFN0cmluZ0Zyb21IYXNoO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElnbm9yZTogZXhwZXJpbWVudCBwYXJzaW5nIGNhbm5vdCBibG9jayBydW50aW1lLlxuICAgICAgRXJyb3JVdGlscy50aHJvd0FzeW5jKGUpO1xuICAgIH1cblxuICAgIC8vIEZvcm1hdDpcbiAgICAvLyAtIGV4cGVyaW1lbnRTdHJpbmcgPSAoZXhwZXJpbWVudFNwZWMsKSpcbiAgICBjb21iaW5lZEV4cGVyaW1lbnRTdHJpbmcuc3BsaXQoJywnKS5mb3JFYWNoKHMgPT4ge1xuICAgICAgcyA9IHMudHJpbSgpO1xuICAgICAgaWYgKCFzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlU2V0RXhwZXJpbWVudCh3aW4sIGV4cGVyaW1lbnRNYXAsIHMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZ25vcmU6IGV4cGVyaW1lbnQgcGFyc2luZyBjYW5ub3QgYmxvY2sgcnVudGltZS5cbiAgICAgICAgRXJyb3JVdGlscy50aHJvd0FzeW5jKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBleHBlcmltZW50TWFwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBib29sZWFuPn0gZXhwZXJpbWVudE1hcFxuICogQHBhcmFtIHtzdHJpbmd9IHNwZWNcbiAqL1xuZnVuY3Rpb24gcGFyc2VTZXRFeHBlcmltZW50KHdpbiwgZXhwZXJpbWVudE1hcCwgc3BlYykge1xuICAvLyBGb3JtYXQ6XG4gIC8vIC0gZXhwZXJpbWVudFNwZWMgPSBleHBlcmltZW50SWQgfCBleHBlcmltZW50SWQgJz0nIG51bTEwMCAoJ2MnKT9cbiAgbGV0IGV4cGVyaW1lbnRJZDtcbiAgbGV0IGZyYWN0aW9uO1xuICBsZXQgY29udHJvbCA9IGZhbHNlO1xuICBjb25zdCBlcSA9IHNwZWMuaW5kZXhPZignOicpO1xuICBpZiAoZXEgPT0gLTEpIHtcbiAgICBleHBlcmltZW50SWQgPSBzcGVjO1xuICAgIGZyYWN0aW9uID0gMTAwO1xuICAgIGNvbnRyb2wgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBleHBlcmltZW50SWQgPSBzcGVjLnN1YnN0cmluZygwLCBlcSkudHJpbSgpO1xuICAgIHNwZWMgPSBzcGVjLnN1YnN0cmluZyhlcSArIDEpO1xuICAgIGlmIChzcGVjLnN1YnN0cmluZyhzcGVjLmxlbmd0aCAtIDEpID09IFNlbGVjdGlvbi5DT05UUk9MKSB7XG4gICAgICBjb250cm9sID0gdHJ1ZTtcbiAgICAgIHNwZWMgPSBzcGVjLnN1YnN0cmluZygwLCBzcGVjLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBmcmFjdGlvbiA9IHBhcnNlSW50KHNwZWMsIDEwKTtcbiAgfVxuICBpZiAoaXNOYU4oZnJhY3Rpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGZyYWN0aW9uJyk7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgXCJvblwiL1wib2ZmXCIuXG4gIGxldCBvbjtcbiAgaWYgKGZyYWN0aW9uID4gOTkpIHtcbiAgICAvLyBFeHBsaWNpdGx5IFwib25cIi5cbiAgICBvbiA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZnJhY3Rpb24gPCAxKSB7XG4gICAgLy8gRXhwbGljaXRseSBcIm9mZlwiLlxuICAgIG9uID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAod2luLnNlc3Npb25TdG9yYWdlKSB7XG4gICAgLy8gRnJhY3Rpb25hbCBhbmQgcG9zc2libHkgd2l0aCB0aGUgY29udHJvbC5cbiAgICAvLyBOb3RlIHRoYXQ6XG4gICAgLy8gYS4gV2UgY2FuJ3QgZG8gcGVyc2lzdGVudCBleHBlcmltZW50cyBpZiBzdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUuXG4gICAgLy8gYi4gV2UgY2FuJ3QgcnVuIGNvbnRyb2wgb24gbW9yZSB0aGFuIDIwJS5cbiAgICBjb250cm9sID0gY29udHJvbCAmJiBmcmFjdGlvbiA8PSAyMDtcbiAgICB0cnkge1xuICAgICAgLy8gU2V0IGZyYWN0aW9uIGluIHRoZSBleHBlcmltZW50IHRvIG1ha2UgaXQgdW5sYXVuY2hhYmxlLlxuICAgICAgY29uc3Qgc3RvcmFnZUtleSA9XG4gICAgICAgICdzdWJzY3JpYmUuZ29vZ2xlLmNvbTplOicgK1xuICAgICAgICBleHBlcmltZW50SWQgK1xuICAgICAgICAnOicgK1xuICAgICAgICBmcmFjdGlvbiArXG4gICAgICAgIChjb250cm9sID8gJ2MnIDogJycpO1xuICAgICAgbGV0IHNlbGVjdGlvbiA9IHBhcnNlU2VsZWN0aW9uKHdpbi5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkpKTtcbiAgICAgIGlmICghc2VsZWN0aW9uKSB7XG4gICAgICAgIC8vIElzIGV4cGVyaW1lbnQvY29udHJvbCByYW5nZT9cbiAgICAgICAgaWYgKHdpbi5NYXRoLnJhbmRvbSgpICogMTAwIDw9IGZyYWN0aW9uICogKGNvbnRyb2wgPyAyIDogMSkpIHtcbiAgICAgICAgICBjb25zdCBpbkV4cGVyaW1lbnQgPSBjb250cm9sID8gd2luLk1hdGgucmFuZG9tKCkgPD0gMC41IDogdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rpb24gPSBpbkV4cGVyaW1lbnQgPyBTZWxlY3Rpb24uRVhQRVJJTUVOVCA6IFNlbGVjdGlvbi5DT05UUk9MO1xuICAgICAgICAgIHdpbi5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIHNlbGVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9uID0gISFzZWxlY3Rpb247XG4gICAgICBpZiAoc2VsZWN0aW9uID09IFNlbGVjdGlvbi5DT05UUk9MKSB7XG4gICAgICAgIGV4cGVyaW1lbnRJZCA9ICdjLScgKyBleHBlcmltZW50SWQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWdub3JlOiBleHBlcmltZW50IHBhcnNpbmcgY2Fubm90IGJsb2NrIHJ1bnRpbWUuXG4gICAgICBvbiA9IGZhbHNlO1xuICAgICAgRXJyb3JVdGlscy50aHJvd0FzeW5jKGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbiA9IGZhbHNlO1xuICB9XG5cbiAgZXhwZXJpbWVudE1hcFtleHBlcmltZW50SWRdID0gb247XG59XG5cbi8qKlxuICogQHBhcmFtIHs/c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHs/U2VsZWN0aW9ufVxuICovXG5mdW5jdGlvbiBwYXJzZVNlbGVjdGlvbihzKSB7XG4gIC8vIERvIGEgc2ltcGxlIGlmLXRoZW4gdG8gaW5saW5lIHRoZSB3aG9sZSBTZWxlY3Rpb24gZW51bS5cbiAgcmV0dXJuIHMgPT0gU2VsZWN0aW9uLkVYUEVSSU1FTlRcbiAgICA/IFNlbGVjdGlvbi5FWFBFUklNRU5UXG4gICAgOiBzID09IFNlbGVjdGlvbi5DT05UUk9MXG4gICAgPyBTZWxlY3Rpb24uQ09OVFJPTFxuICAgIDogbnVsbDtcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBzcGVjaWZpZWQgZXhwZXJpbWVudCBpcyBvbiBvciBvZmYuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IGV4cGVyaW1lbnRJZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXhwZXJpbWVudE9uKHdpbiwgZXhwZXJpbWVudElkKSB7XG4gIHJldHVybiBnZXRFeHBlcmltZW50cyh3aW4pW2V4cGVyaW1lbnRJZF0gfHwgZmFsc2U7XG59XG5cbi8qKlxuICogVG9nZ2xlcyB0aGUgZXhwZXJpbWVudCBvbiBvciBvZmYuIFJldHVybnMgdGhlIGFjdHVhbCB2YWx1ZSBvZiB0aGUgZXhwZXJpbWVudFxuICogYWZ0ZXIgdG9nZ2xpbmcgaXMgZG9uZS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwZXJpbWVudElkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFeHBlcmltZW50KHdpbiwgZXhwZXJpbWVudElkLCBvbikge1xuICBnZXRFeHBlcmltZW50cyh3aW4pW2V4cGVyaW1lbnRJZF0gPSBvbjtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9uRXhwZXJpbWVudHMod2luKSB7XG4gIGNvbnN0IGV4cGVyaW1lbnRNYXAgPSBnZXRFeHBlcmltZW50cyh3aW4pO1xuICBjb25zdCBleHBlcmltZW50cyA9IFtdO1xuICBmb3IgKGNvbnN0IGV4cGVyaW1lbnQgaW4gZXhwZXJpbWVudE1hcCkge1xuICAgIGlmIChleHBlcmltZW50TWFwW2V4cGVyaW1lbnRdKSB7XG4gICAgICBleHBlcmltZW50cy5wdXNoKGV4cGVyaW1lbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXhwZXJpbWVudHM7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7WGhyfSBmcm9tICcuLi91dGlscy94aHInO1xuXG4vKipcbiAqIEBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGNsYXNzIEZldGNoZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVudXNlZFVybFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhT2JqZWN0Pn1cbiAgICovXG4gIGZldGNoQ3JlZGVudGlhbGVkSnNvbih1bnVzZWRVcmwpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bnVzZWRVcmxcbiAgICogQHBhcmFtIHshLi4vdXRpbHMveGhyLkZldGNoSW5pdERlZn0gdW51c2VkSW5pdFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhLi4vdXRpbHMveGhyLkZldGNoUmVzcG9uc2U+fVxuICAgKi9cbiAgZmV0Y2godW51c2VkVXJsLCB1bnVzZWRJbml0KSB7fVxufVxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtGZXRjaGVyfVxuICovXG5leHBvcnQgY2xhc3MgWGhyRmV0Y2hlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luKSB7XG4gICAgLyoqIEBjb25zdCB7IVhocn0gKi9cbiAgICB0aGlzLnhocl8gPSBuZXcgWGhyKHdpbik7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGZldGNoQ3JlZGVudGlhbGVkSnNvbih1cmwpIHtcbiAgICBjb25zdCBpbml0ID0gLyoqIEB0eXBlIHshLi4vdXRpbHMveGhyLkZldGNoSW5pdERlZn0gKi8gKHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB7J0FjY2VwdCc6ICd0ZXh0L3BsYWluLCBhcHBsaWNhdGlvbi9qc29uJ30sXG4gICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnhocl8uZmV0Y2godXJsLCBpbml0KS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGZldGNoKHVybCwgaW5pdCkge1xuICAgIHJldHVybiB0aGlzLnhocl8uZmV0Y2godXJsLCBpbml0KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIEpzRXJyb3Ige1xuICAvKipcbiAgICogQHBhcmFtIHshLi4vbW9kZWwvZG9jLkRvY30gZG9jXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vbW9kZWwvZG9jLkRvY30gKi9cbiAgICB0aGlzLmRvY18gPSBkb2M7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZX0gKi9cbiAgICB0aGlzLm1pY3JvVGFza18gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgZXJyb3IodmFyX2FyZ3MpIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICByZXR1cm4gdGhpcy5taWNyb1Rhc2tfLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBjcmVhdGVFcnJvclZhcmdzLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgaWYgKGVycm9yLnJlcG9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGltZyA9IHRoaXMuZG9jXy5nZXRXaW4oKS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgIGltZy5zcmMgPVxuICAgICAgICAnJGZyb250ZW5kJC9fL1N1YnNjcmliZXdpdGhnb29nbGVDbGllbnRVaS9qc2Vycm9yJyArXG4gICAgICAgICc/ZXJyb3I9JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZXJyb3IpKSArXG4gICAgICAgICcmc2NyaXB0PScgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoJyRmcm9udGVuZCQvc3dnL2pzL3YxL3N3Zy5qcycpICtcbiAgICAgICAgJyZsaW5lPScgK1xuICAgICAgICAoZXJyb3IubGluZU51bWJlciB8fCAxKSArXG4gICAgICAgICcmdHJhY2U9JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChlcnJvci5zdGFjayk7XG4gICAgICAvLyBBcHBlbmRpbmcgdGhpcyBpbWFnZSB0byBET00gaXMgbm90IG5lY2Vzc2FyeS5cbiAgICAgIGVycm9yLnJlcG9ydGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3NcbiAqIEByZXR1cm4geyFFcnJvcn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXJyb3JWYXJncyh2YXJfYXJncykge1xuICBsZXQgZXJyb3IgPSBudWxsO1xuICBsZXQgbWVzc2FnZSA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IgJiYgIWVycm9yKSB7XG4gICAgICBlcnJvciA9IGR1cGxpY2F0ZUVycm9ySWZOZWNlc3NhcnkoYXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgbWVzc2FnZSArPSAnICc7XG4gICAgICB9XG4gICAgICBtZXNzYWdlICs9IGFyZztcbiAgICB9XG4gIH1cblxuICBpZiAoIWVycm9yKSB7XG4gICAgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAobWVzc2FnZSkge1xuICAgIGVycm9yLm1lc3NhZ2UgPSBtZXNzYWdlICsgJzogJyArIGVycm9yLm1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG4vKipcbiAqIFNvbWUgZXhjZXB0aW9ucyAoRE9NRXhjZXB0aW9uLCBuYW1lbHkpIGhhdmUgcmVhZC1vbmx5IG1lc3NhZ2UuXG4gKiBAcGFyYW0geyFFcnJvcn0gZXJyb3JcbiAqIEByZXR1cm4geyFFcnJvcn1cbiAqL1xuZnVuY3Rpb24gZHVwbGljYXRlRXJyb3JJZk5lY2Vzc2FyeShlcnJvcikge1xuICBjb25zdCBtZXNzYWdlUHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yLCAnbWVzc2FnZScpO1xuICBpZiAobWVzc2FnZVByb3BlcnR5ICYmIG1lc3NhZ2VQcm9wZXJ0eS53cml0YWJsZSkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIGNvbnN0IHttZXNzYWdlLCBzdGFja30gPSBlcnJvcjtcbiAgY29uc3QgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgLy8gQ29weSBhbGwgdGhlIGV4dHJhbmVvdXMgdGhpbmdzIHdlIGF0dGFjaC5cbiAgZm9yIChjb25zdCBwcm9wIGluIGVycm9yKSB7XG4gICAgZVtwcm9wXSA9IGVycm9yW3Byb3BdO1xuICB9XG4gIC8vIEVuc3VyZSB0aGVzZSBhcmUgY29waWVkLlxuICBlLnN0YWNrID0gc3RhY2s7XG4gIHJldHVybiBlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0FjdGl2aXR5SWZyYW1lVmlld30gZnJvbSAnLi4vdWkvYWN0aXZpdHktaWZyYW1lLXZpZXcnO1xuaW1wb3J0IHtcbiAgQW5hbHl0aWNzRXZlbnQsXG4gIExpbmtTYXZlVG9rZW5SZXF1ZXN0LFxuICBMaW5raW5nSW5mb1Jlc3BvbnNlLFxufSBmcm9tICcuLi9wcm90by9hcGlfbWVzc2FnZXMnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb25GbG93cywgV2luZG93T3Blbk1vZGV9IGZyb20gJy4uL2FwaS9zdWJzY3JpcHRpb25zJztcbmltcG9ydCB7YWNjZXB0UG9ydFJlc3VsdERhdGF9IGZyb20gJy4uL3V0aWxzL2FjdGl2aXR5LXV0aWxzJztcbmltcG9ydCB7Y3JlYXRlQ2FuY2VsRXJyb3IsIGlzQ2FuY2VsRXJyb3J9IGZyb20gJy4uL3V0aWxzL2Vycm9ycyc7XG5pbXBvcnQge2ZlQXJncywgZmVPcmlnaW4sIGZlVXJsfSBmcm9tICcuL3NlcnZpY2VzJztcblxuY29uc3QgTElOS19SRVFVRVNUX0lEID0gJ3N3Zy1saW5rJztcblxuLyoqXG4gKiBUaGUgZmxvdyB0byBsaW5rIGFuIGV4aXN0aW5nIHB1Ymxpc2hlciBhY2NvdW50IHRvIGFuIGV4aXN0aW5nIGdvb2dsZSBhY2NvdW50LlxuICovXG5leHBvcnQgY2xhc3MgTGlua2JhY2tGbG93IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9tb2RlbC9wYWdlLWNvbmZpZy5QYWdlQ29uZmlnfSAqL1xuICAgIHRoaXMucGFnZUNvbmZpZ18gPSBkZXBzLnBhZ2VDb25maWcoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRlcHMuZGlhbG9nTWFuYWdlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgTGluayBhY2NvdW50IGZsb3cuXG4gICAqIEBwYXJhbSB7e2FtcFJlYWRlcklkOiAoc3RyaW5nfHVuZGVmaW5lZCl9PX0gcGFyYW1zXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgc3RhcnQocGFyYW1zID0ge30pIHtcbiAgICB0aGlzLmRlcHNfLmNhbGxiYWNrcygpLnRyaWdnZXJGbG93U3RhcnRlZChTdWJzY3JpcHRpb25GbG93cy5MSU5LX0FDQ09VTlQpO1xuICAgIGNvbnN0IGZvcmNlUmVkaXJlY3QgPVxuICAgICAgdGhpcy5kZXBzXy5jb25maWcoKS53aW5kb3dPcGVuTW9kZSA9PSBXaW5kb3dPcGVuTW9kZS5SRURJUkVDVDtcbiAgICBjb25zdCBhcmdzID0gcGFyYW1zLmFtcFJlYWRlcklkXG4gICAgICA/IGZlQXJncyh7XG4gICAgICAgICAgJ3B1YmxpY2F0aW9uSWQnOiB0aGlzLnBhZ2VDb25maWdfLmdldFB1YmxpY2F0aW9uSWQoKSxcbiAgICAgICAgICAnYW1wUmVhZGVySWQnOiBwYXJhbXMuYW1wUmVhZGVySWQsXG4gICAgICAgIH0pXG4gICAgICA6IGZlQXJncyh7XG4gICAgICAgICAgJ3B1YmxpY2F0aW9uSWQnOiB0aGlzLnBhZ2VDb25maWdfLmdldFB1YmxpY2F0aW9uSWQoKSxcbiAgICAgICAgfSk7XG4gICAgY29uc3Qgb3BlbmVyID0gdGhpcy5hY3Rpdml0eVBvcnRzXy5vcGVuKFxuICAgICAgTElOS19SRVFVRVNUX0lELFxuICAgICAgZmVVcmwoJy9saW5rYmFja3N0YXJ0JyksXG4gICAgICBmb3JjZVJlZGlyZWN0ID8gJ190b3AnIDogJ19ibGFuaycsXG4gICAgICBhcmdzLFxuICAgICAge31cbiAgICApO1xuICAgIHRoaXMuZGVwc18uZXZlbnRNYW5hZ2VyKCkubG9nU3dnRXZlbnQoQW5hbHl0aWNzRXZlbnQuSU1QUkVTU0lPTl9MSU5LKTtcbiAgICB0aGlzLmRpYWxvZ01hbmFnZXJfLnBvcHVwT3BlbmVkKG9wZW5lciAmJiBvcGVuZXIudGFyZ2V0V2luKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgY2xhc3MgZm9yIExpbmsgYWNjb3VudHMgZmxvdy5cbiAqL1xuZXhwb3J0IGNsYXNzIExpbmtDb21wbGV0ZUZsb3cge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9kZXBzLkRlcHNEZWZ9IGRlcHNcbiAgICovXG4gIHN0YXRpYyBjb25maWd1cmVQZW5kaW5nKGRlcHMpIHtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnREZWZ9IHBvcnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVyKHBvcnQpIHtcbiAgICAgIGRlcHMuZW50aXRsZW1lbnRzTWFuYWdlcigpLmJsb2NrTmV4dE5vdGlmaWNhdGlvbigpO1xuICAgICAgZGVwcy5jYWxsYmFja3MoKS50cmlnZ2VyTGlua1Byb2dyZXNzKCk7XG4gICAgICBkZXBzLmRpYWxvZ01hbmFnZXIoKS5wb3B1cENsb3NlZCgpO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGFjY2VwdFBvcnRSZXN1bHREYXRhKFxuICAgICAgICBwb3J0LFxuICAgICAgICBmZU9yaWdpbigpLFxuICAgICAgICAvKiByZXF1aXJlT3JpZ2luVmVyaWZpZWQgKi8gZmFsc2UsXG4gICAgICAgIC8qIHJlcXVpcmVTZWN1cmVDaGFubmVsICovIGZhbHNlXG4gICAgICApO1xuICAgICAgcmV0dXJuIHByb21pc2UudGhlbihcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGRlcHNcbiAgICAgICAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgICAgICAgLmxvZ1N3Z0V2ZW50KEFuYWx5dGljc0V2ZW50LkFDVElPTl9MSU5LX0NPTlRJTlVFLCB0cnVlKTtcbiAgICAgICAgICBjb25zdCBmbG93ID0gbmV3IExpbmtDb21wbGV0ZUZsb3coZGVwcywgcmVzcG9uc2UpO1xuICAgICAgICAgIGZsb3cuc3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgICBpZiAoaXNDYW5jZWxFcnJvcihyZWFzb24pKSB7XG4gICAgICAgICAgICBkZXBzXG4gICAgICAgICAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgICAgICAgICAubG9nU3dnRXZlbnQoQW5hbHl0aWNzRXZlbnQuQUNUSU9OX0xJTktfQ0FOQ0VMLCB0cnVlKTtcbiAgICAgICAgICAgIGRlcHNcbiAgICAgICAgICAgICAgLmNhbGxiYWNrcygpXG4gICAgICAgICAgICAgIC50cmlnZ2VyRmxvd0NhbmNlbGVkKFN1YnNjcmlwdGlvbkZsb3dzLkxJTktfQUNDT1VOVCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSB1c2VyIGNob3NlIHRvIGNvbnRpbnVlIGJ1dCB0aGVyZSB3YXMgYW4gZXJyb3IuXG4gICAgICAgICAgICBkZXBzXG4gICAgICAgICAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgICAgICAgICAubG9nU3dnRXZlbnQoQW5hbHl0aWNzRXZlbnQuQUNUSU9OX0xJTktfQ09OVElOVUUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgZGVwcy5hY3Rpdml0aWVzKCkub25SZXN1bHQoTElOS19SRVFVRVNUX0lELCBoYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzLCByZXNwb25zZSkge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL2RlcHMuRGVwc0RlZn0gKi9cbiAgICB0aGlzLmRlcHNfID0gZGVwcztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gZGVwcy53aW4oKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gZGVwcy5hY3Rpdml0aWVzKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9kaWFsb2ctbWFuYWdlci5EaWFsb2dNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8gPSBkZXBzLmRpYWxvZ01hbmFnZXIoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL2VudGl0bGVtZW50cy1tYW5hZ2VyLkVudGl0bGVtZW50c01hbmFnZXJ9ICovXG4gICAgdGhpcy5lbnRpdGxlbWVudHNNYW5hZ2VyXyA9IGRlcHMuZW50aXRsZW1lbnRzTWFuYWdlcigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vY2FsbGJhY2tzLkNhbGxiYWNrc30gKi9cbiAgICB0aGlzLmNhbGxiYWNrc18gPSBkZXBzLmNhbGxiYWNrcygpO1xuXG4gICAgY29uc3QgaW5kZXggPSAocmVzcG9uc2UgJiYgcmVzcG9uc2VbJ2luZGV4J10pIHx8ICcwJztcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQWN0aXZpdHlJZnJhbWVWaWV3fSAqL1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3XyA9IG5ldyBBY3Rpdml0eUlmcmFtZVZpZXcoXG4gICAgICB0aGlzLndpbl8sXG4gICAgICB0aGlzLmFjdGl2aXR5UG9ydHNfLFxuICAgICAgZmVVcmwoJy9saW5rY29uZmlybWlmcmFtZScsICcvdS8nICsgaW5kZXgpLFxuICAgICAgZmVBcmdzKHtcbiAgICAgICAgJ3Byb2R1Y3RJZCc6IGRlcHMucGFnZUNvbmZpZygpLmdldFByb2R1Y3RJZCgpLFxuICAgICAgICAncHVibGljYXRpb25JZCc6IGRlcHMucGFnZUNvbmZpZygpLmdldFB1YmxpY2F0aW9uSWQoKSxcbiAgICAgIH0pLFxuICAgICAgLyogc2hvdWxkRmFkZUJvZHkgKi8gdHJ1ZVxuICAgICk7XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbigpfSAqL1xuICAgIHRoaXMuY29tcGxldGVSZXNvbHZlcl8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2V9ICovXG4gICAgdGhpcy5jb21wbGV0ZVByb21pc2VfID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNvbXBsZXRlUmVzb2x2ZXJfID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIExpbmsgYWNjb3VudCBmbG93LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHN0YXJ0KCkge1xuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18uYWNjZXB0UmVzdWx0QW5kVmVyaWZ5KFxuICAgICAgZmVPcmlnaW4oKSxcbiAgICAgIC8qIHJlcXVpcmVPcmlnaW5WZXJpZmllZCAqLyB0cnVlLFxuICAgICAgLyogcmVxdWlyZVNlY3VyZUNoYW5uZWwgKi8gdHJ1ZVxuICAgICk7XG4gICAgcHJvbWlzZVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICB0aGlzLmNvbXBsZXRlXyhyZXNwb25zZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgIC8vIFJldGhyb3cgYXN5bmMuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyBUaGUgZmxvdyBpcyBjb21wbGV0ZS5cbiAgICAgICAgdGhpcy5kaWFsb2dNYW5hZ2VyXy5jb21wbGV0ZVZpZXcodGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfKTtcbiAgICAgIH0pO1xuICAgIHRoaXMuZGVwc19cbiAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgLmxvZ1N3Z0V2ZW50KEFuYWx5dGljc0V2ZW50LkVWRU5UX0dPT0dMRV9VUERBVEVELCB0cnVlKTtcbiAgICB0aGlzLmRlcHNfXG4gICAgICAuZXZlbnRNYW5hZ2VyKClcbiAgICAgIC5sb2dTd2dFdmVudChBbmFseXRpY3NFdmVudC5JTVBSRVNTSU9OX0dPT0dMRV9VUERBVEVELCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcy5kaWFsb2dNYW5hZ2VyXy5vcGVuVmlldyh0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbXBsZXRlXyhyZXNwb25zZSkge1xuICAgIHRoaXMuZGVwc19cbiAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgLmxvZ1N3Z0V2ZW50KEFuYWx5dGljc0V2ZW50LkFDVElPTl9HT09HTEVfVVBEQVRFRF9DTE9TRSwgdHJ1ZSk7XG4gICAgdGhpcy5jYWxsYmFja3NfLnRyaWdnZXJMaW5rQ29tcGxldGUoKTtcbiAgICB0aGlzLmNhbGxiYWNrc18ucmVzZXRMaW5rUHJvZ3Jlc3MoKTtcbiAgICB0aGlzLmVudGl0bGVtZW50c01hbmFnZXJfLnNldFRvYXN0U2hvd24odHJ1ZSk7XG4gICAgdGhpcy5lbnRpdGxlbWVudHNNYW5hZ2VyXy51bmJsb2NrTmV4dE5vdGlmaWNhdGlvbigpO1xuICAgIHRoaXMuZW50aXRsZW1lbnRzTWFuYWdlcl8ucmVzZXQoKHJlc3BvbnNlICYmIHJlc3BvbnNlWydzdWNjZXNzJ10pIHx8IGZhbHNlKTtcbiAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2VbJ2VudGl0bGVtZW50cyddKSB7XG4gICAgICB0aGlzLmVudGl0bGVtZW50c01hbmFnZXJfLnB1c2hOZXh0RW50aXRsZW1lbnRzKHJlc3BvbnNlWydlbnRpdGxlbWVudHMnXSk7XG4gICAgfVxuICAgIHRoaXMuY29tcGxldGVSZXNvbHZlcl8oKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIHshUHJvbWlzZX0gKi9cbiAgd2hlbkNvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBsZXRlUHJvbWlzZV87XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgZmxvdyB0byBzYXZlIHN1YnNjcmlwdGlvbiBpbmZvcm1hdGlvbiBmcm9tIGFuIGV4aXN0aW5nIHB1Ymxpc2hlciBhY2NvdW50XG4gKiB0byBhbiBleGlzdGluZyBnb29nbGUgYWNjb3VudC4gIFRoZSBhY2NvdW50cyBtYXkgb3IgbWF5IG5vdCBhbHJlYWR5IGJlXG4gKiBsaW5rZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW5rU2F2ZUZsb3cge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9kZXBzLkRlcHNEZWZ9IGRlcHNcbiAgICogQHBhcmFtIHshLi4vYXBpL3N1YnNjcmlwdGlvbnMuU2F2ZVN1YnNjcmlwdGlvblJlcXVlc3RDYWxsYmFja30gY2FsbGJhY2tcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlcHMsIGNhbGxiYWNrKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSBkZXBzLndpbigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRlcHMuZGlhbG9nTWFuYWdlcigpO1xuXG4gICAgLyoqIEBwcml2YXRlIHshLi4vYXBpL3N1YnNjcmlwdGlvbnMuU2F2ZVN1YnNjcmlwdGlvblJlcXVlc3RDYWxsYmFja30gKi9cbiAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/UHJvbWlzZTwhLi4vYXBpL3N1YnNjcmlwdGlvbnMuU2F2ZVN1YnNjcmlwdGlvblJlcXVlc3Q+fSAqL1xuICAgIHRoaXMucmVxdWVzdFByb21pc2VfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2V9ICovXG4gICAgdGhpcy5vcGVuUHJvbWlzZV8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/QWN0aXZpdHlJZnJhbWVWaWV3fSAqL1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3XyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P1Byb21pc2U8IS4uL2FwaS9zdWJzY3JpcHRpb25zLlNhdmVTdWJzY3JpcHRpb25SZXF1ZXN0Pn1cbiAgICogQHBhY2thZ2UgVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAgICovXG4gIGdldFJlcXVlc3RQcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RQcm9taXNlXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29tcGxldGVfKCkge1xuICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshT2JqZWN0fSByZXN1bHRcbiAgICogQHJldHVybiB7IVByb21pc2U8Ym9vbGVhbj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVMaW5rU2F2ZVJlc3BvbnNlXyhyZXN1bHQpIHtcbiAgICAvLyBUaGlzIGZsb3cgaXMgY29tcGxldGVcbiAgICB0aGlzLmNvbXBsZXRlXygpO1xuICAgIGxldCBzdGFydFByb21pc2U7XG4gICAgbGV0IGxpbmtDb25maXJtID0gbnVsbDtcbiAgICBpZiAocmVzdWx0WydsaW5rZWQnXSkge1xuICAgICAgLy8gV2hlbiBsaW5raW5nIHN1Y2NlZWRzLCBzdGFydCBsaW5rIGNvbmZpcm1hdGlvbiBmbG93XG4gICAgICB0aGlzLmRpYWxvZ01hbmFnZXJfLnBvcHVwQ2xvc2VkKCk7XG4gICAgICB0aGlzLmRlcHNfLmNhbGxiYWNrcygpLnRyaWdnZXJGbG93U3RhcnRlZChTdWJzY3JpcHRpb25GbG93cy5MSU5LX0FDQ09VTlQpO1xuICAgICAgbGlua0NvbmZpcm0gPSBuZXcgTGlua0NvbXBsZXRlRmxvdyh0aGlzLmRlcHNfLCByZXN1bHQpO1xuICAgICAgc3RhcnRQcm9taXNlID0gbGlua0NvbmZpcm0uc3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRQcm9taXNlID0gUHJvbWlzZS5yZWplY3QoY3JlYXRlQ2FuY2VsRXJyb3IodGhpcy53aW5fLCAnbm90IGxpbmtlZCcpKTtcbiAgICB9XG4gICAgY29uc3QgY29tcGxldGVQcm9taXNlID0gc3RhcnRQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5kZXBzXy5jYWxsYmFja3MoKS50cmlnZ2VyTGlua1Byb2dyZXNzKCk7XG4gICAgICByZXR1cm4gbGlua0NvbmZpcm0ud2hlbkNvbXBsZXRlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29tcGxldGVQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtMaW5raW5nSW5mb1Jlc3BvbnNlfSByZXNwb25zZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2VuZExpbmtTYXZlVG9rZW5fKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UuZ2V0UmVxdWVzdGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0UHJvbWlzZV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHJlc29sdmUodGhpcy5jYWxsYmFja18oKSk7XG4gICAgfSlcbiAgICAgIC50aGVuKHJlcXVlc3QgPT4ge1xuICAgICAgICBjb25zdCBzYXZlUmVxdWVzdCA9IG5ldyBMaW5rU2F2ZVRva2VuUmVxdWVzdCgpO1xuICAgICAgICBpZiAocmVxdWVzdCAmJiByZXF1ZXN0LnRva2VuKSB7XG4gICAgICAgICAgaWYgKHJlcXVlc3QuYXV0aENvZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQm90aCBhdXRoQ29kZSBhbmQgdG9rZW4gYXJlIGF2YWlsYWJsZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzYXZlUmVxdWVzdC5zZXRUb2tlbihyZXF1ZXN0LnRva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdCAmJiByZXF1ZXN0LmF1dGhDb2RlKSB7XG4gICAgICAgICAgc2F2ZVJlcXVlc3Quc2V0QXV0aENvZGUocmVxdWVzdC5hdXRoQ29kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWl0aGVyIHRva2VuIG9yIGF1dGhDb2RlIGlzIGF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5leGVjdXRlKHNhdmVSZXF1ZXN0KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgLy8gVGhlIGZsb3cgaXMgY29tcGxldGUuXG4gICAgICAgIHRoaXMuY29tcGxldGVfKCk7XG4gICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9Qcm9taXNlfVxuICAgKi9cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgc2F2ZSBzdWJzY3JpcHRpb25cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICBjb25zdCBpZnJhbWVBcmdzID0gdGhpcy5hY3Rpdml0eVBvcnRzXy5hZGREZWZhdWx0QXJndW1lbnRzKHtcbiAgICAgICdpc0Nsb3NhYmxlJzogdHJ1ZSxcbiAgICB9KTtcbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18gPSBuZXcgQWN0aXZpdHlJZnJhbWVWaWV3KFxuICAgICAgdGhpcy53aW5fLFxuICAgICAgdGhpcy5hY3Rpdml0eVBvcnRzXyxcbiAgICAgIGZlVXJsKCcvbGlua3NhdmVpZnJhbWUnKSxcbiAgICAgIGlmcmFtZUFyZ3MsXG4gICAgICAvKiBzaG91bGRGYWRlQm9keSAqLyBmYWxzZSxcbiAgICAgIC8qIGhhc0xvYWRpbmdJbmRpY2F0b3IgKi8gdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLm9uKFxuICAgICAgTGlua2luZ0luZm9SZXNwb25zZSxcbiAgICAgIHRoaXMuc2VuZExpbmtTYXZlVG9rZW5fLmJpbmQodGhpcylcbiAgICApO1xuXG4gICAgdGhpcy5vcGVuUHJvbWlzZV8gPSB0aGlzLmRpYWxvZ01hbmFnZXJfLm9wZW5WaWV3KFxuICAgICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLFxuICAgICAgLyogaGlkZGVuICovIHRydWVcbiAgICApO1xuICAgIHRoaXMuZGVwc19cbiAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgLmxvZ1N3Z0V2ZW50KEFuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fU0FWRV9TVUJTQ1JfVE9fR09PR0xFKTtcbiAgICAvKiogeyFQcm9taXNlPGJvb2xlYW4+fSAqL1xuICAgIHJldHVybiB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld19cbiAgICAgIC5hY2NlcHRSZXN1bHRBbmRWZXJpZnkoXG4gICAgICAgIGZlT3JpZ2luKCksXG4gICAgICAgIC8qIHJlcXVpcmVPcmlnaW5WZXJpZmllZCAqLyB0cnVlLFxuICAgICAgICAvKiByZXF1aXJlU2VjdXJlQ2hhbm5lbCAqLyB0cnVlXG4gICAgICApXG4gICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVMaW5rU2F2ZVJlc3BvbnNlXyhyZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAvLyBJbiBjYXNlIHRoaXMgZmxvdyB3YXNuJ3QgY29tcGxldGUsIGNvbXBsZXRlIGl0IGhlcmVcbiAgICAgICAgdGhpcy5jb21wbGV0ZV8oKTtcbiAgICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvbiBmcm9tIHVzZXIsIGxpbmsgY29uZmlybSBzdGFydCBvciBjb21wbGV0aW9uIGhlcmVcbiAgICAgICAgaWYgKGlzQ2FuY2VsRXJyb3IocmVhc29uKSkge1xuICAgICAgICAgIHRoaXMuZGVwc19cbiAgICAgICAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgICAgICAgLmxvZ1N3Z0V2ZW50KFxuICAgICAgICAgICAgICBBbmFseXRpY3NFdmVudC5BQ1RJT05fU0FWRV9TVUJTQ1JfVE9fR09PR0xFX0NBTkNFTCxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRlcHNfXG4gICAgICAgICAgICAuY2FsbGJhY2tzKClcbiAgICAgICAgICAgIC50cmlnZ2VyRmxvd0NhbmNlbGVkKFN1YnNjcmlwdGlvbkZsb3dzLkxJTktfQUNDT1VOVCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE5IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQge0FuYWx5dGljc0V2ZW50LCBFdmVudE9yaWdpbmF0b3J9IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge0V2ZW50LCBTdWJzY3JpcHRpb25TdGF0ZX0gZnJvbSAnLi4vYXBpL2xvZ2dlci1hcGknO1xuaW1wb3J0IHtpc0Jvb2xlYW4sIGlzRW51bVZhbHVlLCBpc09iamVjdH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xuaW1wb3J0IHtwdWJsaXNoZXJFdmVudFRvQW5hbHl0aWNzRXZlbnR9IGZyb20gJy4vZXZlbnQtdHlwZS1tYXBwaW5nJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7Li4vYXBpL2xvZ2dlci1hcGkuTG9nZ2VyQXBpfVxuICovXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2FwaS9jbGllbnQtZXZlbnQtbWFuYWdlci1hcGkuQ2xpZW50RXZlbnRNYW5hZ2VyQXBpfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IGRlcHMuZXZlbnRNYW5hZ2VyKCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNlbmRTdWJzY3JpcHRpb25TdGF0ZShzdGF0ZSwganNvblByb2R1Y3RzKSB7XG4gICAgaWYgKCFpc0VudW1WYWx1ZShTdWJzY3JpcHRpb25TdGF0ZSwgc3RhdGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3Vic2NyaXB0aW9uIHN0YXRlIHByb3ZpZGVkJyk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChTdWJzY3JpcHRpb25TdGF0ZS5TVUJTQ1JJQkVSID09IHN0YXRlIHx8XG4gICAgICAgIFN1YnNjcmlwdGlvblN0YXRlLlBBU1RfU1VCU0NSSUJFUiA9PSBzdGF0ZSkgJiZcbiAgICAgICFqc29uUHJvZHVjdHNcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0VudGl0bGVtZW50cyBtdXN0IGJlIHByb3ZpZGVkIGZvciB1c2VycyB3aXRoJyArXG4gICAgICAgICAgJyBhY3RpdmUgb3IgZXhwaXJlZCBzdWJzY3JpcHRpb25zJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGpzb25Qcm9kdWN0cyAmJiAhaXNPYmplY3QoanNvblByb2R1Y3RzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbnRpdGxlbWVudHMgbXVzdCBiZSBhbiBPYmplY3QnKTtcbiAgICB9XG4gICAgbGV0IHByb2R1Y3RzT3JTa3VzID0gbnVsbDtcbiAgICBpZiAoanNvblByb2R1Y3RzKSB7XG4gICAgICBwcm9kdWN0c09yU2t1cyA9IEpTT04uc3RyaW5naWZ5KGpzb25Qcm9kdWN0cyk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dFdmVudCh7XG4gICAgICBldmVudFR5cGU6IEFuYWx5dGljc0V2ZW50LkVWRU5UX1NVQlNDUklQVElPTl9TVEFURSxcbiAgICAgIGV2ZW50T3JpZ2luYXRvcjogRXZlbnRPcmlnaW5hdG9yLlBVQkxJU0hFUl9DTElFTlQsXG4gICAgICBpc0Zyb21Vc2VyQWN0aW9uOiBudWxsLFxuICAgICAgYWRkaXRpb25hbFBhcmFtZXRlcnM6IHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByb2R1Y3RzT3JTa3VzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2VuZEV2ZW50KHVzZXJFdmVudCkge1xuICAgIGxldCBkYXRhID0gbnVsbDtcbiAgICBpZiAoXG4gICAgICAhaXNFbnVtVmFsdWUoRXZlbnQsIHVzZXJFdmVudC5uYW1lKSB8fFxuICAgICAgIXB1Ymxpc2hlckV2ZW50VG9BbmFseXRpY3NFdmVudCh1c2VyRXZlbnQubmFtZSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1c2VyIGV2ZW50IHByb3ZpZGVkKCcgKyB1c2VyRXZlbnQubmFtZSArICcpJyk7XG4gICAgfVxuXG4gICAgaWYgKHVzZXJFdmVudC5kYXRhKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHVzZXJFdmVudC5kYXRhKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50IGRhdGEgbXVzdCBiZSBhbiBPYmplY3QoJyArIHVzZXJFdmVudC5kYXRhICsgJyknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSB7fTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCB1c2VyRXZlbnQuZGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzQm9vbGVhbih1c2VyRXZlbnQuYWN0aXZlKSkge1xuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSB7fTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgeydpc19hY3RpdmUnOiB1c2VyRXZlbnQuYWN0aXZlfSk7XG4gICAgfSBlbHNlIGlmICh1c2VyRXZlbnQuYWN0aXZlICE9IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgYWN0aXZlIG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dFdmVudCh7XG4gICAgICBldmVudFR5cGU6IHB1Ymxpc2hlckV2ZW50VG9BbmFseXRpY3NFdmVudCh1c2VyRXZlbnQubmFtZSksXG4gICAgICBldmVudE9yaWdpbmF0b3I6IEV2ZW50T3JpZ2luYXRvci5QVUJMSVNIRVJfQ0xJRU5ULFxuICAgICAgaXNGcm9tVXNlckFjdGlvbjogdXNlckV2ZW50LmFjdGl2ZSxcbiAgICAgIGFkZGl0aW9uYWxQYXJhbWV0ZXJzOiBkYXRhLFxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7QWN0aXZpdHlJZnJhbWVWaWV3fSBmcm9tICcuLi91aS9hY3Rpdml0eS1pZnJhbWUtdmlldyc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbkZsb3dzfSBmcm9tICcuLi9hcGkvc3Vic2NyaXB0aW9ucyc7XG5pbXBvcnQge2ZlQXJncywgZmVVcmx9IGZyb20gJy4vc2VydmljZXMnO1xuXG5leHBvcnQgY2xhc3MgTG9naW5Ob3RpZmljYXRpb25BcGkge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9kZXBzLkRlcHNEZWZ9IGRlcHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlcHMpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9kZXBzLkRlcHNEZWZ9ICovXG4gICAgdGhpcy5kZXBzXyA9IGRlcHM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IGRlcHMud2luKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9hY3Rpdml0aWVzLkFjdGl2aXR5UG9ydHN9ICovXG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXyA9IGRlcHMuYWN0aXZpdGllcygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvZGlhbG9nLW1hbmFnZXIuRGlhbG9nTWFuYWdlcn0gKi9cbiAgICB0aGlzLmRpYWxvZ01hbmFnZXJfID0gZGVwcy5kaWFsb2dNYW5hZ2VyKCk7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlfSAqL1xuICAgIHRoaXMub3BlblZpZXdQcm9taXNlXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQWN0aXZpdHlJZnJhbWVWaWV3fSAqL1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3XyA9IG5ldyBBY3Rpdml0eUlmcmFtZVZpZXcoXG4gICAgICB0aGlzLndpbl8sXG4gICAgICB0aGlzLmFjdGl2aXR5UG9ydHNfLFxuICAgICAgZmVVcmwoJy9sb2dpbmlmcmFtZScpLFxuICAgICAgZmVBcmdzKHtcbiAgICAgICAgcHVibGljYXRpb25JZDogZGVwcy5wYWdlQ29uZmlnKCkuZ2V0UHVibGljYXRpb25JZCgpLFxuICAgICAgICBwcm9kdWN0SWQ6IGRlcHMucGFnZUNvbmZpZygpLmdldFByb2R1Y3RJZCgpLFxuICAgICAgICAvLyBObyBuZWVkIHRvIGFzayB0aGUgdXNlci4gSnVzdCB0ZWxsIHRoZW0geW91J3JlIGxvZ2dpbmcgdGhlbSBpbi5cbiAgICAgICAgdXNlckNvbnNlbnQ6IGZhbHNlLFxuICAgICAgICAvLyBUT0RPKGNoZW5zaGF5KTogUGFzcyBlbnRpdGxlbWVudHMgdmFsdWUgaGVyZS5cbiAgICAgIH0pLFxuICAgICAgLyogc2hvdWxkRmFkZUJvZHkgKi8gdHJ1ZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ29udGludWVzIHRoZSBMb2dpbiBmbG93IChhZnRlciB3YWl0aW5nKS5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICB0aGlzLmRlcHNfXG4gICAgICAuY2FsbGJhY2tzKClcbiAgICAgIC50cmlnZ2VyRmxvd1N0YXJ0ZWQoU3Vic2NyaXB0aW9uRmxvd3MuU0hPV19MT0dJTl9OT1RJRklDQVRJT04pO1xuXG4gICAgdGhpcy5vcGVuVmlld1Byb21pc2VfID0gdGhpcy5kaWFsb2dNYW5hZ2VyXy5vcGVuVmlldyhcbiAgICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3X1xuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLmFjY2VwdFJlc3VsdCgpLnRoZW4oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRoZSBjb25zZW50IHBhcnQgaXMgY29tcGxldGUuXG4gICAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgICB9LFxuICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgdGhpcy5kaWFsb2dNYW5hZ2VyXy5jb21wbGV0ZVZpZXcodGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfKTtcbiAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtBY3Rpdml0eUlmcmFtZVZpZXd9IGZyb20gJy4uL3VpL2FjdGl2aXR5LWlmcmFtZS12aWV3JztcbmltcG9ydCB7U3Vic2NyaXB0aW9uRmxvd3N9IGZyb20gJy4uL2FwaS9zdWJzY3JpcHRpb25zJztcbmltcG9ydCB7ZmVBcmdzLCBmZVVybH0gZnJvbSAnLi9zZXJ2aWNlcyc7XG5pbXBvcnQge2lzQ2FuY2VsRXJyb3J9IGZyb20gJy4uL3V0aWxzL2Vycm9ycyc7XG5cbmV4cG9ydCBjbGFzcyBMb2dpblByb21wdEFwaSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGVwcykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL2RlcHMuRGVwc0RlZn0gKi9cbiAgICB0aGlzLmRlcHNfID0gZGVwcztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gZGVwcy53aW4oKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gZGVwcy5hY3Rpdml0aWVzKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9kaWFsb2ctbWFuYWdlci5EaWFsb2dNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8gPSBkZXBzLmRpYWxvZ01hbmFnZXIoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2V9ICovXG4gICAgdGhpcy5vcGVuVmlld1Byb21pc2VfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFBY3Rpdml0eUlmcmFtZVZpZXd9ICovXG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfID0gbmV3IEFjdGl2aXR5SWZyYW1lVmlldyhcbiAgICAgIHRoaXMud2luXyxcbiAgICAgIHRoaXMuYWN0aXZpdHlQb3J0c18sXG4gICAgICBmZVVybCgnL2xvZ2luaWZyYW1lJyksXG4gICAgICBmZUFyZ3Moe1xuICAgICAgICBwdWJsaWNhdGlvbklkOiBkZXBzLnBhZ2VDb25maWcoKS5nZXRQdWJsaWNhdGlvbklkKCksXG4gICAgICAgIHByb2R1Y3RJZDogZGVwcy5wYWdlQ29uZmlnKCkuZ2V0UHJvZHVjdElkKCksXG4gICAgICAgIC8vIEZpcnN0IGFzayB0aGUgdXNlciBpZiB0aGV5IHdhbnQgdXMgdG8gbG9nIHRoZW0gaW4uXG4gICAgICAgIHVzZXJDb25zZW50OiB0cnVlLFxuICAgICAgICAvLyBUT0RPKGNoZW5zaGF5KTogUGFzcyBlbnRpdGxlbWVudHMgdmFsdWUgaGVyZS5cbiAgICAgIH0pLFxuICAgICAgLyogc2hvdWxkRmFkZUJvZHkgKi8gdHJ1ZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUHJvbXB0cyB0aGUgdXNlciB0byBsb2dpbi5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICB0aGlzLmRlcHNfXG4gICAgICAuY2FsbGJhY2tzKClcbiAgICAgIC50cmlnZ2VyRmxvd1N0YXJ0ZWQoU3Vic2NyaXB0aW9uRmxvd3MuU0hPV19MT0dJTl9QUk9NUFQpO1xuXG4gICAgdGhpcy5vcGVuVmlld1Byb21pc2VfID0gdGhpcy5kaWFsb2dNYW5hZ2VyXy5vcGVuVmlldyhcbiAgICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3X1xuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLmFjY2VwdFJlc3VsdCgpLnRoZW4oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRoZSBjb25zZW50IHBhcnQgaXMgY29tcGxldGUuXG4gICAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgICB9LFxuICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgaWYgKGlzQ2FuY2VsRXJyb3IocmVhc29uKSkge1xuICAgICAgICAgIHRoaXMuZGVwc19cbiAgICAgICAgICAgIC5jYWxsYmFja3MoKVxuICAgICAgICAgICAgLnRyaWdnZXJGbG93Q2FuY2VsZWQoU3Vic2NyaXB0aW9uRmxvd3MuU0hPV19MT0dJTl9QUk9NUFQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtzZXJ2aWNlVXJsfSBmcm9tICcuL3NlcnZpY2VzJztcblxuZXhwb3J0IGNsYXNzIE9mZmVyc0FwaSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuLi9tb2RlbC9wYWdlLWNvbmZpZy5QYWdlQ29uZmlnfSBjb25maWdcbiAgICogQHBhcmFtIHshLi9mZXRjaGVyLkZldGNoZXJ9IGZldGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgZmV0Y2hlcikge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9tb2RlbC9wYWdlLWNvbmZpZy5QYWdlQ29uZmlnfSAqL1xuICAgIHRoaXMuY29uZmlnXyA9IGNvbmZpZztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL2ZldGNoZXIuRmV0Y2hlcn0gKi9cbiAgICB0aGlzLmZldGNoZXJfID0gZmV0Y2hlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9zdHJpbmc9fSBwcm9kdWN0SWRcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFycmF5PCEuLi9hcGkvb2ZmZXIuT2ZmZXI+Pn1cbiAgICovXG4gIGdldE9mZmVycyhwcm9kdWN0SWQgPSB0aGlzLmNvbmZpZ18uZ2V0UHJvZHVjdElkKCkpIHtcbiAgICBpZiAoIXByb2R1Y3RJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRPZmZlcnMgcmVxdWlyZXMgcHJvZHVjdElkIGluIGNvbmZpZyBvciBhcmd1bWVudHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hfKHByb2R1Y3RJZCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RJZFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhQXJyYXk8IS4uL2FwaS9vZmZlci5PZmZlcj4+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZmV0Y2hfKHByb2R1Y3RJZCkge1xuICAgIGNvbnN0IHVybCA9IHNlcnZpY2VVcmwoXG4gICAgICAnL3B1YmxpY2F0aW9uLycgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb25maWdfLmdldFB1YmxpY2F0aW9uSWQoKSkgK1xuICAgICAgICAnL29mZmVycycgK1xuICAgICAgICAnP2xhYmVsPScgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQocHJvZHVjdElkKVxuICAgICk7XG4gICAgLy8gVE9ETyhkdm95dGVua28pOiBzd2l0Y2ggdG8gYSBub24tY3JlZGVudGlhbGVkIHJlcXVlc3QgYWZ0ZXIgbGF1bmNoLlxuICAgIHJldHVybiB0aGlzLmZldGNoZXJfLmZldGNoQ3JlZGVudGlhbGVkSnNvbih1cmwpLnRoZW4oanNvbiA9PiB7XG4gICAgICByZXR1cm4ganNvblsnb2ZmZXJzJ10gfHwgW107XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtBY3Rpdml0eUlmcmFtZVZpZXd9IGZyb20gJy4uL3VpL2FjdGl2aXR5LWlmcmFtZS12aWV3JztcbmltcG9ydCB7XG4gIEFscmVhZHlTdWJzY3JpYmVkUmVzcG9uc2UsXG4gIFNrdVNlbGVjdGVkUmVzcG9uc2UsXG4gIFN1YnNjcmliZVJlc3BvbnNlLFxuICBWaWV3U3Vic2NyaXB0aW9uc1Jlc3BvbnNlLFxufSBmcm9tICcuLi9wcm90by9hcGlfbWVzc2FnZXMnO1xuaW1wb3J0IHtBbmFseXRpY3NFdmVudCwgRXZlbnRQYXJhbXN9IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge1BheVN0YXJ0Rmxvd30gZnJvbSAnLi9wYXktZmxvdyc7XG5pbXBvcnQge1Byb2R1Y3RUeXBlLCBTdWJzY3JpcHRpb25GbG93c30gZnJvbSAnLi4vYXBpL3N1YnNjcmlwdGlvbnMnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJy4uL3V0aWxzL2xvZyc7XG5pbXBvcnQge2ZlQXJncywgZmVVcmx9IGZyb20gJy4vc2VydmljZXMnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBza3VcbiAqIEByZXR1cm4geyFFdmVudFBhcmFtc31cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRQYXJhbXMoc2t1KSB7XG4gIHJldHVybiBuZXcgRXZlbnRQYXJhbXMoWywgLCAsICwgc2t1XSk7XG59XG5cbi8qKlxuICogT2ZmZXJzIHZpZXcgaXMgY2xvc2FibGUgd2hlbiByZXF1ZXN0IHdhcyBvcmlnaW5hdGVkIGZyb20gJ0FiYnJ2T2ZmZXJGbG93J1xuICogb3IgZnJvbSAnU3Vic2NyaWJlT3B0aW9uRmxvdycuXG4gKi9cbmNvbnN0IE9GRkVSU19WSUVXX0NMT1NBQkxFID0gdHJ1ZTtcblxuLy8gVGhlIHZhbHVlIGxvZ2dlZCB3aGVuIHRoZSBvZmZlcnMgc2NyZWVuIHNob3dzIGFsbCBhdmFpbGFibGUgU0tVcy5cbmNvbnN0IEFMTF9TS1VTID0gJyonO1xuXG4vKipcbiAqIFRoZSBjbGFzcyBmb3IgT2ZmZXJzIGZsb3cuXG4gKi9cbmV4cG9ydCBjbGFzcyBPZmZlcnNGbG93IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqIEBwYXJhbSB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLk9mZmVyc1JlcXVlc3R8dW5kZWZpbmVkfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzLCBvcHRpb25zKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSBkZXBzLndpbigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRlcHMuZGlhbG9nTWFuYWdlcigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL3J1bnRpbWUvY2xpZW50LWV2ZW50LW1hbmFnZXIuQ2xpZW50RXZlbnRNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IGRlcHMuZXZlbnRNYW5hZ2VyKCk7XG5cbiAgICBsZXQgaXNDbG9zYWJsZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pc0Nsb3NhYmxlO1xuICAgIGlmIChpc0Nsb3NhYmxlID09IHVuZGVmaW5lZCkge1xuICAgICAgaXNDbG9zYWJsZSA9IGZhbHNlOyAvLyBEZWZhdWx0IGlzIHRvIGhpZGUgQ2xvc2UgYnV0dG9uLlxuICAgIH1cblxuICAgIGNvbnN0IGZlQXJnc09iaiA9IHtcbiAgICAgICdwcm9kdWN0SWQnOiBkZXBzLnBhZ2VDb25maWcoKS5nZXRQcm9kdWN0SWQoKSxcbiAgICAgICdwdWJsaWNhdGlvbklkJzogZGVwcy5wYWdlQ29uZmlnKCkuZ2V0UHVibGljYXRpb25JZCgpLFxuICAgICAgJ3Nob3dOYXRpdmUnOiBkZXBzLmNhbGxiYWNrcygpLmhhc1N1YnNjcmliZVJlcXVlc3RDYWxsYmFjaygpLFxuICAgICAgJ3Byb2R1Y3RUeXBlJzogUHJvZHVjdFR5cGUuU1VCU0NSSVBUSU9OLFxuICAgICAgJ2xpc3QnOiAob3B0aW9ucyAmJiBvcHRpb25zLmxpc3QpIHx8ICdkZWZhdWx0JyxcbiAgICAgICdza3VzJzogKG9wdGlvbnMgJiYgb3B0aW9ucy5za3VzKSB8fCBudWxsLFxuICAgICAgJ2lzQ2xvc2FibGUnOiBpc0Nsb3NhYmxlLFxuICAgICAgJ2FuYWx5dGljc0NvbnRleHQnOiBkZXBzXG4gICAgICAgIC5hbmFseXRpY3MoKVxuICAgICAgICAuZ2V0Q29udGV4dCgpXG4gICAgICAgIC50b0FycmF5KCksXG4gICAgfTtcblxuICAgIHRoaXMucHJvcmF0aW9uTW9kZSA9IGZlQXJnc09ialsncmVwbGFjZVNrdVByb3JhdGlvbk1vZGUnXSB8fCB1bmRlZmluZWQ7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9sZFNrdSkge1xuICAgICAgZmVBcmdzT2JqWydvbGRTa3UnXSA9IG9wdGlvbnMub2xkU2t1O1xuICAgIH1cblxuICAgIGlmIChmZUFyZ3NPYmpbJ29sZFNrdSddKSB7XG4gICAgICBhc3NlcnQoZmVBcmdzT2JqWydza3VzJ10sICdOZWVkIGEgc2t1IGxpc3QgaWYgb2xkIHNrdSBpcyBwcm92aWRlZCEnKTtcblxuICAgICAgLy8gUmVtb3ZlIG9sZCBza3UgZnJvbSBvZmZlcnMgaWYgaW4gbGlzdC5cbiAgICAgIGxldCBza3VMaXN0ID0gZmVBcmdzT2JqWydza3VzJ107XG4gICAgICBjb25zdCAvKiogQHR5cGUge3N0cmluZ30gKi8gb2xkU2t1ID0gZmVBcmdzT2JqWydvbGRTa3UnXTtcbiAgICAgIHNrdUxpc3QgPSBza3VMaXN0LmZpbHRlcihza3UgPT4gc2t1ICE9PSBvbGRTa3UpO1xuXG4gICAgICBhc3NlcnQoXG4gICAgICAgIHNrdUxpc3QubGVuZ3RoID4gMCxcbiAgICAgICAgJ1NrdSBsaXN0IG9ubHkgY29udGFpbmVkIG9mZmVyIHVzZXIgYWxyZWFkeSBoYXMnXG4gICAgICApO1xuICAgICAgZmVBcmdzT2JqWydza3VzJ10gPSBza3VMaXN0O1xuICAgIH1cblxuICAgIC8vIFJlZGlyZWN0IHRvIHBheW1lbnRzIGlmIG9ubHkgb25lIHVwZ3JhZGUgb3B0aW9uIGlzIHBhc3NlZC5cbiAgICBpZiAoZmVBcmdzT2JqWydza3VzJ10gJiYgZmVBcmdzT2JqWydza3VzJ10ubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBza3UgPSBmZUFyZ3NPYmpbJ3NrdXMnXVswXTtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH0gKi8gb2xkU2t1ID0gZmVBcmdzT2JqWydvbGRTa3UnXTtcbiAgICAgIC8vIFVwZGF0ZSBzdWJzY3JpcHRpb24gdHJpZ2dlcnMgZXhwZXJpbWVudGFsIGZsYWcgaWYgb2xkU2t1IGlzIHBhc3NlZCxcbiAgICAgIC8vIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yIG9sZFNrdSB0byBkZWNpZGUgaWYgaXQgbmVlZHMgdG8gYmUgc2VudC5cbiAgICAgIC8vIE90aGVyd2lzZSB3ZSBtaWdodCBhY2NpZGVudGFsbHkgYmxvY2sgYSByZWd1bGFyIHN1YnNjcmlwdGlvbiByZXF1ZXN0LlxuICAgICAgaWYgKG9sZFNrdSkge1xuICAgICAgICBuZXcgUGF5U3RhcnRGbG93KHRoaXMuZGVwc18sIHtcbiAgICAgICAgICBza3VJZDogc2t1LFxuICAgICAgICAgIG9sZFNrdSxcbiAgICAgICAgICByZXBsYWNlU2t1UHJvcmF0aW9uTW9kZTogdGhpcy5wcm9yYXRpb25Nb2RlLFxuICAgICAgICB9KS5zdGFydCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBwcml2YXRlICBAY29uc3QgeyFBcnJheTwhc3RyaW5nPn0gKi9cbiAgICB0aGlzLnNrdXNfID0gZmVBcmdzT2JqWydza3VzJ10gfHwgW0FMTF9TS1VTXTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFBY3Rpdml0eUlmcmFtZVZpZXd9ICovXG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfID0gbmV3IEFjdGl2aXR5SWZyYW1lVmlldyhcbiAgICAgIHRoaXMud2luXyxcbiAgICAgIHRoaXMuYWN0aXZpdHlQb3J0c18sXG4gICAgICBmZVVybCgnL29mZmVyc2lmcmFtZScpLFxuICAgICAgZmVBcmdzKGZlQXJnc09iaiksXG4gICAgICAvKiBzaG91bGRGYWRlQm9keSAqLyB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NrdVNlbGVjdGVkUmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGFydFBheUZsb3dfKHJlc3BvbnNlKSB7XG4gICAgY29uc3Qgc2t1ID0gcmVzcG9uc2UuZ2V0U2t1KCk7XG4gICAgY29uc3Qgb2xkU2t1ID0gcmVzcG9uc2UuZ2V0T2xkU2t1KCk7XG4gICAgaWYgKHNrdSkge1xuICAgICAgaWYgKG9sZFNrdSkge1xuICAgICAgICB0aGlzLmRlcHNfLmFuYWx5dGljcygpLnNldFNrdShvbGRTa3UpO1xuICAgICAgfVxuICAgICAgdGhpcy5ldmVudE1hbmFnZXJfLmxvZ1N3Z0V2ZW50KFxuICAgICAgICBBbmFseXRpY3NFdmVudC5BQ1RJT05fT0ZGRVJfU0VMRUNURUQsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGdldEV2ZW50UGFyYW1zKHNrdSlcbiAgICAgICk7XG4gICAgICBsZXQgc2t1T3JTdWJzY3JpcHRpb25SZXF1ZXN0O1xuICAgICAgaWYgKG9sZFNrdSkge1xuICAgICAgICBza3VPclN1YnNjcmlwdGlvblJlcXVlc3QgPSB7fTtcbiAgICAgICAgc2t1T3JTdWJzY3JpcHRpb25SZXF1ZXN0Wydza3VJZCddID0gc2t1O1xuICAgICAgICBza3VPclN1YnNjcmlwdGlvblJlcXVlc3RbJ29sZFNrdSddID0gb2xkU2t1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2t1T3JTdWJzY3JpcHRpb25SZXF1ZXN0ID0gc2t1O1xuICAgICAgfVxuICAgICAgbmV3IFBheVN0YXJ0Rmxvdyh0aGlzLmRlcHNfLCBza3VPclN1YnNjcmlwdGlvblJlcXVlc3QpLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QWxyZWFkeVN1YnNjcmliZWRSZXNwb25zZX0gcmVzcG9uc2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUxpbmtSZXF1ZXN0XyhyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5nZXRTdWJzY3JpYmVyT3JNZW1iZXIoKSkge1xuICAgICAgdGhpcy5ldmVudE1hbmFnZXJfLmxvZ1N3Z0V2ZW50KFxuICAgICAgICBBbmFseXRpY3NFdmVudC5BQ1RJT05fQUxSRUFEWV9TVUJTQ1JJQkVELFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgICAgdGhpcy5kZXBzXy5jYWxsYmFja3MoKS50cmlnZ2VyTG9naW5SZXF1ZXN0KHtcbiAgICAgICAgbGlua1JlcXVlc3RlZDogISFyZXNwb25zZS5nZXRMaW5rUmVxdWVzdGVkKCksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtWaWV3U3Vic2NyaXB0aW9uc1Jlc3BvbnNlfSByZXNwb25zZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhcnROYXRpdmVGbG93XyhyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5nZXROYXRpdmUoKSkge1xuICAgICAgdGhpcy5kZXBzXy5jYWxsYmFja3MoKS50cmlnZ2VyU3Vic2NyaWJlUmVxdWVzdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIG9mZmVycyBmbG93IG9yIGFscmVhZHlTdWJzY3JpYmVkIGZsb3cuXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xykge1xuICAgICAgLy8gU28gbm8gZXJyb3IgaWYgc2tpcHBlZCB0byBwYXltZW50IHNjcmVlbi5cbiAgICAgIC8vIFN0YXJ0L2NhbmNlbCBldmVudHMuXG4gICAgICAvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyByZXF1aXJlZCBieSBQcm9wZW5zaXR5IGluIEFNUC5cbiAgICAgIHRoaXMuZGVwc18uY2FsbGJhY2tzKCkudHJpZ2dlckZsb3dTdGFydGVkKFN1YnNjcmlwdGlvbkZsb3dzLlNIT1dfT0ZGRVJTLCB7XG4gICAgICAgIHNrdXM6IHRoaXMuc2t1c18sXG4gICAgICAgIHNvdXJjZTogJ1N3RycsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5vbkNhbmNlbCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGVwc19cbiAgICAgICAgICAuY2FsbGJhY2tzKClcbiAgICAgICAgICAudHJpZ2dlckZsb3dDYW5jZWxlZChTdWJzY3JpcHRpb25GbG93cy5TSE9XX09GRkVSUyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5vbihcbiAgICAgICAgU2t1U2VsZWN0ZWRSZXNwb25zZSxcbiAgICAgICAgdGhpcy5zdGFydFBheUZsb3dfLmJpbmQodGhpcylcbiAgICAgICk7XG4gICAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18ub24oXG4gICAgICAgIEFscmVhZHlTdWJzY3JpYmVkUmVzcG9uc2UsXG4gICAgICAgIHRoaXMuaGFuZGxlTGlua1JlcXVlc3RfLmJpbmQodGhpcylcbiAgICAgICk7XG4gICAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18ub24oXG4gICAgICAgIFZpZXdTdWJzY3JpcHRpb25zUmVzcG9uc2UsXG4gICAgICAgIHRoaXMuc3RhcnROYXRpdmVGbG93Xy5iaW5kKHRoaXMpXG4gICAgICApO1xuXG4gICAgICB0aGlzLmV2ZW50TWFuYWdlcl8ubG9nU3dnRXZlbnQoXG4gICAgICAgIEFuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fT0ZGRVJTLFxuICAgICAgICBudWxsLFxuICAgICAgICBnZXRFdmVudFBhcmFtcyh0aGlzLnNrdXNfLmpvaW4oJywnKSlcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB0aGlzLmRpYWxvZ01hbmFnZXJfLm9wZW5WaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBjbGFzcyBmb3Igc3Vic2NyaWJlIG9wdGlvbiBmbG93LlxuICovXG5leHBvcnQgY2xhc3MgU3Vic2NyaWJlT3B0aW9uRmxvdyB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0geyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5PZmZlcnNSZXF1ZXN0fHVuZGVmaW5lZH0gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGVwcywgb3B0aW9ucykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL2RlcHMuRGVwc0RlZn0gKi9cbiAgICB0aGlzLmRlcHNfID0gZGVwcztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5PZmZlcnNSZXF1ZXN0fHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLm9wdGlvbnNfID0gb3B0aW9ucztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gZGVwcy5hY3Rpdml0aWVzKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9kaWFsb2ctbWFuYWdlci5EaWFsb2dNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8gPSBkZXBzLmRpYWxvZ01hbmFnZXIoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9ydW50aW1lL2NsaWVudC1ldmVudC1tYW5hZ2VyLkNsaWVudEV2ZW50TWFuYWdlcn0gKi9cbiAgICB0aGlzLmV2ZW50TWFuYWdlcl8gPSBkZXBzLmV2ZW50TWFuYWdlcigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUFjdGl2aXR5SWZyYW1lVmlld30gKi9cbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18gPSBuZXcgQWN0aXZpdHlJZnJhbWVWaWV3KFxuICAgICAgZGVwcy53aW4oKSxcbiAgICAgIHRoaXMuYWN0aXZpdHlQb3J0c18sXG4gICAgICBmZVVybCgnL29wdGlvbnNpZnJhbWUnKSxcbiAgICAgIGZlQXJncyh7XG4gICAgICAgICdwdWJsaWNhdGlvbklkJzogZGVwcy5wYWdlQ29uZmlnKCkuZ2V0UHVibGljYXRpb25JZCgpLFxuICAgICAgICAncHJvZHVjdElkJzogZGVwcy5wYWdlQ29uZmlnKCkuZ2V0UHJvZHVjdElkKCksXG4gICAgICAgICdsaXN0JzogKG9wdGlvbnMgJiYgb3B0aW9ucy5saXN0KSB8fCAnZGVmYXVsdCcsXG4gICAgICAgICdza3VzJzogKG9wdGlvbnMgJiYgb3B0aW9ucy5za3VzKSB8fCBudWxsLFxuICAgICAgICAnaXNDbG9zYWJsZSc6IHRydWUsXG4gICAgICB9KSxcbiAgICAgIC8qIHNob3VsZEZhZGVCb2R5ICovIGZhbHNlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIG9mZmVycyBmbG93IG9yIGFscmVhZHlTdWJzY3JpYmVkIGZsb3cuXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgc3RhcnQoKSB7XG4gICAgLy8gU3RhcnQvY2FuY2VsIGV2ZW50cy5cbiAgICB0aGlzLmRlcHNfXG4gICAgICAuY2FsbGJhY2tzKClcbiAgICAgIC50cmlnZ2VyRmxvd1N0YXJ0ZWQoU3Vic2NyaXB0aW9uRmxvd3MuU0hPV19TVUJTQ1JJQkVfT1BUSU9OKTtcbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18ub25DYW5jZWwoKCkgPT4ge1xuICAgICAgdGhpcy5kZXBzX1xuICAgICAgICAuY2FsbGJhY2tzKClcbiAgICAgICAgLnRyaWdnZXJGbG93Q2FuY2VsZWQoU3Vic2NyaXB0aW9uRmxvd3MuU0hPV19TVUJTQ1JJQkVfT1BUSU9OKTtcbiAgICB9KTtcbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18ub24oXG4gICAgICBTdWJzY3JpYmVSZXNwb25zZSxcbiAgICAgIHRoaXMubWF5YmVPcGVuT2ZmZXJzRmxvd18uYmluZCh0aGlzKVxuICAgICk7XG5cbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18uYWNjZXB0UmVzdWx0KCkudGhlbihcbiAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgU3Vic2NyaWJlUmVzcG9uc2UoKTtcbiAgICAgICAgaWYgKGRhdGFbJ3N1YnNjcmliZSddKSB7XG4gICAgICAgICAgcmVzcG9uc2Uuc2V0U3Vic2NyaWJlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF5YmVPcGVuT2ZmZXJzRmxvd18ocmVzcG9uc2UpO1xuICAgICAgfSxcbiAgICAgIHJlYXNvbiA9PiB7XG4gICAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChcbiAgICAgIEFuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fQ0xJQ0tfVE9fU0hPV19PRkZFUlNcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmRpYWxvZ01hbmFnZXJfLm9wZW5WaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdWJzY3JpYmVSZXNwb25zZX0gcmVzcG9uc2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG1heWJlT3Blbk9mZmVyc0Zsb3dfKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLmdldFN1YnNjcmliZSgpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zXyB8fCB7fTtcbiAgICAgIGlmIChvcHRpb25zLmlzQ2xvc2FibGUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuaXNDbG9zYWJsZSA9IE9GRkVSU19WSUVXX0NMT1NBQkxFO1xuICAgICAgfVxuICAgICAgdGhpcy5ldmVudE1hbmFnZXJfLmxvZ1N3Z0V2ZW50KEFuYWx5dGljc0V2ZW50LkFDVElPTl9WSUVXX09GRkVSUywgdHJ1ZSk7XG4gICAgICBuZXcgT2ZmZXJzRmxvdyh0aGlzLmRlcHNfLCBvcHRpb25zKS5zdGFydCgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoZSBjbGFzcyBmb3IgQWJicmV2aWF0ZWQgT2ZmZXIgZmxvdy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBBYmJydk9mZmVyRmxvdyB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0geyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5PZmZlcnNSZXF1ZXN0PX0gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGVwcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLk9mZmVyc1JlcXVlc3R8dW5kZWZpbmVkfSAqL1xuICAgIHRoaXMub3B0aW9uc18gPSBvcHRpb25zO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSBkZXBzLndpbigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRlcHMuZGlhbG9nTWFuYWdlcigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL3J1bnRpbWUvY2xpZW50LWV2ZW50LW1hbmFnZXIuQ2xpZW50RXZlbnRNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IGRlcHMuZXZlbnRNYW5hZ2VyKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQWN0aXZpdHlJZnJhbWVWaWV3fSAqL1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3XyA9IG5ldyBBY3Rpdml0eUlmcmFtZVZpZXcoXG4gICAgICB0aGlzLndpbl8sXG4gICAgICB0aGlzLmFjdGl2aXR5UG9ydHNfLFxuICAgICAgZmVVcmwoJy9hYmJydm9mZmVyaWZyYW1lJyksXG4gICAgICBmZUFyZ3Moe1xuICAgICAgICAncHVibGljYXRpb25JZCc6IGRlcHMucGFnZUNvbmZpZygpLmdldFB1YmxpY2F0aW9uSWQoKSxcbiAgICAgICAgJ3Byb2R1Y3RJZCc6IGRlcHMucGFnZUNvbmZpZygpLmdldFByb2R1Y3RJZCgpLFxuICAgICAgICAnc2hvd05hdGl2ZSc6IGRlcHMuY2FsbGJhY2tzKCkuaGFzU3Vic2NyaWJlUmVxdWVzdENhbGxiYWNrKCksXG4gICAgICAgICdsaXN0JzogKG9wdGlvbnMgJiYgb3B0aW9ucy5saXN0KSB8fCAnZGVmYXVsdCcsXG4gICAgICAgICdza3VzJzogKG9wdGlvbnMgJiYgb3B0aW9ucy5za3VzKSB8fCBudWxsLFxuICAgICAgICAnaXNDbG9zYWJsZSc6IHRydWUsXG4gICAgICB9KSxcbiAgICAgIC8qIHNob3VsZEZhZGVCb2R5ICovIGZhbHNlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FscmVhZHlTdWJzY3JpYmVkUmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVMaW5rUmVxdWVzdF8ocmVzcG9uc2UpIHtcbiAgICBpZiAocmVzcG9uc2UuZ2V0U3Vic2NyaWJlck9yTWVtYmVyKCkpIHtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChcbiAgICAgICAgQW5hbHl0aWNzRXZlbnQuQUNUSU9OX0FMUkVBRFlfU1VCU0NSSUJFRCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuZGVwc18uY2FsbGJhY2tzKCkudHJpZ2dlckxvZ2luUmVxdWVzdCh7XG4gICAgICAgIGxpbmtSZXF1ZXN0ZWQ6ICEhcmVzcG9uc2UuZ2V0TGlua1JlcXVlc3RlZCgpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgb2ZmZXJzIGZsb3dcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICAvLyBTdGFydC9jYW5jZWwgZXZlbnRzLlxuICAgIHRoaXMuZGVwc19cbiAgICAgIC5jYWxsYmFja3MoKVxuICAgICAgLnRyaWdnZXJGbG93U3RhcnRlZChTdWJzY3JpcHRpb25GbG93cy5TSE9XX0FCQlJWX09GRkVSKTtcbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18ub25DYW5jZWwoKCkgPT4ge1xuICAgICAgdGhpcy5kZXBzX1xuICAgICAgICAuY2FsbGJhY2tzKClcbiAgICAgICAgLnRyaWdnZXJGbG93Q2FuY2VsZWQoU3Vic2NyaXB0aW9uRmxvd3MuU0hPV19BQkJSVl9PRkZFUik7XG4gICAgfSk7XG5cbiAgICAvLyBJZiB0aGUgdXNlciBpcyBhbHJlYWR5IHN1YnNjcmliZWQsIHRyaWdnZXIgbG9naW4gZmxvd1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5vbihcbiAgICAgIEFscmVhZHlTdWJzY3JpYmVkUmVzcG9uc2UsXG4gICAgICB0aGlzLmhhbmRsZUxpbmtSZXF1ZXN0Xy5iaW5kKHRoaXMpXG4gICAgKTtcblxuICAgIC8vIElmIHJlc3VsdCBpcyBkdWUgdG8gcmVxdWVzdGluZyBvZmZlcnMsIHJlZGlyZWN0IHRvIG9mZmVycyBmbG93XG4gICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLmFjY2VwdFJlc3VsdCgpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIGlmIChyZXN1bHQuZGF0YVsndmlld09mZmVycyddKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNfIHx8IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5pc0Nsb3NhYmxlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG9wdGlvbnMuaXNDbG9zYWJsZSA9IE9GRkVSU19WSUVXX0NMT1NBQkxFO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChBbmFseXRpY3NFdmVudC5BQ1RJT05fVklFV19PRkZFUlMsIHRydWUpO1xuICAgICAgICBuZXcgT2ZmZXJzRmxvdyh0aGlzLmRlcHNfLCBvcHRpb25zKS5zdGFydCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmRhdGFbJ25hdGl2ZSddKSB7XG4gICAgICAgIHRoaXMuZGVwc18uY2FsbGJhY2tzKCkudHJpZ2dlclN1YnNjcmliZVJlcXVlc3QoKTtcbiAgICAgICAgLy8gVGhlIGZsb3cgaXMgY29tcGxldGUuXG4gICAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChcbiAgICAgIEFuYWx5dGljc0V2ZW50LklNUFJFU1NJT05fQ0xJQ0tfVE9fU0hPV19PRkZFUlNfT1JfQUxSRUFEWV9TVUJTQ1JJQkVEXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLmRpYWxvZ01hbmFnZXJfLm9wZW5WaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtFeHBlcmltZW50RmxhZ3N9IGZyb20gJy4vZXhwZXJpbWVudC1mbGFncyc7XG5pbXBvcnQge1BheW1lbnRzQXN5bmNDbGllbnR9IGZyb20gJy4uLy4uL3RoaXJkX3BhcnR5L2dwYXkvc3JjL3BheWpzX2FzeW5jJztcbmltcG9ydCB7WGhyfSBmcm9tICcuLi91dGlscy94aHInO1xuaW1wb3J0IHtieXRlc1RvU3RyaW5nLCBzdHJpbmdUb0J5dGVzfSBmcm9tICcuLi91dGlscy9ieXRlcyc7XG5pbXBvcnQge2NyZWF0ZUNhbmNlbEVycm9yfSBmcm9tICcuLi91dGlscy9lcnJvcnMnO1xuaW1wb3J0IHtmZUFyZ3MsIGZlQ2FjaGVkfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7aXNFeHBlcmltZW50T259IGZyb20gJy4vZXhwZXJpbWVudHMnO1xuXG5jb25zdCBQQVlfUkVRVUVTVF9JRCA9ICdzd2ctcGF5JztcbmNvbnN0IEdQQVlfQUNUSVZJVFlfUkVRVUVTVCA9ICdHUEFZJztcblxuY29uc3QgUkVESVJFQ1RfU1RPUkFHRV9LRVkgPSAnc3Vic2NyaWJlLmdvb2dsZS5jb206cmsnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGZvcmNlUmVkaXJlY3Q6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IFBheU9wdGlvbnNEZWY7XG5cbi8qKlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqIEBwYWNrYWdlIFZpc2libGUgZm9yIHRlc3Rpbmcgb25seS5cbiAqL1xuZXhwb3J0IGNvbnN0IFBBWV9PUklHSU4gPSB7XG4gICdQUk9EVUNUSU9OJzogJ2h0dHBzOi8vcGF5Lmdvb2dsZS5jb20nLFxuICAnU0FOREJPWCc6ICdodHRwczovL3BheS5zYW5kYm94Lmdvb2dsZS5jb20nLFxufTtcblxuLyoqIEByZXR1cm4ge3N0cmluZ30gKi9cbmZ1bmN0aW9uIHBheU9yaWdpbigpIHtcbiAgcmV0dXJuIFBBWV9PUklHSU5bJyRwYXlFbnZpcm9ubWVudCQnXTtcbn1cblxuLyoqIEByZXR1cm4ge3N0cmluZ30gKi9cbmZ1bmN0aW9uIHBheVVybCgpIHtcbiAgcmV0dXJuIGZlQ2FjaGVkKFBBWV9PUklHSU5bJyRwYXlFbnZpcm9ubWVudCQnXSArICcvZ3AvcC91aS9wYXknKTtcbn1cblxuLyoqIEByZXR1cm4ge3N0cmluZ30gKi9cbmZ1bmN0aW9uIHBheURlY3J5cHRVcmwoKSB7XG4gIHJldHVybiBQQVlfT1JJR0lOWyckcGF5RW52aXJvbm1lbnQkJ10gKyAnL2dwL3AvYXBpcy9idXlmbG93L3Byb2Nlc3MnO1xufVxuXG4vKipcbiAqL1xuZXhwb3J0IGNsYXNzIFBheUNsaWVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGVwcykge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gZGVwcy53aW4oKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gZGVwcy5hY3Rpdml0aWVzKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9kaWFsb2ctbWFuYWdlci5EaWFsb2dNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8gPSBkZXBzLmRpYWxvZ01hbmFnZXIoKTtcblxuICAgIC8qKiBAY29uc3QgQHByaXZhdGUgeyFQYXlDbGllbnRCaW5kaW5nRGVmfSAqL1xuICAgIHRoaXMuYmluZGluZ18gPSBpc0V4cGVyaW1lbnRPbih0aGlzLndpbl8sIEV4cGVyaW1lbnRGbGFncy5HUEFZX0FQSSlcbiAgICAgID8gbmV3IFBheUNsaWVudEJpbmRpbmdQYXlqcyhcbiAgICAgICAgICB0aGlzLndpbl8sXG4gICAgICAgICAgdGhpcy5hY3Rpdml0eVBvcnRzXyxcbiAgICAgICAgICAvLyBHZW5lcmF0ZXMgYSBuZXcgR29vZ2xlIFRyYW5zYWN0aW9uIElELlxuICAgICAgICAgIGRlcHMuYW5hbHl0aWNzKCkuZ2V0VHJhbnNhY3Rpb25JZCgpXG4gICAgICAgIClcbiAgICAgIDogbmV3IFBheUNsaWVudEJpbmRpbmdTd2coXG4gICAgICAgICAgdGhpcy53aW5fLFxuICAgICAgICAgIHRoaXMuYWN0aXZpdHlQb3J0c18sXG4gICAgICAgICAgdGhpcy5kaWFsb2dNYW5hZ2VyX1xuICAgICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL3V0aWxzL3ByZWNvbm5lY3QuUHJlY29ubmVjdH0gcHJlXG4gICAqL1xuICBwcmVjb25uZWN0KHByZSkge1xuICAgIHByZS5wcmVmZXRjaChwYXlVcmwoKSk7XG4gICAgcHJlLnByZWZldGNoKFxuICAgICAgJ2h0dHBzOi8vcGF5bWVudHMuZ29vZ2xlLmNvbS9wYXltZW50cy92NC9qcy9pbnRlZ3JhdG9yLmpzP3NzPW1kJ1xuICAgICk7XG4gICAgcHJlLnByZWZldGNoKCdodHRwczovL2NsaWVudHMyLmdvb2dsZS5jb20vZ3IvZ3JfZnVsbF8yLjAuNi5qcycpO1xuICAgIHByZS5wcmVjb25uZWN0KCdodHRwczovL3d3dy5nc3RhdGljLmNvbS8nKTtcbiAgICBwcmUucHJlY29ubmVjdCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS8nKTtcbiAgICBwcmUucHJlY29ubmVjdCgnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUeXBlKCkge1xuICAgIC8vIFRPRE8oZHZveXRlbmtvLCAjNDA2KTogcmVtb3ZlIG9uY2UgR1BheSBBUEkgaXMgbGF1bmNoZWQuXG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ18uZ2V0VHlwZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gcGF5bWVudFJlcXVlc3RcbiAgICogQHBhcmFtIHshUGF5T3B0aW9uc0RlZj19IG9wdGlvbnNcbiAgICovXG4gIHN0YXJ0KHBheW1lbnRSZXF1ZXN0LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmJpbmRpbmdfLnN0YXJ0KHBheW1lbnRSZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFPYmplY3Q+KX0gY2FsbGJhY2tcbiAgICovXG4gIG9uUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICB0aGlzLmJpbmRpbmdfLm9uUmVzcG9uc2UoY2FsbGJhY2spO1xuICB9XG59XG5cbi8qKlxuICogVE9ETyhkdm95dGVua28sICM0MDYpOiByZW1vdmUgZGVsZWdhdGVkIGNsYXNzIG9uY2UgR1BheSBsYXVuY2hlcy5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuY2xhc3MgUGF5Q2xpZW50QmluZGluZ0RlZiB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUeXBlKCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHshT2JqZWN0fSB1bnVzZWRQYXltZW50UmVxdWVzdFxuICAgKiBAcGFyYW0geyFQYXlPcHRpb25zRGVmfSB1bnVzZWRPcHRpb25zXG4gICAqL1xuICBzdGFydCh1bnVzZWRQYXltZW50UmVxdWVzdCwgdW51c2VkT3B0aW9ucykge31cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbighUHJvbWlzZTwhT2JqZWN0Pil9IHVudXNlZENhbGxiYWNrXG4gICAqL1xuICBvblJlc3BvbnNlKHVudXNlZENhbGxiYWNrKSB7fVxufVxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtQYXlDbGllbnRCaW5kaW5nRGVmfVxuICovXG5jbGFzcyBQYXlDbGllbnRCaW5kaW5nU3dnIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEBwYXJhbSB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSBhY3Rpdml0eVBvcnRzXG4gICAqIEBwYXJhbSB7IS4uL2NvbXBvbmVudHMvZGlhbG9nLW1hbmFnZXIuRGlhbG9nTWFuYWdlcn0gZGlhbG9nTWFuYWdlclxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luLCBhY3Rpdml0eVBvcnRzLCBkaWFsb2dNYW5hZ2VyKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBhY3Rpdml0eVBvcnRzO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRpYWxvZ01hbmFnZXI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuICdTV0cnO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGFydChwYXltZW50UmVxdWVzdCwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9wZW5lciA9IHRoaXMuYWN0aXZpdHlQb3J0c18ub3BlbihcbiAgICAgIEdQQVlfQUNUSVZJVFlfUkVRVUVTVCxcbiAgICAgIHBheVVybCgpLFxuICAgICAgb3B0aW9ucy5mb3JjZVJlZGlyZWN0ID8gJ190b3AnIDogJ19ibGFuaycsXG4gICAgICBmZUFyZ3MocGF5bWVudFJlcXVlc3QpLFxuICAgICAge31cbiAgICApO1xuICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8ucG9wdXBPcGVuZWQoKG9wZW5lciAmJiBvcGVuZXIudGFyZ2V0V2luKSB8fCBudWxsKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgb25SZXNwb25zZShjYWxsYmFjaykge1xuICAgIGNvbnN0IHJlc3BvbnNlQ2FsbGJhY2sgPSBwb3J0ID0+IHtcbiAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8ucG9wdXBDbG9zZWQoKTtcbiAgICAgIGNhbGxiYWNrKHRoaXMudmFsaWRhdGVQYXlSZXNwb25zZV8ocG9ydCkpO1xuICAgIH07XG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXy5vblJlc3VsdChHUEFZX0FDVElWSVRZX1JFUVVFU1QsIHJlc3BvbnNlQ2FsbGJhY2spO1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18ub25SZXN1bHQoUEFZX1JFUVVFU1RfSUQsIHJlc3BvbnNlQ2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnREZWZ9IHBvcnRcbiAgICogQHJldHVybiB7IVByb21pc2U8IU9iamVjdD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB2YWxpZGF0ZVBheVJlc3BvbnNlXyhwb3J0KSB7XG4gICAgLy8gRG8gbm90IHJlcXVpcmUgc2VjdXJpdHkgaW1tZWRpYXRlbHk6IGl0IHdpbGwgYmUgY2hlY2tlZCBiZWxvdy5cbiAgICByZXR1cm4gcG9ydC5hY2NlcHRSZXN1bHQoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBpZiAocmVzdWx0Lm9yaWdpbiAhPSBwYXlPcmlnaW4oKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoYW5uZWwgbWlzbWF0Y2gnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRhdGEgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChyZXN1bHQuZGF0YSk7XG4gICAgICBpZiAoZGF0YVsncmVkaXJlY3RFbmNyeXB0ZWRDYWxsYmFja0RhdGEnXSkge1xuICAgICAgICAvLyBEYXRhIGlzIHN1cHBsaWVkIGFzIGFuIGVuY3J5cHRlZCBibG9iLlxuICAgICAgICBjb25zdCB4aHIgPSBuZXcgWGhyKHRoaXMud2luXyk7XG4gICAgICAgIGNvbnN0IHVybCA9IHBheURlY3J5cHRVcmwoKTtcbiAgICAgICAgY29uc3QgaW5pdCA9IC8qKiBAdHlwZSB7IS4uL3V0aWxzL3hoci5GZXRjaEluaXREZWZ9ICovICh7XG4gICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgaGVhZGVyczogeydBY2NlcHQnOiAndGV4dC9wbGFpbiwgYXBwbGljYXRpb24vanNvbid9LFxuICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgICAgYm9keTogZGF0YVsncmVkaXJlY3RFbmNyeXB0ZWRDYWxsYmFja0RhdGEnXSxcbiAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geGhyXG4gICAgICAgICAgLmZldGNoKHVybCwgaW5pdClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0YUNsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSk7XG4gICAgICAgICAgICBkZWxldGUgZGF0YUNsb25lWydyZWRpcmVjdEVuY3J5cHRlZENhbGxiYWNrRGF0YSddO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGF0YUNsb25lLCByZXNwb25zZSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBEYXRhIGlzIHN1cHBsaWVkIGRpcmVjdGx5OiBtdXN0IGJlIGEgdmVyaWZpZWQgYW5kIHNlY3VyZSBjaGFubmVsLlxuICAgICAgaWYgKHJlc3VsdC5vcmlnaW5WZXJpZmllZCAmJiByZXN1bHQuc2VjdXJlQ2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBtaXNtYXRjaCcpO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQmluZGluZyBiYXNlZCBvbiB0aGUgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9wYXlqcy5cbiAqIEBpbXBsZW1lbnRzIHtQYXlDbGllbnRCaW5kaW5nRGVmfVxuICogQHBhY2thZ2UgVmlzaWJsZSBmb3IgdGVzdGluZyBvbmx5LlxuICovXG5leHBvcnQgY2xhc3MgUGF5Q2xpZW50QmluZGluZ1BheWpzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEBwYXJhbSB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSBhY3Rpdml0eVBvcnRzXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gZ29vZ2xlVHJhbnNhY3Rpb25JZFxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luLCBhY3Rpdml0eVBvcnRzLCBnb29nbGVUcmFuc2FjdGlvbklkKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBhY3Rpdml0eVBvcnRzO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/ZnVuY3Rpb24oIVByb21pc2U8IU9iamVjdD4pfSAqL1xuICAgIHRoaXMucmVzcG9uc2VDYWxsYmFja18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/T2JqZWN0fSAqL1xuICAgIHRoaXMucmVxdWVzdF8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/UHJvbWlzZTwhT2JqZWN0Pn0gKi9cbiAgICB0aGlzLnJlc3BvbnNlXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUmVkaXJlY3RWZXJpZmllckhlbHBlcn0gKi9cbiAgICB0aGlzLnJlZGlyZWN0VmVyaWZpZXJIZWxwZXJfID0gbmV3IFJlZGlyZWN0VmVyaWZpZXJIZWxwZXIodGhpcy53aW5fKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFQYXltZW50c0FzeW5jQ2xpZW50fSAqL1xuICAgIHRoaXMuY2xpZW50XyA9IHRoaXMuY3JlYXRlQ2xpZW50XyhcbiAgICAgIHtcbiAgICAgICAgZW52aXJvbm1lbnQ6ICckcGF5RW52aXJvbm1lbnQkJyxcbiAgICAgICAgJ2knOiB7XG4gICAgICAgICAgJ3JlZGlyZWN0S2V5JzogdGhpcy5yZWRpcmVjdFZlcmlmaWVySGVscGVyXy5yZXN0b3JlS2V5KCksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgZ29vZ2xlVHJhbnNhY3Rpb25JZCxcbiAgICAgIHRoaXMuaGFuZGxlUmVzcG9uc2VfLmJpbmQodGhpcylcbiAgICApO1xuXG4gICAgLy8gUHJlcGFyZSBuZXcgdmVyaWZpZXIgcGFpci5cbiAgICB0aGlzLnJlZGlyZWN0VmVyaWZpZXJIZWxwZXJfLnByZXBhcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGdvb2dsZVRyYW5zYWN0aW9uSWRcbiAgICogQHBhcmFtIHtmdW5jdGlvbighUHJvbWlzZTwhT2JqZWN0Pil9IGhhbmRsZXJcbiAgICogQHJldHVybiB7IVBheW1lbnRzQXN5bmNDbGllbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVDbGllbnRfKG9wdGlvbnMsIGdvb2dsZVRyYW5zYWN0aW9uSWQsIGhhbmRsZXIpIHtcbiAgICAvLyBBc3NpZ24gR29vZ2xlIFRyYW5zYWN0aW9uIElEIHRvIFBheW1lbnRzQXN5bmNDbGllbnQuZ29vZ2xlVHJhbnNhY3Rpb25JZF9cbiAgICAvLyBzbyBpdCBjYW4gYmUgcGFzc2VkIHRvIGdwYXlfYXN5bmMuanMgYW5kIHN0b3JlZCBpbiBwYXltZW50IGNsZWFyY3V0IGxvZy5cbiAgICBQYXltZW50c0FzeW5jQ2xpZW50Lmdvb2dsZVRyYW5zYWN0aW9uSWRfID0gZ29vZ2xlVHJhbnNhY3Rpb25JZDtcbiAgICByZXR1cm4gbmV3IFBheW1lbnRzQXN5bmNDbGllbnQoXG4gICAgICBvcHRpb25zLFxuICAgICAgaGFuZGxlcixcbiAgICAgIC8qIHVzZUlmcmFtZSAqLyBmYWxzZSxcbiAgICAgIHRoaXMuYWN0aXZpdHlQb3J0c18uZ2V0T3JpZ2luYWxXZWJBY3Rpdml0eVBvcnRzKClcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRUeXBlKCkge1xuICAgIHJldHVybiAnUEFZSlMnO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGFydChwYXltZW50UmVxdWVzdCwgb3B0aW9ucykge1xuICAgIHRoaXMucmVxdWVzdF8gPSBwYXltZW50UmVxdWVzdDtcblxuICAgIGlmIChvcHRpb25zLmZvcmNlUmVkaXJlY3QpIHtcbiAgICAgIHBheW1lbnRSZXF1ZXN0ID0gT2JqZWN0LmFzc2lnbihwYXltZW50UmVxdWVzdCwge1xuICAgICAgICAnZm9yY2VSZWRpcmVjdCc6IG9wdGlvbnMuZm9yY2VSZWRpcmVjdCB8fCBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRJbnRlcm5hbFBhcmFtKFxuICAgICAgcGF5bWVudFJlcXVlc3QsXG4gICAgICAnZGlzYWJsZU5hdGl2ZScsXG4gICAgICAvLyBUaGUgcGFnZSBjYW5ub3QgYmUgaWZyYW1lZCBhdCB0aGlzIHRpbWUuIE1heSBiZSByZWxheGVkIGxhdGVyXG4gICAgICAvLyBmb3IgQU1QIGFuZCBzaW1pbGFyIGNvbnRleHRzLlxuICAgICAgdGhpcy53aW5fICE9IHRoaXMudG9wXygpIHx8XG4gICAgICAgIC8vIEV4cGVyaW1lbnQgbXVzdCBiZSBlbmFibGVkLlxuICAgICAgICAhaXNFeHBlcmltZW50T24odGhpcy53aW5fLCBFeHBlcmltZW50RmxhZ3MuR1BBWV9OQVRJVkUpXG4gICAgKTtcbiAgICAvLyBOb3RpY2UgdGhhdCB0aGUgY2FsbGJhY2sgZm9yIHZlcmlmaWVyIG1heSBleGVjdXRlIGFzeW5jaHJvbm91c2x5LlxuICAgIHRoaXMucmVkaXJlY3RWZXJpZmllckhlbHBlcl8udXNlVmVyaWZpZXIodmVyaWZpZXIgPT4ge1xuICAgICAgaWYgKHZlcmlmaWVyKSB7XG4gICAgICAgIHNldEludGVybmFsUGFyYW0ocGF5bWVudFJlcXVlc3QsICdyZWRpcmVjdFZlcmlmaWVyJywgdmVyaWZpZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5jbGllbnRfLmxvYWRQYXltZW50RGF0YShwYXltZW50UmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIG9uUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tfID0gY2FsbGJhY2s7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlXztcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBjYWxsYmFjayh0aGlzLmNvbnZlcnRSZXNwb25zZV8ocmVzcG9uc2UsIHRoaXMucmVxdWVzdF8pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVByb21pc2U8IU9iamVjdD59IHJlc3BvbnNlUHJvbWlzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlUmVzcG9uc2VfKHJlc3BvbnNlUHJvbWlzZSkge1xuICAgIHRoaXMucmVzcG9uc2VfID0gcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmICh0aGlzLnJlc3BvbnNlQ2FsbGJhY2tfKSB7XG4gICAgICB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tfKFxuICAgICAgICB0aGlzLmNvbnZlcnRSZXNwb25zZV8odGhpcy5yZXNwb25zZV8sIHRoaXMucmVxdWVzdF8pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFQcm9taXNlPCFPYmplY3Q+fSByZXNwb25zZVxuICAgKiBAcGFyYW0gez9PYmplY3R9IHJlcXVlc3RcbiAgICogQHJldHVybiB7IVByb21pc2U8IU9iamVjdD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb252ZXJ0UmVzcG9uc2VfKHJlc3BvbnNlLCByZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAudGhlbihcbiAgICAgICAgLy8gVGVtcG9yYXJ5IGNsaWVudCBzaWRlIHNvbHV0aW9uIHRvIHJlbWVtYmVyIHRoZVxuICAgICAgICAvLyBpbnB1dCBwYXJhbXMuIFRPRE86IFJlbW92ZSB0aGlzIG9uY2Ugc2VydmVyLXNpZGVcbiAgICAgICAgLy8gaW5wdXQgcHJlc2VydmF0aW9uIGlzIGRvbmUgYW5kIGlzIHBhcnQgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAgICByZXMgPT4ge1xuICAgICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXNbJ3BheW1lbnRSZXF1ZXN0J10gPSByZXF1ZXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICApXG4gICAgICAuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWFzb24gPT0gJ29iamVjdCcgJiYgcmVhc29uWydzdGF0dXNDb2RlJ10gPT0gJ0NBTkNFTEVEJykge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChjcmVhdGVDYW5jZWxFcnJvcih0aGlzLndpbl8pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFXaW5kb3d9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0b3BfKCkge1xuICAgIC8vIE9ubHkgZXhpc3RzIGZvciB0ZXN0aW5nIHNpbmNlIGl0J3Mgbm90IHBvc3NpYmxlIHRvIG92ZXJyaWRlIGB3aW5kb3cudG9wYC5cbiAgICByZXR1cm4gdGhpcy53aW5fLnRvcDtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGtleTogc3RyaW5nLFxuICogICB2ZXJpZmllcjogc3RyaW5nLFxuICogfX1cbiAqL1xubGV0IFJlZGlyZWN0VmVyaWZpZXJQYWlyRGVmO1xuXG4vKipcbiAqIFRoaXMgaGVscGVyIGdlbmVyYXRlcyBrZXkvdmVyaWZpZXIgcGFpciBmb3IgdGhlIHJlZGlyZWN0IG1vZGUuIFdoZW4gdGhlXG4gKiByZWRpcmVjdCBtb2RlIGlzIHVzZWQsIHRoZSBlbmNyeXB0ZWQgcGF5bG9hZCBpcyByZXR1cm5lZCB2aWEgbml2aWdhdGlvbiBVUkwuXG4gKiBUaGlzIHBheWxvYWQgbmVlZCB0byBiZSBkZWNyeXB0ZWQgYW5kIHRvIGF2b2lkIHNlc3Npb24gZml4YXRpb24gYXR0YWNrcywgYVxuICogdmVyaWZpZXIgaGFzIHRvIGJlIHVzZWQuIFRoaXMgcmVkaXJlY3QgdmVyaWZpZXIgaXMgbm90IHRoZSBvbmx5IHNlc3Npb25cbiAqIHZlcmlmaWVyIGluIHVzZTogd2UgYWxzbyB1c2UgR0FJQS4gSG93ZXZlciwgd2UgaGF2ZSB0byBmYWxsYmFjayB0byB0aGlzXG4gKiB2ZXJpZmllciB3aGVuIEdBSUEgaXMgbm90IGF2YWlsYWJsZS5cbiAqXG4gKiBAcGFja2FnZSBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWRpcmVjdFZlcmlmaWVySGVscGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3aW4pIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IHdpbjtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLnBhaXJDcmVhdGVkXyA9IGZhbHNlO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/UmVkaXJlY3RWZXJpZmllclBhaXJEZWZ9ICovXG4gICAgdGhpcy5wYWlyXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlPD9SZWRpcmVjdFZlcmlmaWVyUGFpckRlZj59ICovXG4gICAgdGhpcy5wYWlyUHJvbWlzZV8gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIGF2b2lkIHBvcHVwIGJsb2NrZXJzLCB0aGUga2V5L3ZlcmlmaWVyIHBhaXIgaXMgY3JlYXRlZCBhcyBzb29uIGFzXG4gICAqIHBvc3NpYmxlLlxuICAgKiBAcmV0dXJuIHs/UHJvbWlzZX1cbiAgICovXG4gIHByZXBhcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3JDcmVhdGVQYWlyXygoKSA9PiB7fSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIHdpdGggdGhlIGdlbmVyYXRlZCByZWRpcmVjdCB2ZXJpZmllci4gVGhpc1xuICAgKiBBUEkgaXMgc3luYy9hc3luYywgd2hpY2ggaXMgYSBiaWcgYW50aS1wYXR0ZXJuLiBIb3dldmVyLCBpdCdzIG5lY2Vzc2FyeVxuICAgKiB0byByZWR1Y2UgdGhlIHJpc2sgb2YgcG9wdXAgYmxvY2tlcnMuIElmIHRoZSB2ZXJpZmllciBpcyBhbHJlYWR5IGF2YWlsYWJsZVxuICAgKiAoc2VlIGBwcmVwYXJlYCBtZXRob2QpLCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaW1tZWRpYXRlbHkgYW5kIHRodXNcbiAgICogaW4gdGhlIHNhbWUgZXZlbnQgbG9vcCBhcyB0aGUgdXNlciBhY3Rpb24uXG4gICAqXG4gICAqIFRoZSByZXR1cm4gdmVyaWZpZXIgY291bGQgYmUgYG51bGxgLiBUaGlzIGNvdWxkIG1lYW4gZWl0aGVyIHRoYXQgaXRzXG4gICAqIGdlbmVyYXRpb24gZmFpbGVkLCBvciBpZiB0aGUgcGxhdGZvcm0gZG9lc24ndCBzdXBwb3J0IG5lY2Vzc2FyeSBBUElzLCBzdWNoXG4gICAqIGFzIFdlYiBDcnlwdG8uIFRoZSByZWRpcmVjdCBjYW4gc3RpbGwgcHJvY2VlZCBhbmQgdHJ5IHRvIGZhbGxiYWNrIG9uIEdBSUFcbiAgICogYXMgYSByZWRpcmVjdCB2ZXJpZmllci4gVGhlIHNldCBvZiBwbGF0Zm9ybXMgd2hlcmUgR0FJQSBpcyBub3QgYXZhaWxhYmxlXG4gICAqIGFuZCB0aGUgcmVkaXJlY3QgdmVyaWZpZXIgY2Fubm90IGJlIGNyZWF0ZWQgaXMgbmVnbGlnaWJsZS5cbiAgICpcbiAgICogVGhlIGtleSBjb3JyZXNwb25kaW5nIHRvIHRoZSByZXR1cm5lZCB2ZXJpZmllciBpcyBzdG9yZWQgaW4gdGhlIHNlc3Npb25cbiAgICogc3RvcmFnZSBhbmQgY2FuIGJlIGxhdGVyIHJlc3RvcmVkIHVzaW5nIGByZXN0b3JlS2V5YCBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oP3N0cmluZyl9IGNhbGxiYWNrXG4gICAqL1xuICB1c2VWZXJpZmllcihjYWxsYmFjaykge1xuICAgIHRoaXMuZ2V0T3JDcmVhdGVQYWlyXyhwYWlyID0+IHtcbiAgICAgIGlmIChwYWlyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy53aW5fLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFJFRElSRUNUX1NUT1JBR0VfS0VZLCBwYWlyLmtleSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBJZiBzdG9yYWdlIGhhcyBmYWlsZWQsIHRoZXJlJ3Mgbm8gcG9pbnQgaW4gdXNpbmcgdGhlIHZlcmlmZXIuXG4gICAgICAgICAgLy8gSG93ZXZlciwgdGhlcmUgYXJlIG90aGVyIHdheXMgdG8gcmVjb3ZlciB0aGUgcmVkaXJlY3QsIHNvIGl0J3NcbiAgICAgICAgICAvLyBub3QgbmVjZXNzYXJpbHkgYSBmYXRhbCBjb25kaXRpb24uXG4gICAgICAgICAgcGFpciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKChwYWlyICYmIHBhaXIudmVyaWZpZXIpIHx8IG51bGwpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHRoZSByZWRpcmVjdCBrZXkgZnJvbSB0aGUgc2Vzc2lvbiBzdG9yYWdlLiBUaGUga2V5IG1heSBiZSBudWxsLlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgcmVzdG9yZUtleSgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHRoaXMud2luXy5sb2NhbFN0b3JhZ2UgJiZcbiAgICAgICAgICB0aGlzLndpbl8ubG9jYWxTdG9yYWdlLmdldEl0ZW0oUkVESVJFQ1RfU1RPUkFHRV9LRVkpKSB8fFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9SZWRpcmVjdFZlcmlmaWVyUGFpckRlZil9IGNhbGxiYWNrXG4gICAqIEByZXR1cm4gez9Qcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0T3JDcmVhdGVQYWlyXyhjYWxsYmFjaykge1xuICAgIHRoaXMuY3JlYXRlUGFpcl8oKTtcbiAgICBpZiAodGhpcy5wYWlyQ3JlYXRlZF8pIHtcbiAgICAgIC8vIEFscmVhZHkgY3JlYXRlZC5cbiAgICAgIGNhbGxiYWNrKHRoaXMucGFpcl8pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYWlyUHJvbWlzZV8pIHtcbiAgICAgIC8vIE90aGVyd2lzZSB3YWl0IGZvciBpdCB0byBiZSBjcmVhdGVkLlxuICAgICAgdGhpcy5wYWlyUHJvbWlzZV8udGhlbihwYWlyID0+IGNhbGxiYWNrKHBhaXIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGFpclByb21pc2VfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVQYWlyXygpIHtcbiAgICAvLyBFaXRoZXIgYWxyZWFkeSBjcmVhdGVkIG9yIGFscmVhZHkgc3RhcnRlZC5cbiAgICBpZiAodGhpcy5wYWlyQ3JlYXRlZF8gfHwgdGhpcy5wYWlyUHJvbWlzZV8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB0aGF0IHRoZSBwbGF0Zm9ybSBjYW4gZnVsbHkgc3VwcG9ydCB2ZXJpZmljYXRpb24uIFRoYXQgbWVhbnNcbiAgICAvLyB0aGF0IGl0J3MgZXhwZWN0ZWQgdG8gaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgQVBJczpcbiAgICAvLyBhLiBMb2NhbCBzdG9yYWdlIChsb2NhbFN0b3JhZ2UpO1xuICAgIC8vIGIuIFdlYkNyeXB0byAoY3J5cHRvLnN1YnRsZSk7XG4gICAgLy8gYy4gQ3J5cHRvIHJhbmRvbSAoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyk7XG4gICAgLy8gZC4gU0hBMjg0IChjcnlwdG8uc3VidGxlLmRpZ2VzdCkuXG4gICAgY29uc3QgY3J5cHRvID0gdGhpcy53aW5fLmNyeXB0bztcbiAgICBpZiAoXG4gICAgICB0aGlzLndpbl8ubG9jYWxTdG9yYWdlICYmXG4gICAgICBjcnlwdG8gJiZcbiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiZcbiAgICAgIGNyeXB0by5zdWJ0bGUgJiZcbiAgICAgIGNyeXB0by5zdWJ0bGUuZGlnZXN0XG4gICAgKSB7XG4gICAgICB0aGlzLnBhaXJQcm9taXNlXyA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gMS4gVXNlIGNyeXB0byByYW5kb20gdG8gY3JlYXRlIGEgMTI4LWJpdCAoMTYgYnl0ZSkgcmVkaXJlY3Qga2V5LlxuICAgICAgICBjb25zdCBrZXlCeXRlcyA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhrZXlCeXRlcyk7XG5cbiAgICAgICAgLy8gMi4gRW5jb2RlIGtleSBhcyBiYXNlNjQuXG4gICAgICAgIGNvbnN0IGtleSA9IGJ0b2EoYnl0ZXNUb1N0cmluZyhrZXlCeXRlcykpO1xuXG4gICAgICAgIC8vIDMuIENyZWF0ZSBhIGhhc2guXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZGlnZXN0KHtuYW1lOiAnU0hBLTM4NCd9LCBzdHJpbmdUb0J5dGVzKGtleSkpLnRoZW4oXG4gICAgICAgICAgYnVmZmVyID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZlcmlmaWVyID0gYnRvYShcbiAgICAgICAgICAgICAgYnl0ZXNUb1N0cmluZyhcbiAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheSgvKiogQHR5cGUgeyFBcnJheUJ1ZmZlcn0gKi8gKGJ1ZmZlcikpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXNvbHZlKHtrZXksIHZlcmlmaWVyfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWFzb24gPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAvLyBJZ25vcmUgZmFpbHVyZXMuIEEgZmFpbHVyZSB0byBjcmVhdGUgYSByZWRpcmVjdCB2ZXJpZmllciBpcyBvZnRlblxuICAgICAgICAgIC8vIHJlY292ZXJhYmxlLlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihwYWlyID0+IHtcbiAgICAgICAgICB0aGlzLnBhaXJDcmVhdGVkXyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5wYWlyXyA9IHBhaXI7XG4gICAgICAgICAgcmV0dXJuIHBhaXI7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3Qgc3VwcG9ydGVkLlxuICAgICAgdGhpcy5wYWlyQ3JlYXRlZF8gPSB0cnVlO1xuICAgICAgdGhpcy5wYWlyXyA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSBwYXltZW50UmVxdWVzdFxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNldEludGVybmFsUGFyYW0ocGF5bWVudFJlcXVlc3QsIHBhcmFtLCB2YWx1ZSkge1xuICBwYXltZW50UmVxdWVzdFsnaSddID0gT2JqZWN0LmFzc2lnbihwYXltZW50UmVxdWVzdFsnaSddIHx8IHt9LCB7XG4gICAgW3BhcmFtXTogdmFsdWUsXG4gIH0pO1xufVxuXG4vLyBUT0RPKGR2b3l0ZW5rbywgIzQwNik6IFJlbW92ZSBvbmNlIEdQYXkgQVBJIGlzIHN1cHBvcnRlZC5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXlqc0JpbmRpbmdGb3JUZXN0aW5nKCkge1xuICByZXR1cm4gUGF5Q2xpZW50QmluZGluZ1BheWpzO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBUaGUgRmxvdyBnb2VzIGxpa2UgdGhpczpcbiAqIGEuIFN0YXJ0IFBheW1lbnRzXG4gKiBiLiBDb21wbGV0ZSBQYXltZW50c1xuICogYy4gQ3JlYXRlIEFjY291bnRcbiAqIGQuIEFja25vd2xlZGdlIEFjY291bnRcbiAqXG4gKiBJbiBvdGhlciB3b3JkcywgRmxvdyA9IFBheW1lbnRzICsgQWNjb3VudCBDcmVhdGlvbi5cbiAqL1xuXG5pbXBvcnQge1xuICBBY2NvdW50Q3JlYXRpb25SZXF1ZXN0LFxuICBFbnRpdGxlbWVudHNSZXNwb25zZSxcbn0gZnJvbSAnLi4vcHJvdG8vYXBpX21lc3NhZ2VzJztcbmltcG9ydCB7QWN0aXZpdHlJZnJhbWVWaWV3fSBmcm9tICcuLi91aS9hY3Rpdml0eS1pZnJhbWUtdmlldyc7XG5pbXBvcnQge0FuYWx5dGljc0V2ZW50LCBFdmVudFBhcmFtc30gZnJvbSAnLi4vcHJvdG8vYXBpX21lc3NhZ2VzJztcbmltcG9ydCB7Snd0SGVscGVyfSBmcm9tICcuLi91dGlscy9qd3QnO1xuaW1wb3J0IHtcbiAgUHJvZHVjdFR5cGUsXG4gIFN1YnNjcmlwdGlvbkZsb3dzLFxuICBXaW5kb3dPcGVuTW9kZSxcbn0gZnJvbSAnLi4vYXBpL3N1YnNjcmlwdGlvbnMnO1xuaW1wb3J0IHtQdXJjaGFzZURhdGEsIFN1YnNjcmliZVJlc3BvbnNlfSBmcm9tICcuLi9hcGkvc3Vic2NyaWJlLXJlc3BvbnNlJztcbmltcG9ydCB7VXNlckRhdGF9IGZyb20gJy4uL2FwaS91c2VyLWRhdGEnO1xuaW1wb3J0IHtmZUFyZ3MsIGZlVXJsfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7Z2V0UHJvcGVydHlGcm9tSnNvblN0cmluZywgcGFyc2VKc29ufSBmcm9tICcuLi91dGlscy9qc29uJztcbmltcG9ydCB7aXNDYW5jZWxFcnJvcn0gZnJvbSAnLi4vdXRpbHMvZXJyb3JzJztcblxuLyoqXG4gKiBTdHJpbmcgdmFsdWVzIGlucHV0IGJ5IHRoZSBwdWJsaXNoZXIgYXJlIG1hcHBlZCB0byB0aGUgbnVtYmVyIHZhbHVlcy5cbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgbnVtYmVyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJlcGxhY2VTa3VQcm9yYXRpb25Nb2RlTWFwcGluZyA9IHtcbiAgLy8gVGhlIHJlcGxhY2VtZW50IHRha2VzIGVmZmVjdCBpbW1lZGlhdGVseSwgYW5kIHRoZSByZW1haW5pbmcgdGltZSB3aWxsXG4gIC8vIGJlIHByb3JhdGVkIGFuZCBjcmVkaXRlZCB0byB0aGUgdXNlci4gVGhpcyBpcyB0aGUgY3VycmVudCBkZWZhdWx0XG4gIC8vIGJlaGF2aW9yLlxuICAnSU1NRURJQVRFX1dJVEhfVElNRV9QUk9SQVRJT04nOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IFJlY3VycmVuY2VNYXBwaW5nID0ge1xuICAnQVVUTyc6IDEsXG4gICdPTkVfVElNRSc6IDIsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBza3VcbiAqIEByZXR1cm4geyFFdmVudFBhcmFtc31cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRQYXJhbXMoc2t1KSB7XG4gIHJldHVybiBuZXcgRXZlbnRQYXJhbXMoWywgLCAsICwgc2t1XSk7XG59XG5cbi8qKlxuICogVGhlIGZsb3cgdG8gaW5pdGlhdGUgcGF5bWVudCBwcm9jZXNzLlxuICovXG5leHBvcnQgY2xhc3MgUGF5U3RhcnRGbG93IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqIEBwYXJhbSB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLlN1YnNjcmlwdGlvblJlcXVlc3R8c3RyaW5nfSBza3VPclN1YnNjcmlwdGlvblJlcXVlc3RcbiAgICogQHBhcmFtIHshLi4vYXBpL3N1YnNjcmlwdGlvbnMuUHJvZHVjdFR5cGV9IHByb2R1Y3RUeXBlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBkZXBzLFxuICAgIHNrdU9yU3Vic2NyaXB0aW9uUmVxdWVzdCxcbiAgICBwcm9kdWN0VHlwZSA9IFByb2R1Y3RUeXBlLlNVQlNDUklQVElPTlxuICApIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9kZXBzLkRlcHNEZWZ9ICovXG4gICAgdGhpcy5kZXBzXyA9IGRlcHM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9wYXktY2xpZW50LlBheUNsaWVudH0gKi9cbiAgICB0aGlzLnBheUNsaWVudF8gPSBkZXBzLnBheUNsaWVudCgpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL21vZGVsL3BhZ2UtY29uZmlnLlBhZ2VDb25maWd9ICovXG4gICAgdGhpcy5wYWdlQ29uZmlnXyA9IGRlcHMucGFnZUNvbmZpZygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvZGlhbG9nLW1hbmFnZXIuRGlhbG9nTWFuYWdlcn0gKi9cbiAgICB0aGlzLmRpYWxvZ01hbmFnZXJfID0gZGVwcy5kaWFsb2dNYW5hZ2VyKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vYXBpL3N1YnNjcmlwdGlvbnMuU3Vic2NyaXB0aW9uUmVxdWVzdH0gKi9cbiAgICB0aGlzLnN1YnNjcmlwdGlvblJlcXVlc3RfID1cbiAgICAgIHR5cGVvZiBza3VPclN1YnNjcmlwdGlvblJlcXVlc3QgPT0gJ3N0cmluZydcbiAgICAgICAgPyB7J3NrdUlkJzogc2t1T3JTdWJzY3JpcHRpb25SZXF1ZXN0fVxuICAgICAgICA6IHNrdU9yU3Vic2NyaXB0aW9uUmVxdWVzdDtcblxuICAgIC8qKkBwcml2YXRlIEBjb25zdCB7IVByb2R1Y3RUeXBlfSAqL1xuICAgIHRoaXMucHJvZHVjdFR5cGVfID0gcHJvZHVjdFR5cGU7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vcnVudGltZS9hbmFseXRpY3Mtc2VydmljZS5BbmFseXRpY3NTZXJ2aWNlfSAqL1xuICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZV8gPSBkZXBzLmFuYWx5dGljcygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL3J1bnRpbWUvY2xpZW50LWV2ZW50LW1hbmFnZXIuQ2xpZW50RXZlbnRNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IGRlcHMuZXZlbnRNYW5hZ2VyKCk7XG5cbiAgICAvLyBNYXAgdGhlIHByb3JhdGlvbiBtb2RlIHRvIHRoZSBlbnVtIHZhbHVlIChpZiBwcm9yYXRpb24gZXhpc3RzKS5cbiAgICB0aGlzLnByb3JhdGlvbk1vZGUgPSB0aGlzLnN1YnNjcmlwdGlvblJlcXVlc3RfLnJlcGxhY2VTa3VQcm9yYXRpb25Nb2RlO1xuICAgIHRoaXMucHJvcmF0aW9uRW51bSA9IDA7XG4gICAgaWYgKHRoaXMucHJvcmF0aW9uTW9kZSkge1xuICAgICAgdGhpcy5wcm9yYXRpb25FbnVtID0gUmVwbGFjZVNrdVByb3JhdGlvbk1vZGVNYXBwaW5nW3RoaXMucHJvcmF0aW9uTW9kZV07XG4gICAgfSBlbHNlIGlmICh0aGlzLnN1YnNjcmlwdGlvblJlcXVlc3RfLm9sZFNrdSkge1xuICAgICAgdGhpcy5wcm9yYXRpb25FbnVtID1cbiAgICAgICAgUmVwbGFjZVNrdVByb3JhdGlvbk1vZGVNYXBwaW5nWydJTU1FRElBVEVfV0lUSF9USU1FX1BST1JBVElPTiddO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiBvbmUtdGltZSByZWN1cnJlbmNlIGVudW0gaWYgYXBwbGljYWJsZVxuICAgIHRoaXMub25lVGltZUNvbnRyaWJ1dGlvbiA9IGZhbHNlO1xuICAgIHRoaXMucmVjdXJyZW5jZUVudW0gPSAwO1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvblJlcXVlc3RfLm9uZVRpbWUpIHtcbiAgICAgIHRoaXMucmVjdXJyZW5jZUVudW0gPSBSZWN1cnJlbmNlTWFwcGluZ1snT05FX1RJTUUnXTtcbiAgICAgIGRlbGV0ZSB0aGlzLnN1YnNjcmlwdGlvblJlcXVlc3RfLm9uZVRpbWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgcGF5bWVudHMgZmxvdy5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICBjb25zdCByZXEgPSB0aGlzLnN1YnNjcmlwdGlvblJlcXVlc3RfO1xuICAgIC8vIEFkZCB0aGUgJ3B1YmxpY2F0aW9uSWQnIGtleSB0byB0aGUgc3Vic2NyaXB0aW9uUmVxdWVzdF8gb2JqZWN0LlxuICAgIGNvbnN0IHN3Z1BheW1lbnRSZXF1ZXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxLCB7XG4gICAgICAncHVibGljYXRpb25JZCc6IHRoaXMucGFnZUNvbmZpZ18uZ2V0UHVibGljYXRpb25JZCgpLFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMucHJvcmF0aW9uRW51bSkge1xuICAgICAgc3dnUGF5bWVudFJlcXVlc3QucmVwbGFjZVNrdVByb3JhdGlvbk1vZGUgPSB0aGlzLnByb3JhdGlvbkVudW07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVjdXJyZW5jZUVudW0pIHtcbiAgICAgIHN3Z1BheW1lbnRSZXF1ZXN0LnBheW1lbnRSZWN1cnJlbmNlID0gdGhpcy5yZWN1cnJlbmNlRW51bTtcbiAgICB9XG5cbiAgICAvLyBTdGFydC9jYW5jZWwgZXZlbnRzLlxuICAgIHRoaXMuZGVwc18uY2FsbGJhY2tzKCkudHJpZ2dlckZsb3dTdGFydGVkKFN1YnNjcmlwdGlvbkZsb3dzLlNVQlNDUklCRSwgcmVxKTtcbiAgICBpZiAocmVxLm9sZFNrdSkge1xuICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlXy5zZXRTa3UocmVxLm9sZFNrdSk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChcbiAgICAgIEFuYWx5dGljc0V2ZW50LkFDVElPTl9QQVlNRU5UX0ZMT1dfU1RBUlRFRCxcbiAgICAgIHRydWUsXG4gICAgICBnZXRFdmVudFBhcmFtcyhyZXEuc2t1SWQpXG4gICAgKTtcbiAgICB0aGlzLnBheUNsaWVudF8uc3RhcnQoXG4gICAgICB7XG4gICAgICAgICdhcGlWZXJzaW9uJzogMSxcbiAgICAgICAgJ2FsbG93ZWRQYXltZW50TWV0aG9kcyc6IFsnQ0FSRCddLFxuICAgICAgICAnZW52aXJvbm1lbnQnOiAnJHBheUVudmlyb25tZW50JCcsXG4gICAgICAgICdwbGF5RW52aXJvbm1lbnQnOiAnJHBsYXlFbnZpcm9ubWVudCQnLFxuICAgICAgICAnc3dnJzogc3dnUGF5bWVudFJlcXVlc3QsXG4gICAgICAgICdpJzoge1xuICAgICAgICAgICdzdGFydFRpbWVNcyc6IERhdGUubm93KCksXG4gICAgICAgICAgJ3Byb2R1Y3RUeXBlJzogdGhpcy5wcm9kdWN0VHlwZV8sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmb3JjZVJlZGlyZWN0OlxuICAgICAgICAgIHRoaXMuZGVwc18uY29uZmlnKCkud2luZG93T3Blbk1vZGUgPT0gV2luZG93T3Blbk1vZGUuUkVESVJFQ1QsXG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgZmxvdyBmb3Igc3VjY2Vzc2Z1bCBwYXltZW50cyBjb21wbGV0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgUGF5Q29tcGxldGVGbG93IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqL1xuICBzdGF0aWMgY29uZmlndXJlUGVuZGluZyhkZXBzKSB7XG4gICAgLyoqIEBjb25zdCBAdHlwZSB7Li9jbGllbnQtZXZlbnQtbWFuYWdlci5DbGllbnRFdmVudE1hbmFnZXJ9ICovXG4gICAgY29uc3QgZXZlbnRNYW5hZ2VyID0gZGVwcy5ldmVudE1hbmFnZXIoKTtcblxuICAgIGRlcHMucGF5Q2xpZW50KCkub25SZXNwb25zZShwYXlQcm9taXNlID0+IHtcbiAgICAgIGRlcHMuZW50aXRsZW1lbnRzTWFuYWdlcigpLmJsb2NrTmV4dE5vdGlmaWNhdGlvbigpO1xuICAgICAgY29uc3QgZmxvdyA9IG5ldyBQYXlDb21wbGV0ZUZsb3coZGVwcyk7XG4gICAgICBjb25zdCBwcm9taXNlID0gdmFsaWRhdGVQYXlSZXNwb25zZShcbiAgICAgICAgZGVwcyxcbiAgICAgICAgcGF5UHJvbWlzZSxcbiAgICAgICAgZmxvdy5jb21wbGV0ZS5iaW5kKGZsb3cpXG4gICAgICApO1xuICAgICAgZGVwcy5jYWxsYmFja3MoKS50cmlnZ2VyUGF5bWVudFJlc3BvbnNlKHByb21pc2UpO1xuICAgICAgcmV0dXJuIHByb21pc2UudGhlbihcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IHNrdSA9IHBhcnNlU2t1RnJvbVB1cmNoYXNlRGF0YVNhZmUocmVzcG9uc2UucHVyY2hhc2VEYXRhKTtcbiAgICAgICAgICBkZXBzLmFuYWx5dGljcygpLnNldFNrdShza3UgfHwgJycpO1xuICAgICAgICAgIGV2ZW50TWFuYWdlci5sb2dTd2dFdmVudChcbiAgICAgICAgICAgIEFuYWx5dGljc0V2ZW50LkFDVElPTl9QQVlNRU5UX0NPTVBMRVRFLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGdldEV2ZW50UGFyYW1zKHNrdSB8fCAnJylcbiAgICAgICAgICApO1xuICAgICAgICAgIGZsb3cuc3RhcnQocmVzcG9uc2UpO1xuICAgICAgICB9LFxuICAgICAgICByZWFzb24gPT4ge1xuICAgICAgICAgIGlmIChpc0NhbmNlbEVycm9yKHJlYXNvbikpIHtcbiAgICAgICAgICAgIGRlcHMuY2FsbGJhY2tzKCkudHJpZ2dlckZsb3dDYW5jZWxlZChTdWJzY3JpcHRpb25GbG93cy5TVUJTQ1JJQkUpO1xuICAgICAgICAgICAgZGVwc1xuICAgICAgICAgICAgICAuZXZlbnRNYW5hZ2VyKClcbiAgICAgICAgICAgICAgLmxvZ1N3Z0V2ZW50KEFuYWx5dGljc0V2ZW50LkFDVElPTl9VU0VSX0NBTkNFTEVEX1BBWUZMT1csIHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXBzXG4gICAgICAgICAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgICAgICAgICAubG9nU3dnRXZlbnQoQW5hbHl0aWNzRXZlbnQuRVZFTlRfUEFZTUVOVF9GQUlMRUQsIGZhbHNlKTtcbiAgICAgICAgICAgIGRlcHMuanNlcnJvcigpLmVycm9yKCdQYXkgZmFpbGVkJywgcmVhc29uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXBzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSBkZXBzLndpbigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyLkRpYWxvZ01hbmFnZXJ9ICovXG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXyA9IGRlcHMuZGlhbG9nTWFuYWdlcigpO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/QWN0aXZpdHlJZnJhbWVWaWV3fSAqL1xuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3XyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9TdWJzY3JpYmVSZXNwb25zZX0gKi9cbiAgICB0aGlzLnJlc3BvbnNlXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlfSAqL1xuICAgIHRoaXMucmVhZHlQcm9taXNlXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vcnVudGltZS9hbmFseXRpY3Mtc2VydmljZS5BbmFseXRpY3NTZXJ2aWNlfSAqL1xuICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZV8gPSBkZXBzLmFuYWx5dGljcygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL3J1bnRpbWUvY2xpZW50LWV2ZW50LW1hbmFnZXIuQ2xpZW50RXZlbnRNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IGRlcHMuZXZlbnRNYW5hZ2VyKCk7XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5za3VfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIHBheW1lbnRzIGNvbXBsZXRpb24gZmxvdy5cbiAgICogQHBhcmFtIHshU3Vic2NyaWJlUmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgc3RhcnQocmVzcG9uc2UpIHtcbiAgICB0aGlzLnNrdV8gPSBwYXJzZVNrdUZyb21QdXJjaGFzZURhdGFTYWZlKHJlc3BvbnNlLnB1cmNoYXNlRGF0YSk7XG4gICAgdGhpcy5ldmVudE1hbmFnZXJfLmxvZ1N3Z0V2ZW50KFxuICAgICAgQW5hbHl0aWNzRXZlbnQuSU1QUkVTU0lPTl9BQ0NPVU5UX0NIQU5HRUQsXG4gICAgICB0cnVlLFxuICAgICAgZ2V0RXZlbnRQYXJhbXModGhpcy5za3VfIHx8ICcnKVxuICAgICk7XG4gICAgdGhpcy5kZXBzXy5lbnRpdGxlbWVudHNNYW5hZ2VyKCkucmVzZXQodHJ1ZSk7XG4gICAgdGhpcy5yZXNwb25zZV8gPSByZXNwb25zZTtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgJ3B1YmxpY2F0aW9uSWQnOiB0aGlzLmRlcHNfLnBhZ2VDb25maWcoKS5nZXRQdWJsaWNhdGlvbklkKCksXG4gICAgICAncHJvZHVjdFR5cGUnOiB0aGlzLnJlc3BvbnNlX1sncHJvZHVjdFR5cGUnXSxcbiAgICAgICdpc1N1YnNjcmlwdGlvblVwZGF0ZSc6ICEhdGhpcy5yZXNwb25zZV9bJ29sZFNrdSddLFxuICAgIH07XG4gICAgLy8gVE9ETyhkdm95dGVua28sICM0MDApOiBjbGVhbnVwIG9uY2UgZW50aXRsZW1lbnRzIGlzIGxhdW5jaGVkIGV2ZXJ5d2hlcmUuXG4gICAgaWYgKHJlc3BvbnNlLnVzZXJEYXRhICYmIHJlc3BvbnNlLmVudGl0bGVtZW50cykge1xuICAgICAgYXJnc1snaWRUb2tlbiddID0gcmVzcG9uc2UudXNlckRhdGEuaWRUb2tlbjtcbiAgICAgIHRoaXMuZGVwc19cbiAgICAgICAgLmVudGl0bGVtZW50c01hbmFnZXIoKVxuICAgICAgICAucHVzaE5leHRFbnRpdGxlbWVudHMocmVzcG9uc2UuZW50aXRsZW1lbnRzLnJhdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZ3NbJ2xvZ2luSGludCddID0gcmVzcG9uc2UudXNlckRhdGEgJiYgcmVzcG9uc2UudXNlckRhdGEuZW1haWw7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3XyA9IG5ldyBBY3Rpdml0eUlmcmFtZVZpZXcoXG4gICAgICB0aGlzLndpbl8sXG4gICAgICB0aGlzLmFjdGl2aXR5UG9ydHNfLFxuICAgICAgZmVVcmwoJy9wYXljb25maXJtaWZyYW1lJyksXG4gICAgICBmZUFyZ3MoYXJncyksXG4gICAgICAvKiBzaG91bGRGYWRlQm9keSAqLyB0cnVlXG4gICAgKTtcblxuICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xy5vbihcbiAgICAgIEVudGl0bGVtZW50c1Jlc3BvbnNlLFxuICAgICAgdGhpcy5oYW5kbGVFbnRpdGxlbWVudHNSZXNwb25zZV8uYmluZCh0aGlzKVxuICAgICk7XG5cbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18uYWNjZXB0UmVzdWx0KCkudGhlbigoKSA9PiB7XG4gICAgICAvLyBUaGUgZmxvdyBpcyBjb21wbGV0ZS5cbiAgICAgIHRoaXMuZGlhbG9nTWFuYWdlcl8uY29tcGxldGVWaWV3KHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3Xyk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWFkeVByb21pc2VfID0gdGhpcy5kaWFsb2dNYW5hZ2VyXy5vcGVuVmlldyh0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18pO1xuICAgIHJldHVybiB0aGlzLnJlYWR5UHJvbWlzZV87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRW50aXRsZW1lbnRzUmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVFbnRpdGxlbWVudHNSZXNwb25zZV8ocmVzcG9uc2UpIHtcbiAgICBjb25zdCBqd3QgPSByZXNwb25zZS5nZXRKd3QoKTtcbiAgICBpZiAoand0KSB7XG4gICAgICB0aGlzLmRlcHNfLmVudGl0bGVtZW50c01hbmFnZXIoKS5wdXNoTmV4dEVudGl0bGVtZW50cyhqd3QpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIGNvbXBsZXRlKCkge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChcbiAgICAgIEFuYWx5dGljc0V2ZW50LkFDVElPTl9BQ0NPVU5UX0NSRUFURUQsXG4gICAgICB0cnVlLFxuICAgICAgZ2V0RXZlbnRQYXJhbXModGhpcy5za3VfIHx8ICcnKVxuICAgICk7XG4gICAgdGhpcy5kZXBzXy5lbnRpdGxlbWVudHNNYW5hZ2VyKCkudW5ibG9ja05leHROb3RpZmljYXRpb24oKTtcbiAgICB0aGlzLnJlYWR5UHJvbWlzZV8udGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBhY2NvdW50Q29tcGxldGlvblJlcXVlc3QgPSBuZXcgQWNjb3VudENyZWF0aW9uUmVxdWVzdCgpO1xuICAgICAgYWNjb3VudENvbXBsZXRpb25SZXF1ZXN0LnNldENvbXBsZXRlKHRydWUpO1xuICAgICAgdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfLmV4ZWN1dGUoYWNjb3VudENvbXBsZXRpb25SZXF1ZXN0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfXG4gICAgICAuYWNjZXB0UmVzdWx0KClcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIC8vIElnbm9yZSBlcnJvcnMuXG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlcl8ubG9nU3dnRXZlbnQoXG4gICAgICAgICAgQW5hbHl0aWNzRXZlbnQuQUNUSU9OX0FDQ09VTlRfQUNLTk9XTEVER0VELFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgZ2V0RXZlbnRQYXJhbXModGhpcy5za3VfIHx8ICcnKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmRlcHNfLmVudGl0bGVtZW50c01hbmFnZXIoKS5zZXRUb2FzdFNob3duKHRydWUpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICogQHBhcmFtIHshUHJvbWlzZTwhT2JqZWN0Pn0gcGF5UHJvbWlzZVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiFQcm9taXNlfSBjb21wbGV0ZUhhbmRsZXJcbiAqIEByZXR1cm4geyFQcm9taXNlPCFTdWJzY3JpYmVSZXNwb25zZT59XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUGF5UmVzcG9uc2UoZGVwcywgcGF5UHJvbWlzZSwgY29tcGxldGVIYW5kbGVyKSB7XG4gIHJldHVybiBwYXlQcm9taXNlLnRoZW4oZGF0YSA9PiB7XG4gICAgLy8gMSkgV2UgbG9nIGFnYWluc3QgYSByYW5kb20gVFggSUQgd2hpY2ggaXMgaG93IHdlIHRyYWNrIGEgc3BlY2lmaWMgdXNlclxuICAgIC8vICAgIGFub255bW91c2x5LlxuICAgIC8vIDIpIElmIHRoZXJlIHdhcyBhIHJlZGlyZWN0IHRvIGdQYXksIHdlIG1heSBoYXZlIGxvc3Qgb3VyIHN0b3JlZCBUWCBJRC5cbiAgICAvLyAzKSBQYXkgc2VydmljZSBpcyBzdXBwb3NlZCB0byBnaXZlIHVzIHRoZSBUWCBJRCBpdCBsb2dnZWQgYWdhaW5zdC5cblxuICAgIGNvbnN0IGhhc0xvZ2dlZCA9IGRlcHMuYW5hbHl0aWNzKCkuZ2V0SGFzTG9nZ2VkKCk7XG4gICAgbGV0IGV2ZW50VHlwZSA9IEFuYWx5dGljc0V2ZW50LlVOS05PV047XG4gICAgbGV0IGV2ZW50UGFyYW1zID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcgfHwgIWRhdGFbJ2dvb2dsZVRyYW5zYWN0aW9uSWQnXSkge1xuICAgICAgLy8gSWYgZ1BheSBkb2Vzbid0IGdpdmUgdXMgYSBUWCBJRCBpdCBtZWFucyB0aGF0IHNvbWV0aGluZyBtYXlcbiAgICAgIC8vIGJlIHdyb25nLiAgSWYgd2UgcHJldmlvdXNseSBsb2dnZWQgdGhlbiB3ZSBhcmUgYXQgbGVhc3QgY29udGludWluZyB0b1xuICAgICAgLy8gbG9nIGFnYWluc3QgdGhlIHNhbWUgVFggSUQuICBJZiB3ZSBkaWRuJ3QgcHJldmlvdXNseSBsb2cgdGhlbiB3ZSBoYXZlXG4gICAgICAvLyBsb3N0IGFsbCBjb25uZWN0aW9uIHRvIHRoZSBldmVudHMgdGhhdCBwcmVjZWRlZCB0aGUgcGF5bWVudCBldmVudCBhbmRcbiAgICAgIC8vIHdlIGF0IGxlYXN0IHdhbnQgdG8ga25vdyB3aHkgdGhhdCBkYXRhIHdhcyBsb3N0LlxuICAgICAgZXZlbnRQYXJhbXMgPSBuZXcgRXZlbnRQYXJhbXMoKTtcbiAgICAgIGV2ZW50UGFyYW1zLnNldEhhZExvZ2dlZChoYXNMb2dnZWQpO1xuICAgICAgZXZlbnRUeXBlID0gQW5hbHl0aWNzRXZlbnQuRVZFTlRfR1BBWV9OT19UWF9JRDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb2xkVHhJZCA9IGRlcHMuYW5hbHl0aWNzKCkuZ2V0VHJhbnNhY3Rpb25JZCgpO1xuICAgICAgY29uc3QgbmV3VHhJZCA9IGRhdGFbJ2dvb2dsZVRyYW5zYWN0aW9uSWQnXTtcblxuICAgICAgaWYgKCFoYXNMb2dnZWQpIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZXhwZWN0ZWQgY2FzZSBmb3IgZnVsbCByZWRpcmVjdHMuICBJdCBtYXkgYmUgaGFwcGVuaW5nXG4gICAgICAgIC8vIHVuZXhwZWN0ZWRseSBhdCBvdGhlciB0aW1lcyB0b28gdGhvdWdoIGFuZCB3ZSB3YW50IHRvIGJlIGF3YXJlIG9mIGl0XG4gICAgICAgIC8vIGlmIGl0IGRvZXMuXG4gICAgICAgIGRlcHMuYW5hbHl0aWNzKCkuc2V0VHJhbnNhY3Rpb25JZChuZXdUeElkKTtcbiAgICAgICAgZXZlbnRUeXBlID0gQW5hbHl0aWNzRXZlbnQuRVZFTlRfR1BBWV9DQU5OT1RfQ09ORklSTV9UWF9JRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvbGRUeElkID09PSBuZXdUeElkKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyB0aGUgZXhwZWN0ZWQgY2FzZSBmb3Igbm9uLXJlZGlyZWN0IHBheSBldmVudHNcbiAgICAgICAgICBldmVudFR5cGUgPSBBbmFseXRpY3NFdmVudC5FVkVOVF9DT05GSVJNX1RYX0lEO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYW4gdW5leHBlY3RlZCBjYXNlOiBnUGF5IHJlamVjdGVkIG91ciBUWCBJRCBhbmQgY3JlYXRlZFxuICAgICAgICAgIC8vIGl0cyBvd24uICBMb2cgdGhlIGdQYXkgVFggSUQgYnV0IGtlZXAgb3VyIGxvZ2dpbmcgY29uc2lzdGVudC5cbiAgICAgICAgICBldmVudFBhcmFtcyA9IG5ldyBFdmVudFBhcmFtcygpO1xuICAgICAgICAgIGV2ZW50UGFyYW1zLnNldEdwYXlUcmFuc2FjdGlvbklkKG5ld1R4SWQpO1xuICAgICAgICAgIGV2ZW50VHlwZSA9IEFuYWx5dGljc0V2ZW50LkVWRU5UX0NIQU5HRURfVFhfSUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZGVwcy5ldmVudE1hbmFnZXIoKS5sb2dTd2dFdmVudChldmVudFR5cGUsIHRydWUsIGV2ZW50UGFyYW1zKTtcbiAgICByZXR1cm4gcGFyc2VTdWJzY3JpcHRpb25SZXNwb25zZShkZXBzLCBkYXRhLCBjb21wbGV0ZUhhbmRsZXIpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICogQHBhcmFtIHsqfSBkYXRhXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IVByb21pc2V9IGNvbXBsZXRlSGFuZGxlclxuICogQHJldHVybiB7IVN1YnNjcmliZVJlc3BvbnNlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdWJzY3JpcHRpb25SZXNwb25zZShkZXBzLCBkYXRhLCBjb21wbGV0ZUhhbmRsZXIpIHtcbiAgbGV0IHN3Z0RhdGEgPSBudWxsO1xuICBsZXQgcmF3ID0gbnVsbDtcbiAgbGV0IHByb2R1Y3RUeXBlID0gUHJvZHVjdFR5cGUuU1VCU0NSSVBUSU9OO1xuICBsZXQgb2xkU2t1ID0gbnVsbDtcblxuICBpZiAoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykge1xuICAgICAgcmF3ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXNzdW1lIGl0J3MgYSBqc29uIG9iamVjdCBpbiB0aGUgZm9ybWF0OlxuICAgICAgLy8gYHtpbnRlZ3JhdG9yQ2xpZW50Q2FsbGJhY2tEYXRhOiBcIi4uLlwifWAgb3IgYHtzd2dDYWxsYmFja0RhdGE6IFwiLi4uXCJ9YC5cbiAgICAgIGNvbnN0IGpzb24gPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChkYXRhKTtcbiAgICAgIGlmICgnc3dnQ2FsbGJhY2tEYXRhJyBpbiBqc29uKSB7XG4gICAgICAgIHN3Z0RhdGEgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChqc29uWydzd2dDYWxsYmFja0RhdGEnXSk7XG4gICAgICB9IGVsc2UgaWYgKCdpbnRlZ3JhdG9yQ2xpZW50Q2FsbGJhY2tEYXRhJyBpbiBqc29uKSB7XG4gICAgICAgIHJhdyA9IGpzb25bJ2ludGVncmF0b3JDbGllbnRDYWxsYmFja0RhdGEnXTtcbiAgICAgIH1cbiAgICAgIGlmICgncGF5bWVudFJlcXVlc3QnIGluIGRhdGEpIHtcbiAgICAgICAgb2xkU2t1ID0gKGRhdGFbJ3BheW1lbnRSZXF1ZXN0J11bJ3N3ZyddIHx8IHt9KVsnb2xkU2t1J107XG4gICAgICAgIHByb2R1Y3RUeXBlID1cbiAgICAgICAgICAoZGF0YVsncGF5bWVudFJlcXVlc3QnXVsnaSddIHx8IHt9KVsncHJvZHVjdFR5cGUnXSB8fFxuICAgICAgICAgIFByb2R1Y3RUeXBlLlNVQlNDUklQVElPTjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJhdyAmJiAhc3dnRGF0YSkge1xuICAgIHJhdyA9IGF0b2IocmF3KTtcbiAgICBpZiAocmF3KSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUpzb24ocmF3KTtcbiAgICAgIHN3Z0RhdGEgPSBwYXJzZWRbJ3N3Z0NhbGxiYWNrRGF0YSddO1xuICAgIH1cbiAgfVxuICBpZiAoIXN3Z0RhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgcGF5bWVudCByZXNwb25zZScpO1xuICB9XG4gIHJhdyA9IEpTT04uc3RyaW5naWZ5KC8qKiBAdHlwZSB7IUpzb25PYmplY3R9ICovIChzd2dEYXRhKSk7XG4gIHJldHVybiBuZXcgU3Vic2NyaWJlUmVzcG9uc2UoXG4gICAgcmF3LFxuICAgIHBhcnNlUHVyY2hhc2VEYXRhKHN3Z0RhdGEpLFxuICAgIHBhcnNlVXNlckRhdGEoc3dnRGF0YSksXG4gICAgcGFyc2VFbnRpdGxlbWVudHMoZGVwcywgc3dnRGF0YSksXG4gICAgcHJvZHVjdFR5cGUsXG4gICAgY29tcGxldGVIYW5kbGVyLFxuICAgIG9sZFNrdVxuICApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IU9iamVjdH0gc3dnRGF0YVxuICogQHJldHVybiB7IVB1cmNoYXNlRGF0YX1cbiAqL1xuZnVuY3Rpb24gcGFyc2VQdXJjaGFzZURhdGEoc3dnRGF0YSkge1xuICBjb25zdCByYXcgPSBzd2dEYXRhWydwdXJjaGFzZURhdGEnXTtcbiAgY29uc3Qgc2lnbmF0dXJlID0gc3dnRGF0YVsncHVyY2hhc2VEYXRhU2lnbmF0dXJlJ107XG4gIHJldHVybiBuZXcgUHVyY2hhc2VEYXRhKHJhdywgc2lnbmF0dXJlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IHN3Z0RhdGFcbiAqIEByZXR1cm4gez9Vc2VyRGF0YX1cbiAqIEBwYWNrYWdlIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVzZXJEYXRhKHN3Z0RhdGEpIHtcbiAgY29uc3QgaWRUb2tlbiA9IHN3Z0RhdGFbJ2lkVG9rZW4nXTtcbiAgaWYgKCFpZFRva2VuKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3Qgand0ID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAobmV3IEp3dEhlbHBlcigpLmRlY29kZShpZFRva2VuKSk7XG4gIHJldHVybiBuZXcgVXNlckRhdGEoaWRUb2tlbiwgand0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICogQHBhcmFtIHshT2JqZWN0fSBzd2dEYXRhXG4gKiBAcmV0dXJuIHs/Li4vYXBpL2VudGl0bGVtZW50cy5FbnRpdGxlbWVudHN9XG4gKiBAcGFja2FnZSBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFbnRpdGxlbWVudHMoZGVwcywgc3dnRGF0YSkge1xuICBpZiAoc3dnRGF0YVsnc2lnbmVkRW50aXRsZW1lbnRzJ10pIHtcbiAgICByZXR1cm4gZGVwcy5lbnRpdGxlbWVudHNNYW5hZ2VyKCkucGFyc2VFbnRpdGxlbWVudHMoc3dnRGF0YSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHBhcmFtIHshUHVyY2hhc2VEYXRhfSBwdXJjaGFzZURhdGFcbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2t1RnJvbVB1cmNoYXNlRGF0YVNhZmUocHVyY2hhc2VEYXRhKSB7XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHs/c3RyaW5nfSAqLyAoZ2V0UHJvcGVydHlGcm9tSnNvblN0cmluZyhcbiAgICAgIHB1cmNoYXNlRGF0YS5yYXcsXG4gICAgICAncHJvZHVjdElkJ1xuICAgICkgfHwgbnVsbClcbiAgKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIEFuYWx5dGljc0V2ZW50LFxuICBFdmVudE9yaWdpbmF0b3IsXG4gIEV2ZW50UGFyYW1zLFxufSBmcm9tICcuLi9wcm90by9hcGlfbWVzc2FnZXMnO1xuaW1wb3J0IHthZHNVcmx9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHthbmFseXRpY3NFdmVudFRvUHVibGlzaGVyRXZlbnR9IGZyb20gJy4vZXZlbnQtdHlwZS1tYXBwaW5nJztcbmltcG9ydCB7aXNCb29sZWFuLCBpc09iamVjdH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xuXG4vKipcbiAqIEltcGxlbWVudHMgaW50ZXJmYWNlIHRvIFByb3BlbnNpdHkgc2VydmVyXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZW5zaXR5U2VydmVyIHtcbiAgLyoqXG4gICAqIFBhZ2UgY29uZmlndXJhdGlvbiBpcyBrbm93biB3aGVuIFByb3BlbnNpdHkgQVBJXG4gICAqIGlzIGF2YWlsYWJsZSwgcHVibGljYXRpb24gSUQgaXMgdGhlcmVmb3JlIHVzZWRcbiAgICogaW4gY29uc3RydWN0b3IgZm9yIHRoZSBzZXJ2ZXIgaW50ZXJmYWNlLlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0geyEuL2ZldGNoZXIuRmV0Y2hlcn0gZmV0Y2hlclxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luLCBkZXBzLCBmZXRjaGVyKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZGVwcy5EZXBzRGVmfSAqL1xuICAgIHRoaXMuZGVwc18gPSBkZXBzO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnB1YmxpY2F0aW9uSWRfID0gdGhpcy5kZXBzXy5wYWdlQ29uZmlnKCkuZ2V0UHVibGljYXRpb25JZCgpO1xuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLmNsaWVudElkXyA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vZmV0Y2hlci5GZXRjaGVyfSAqL1xuICAgIHRoaXMuZmV0Y2hlcl8gPSBmZXRjaGVyO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge251bWJlcn0gKi9cbiAgICB0aGlzLnZlcnNpb25fID0gMTtcblxuICAgIHRoaXMuZGVwc19cbiAgICAgIC5ldmVudE1hbmFnZXIoKVxuICAgICAgLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcih0aGlzLmhhbmRsZUNsaWVudEV2ZW50Xy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXREb2N1bWVudENvb2tpZV8oKSB7XG4gICAgcmV0dXJuIHRoaXMud2luXy5kb2N1bWVudC5jb29raWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2xpZW50IElEIHRvIGJlIHVzZWQuXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRDbGllbnRJZF8oKSB7XG4gICAgaWYgKCF0aGlzLmNsaWVudElkXykge1xuICAgICAgLy8gTWF0Y2ggJ19fZ2FkcycgKG5hbWUgb2YgdGhlIGNvb2tpZSkgZHJvcHBlZCBieSBBZHMgVGFnLlxuICAgICAgY29uc3QgZ2Fkc21hdGNoID0gdGhpcy5nZXREb2N1bWVudENvb2tpZV8oKS5tYXRjaChcbiAgICAgICAgJyhefDspXFxcXHMqX19nYWRzXFxcXHMqPVxcXFxzKihbXjtdKyknXG4gICAgICApO1xuICAgICAgLy8gU2luY2UgdGhlIGNvb2tpZSB3aWxsIGJlIGNvbnN1bWVkIHVzaW5nIGRlY29kZVVSSUNvbXBvbmVudCgpLFxuICAgICAgLy8gdXNlIGVuY29kZVVSSUNvbXBvbmVudCgpIGhlcmUgdG8gbWF0Y2guXG4gICAgICB0aGlzLmNsaWVudElkXyA9IGdhZHNtYXRjaCAmJiBlbmNvZGVVUklDb21wb25lbnQoZ2Fkc21hdGNoLnBvcCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50SWRfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcHJvcGVuc2l0eVVybF8odXJsKSB7XG4gICAgdXJsID0gdXJsICsgJyZ1X3R6PTI0MCZ2PScgKyB0aGlzLnZlcnNpb25fO1xuICAgIGNvbnN0IGNsaWVudElkID0gdGhpcy5nZXRDbGllbnRJZF8oKTtcbiAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgIHVybCA9IHVybCArICcmY29va2llPScgKyBjbGllbnRJZDtcbiAgICB9XG4gICAgdXJsID0gdXJsICsgJyZjZG09JyArIHRoaXMud2luXy5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZVxuICAgKiBAcGFyYW0gez9zdHJpbmd9IHByb2R1Y3RzT3JTa3VzXG4gICAqL1xuICBzZW5kU3Vic2NyaXB0aW9uU3RhdGUoc3RhdGUsIHByb2R1Y3RzT3JTa3VzKSB7XG4gICAgY29uc3QgaW5pdCA9IC8qKiBAdHlwZSB7IS4uL3V0aWxzL3hoci5GZXRjaEluaXREZWZ9ICovICh7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICB9KTtcbiAgICBsZXQgdXNlclN0YXRlID0gdGhpcy5wdWJsaWNhdGlvbklkXyArICc6JyArIHN0YXRlO1xuICAgIGlmIChwcm9kdWN0c09yU2t1cykge1xuICAgICAgdXNlclN0YXRlID0gdXNlclN0YXRlICsgJzonICsgZW5jb2RlVVJJQ29tcG9uZW50KHByb2R1Y3RzT3JTa3VzKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYWRzVXJsKCcvc3Vib3B0L2RhdGE/c3RhdGVzPScpICsgZW5jb2RlVVJJQ29tcG9uZW50KHVzZXJTdGF0ZSk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hlcl8uZmV0Y2godGhpcy5wcm9wZW5zaXR5VXJsXyh1cmwpLCBpbml0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjb250ZXh0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZW5kRXZlbnRfKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgY29uc3QgaW5pdCA9IC8qKiBAdHlwZSB7IS4uL3V0aWxzL3hoci5GZXRjaEluaXREZWZ9ICovICh7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICB9KTtcbiAgICBsZXQgZXZlbnRJbmZvID0gdGhpcy5wdWJsaWNhdGlvbklkXyArICc6JyArIGV2ZW50O1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBldmVudEluZm8gPSBldmVudEluZm8gKyAnOicgKyBlbmNvZGVVUklDb21wb25lbnQoY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IGFkc1VybCgnL3N1Ym9wdC9kYXRhP2V2ZW50cz0nKSArIGVuY29kZVVSSUNvbXBvbmVudChldmVudEluZm8pO1xuICAgIHJldHVybiB0aGlzLmZldGNoZXJfLmZldGNoKHRoaXMucHJvcGVuc2l0eVVybF8odXJsKSwgaW5pdCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHshLi4vYXBpL2NsaWVudC1ldmVudC1tYW5hZ2VyLWFwaS5DbGllbnRFdmVudH0gZXZlbnRcbiAgICovXG4gIGhhbmRsZUNsaWVudEV2ZW50XyhldmVudCkge1xuICAgIC8qKlxuICAgICAqIERvZXMgYSBsaXZlIGNoZWNrIG9mIHRoZSBjb25maWcgYmVjYXVzZSB3ZSBkb24ndCBrbm93IHdoZW4gcHVibGlzaGVyXG4gICAgICogY2FsbGVkIHRvIGVuYWJsZSAoaXQgbWF5IGJlIGFmdGVyIGEgY29uc2VudCBkaWFsb2cpLlxuICAgICAqL1xuICAgIGlmIChcbiAgICAgICF0aGlzLmRlcHNfLmNvbmZpZygpLmVuYWJsZVByb3BlbnNpdHkgJiZcbiAgICAgIGV2ZW50LmV2ZW50T3JpZ2luYXRvciAhPT0gRXZlbnRPcmlnaW5hdG9yLlBST1BFTlNJVFlfQ0xJRU5UXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmV2ZW50VHlwZSA9PT0gQW5hbHl0aWNzRXZlbnQuRVZFTlRfU1VCU0NSSVBUSU9OX1NUQVRFKSB7XG4gICAgICB0aGlzLnNlbmRTdWJzY3JpcHRpb25TdGF0ZShcbiAgICAgICAgZXZlbnQuYWRkaXRpb25hbFBhcmFtZXRlcnNbJ3N0YXRlJ10sXG4gICAgICAgIGV2ZW50LmFkZGl0aW9uYWxQYXJhbWV0ZXJzWydwcm9kdWN0c09yU2t1cyddXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcm9wRXZlbnQgPSBhbmFseXRpY3NFdmVudFRvUHVibGlzaGVyRXZlbnQoZXZlbnQuZXZlbnRUeXBlKTtcbiAgICBpZiAocHJvcEV2ZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGFkZGl0aW9uYWxQYXJhbWV0ZXJzID0gZXZlbnQuYWRkaXRpb25hbFBhcmFtZXRlcnM7XG4gICAgLy8gVGhlIEV2ZW50UGFyYW1zIG9iamVjdCBpcyBwcml2YXRlIHRvIFN3RyBhbmFseXRpY3MuICBEbyBub3Qgc2VuZC5cbiAgICBpZiAoYWRkaXRpb25hbFBhcmFtZXRlcnMgaW5zdGFuY2VvZiBFdmVudFBhcmFtcykge1xuICAgICAgYWRkaXRpb25hbFBhcmFtZXRlcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4oZXZlbnQuaXNGcm9tVXNlckFjdGlvbikpIHtcbiAgICAgIGlmICghaXNPYmplY3QoYWRkaXRpb25hbFBhcmFtZXRlcnMpKSB7XG4gICAgICAgIGFkZGl0aW9uYWxQYXJhbWV0ZXJzID0ge307XG4gICAgICB9XG4gICAgICBhZGRpdGlvbmFsUGFyYW1ldGVyc1snaXNfYWN0aXZlJ10gPSBldmVudC5pc0Zyb21Vc2VyQWN0aW9uO1xuICAgIH1cbiAgICB0aGlzLnNlbmRFdmVudF8oXG4gICAgICBwcm9wRXZlbnQsXG4gICAgICBKU09OLnN0cmluZ2lmeSgvKiogQHR5cGUgez9Kc29uT2JqZWN0fSAqLyAoYWRkaXRpb25hbFBhcmFtZXRlcnMpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtKc29uT2JqZWN0fSByZXNwb25zZVxuICAgKiBAcmV0dXJuIHshLi4vYXBpL3Byb3BlbnNpdHktYXBpLlByb3BlbnNpdHlTY29yZX1cbiAgICovXG4gIHBhcnNlUHJvcGVuc2l0eVJlc3BvbnNlXyhyZXNwb25zZSkge1xuICAgIGxldCBkZWZhdWx0U2NvcmUgPSAvKiogQHR5cGUgeyEuLi9hcGkvcHJvcGVuc2l0eS1hcGkuUHJvcGVuc2l0eVNjb3JlfSAqLyAoe30pO1xuICAgIGlmICghcmVzcG9uc2VbJ2hlYWRlciddKSB7XG4gICAgICBkZWZhdWx0U2NvcmUgPSAvKiogQHR5cGUgeyEuLi9hcGkvcHJvcGVuc2l0eS1hcGkuUHJvcGVuc2l0eVNjb3JlfSAqLyAoe1xuICAgICAgICBoZWFkZXI6IHtvazogZmFsc2V9LFxuICAgICAgICBib2R5OiB7ZXJyb3I6ICdObyB2YWxpZCByZXNwb25zZSd9LFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmYXVsdFNjb3JlO1xuICAgIH1cbiAgICBjb25zdCBzdGF0dXMgPSByZXNwb25zZVsnaGVhZGVyJ107XG4gICAgbGV0IHNjb3JlRGV0YWlscyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoc3RhdHVzWydvayddKSB7XG4gICAgICBjb25zdCBzY29yZXMgPSByZXNwb25zZVsnc2NvcmVzJ107XG4gICAgICBzY29yZURldGFpbHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NvcmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNjb3Jlc1tpXTtcbiAgICAgICAgY29uc3Qgc2NvcmVTdGF0dXMgPSAhIXJlc3VsdFsnc2NvcmUnXTtcbiAgICAgICAgbGV0IHNjb3JlRGV0YWlsO1xuICAgICAgICBpZiAoc2NvcmVTdGF0dXMpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IC8qKiBAdHlwZSB7IS4uL2FwaS9wcm9wZW5zaXR5LWFwaS5TY29yZX0gKi8gKHtcbiAgICAgICAgICAgIHZhbHVlOiByZXN1bHRbJ3Njb3JlJ10sXG4gICAgICAgICAgICBidWNrZXRlZDogcmVzdWx0WydzY29yZV90eXBlJ10gPT0gMixcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzY29yZURldGFpbCA9IC8qKiBAdHlwZSB7IS4uL2FwaS9wcm9wZW5zaXR5LWFwaS5Cb2R5fSAqLyAoe1xuICAgICAgICAgICAgcHJvZHVjdDogcmVzdWx0Wydwcm9kdWN0J10sXG4gICAgICAgICAgICBzY29yZTogdmFsdWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NvcmVEZXRhaWwgPSAvKiogQHR5cGUgeyEuLi9hcGkvcHJvcGVuc2l0eS1hcGkuQm9keX0gKi8gKHtcbiAgICAgICAgICAgIHByb2R1Y3Q6IHJlc3VsdFsncHJvZHVjdCddLFxuICAgICAgICAgICAgZXJyb3I6IHJlc3VsdFsnZXJyb3JfbWVzc2FnZSddLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNjb3JlRGV0YWlscy5wdXNoKHNjb3JlRGV0YWlsKTtcbiAgICAgIH1cbiAgICAgIGlmIChzY29yZURldGFpbHMpIHtcbiAgICAgICAgZGVmYXVsdFNjb3JlID0gLyoqIEB0eXBlIHshLi4vYXBpL3Byb3BlbnNpdHktYXBpLlByb3BlbnNpdHlTY29yZX0gKi8gKHtcbiAgICAgICAgICBoZWFkZXI6IHtvazogdHJ1ZX0sXG4gICAgICAgICAgYm9keToge3Njb3Jlczogc2NvcmVEZXRhaWxzfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmYXVsdFNjb3JlO1xuICAgIH1cbiAgICBkZWZhdWx0U2NvcmUgPSAvKiogQHR5cGUgeyEuLi9hcGkvcHJvcGVuc2l0eS1hcGkuUHJvcGVuc2l0eVNjb3JlfSAqLyAoe1xuICAgICAgaGVhZGVyOiB7b2s6IGZhbHNlfSxcbiAgICAgIGJvZHk6IHtlcnJvcjogcmVzcG9uc2VbJ2Vycm9yJ119LFxuICAgIH0pO1xuICAgIHJldHVybiBkZWZhdWx0U2NvcmU7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWZlcnJlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcmV0dXJuIHs/UHJvbWlzZTwuLi9hcGkvcHJvcGVuc2l0eS1hcGkuUHJvcGVuc2l0eVNjb3JlPn1cbiAgICovXG4gIGdldFByb3BlbnNpdHkocmVmZXJyZXIsIHR5cGUpIHtcbiAgICBjb25zdCBpbml0ID0gLyoqIEB0eXBlIHshLi4vdXRpbHMveGhyLkZldGNoSW5pdERlZn0gKi8gKHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgIH0pO1xuICAgIGNvbnN0IHVybCA9XG4gICAgICBhZHNVcmwoJy9zdWJvcHQvcHRzP3Byb2R1Y3RzPScpICtcbiAgICAgIHRoaXMucHVibGljYXRpb25JZF8gK1xuICAgICAgJyZ0eXBlPScgK1xuICAgICAgdHlwZSArXG4gICAgICAnJnJlZj0nICtcbiAgICAgIHJlZmVycmVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoZXJfXG4gICAgICAuZmV0Y2godGhpcy5wcm9wZW5zaXR5VXJsXyh1cmwpLCBpbml0KVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5qc29uKCkpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlUHJvcGVuc2l0eVJlc3BvbnNlXyhyZXNwb25zZSk7XG4gICAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICogYXMgUHJvcGVuc2l0eUFwaSBmcm9tICcuLi9hcGkvcHJvcGVuc2l0eS1hcGknO1xuaW1wb3J0IHtFdmVudCwgU3Vic2NyaXB0aW9uU3RhdGV9IGZyb20gJy4uL2FwaS9sb2dnZXItYXBpJztcbmltcG9ydCB7RXZlbnRPcmlnaW5hdG9yfSBmcm9tICcuLi9wcm90by9hcGlfbWVzc2FnZXMnO1xuaW1wb3J0IHtQcm9wZW5zaXR5U2VydmVyfSBmcm9tICcuL3Byb3BlbnNpdHktc2VydmVyJztcbmltcG9ydCB7aXNCb29sZWFufSBmcm9tICcuLi91dGlscy90eXBlcyc7XG5pbXBvcnQge2lzRW51bVZhbHVlLCBpc09iamVjdH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xuaW1wb3J0IHtwdWJsaXNoZXJFdmVudFRvQW5hbHl0aWNzRXZlbnR9IGZyb20gJy4vZXZlbnQtdHlwZS1tYXBwaW5nJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7UHJvcGVuc2l0eUFwaS5Qcm9wZW5zaXR5QXBpfVxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVuc2l0eSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0geyEuL2ZldGNoZXIuRmV0Y2hlcn0gZmV0Y2hlclxuICAgKlxuICAgKiBJTVBPUlRBTlQ6IGRlcHMgbWF5IG5vdCBiZSBmdWxsIGluaXRpYWxpemVkIGNvbmZpZyBhbmQgcGFnZUNvbmZpZyBhcmVcbiAgICogYXZhaWxhYmxlIGltbWVkaWF0ZWx5LCBvdGhlciBmdW5jdGlvbiBzaG91bGQgYmUgZ2F0ZWQgb24gYSByZWFkeSBwcm9taXNlLlxuICAgKiAjVE9ETyhqcGV0dGl0dCkgc3dpdGNoIHJlZmFjdG9yIHRvIHRha2Ugb3V0IHRoZSB3aW4gYW5kIHVzZSBkZXBzIHRvIGdldCB3aW5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHdpbiwgZGVwcywgZmV0Y2hlcikge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gd2luO1xuICAgIC8qKiBAcHJpdmF0ZSB7UHJvcGVuc2l0eVNlcnZlcn0gKi9cbiAgICB0aGlzLnByb3BlbnNpdHlTZXJ2ZXJfID0gbmV3IFByb3BlbnNpdHlTZXJ2ZXIod2luLCBkZXBzLCBmZXRjaGVyKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9hcGkvY2xpZW50LWV2ZW50LW1hbmFnZXItYXBpLkNsaWVudEV2ZW50TWFuYWdlckFwaX0gKi9cbiAgICB0aGlzLmV2ZW50TWFuYWdlcl8gPSBkZXBzLmV2ZW50TWFuYWdlcigpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZW5kU3Vic2NyaXB0aW9uU3RhdGUoc3RhdGUsIGpzb25Qcm9kdWN0cykge1xuICAgIGlmICghT2JqZWN0LnZhbHVlcyhTdWJzY3JpcHRpb25TdGF0ZSkuaW5jbHVkZXMoc3RhdGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3Vic2NyaXB0aW9uIHN0YXRlIHByb3ZpZGVkJyk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChTdWJzY3JpcHRpb25TdGF0ZS5TVUJTQ1JJQkVSID09IHN0YXRlIHx8XG4gICAgICAgIFN1YnNjcmlwdGlvblN0YXRlLlBBU1RfU1VCU0NSSUJFUiA9PSBzdGF0ZSkgJiZcbiAgICAgICFqc29uUHJvZHVjdHNcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0VudGl0bGVtZW50cyBtdXN0IGJlIHByb3ZpZGVkIGZvciB1c2VycyB3aXRoJyArXG4gICAgICAgICAgJyBhY3RpdmUgb3IgZXhwaXJlZCBzdWJzY3JpcHRpb25zJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGpzb25Qcm9kdWN0cyAmJiAhaXNPYmplY3QoanNvblByb2R1Y3RzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbnRpdGxlbWVudHMgbXVzdCBiZSBhbiBPYmplY3QnKTtcbiAgICB9XG4gICAgbGV0IHByb2R1Y3RzT3JTa3VzID0gbnVsbDtcbiAgICBpZiAoanNvblByb2R1Y3RzKSB7XG4gICAgICBwcm9kdWN0c09yU2t1cyA9IEpTT04uc3RyaW5naWZ5KGpzb25Qcm9kdWN0cyk7XG4gICAgfVxuICAgIHRoaXMucHJvcGVuc2l0eVNlcnZlcl8uc2VuZFN1YnNjcmlwdGlvblN0YXRlKHN0YXRlLCBwcm9kdWN0c09yU2t1cyk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFByb3BlbnNpdHkodHlwZSkge1xuICAgIGlmICh0eXBlICYmICFPYmplY3QudmFsdWVzKFByb3BlbnNpdHlBcGkuUHJvcGVuc2l0eVR5cGUpLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvcGVuc2l0eSB0eXBlIHJlcXVlc3RlZCcpO1xuICAgIH1cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHR5cGUgPSBQcm9wZW5zaXR5QXBpLlByb3BlbnNpdHlUeXBlLkdFTkVSQUw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb3BlbnNpdHlTZXJ2ZXJfLmdldFByb3BlbnNpdHkoXG4gICAgICB0aGlzLndpbl8uZG9jdW1lbnQucmVmZXJyZXIsXG4gICAgICB0eXBlXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2VuZEV2ZW50KHVzZXJFdmVudCkge1xuICAgIGNvbnN0IGFuYWx5dGljc0V2ZW50ID0gcHVibGlzaGVyRXZlbnRUb0FuYWx5dGljc0V2ZW50KHVzZXJFdmVudC5uYW1lKTtcbiAgICBsZXQgZGF0YSA9IG51bGw7XG4gICAgaWYgKCFpc0VudW1WYWx1ZShFdmVudCwgdXNlckV2ZW50Lm5hbWUpIHx8ICFhbmFseXRpY3NFdmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVzZXIgZXZlbnQgcHJvdmlkZWQoJyArIHVzZXJFdmVudC5uYW1lICsgJyknKTtcbiAgICB9XG5cbiAgICBpZiAodXNlckV2ZW50LmRhdGEpIHtcbiAgICAgIGlmICghaXNPYmplY3QodXNlckV2ZW50LmRhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgZGF0YSBtdXN0IGJlIGFuIE9iamVjdCgnICsgdXNlckV2ZW50LmRhdGEgKyAnKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHVzZXJFdmVudC5kYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNCb29sZWFuKHVzZXJFdmVudC5hY3RpdmUpKSB7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgfVxuICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCB7J2lzX2FjdGl2ZSc6IHVzZXJFdmVudC5hY3RpdmV9KTtcbiAgICB9IGVsc2UgaWYgKHVzZXJFdmVudC5hY3RpdmUgIT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBhY3RpdmUgbXVzdCBiZSBhIGJvb2xlYW4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmV2ZW50TWFuYWdlcl8ubG9nRXZlbnQoe1xuICAgICAgZXZlbnRUeXBlOiBhbmFseXRpY3NFdmVudCxcbiAgICAgIGV2ZW50T3JpZ2luYXRvcjogRXZlbnRPcmlnaW5hdG9yLlBST1BFTlNJVFlfQ0xJRU5ULFxuICAgICAgaXNGcm9tVXNlckFjdGlvbjogdXNlckV2ZW50LmFjdGl2ZSxcbiAgICAgIGFkZGl0aW9uYWxQYXJhbWV0ZXJzOiBkYXRhLFxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7QWJicnZPZmZlckZsb3csIE9mZmVyc0Zsb3csIFN1YnNjcmliZU9wdGlvbkZsb3d9IGZyb20gJy4vb2ZmZXJzLWZsb3cnO1xuaW1wb3J0IHtBY3Rpdml0eVBvcnRzfSBmcm9tICcuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMnO1xuaW1wb3J0IHtBbmFseXRpY3NFdmVudH0gZnJvbSAnLi4vcHJvdG8vYXBpX21lc3NhZ2VzJztcbmltcG9ydCB7QW5hbHl0aWNzTW9kZX0gZnJvbSAnLi4vYXBpL3N1YnNjcmlwdGlvbnMnO1xuaW1wb3J0IHtBbmFseXRpY3NTZXJ2aWNlfSBmcm9tICcuL2FuYWx5dGljcy1zZXJ2aWNlJztcbmltcG9ydCB7QnV0dG9uQXBpfSBmcm9tICcuL2J1dHRvbi1hcGknO1xuaW1wb3J0IHtDYWxsYmFja3N9IGZyb20gJy4vY2FsbGJhY2tzJztcbmltcG9ydCB7Q2xpZW50RXZlbnRNYW5hZ2VyfSBmcm9tICcuL2NsaWVudC1ldmVudC1tYW5hZ2VyJztcbmltcG9ydCB7Q29udHJpYnV0aW9uc0Zsb3d9IGZyb20gJy4vY29udHJpYnV0aW9ucy1mbG93JztcbmltcG9ydCB7RGVmZXJyZWRBY2NvdW50Rmxvd30gZnJvbSAnLi9kZWZlcnJlZC1hY2NvdW50LWZsb3cnO1xuaW1wb3J0IHtEZXBzRGVmfSBmcm9tICcuL2RlcHMnO1xuaW1wb3J0IHtEaWFsb2dNYW5hZ2VyfSBmcm9tICcuLi9jb21wb25lbnRzL2RpYWxvZy1tYW5hZ2VyJztcbmltcG9ydCB7RG9jLCByZXNvbHZlRG9jfSBmcm9tICcuLi9tb2RlbC9kb2MnO1xuaW1wb3J0IHtFbnRpdGxlbWVudHNNYW5hZ2VyfSBmcm9tICcuL2VudGl0bGVtZW50cy1tYW5hZ2VyJztcbmltcG9ydCB7RXhwZXJpbWVudEZsYWdzfSBmcm9tICcuL2V4cGVyaW1lbnQtZmxhZ3MnO1xuaW1wb3J0IHtGZXRjaGVyLCBYaHJGZXRjaGVyfSBmcm9tICcuL2ZldGNoZXInO1xuaW1wb3J0IHtKc0Vycm9yfSBmcm9tICcuL2pzZXJyb3InO1xuaW1wb3J0IHtcbiAgTGlua0NvbXBsZXRlRmxvdyxcbiAgTGlua1NhdmVGbG93LFxuICBMaW5rYmFja0Zsb3csXG59IGZyb20gJy4vbGluay1hY2NvdW50cy1mbG93JztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQge0xvZ2luTm90aWZpY2F0aW9uQXBpfSBmcm9tICcuL2xvZ2luLW5vdGlmaWNhdGlvbi1hcGknO1xuaW1wb3J0IHtMb2dpblByb21wdEFwaX0gZnJvbSAnLi9sb2dpbi1wcm9tcHQtYXBpJztcbmltcG9ydCB7T2ZmZXJzQXBpfSBmcm9tICcuL29mZmVycy1hcGknO1xuaW1wb3J0IHtQYWdlQ29uZmlnfSBmcm9tICcuLi9tb2RlbC9wYWdlLWNvbmZpZyc7XG5pbXBvcnQge1xuICBQYWdlQ29uZmlnUmVzb2x2ZXIsXG4gIGdldENvbnRyb2xGbGFnLFxufSBmcm9tICcuLi9tb2RlbC9wYWdlLWNvbmZpZy1yZXNvbHZlcic7XG5pbXBvcnQge1BheUNsaWVudH0gZnJvbSAnLi9wYXktY2xpZW50JztcbmltcG9ydCB7UGF5Q29tcGxldGVGbG93LCBQYXlTdGFydEZsb3d9IGZyb20gJy4vcGF5LWZsb3cnO1xuaW1wb3J0IHtQcmVjb25uZWN0fSBmcm9tICcuLi91dGlscy9wcmVjb25uZWN0JztcbmltcG9ydCB7XG4gIFByb2R1Y3RUeXBlLFxuICBTdWJzY3JpcHRpb25zLFxuICBXaW5kb3dPcGVuTW9kZSxcbiAgZGVmYXVsdENvbmZpZyxcbn0gZnJvbSAnLi4vYXBpL3N1YnNjcmlwdGlvbnMnO1xuaW1wb3J0IHtQcm9wZW5zaXR5fSBmcm9tICcuL3Byb3BlbnNpdHknO1xuaW1wb3J0IHtDU1MgYXMgU1dHX0RJQUxPR30gZnJvbSAnLi4vLi4vYnVpbGQvY3NzL2NvbXBvbmVudHMvZGlhbG9nLmNzcyc7XG5pbXBvcnQge1N0b3JhZ2V9IGZyb20gJy4vc3RvcmFnZSc7XG5pbXBvcnQge1dhaXRGb3JTdWJzY3JpcHRpb25Mb29rdXBBcGl9IGZyb20gJy4vd2FpdC1mb3Itc3Vic2NyaXB0aW9uLWxvb2t1cC1hcGknO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJy4uL3V0aWxzL2xvZyc7XG5pbXBvcnQge2RlYnVnTG9nfSBmcm9tICcuLi91dGlscy9sb2cnO1xuaW1wb3J0IHtpbmplY3RTdHlsZVNoZWV0LCBpc0VkZ2VCcm93c2VyfSBmcm9tICcuLi91dGlscy9kb20nO1xuaW1wb3J0IHtpc0FycmF5fSBmcm9tICcuLi91dGlscy90eXBlcyc7XG5pbXBvcnQge2lzQm9vbGVhbn0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xuaW1wb3J0IHtpc0V4cGVyaW1lbnRPbn0gZnJvbSAnLi9leHBlcmltZW50cyc7XG5pbXBvcnQge3NldEV4cGVyaW1lbnR9IGZyb20gJy4vZXhwZXJpbWVudHMnO1xuXG5jb25zdCBSVU5USU1FX1BST1AgPSAnU1dHJztcbmNvbnN0IFJVTlRJTUVfTEVHQUNZX1BST1AgPSAnU1VCU0NSSVBUSU9OUyc7IC8vIE1JR1JBVEVcblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHJ1bnRpbWUsIGZvciB0ZXN0aW5nLlxuICogQHByaXZhdGUgeyFSdW50aW1lfVxuICovXG5sZXQgcnVudGltZUluc3RhbmNlXztcblxuLyoqXG4gKiBSZXR1cm5zIHJ1bnRpbWUgZm9yIHRlc3RpbmcgaWYgYXZhaWxhYmxlLiBUaHJvd3MgaWYgdGhlIHJ1bnRpbWUgaXMgbm90XG4gKiBpbml0aWFsaXplZCB5ZXQuXG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqIEByZXR1cm4geyFSdW50aW1lfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZSgpIHtcbiAgYXNzZXJ0KHJ1bnRpbWVJbnN0YW5jZV8sICdub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XG4gIHJldHVybiBydW50aW1lSW5zdGFuY2VfO1xufVxuXG4vKipcbiAqIEluc3RhbGxzIFN3RyBydW50aW1lLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxSdW50aW1lKHdpbikge1xuICAvLyBPbmx5IGluc3RhbGwgdGhlIFN3RyBydW50aW1lIG9uY2UuXG4gIGlmICh3aW5bUlVOVElNRV9QUk9QXSAmJiAhaXNBcnJheSh3aW5bUlVOVElNRV9QUk9QXSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDcmVhdGUgYSBTd0cgcnVudGltZS5cbiAgY29uc3QgcnVudGltZSA9IG5ldyBSdW50aW1lKHdpbik7XG5cbiAgLy8gQ3JlYXRlIGEgcHVibGljIHZlcnNpb24gb2YgdGhlIFN3RyBydW50aW1lLlxuICBjb25zdCBwdWJsaWNSdW50aW1lID0gY3JlYXRlUHVibGljUnVudGltZShydW50aW1lKTtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBjYWxsYmFjayB3aGVuIFN3RyBydW50aW1lIGlzIHJlYWR5LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFTdWJzY3JpcHRpb25zKX0gY2FsbGJhY2tcbiAgICovXG4gIGZ1bmN0aW9uIGNhbGxXaGVuUnVudGltZUlzUmVhZHkoY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcnVudGltZS53aGVuUmVhZHkoKS50aGVuKCgpID0+IHtcbiAgICAgIGNhbGxiYWNrKHB1YmxpY1J1bnRpbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gUXVldWUgdXAgYW55IGNhbGxiYWNrcyB0aGUgcHVibGljYXRpb24gbWlnaHQgaGF2ZSBwcm92aWRlZC5cbiAgY29uc3Qgd2FpdGluZ0NhbGxiYWNrcyA9IFtdLmNvbmNhdChcbiAgICB3aW5bUlVOVElNRV9QUk9QXSxcbiAgICB3aW5bUlVOVElNRV9MRUdBQ1lfUFJPUF1cbiAgKTtcbiAgd2FpdGluZ0NhbGxiYWNrcy5mb3JFYWNoKGNhbGxXaGVuUnVudGltZUlzUmVhZHkpO1xuXG4gIC8vIElmIGFueSBtb3JlIGNhbGxiYWNrcyBhcmUgYHB1c2hgZWQgdG8gdGhlIGdsb2JhbCBTd0cgdmFyaWFibGVzLFxuICAvLyB0aGV5J2xsIGJlIHF1ZXVlZCB1cCB0byByZWNlaXZlIHRoZSBTd0cgcnVudGltZSB3aGVuIGl0J3MgcmVhZHkuXG4gIHdpbltSVU5USU1FX1BST1BdID0gd2luW1JVTlRJTUVfTEVHQUNZX1BST1BdID0ge1xuICAgIHB1c2g6IGNhbGxXaGVuUnVudGltZUlzUmVhZHksXG4gIH07XG5cbiAgLy8gU2V0IHZhcmlhYmxlIGZvciB0ZXN0aW5nLlxuICBydW50aW1lSW5zdGFuY2VfID0gcnVudGltZTtcblxuICAvLyBLaWNrIG9mZiBzdWJzY3JpcHRpb25zIGZsb3cuXG4gIHJ1bnRpbWUuc3RhcnRTdWJzY3JpcHRpb25zRmxvd0lmTmVlZGVkKCk7XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge1N1YnNjcmlwdGlvbnN9XG4gKi9cbmV4cG9ydCBjbGFzcyBSdW50aW1lIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3aW4pIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IHdpbjtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFEb2N9ICovXG4gICAgdGhpcy5kb2NfID0gcmVzb2x2ZURvYyh3aW4pO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2V9ICovXG4gICAgdGhpcy5yZWFkeV8gPSBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLnByb2R1Y3RPclB1YmxpY2F0aW9uSWRfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5Db25maWd9ICovXG4gICAgdGhpcy5jb25maWdfID0ge307XG5cbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5jb21taXR0ZWRfID0gZmFsc2U7XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbigoIUNvbmZpZ3VyZWRSdW50aW1lfCFQcm9taXNlKSl9ICovXG4gICAgdGhpcy5jb25maWd1cmVkUmVzb2x2ZXJfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFQcm9taXNlPCFDb25maWd1cmVkUnVudGltZT59ICovXG4gICAgdGhpcy5jb25maWd1cmVkUHJvbWlzZV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY29uZmlndXJlZFJlc29sdmVyXyA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICAvKiogQHByaXZhdGUgez9QYWdlQ29uZmlnUmVzb2x2ZXJ9ICovXG4gICAgdGhpcy5wYWdlQ29uZmlnUmVzb2x2ZXJfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFCdXR0b25BcGl9ICovXG4gICAgdGhpcy5idXR0b25BcGlfID0gbmV3IEJ1dHRvbkFwaSh0aGlzLmRvY18sIHRoaXMuY29uZmlndXJlZFByb21pc2VfKTtcbiAgICB0aGlzLmJ1dHRvbkFwaV8uaW5pdCgpOyAvLyBJbmplY3RzIHN3Zy1idXR0b24gc3R5bGVzaGVldC5cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdoZW5SZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeV87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBjb21taXRcbiAgICogQHJldHVybiB7IVByb21pc2U8IUNvbmZpZ3VyZWRSdW50aW1lPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbmZpZ3VyZWRfKGNvbW1pdCkge1xuICAgIGlmICghdGhpcy5jb21taXR0ZWRfICYmIGNvbW1pdCkge1xuICAgICAgdGhpcy5jb21taXR0ZWRfID0gdHJ1ZTtcbiAgICAgIC8qKiBAdHlwZSB7IVByb21pc2U8IVBhZ2VDb25maWc+fSAqL1xuICAgICAgbGV0IHBhZ2VDb25maWdQcm9taXNlO1xuICAgICAgaWYgKHRoaXMucHJvZHVjdE9yUHVibGljYXRpb25JZF8pIHtcbiAgICAgICAgcGFnZUNvbmZpZ1Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgbmV3IFBhZ2VDb25maWcodGhpcy5wcm9kdWN0T3JQdWJsaWNhdGlvbklkXywgLyogbG9ja2VkICovIGZhbHNlKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYWdlQ29uZmlnUmVzb2x2ZXJfID0gbmV3IFBhZ2VDb25maWdSZXNvbHZlcih0aGlzLmRvY18pO1xuICAgICAgICBwYWdlQ29uZmlnUHJvbWlzZSA9IHRoaXMucGFnZUNvbmZpZ1Jlc29sdmVyX1xuICAgICAgICAgIC5yZXNvbHZlQ29uZmlnKClcbiAgICAgICAgICAudGhlbihjb25maWcgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYWdlQ29uZmlnUmVzb2x2ZXJfID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwYWdlQ29uZmlnUHJvbWlzZS50aGVuKFxuICAgICAgICBwYWdlQ29uZmlnID0+IHtcbiAgICAgICAgICB0aGlzLmNvbmZpZ3VyZWRSZXNvbHZlcl8oXG4gICAgICAgICAgICBuZXcgQ29uZmlndXJlZFJ1bnRpbWUoXG4gICAgICAgICAgICAgIHRoaXMuZG9jXyxcbiAgICAgICAgICAgICAgcGFnZUNvbmZpZyxcbiAgICAgICAgICAgICAgLyogaW50ZWdyICovIHtjb25maWdQcm9taXNlOiB0aGlzLmNvbmZpZ3VyZWRQcm9taXNlX30sXG4gICAgICAgICAgICAgIHRoaXMuY29uZmlnX1xuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5jb25maWd1cmVkUmVzb2x2ZXJfID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgICB0aGlzLmNvbmZpZ3VyZWRSZXNvbHZlcl8oUHJvbWlzZS5yZWplY3QocmVhc29uKSk7XG4gICAgICAgICAgdGhpcy5jb25maWd1cmVkUmVzb2x2ZXJfID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGNvbW1pdCAmJiB0aGlzLnBhZ2VDb25maWdSZXNvbHZlcl8pIHtcbiAgICAgIHRoaXMucGFnZUNvbmZpZ1Jlc29sdmVyXy5jaGVjaygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkUHJvbWlzZV87XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBzdWJzY3JpcHRpb24gZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFuZCB0aGUgcGFnZSBpc1xuICAgKiBjb25maWd1cmVkIHRvIHN0YXJ0IGl0IGF1dG9tYXRpY2FsbHkuXG4gICAqXG4gICAqIEByZXR1cm4gez9Qcm9taXNlfVxuICAgKiBAcGFja2FnZVxuICAgKi9cbiAgc3RhcnRTdWJzY3JpcHRpb25zRmxvd0lmTmVlZGVkKCkge1xuICAgIGNvbnN0IGNvbnRyb2wgPSBnZXRDb250cm9sRmxhZyh0aGlzLndpbl8uZG9jdW1lbnQpO1xuICAgIGRlYnVnTG9nKGNvbnRyb2wsICdtb2RlJyk7XG4gICAgaWYgKGNvbnRyb2wgPT0gJ21hbnVhbCcpIHtcbiAgICAgIC8vIFwiU2tpcHBpbmcgYXV0b21hdGljIHN0YXJ0IGJlY2F1c2UgY29udHJvbCBmbGFnIGlzIHNldCB0byBcIm1hbnVhbFwiLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0YXJ0KCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGluaXQocHJvZHVjdE9yUHVibGljYXRpb25JZCkge1xuICAgIGFzc2VydCghdGhpcy5jb21taXR0ZWRfLCAnYWxyZWFkeSBjb25maWd1cmVkJyk7XG4gICAgdGhpcy5wcm9kdWN0T3JQdWJsaWNhdGlvbklkXyA9IHByb2R1Y3RPclB1YmxpY2F0aW9uSWQ7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAvLyBBY2N1bXVsYXRlIGNvbmZpZyBmb3Igc3RhcnR1cC5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnXywgY29uZmlnKTtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyhmYWxzZSkudGhlbihydW50aW1lID0+IHJ1bnRpbWUuY29uZmlndXJlKGNvbmZpZykpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT4gcnVudGltZS5zdGFydCgpKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcmVzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+IHJ1bnRpbWUucmVzZXQoKSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGNsZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKHRydWUpLnRoZW4ocnVudGltZSA9PiBydW50aW1lLmNsZWFyKCkpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRFbnRpdGxlbWVudHMoZW5jcnlwdGVkRG9jdW1lbnRLZXkpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuZ2V0RW50aXRsZW1lbnRzKGVuY3J5cHRlZERvY3VtZW50S2V5KVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNldE9uRW50aXRsZW1lbnRzUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyhmYWxzZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNldE9uRW50aXRsZW1lbnRzUmVzcG9uc2UoY2FsbGJhY2spXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0T2ZmZXJzKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT4gcnVudGltZS5nZXRPZmZlcnMob3B0aW9ucykpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93T2ZmZXJzKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT4gcnVudGltZS5zaG93T2ZmZXJzKG9wdGlvbnMpKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2hvd1VwZGF0ZU9mZmVycyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNob3dVcGRhdGVPZmZlcnMob3B0aW9ucylcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93U3Vic2NyaWJlT3B0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuc2hvd1N1YnNjcmliZU9wdGlvbihvcHRpb25zKVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNob3dBYmJydk9mZmVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuc2hvd0FiYnJ2T2ZmZXIob3B0aW9ucylcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93Q29udHJpYnV0aW9uT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNob3dDb250cmlidXRpb25PcHRpb25zKG9wdGlvbnMpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgd2FpdEZvclN1YnNjcmlwdGlvbkxvb2t1cChhY2NvdW50UHJvbWlzZSkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKHRydWUpLnRoZW4ocnVudGltZSA9PlxuICAgICAgcnVudGltZS53YWl0Rm9yU3Vic2NyaXB0aW9uTG9va3VwKGFjY291bnRQcm9taXNlKVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNldE9uTmF0aXZlU3Vic2NyaWJlUmVxdWVzdChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKGZhbHNlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuc2V0T25OYXRpdmVTdWJzY3JpYmVSZXF1ZXN0KGNhbGxiYWNrKVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNldE9uU3Vic2NyaWJlUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyhmYWxzZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNldE9uU3Vic2NyaWJlUmVzcG9uc2UoY2FsbGJhY2spXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc3Vic2NyaWJlKHNrdSkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKHRydWUpLnRoZW4ocnVudGltZSA9PiBydW50aW1lLnN1YnNjcmliZShza3UpKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdXBkYXRlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUudXBkYXRlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblJlcXVlc3QpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25Db250cmlidXRpb25SZXNwb25zZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKGZhbHNlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuc2V0T25Db250cmlidXRpb25SZXNwb25zZShjYWxsYmFjaylcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZXRPblBheW1lbnRSZXNwb25zZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKGZhbHNlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuc2V0T25QYXltZW50UmVzcG9uc2UoY2FsbGJhY2spXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY29udHJpYnV0ZShza3VPclN1YnNjcmlwdGlvblJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuY29udHJpYnV0ZShza3VPclN1YnNjcmlwdGlvblJlcXVlc3QpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY29tcGxldGVEZWZlcnJlZEFjY291bnRDcmVhdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLmNvbXBsZXRlRGVmZXJyZWRBY2NvdW50Q3JlYXRpb24ob3B0aW9ucylcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZXRPbkxvZ2luUmVxdWVzdChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKGZhbHNlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuc2V0T25Mb2dpblJlcXVlc3QoY2FsbGJhY2spXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25MaW5rQ29tcGxldGUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyhmYWxzZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNldE9uTGlua0NvbXBsZXRlKGNhbGxiYWNrKVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGxpbmtBY2NvdW50KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+IHJ1bnRpbWUubGlua0FjY291bnQocGFyYW1zKSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNldE9uRmxvd1N0YXJ0ZWQoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyhmYWxzZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNldE9uRmxvd1N0YXJ0ZWQoY2FsbGJhY2spXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25GbG93Q2FuY2VsZWQoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyhmYWxzZSkudGhlbihydW50aW1lID0+XG4gICAgICBydW50aW1lLnNldE9uRmxvd0NhbmNlbGVkKGNhbGxiYWNrKVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNhdmVTdWJzY3JpcHRpb24oc2F2ZVN1YnNjcmlwdGlvblJlcXVlc3RDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKHRydWUpLnRoZW4ocnVudGltZSA9PiB7XG4gICAgICByZXR1cm4gcnVudGltZS5zYXZlU3Vic2NyaXB0aW9uKHNhdmVTdWJzY3JpcHRpb25SZXF1ZXN0Q2FsbGJhY2spO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93TG9naW5Qcm9tcHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+IHtcbiAgICAgIHJldHVybiBydW50aW1lLnNob3dMb2dpblByb21wdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93TG9naW5Ob3RpZmljYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZF8odHJ1ZSkudGhlbihydW50aW1lID0+IHtcbiAgICAgIHJldHVybiBydW50aW1lLnNob3dMb2dpbk5vdGlmaWNhdGlvbigpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjcmVhdGVCdXR0b24ob3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uQXBpXy5jcmVhdGUob3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXR0YWNoU21hcnRCdXR0b24oYnV0dG9uLCBvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT5cbiAgICAgIHJ1bnRpbWUuYXR0YWNoU21hcnRCdXR0b24oYnV0dG9uLCBvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXR0YWNoQnV0dG9uKGJ1dHRvbiwgb3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uQXBpXy5hdHRhY2goYnV0dG9uLCBvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRQcm9wZW5zaXR5TW9kdWxlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZWRfKHRydWUpLnRoZW4ocnVudGltZSA9PiB7XG4gICAgICByZXR1cm4gcnVudGltZS5nZXRQcm9wZW5zaXR5TW9kdWxlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldExvZ2dlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkXyh0cnVlKS50aGVuKHJ1bnRpbWUgPT4gcnVudGltZS5nZXRMb2dnZXIoKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7RGVwc0RlZn1cbiAqIEBpbXBsZW1lbnRzIHtTdWJzY3JpcHRpb25zfVxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJlZFJ1bnRpbWUge1xuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fCFEb2N1bWVudHwhRG9jfSB3aW5PckRvY1xuICAgKiBAcGFyYW0geyEuLi9tb2RlbC9wYWdlLWNvbmZpZy5QYWdlQ29uZmlnfSBwYWdlQ29uZmlnXG4gICAqIEBwYXJhbSB7e1xuICAgKiAgICAgZmV0Y2hlcjogKCFGZXRjaGVyfHVuZGVmaW5lZCksXG4gICAqICAgICBjb25maWdQcm9taXNlOiAoIVByb21pc2V8dW5kZWZpbmVkKSxcbiAgICogICB9PX0gaW50ZWdyXG4gICAqIEBwYXJhbSB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLkNvbmZpZz19IGNvbmZpZ1xuICAgKi9cbiAgY29uc3RydWN0b3Iod2luT3JEb2MsIHBhZ2VDb25maWcsIGludGVnciwgY29uZmlnKSB7XG4gICAgaW50ZWdyID0gaW50ZWdyIHx8IHt9O1xuICAgIGludGVnci5jb25maWdQcm9taXNlID0gaW50ZWdyLmNvbmZpZ1Byb21pc2UgfHwgUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQ2xpZW50RXZlbnRNYW5hZ2VyfSAqL1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXyA9IG5ldyBDbGllbnRFdmVudE1hbmFnZXIoaW50ZWdyLmNvbmZpZ1Byb21pc2UpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IURvY30gKi9cbiAgICB0aGlzLmRvY18gPSByZXNvbHZlRG9jKHdpbk9yRG9jKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gdGhpcy5kb2NfLmdldFdpbigpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLkNvbmZpZ30gKi9cbiAgICB0aGlzLmNvbmZpZ18gPSBkZWZhdWx0Q29uZmlnKCk7XG5cbiAgICBpZiAoaXNFZGdlQnJvd3Nlcih0aGlzLndpbl8pKSB7XG4gICAgICAvLyBUT0RPKGR2b3l0ZW5rbywgYi8xMjA2MDczNDMpOiBGaW5kIGEgd2F5IHRvIHJlbW92ZSB0aGlzIHJlc3RyaWN0aW9uXG4gICAgICAvLyBvciBtb3ZlIGl0IHRvIFdlYiBBY3Rpdml0aWVzLlxuICAgICAgdGhpcy5jb25maWdfLndpbmRvd09wZW5Nb2RlID0gV2luZG93T3Blbk1vZGUuUkVESVJFQ1Q7XG4gICAgfVxuICAgIGlmIChjb25maWcpIHtcbiAgICAgIHRoaXMuY29uZmlndXJlXyhjb25maWcpO1xuICAgIH1cblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9tb2RlbC9wYWdlLWNvbmZpZy5QYWdlQ29uZmlnfSAqL1xuICAgIHRoaXMucGFnZUNvbmZpZ18gPSBwYWdlQ29uZmlnO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2V9ICovXG4gICAgdGhpcy5kb2N1bWVudFBhcnNlZF8gPSB0aGlzLmRvY18ud2hlblJlYWR5KCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshSnNFcnJvcn0gKi9cbiAgICB0aGlzLmpzZXJyb3JfID0gbmV3IEpzRXJyb3IodGhpcy5kb2NfKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFGZXRjaGVyfSAqL1xuICAgIHRoaXMuZmV0Y2hlcl8gPSBpbnRlZ3IuZmV0Y2hlciB8fCBuZXcgWGhyRmV0Y2hlcih0aGlzLndpbl8pO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVN0b3JhZ2V9ICovXG4gICAgdGhpcy5zdG9yYWdlXyA9IG5ldyBTdG9yYWdlKHRoaXMud2luXyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRGlhbG9nTWFuYWdlcn0gKi9cbiAgICB0aGlzLmRpYWxvZ01hbmFnZXJfID0gbmV3IERpYWxvZ01hbmFnZXIodGhpcy5kb2NfKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFDYWxsYmFja3N9ICovXG4gICAgdGhpcy5jYWxsYmFja3NfID0gbmV3IENhbGxiYWNrcygpO1xuXG4gICAgLy8gV0FSTklORzogRGVwc0RlZiAoJ3RoaXMnKSBpcyBiZWluZyBwcm9ncmVzc2l2ZWx5IGRlZmluZWQgYmVsb3cuXG4gICAgLy8gQ29uc3RydWN0b3JzIHdpbGwgY3Jhc2ggaWYgdGhleSByZWx5IG9uIHNvbWV0aGluZyB0aGF0IGRvZXNuJ3QgZXhpc3QgeWV0LlxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gbmV3IEFjdGl2aXR5UG9ydHModGhpcyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQW5hbHl0aWNzU2VydmljZX0gKi9cbiAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2VfID0gbmV3IEFuYWx5dGljc1NlcnZpY2UodGhpcyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUGF5Q2xpZW50fSAqL1xuICAgIHRoaXMucGF5Q2xpZW50XyA9IG5ldyBQYXlDbGllbnQodGhpcyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshTG9nZ2VyfSAqL1xuICAgIHRoaXMubG9nZ2VyXyA9IG5ldyBMb2dnZXIodGhpcyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRW50aXRsZW1lbnRzTWFuYWdlcn0gKi9cbiAgICB0aGlzLmVudGl0bGVtZW50c01hbmFnZXJfID0gbmV3IEVudGl0bGVtZW50c01hbmFnZXIoXG4gICAgICB0aGlzLndpbl8sXG4gICAgICB0aGlzLnBhZ2VDb25maWdfLFxuICAgICAgdGhpcy5mZXRjaGVyXyxcbiAgICAgIHRoaXMgLy8gU2VlIG5vdGUgYWJvdXQgJ3RoaXMnIGFib3ZlXG4gICAgKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFQcm9wZW5zaXR5fSAqL1xuICAgIHRoaXMucHJvcGVuc2l0eU1vZHVsZV8gPSBuZXcgUHJvcGVuc2l0eShcbiAgICAgIHRoaXMud2luXyxcbiAgICAgIHRoaXMsIC8vIFNlZSBub3RlIGFib3V0ICd0aGlzJyBhYm92ZVxuICAgICAgdGhpcy5mZXRjaGVyX1xuICAgICk7XG5cbiAgICAvLyBBTEwgQ0xFQVI6IERlcHNEZWYgZGVmaW5pdGlvbiBub3cgY29tcGxldGUuXG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2ZmZXJzQXBpfSAqL1xuICAgIHRoaXMub2ZmZXJzQXBpXyA9IG5ldyBPZmZlcnNBcGkodGhpcy5wYWdlQ29uZmlnXywgdGhpcy5mZXRjaGVyXyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQnV0dG9uQXBpfSAqL1xuICAgIHRoaXMuYnV0dG9uQXBpXyA9IG5ldyBCdXR0b25BcGkodGhpcy5kb2NfLCBQcm9taXNlLnJlc29sdmUodGhpcykpO1xuXG4gICAgY29uc3QgcHJlY29ubmVjdCA9IG5ldyBQcmVjb25uZWN0KHRoaXMud2luXy5kb2N1bWVudCk7XG5cbiAgICBwcmVjb25uZWN0LnByZWZldGNoKCckYXNzZXRzJC9sb2FkZXIuc3ZnJyk7XG4gICAgTGlua0NvbXBsZXRlRmxvdy5jb25maWd1cmVQZW5kaW5nKHRoaXMpO1xuICAgIFBheUNvbXBsZXRlRmxvdy5jb25maWd1cmVQZW5kaW5nKHRoaXMpO1xuICAgIHRoaXMucGF5Q2xpZW50Xy5wcmVjb25uZWN0KHByZWNvbm5lY3QpO1xuXG4gICAgaW5qZWN0U3R5bGVTaGVldCh0aGlzLmRvY18sIFNXR19ESUFMT0cpO1xuXG4gICAgLy8gUmVwb3J0IHJlZGlyZWN0IGVycm9ycyBpZiBhbnkuXG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXy5vblJlZGlyZWN0RXJyb3IoZXJyb3IgPT4ge1xuICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlXy5hZGRMYWJlbHMoWydyZWRpcmVjdCddKTtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyXy5sb2dTd2dFdmVudChcbiAgICAgICAgQW5hbHl0aWNzRXZlbnQuRVZFTlRfUEFZTUVOVF9GQUlMRUQsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgICAgdGhpcy5qc2Vycm9yXy5lcnJvcignUmVkaXJlY3QgZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGRvYygpIHtcbiAgICByZXR1cm4gdGhpcy5kb2NfO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB3aW4oKSB7XG4gICAgcmV0dXJuIHRoaXMud2luXztcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcGFnZUNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5wYWdlQ29uZmlnXztcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAganNlcnJvcigpIHtcbiAgICByZXR1cm4gdGhpcy5qc2Vycm9yXztcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYWN0aXZpdGllcygpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eVBvcnRzXztcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcGF5Q2xpZW50KCkge1xuICAgIHJldHVybiB0aGlzLnBheUNsaWVudF87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGRpYWxvZ01hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlhbG9nTWFuYWdlcl87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGVudGl0bGVtZW50c01hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXRsZW1lbnRzTWFuYWdlcl87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGNhbGxiYWNrcygpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsYmFja3NfO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdG9yYWdlKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VfO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhbmFseXRpY3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuYW5hbHl0aWNzU2VydmljZV87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGluaXQoKSB7XG4gICAgLy8gSW1wbGVtZW50ZWQgYnkgdGhlIGBSdW50aW1lYCBjbGFzcy5cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY29uZmlndXJlKGNvbmZpZykge1xuICAgIC8vIEluZGlyZWN0ZWQgZm9yIGNvbnN0cnVjdG9yIHRlc3RpbmcuXG4gICAgdGhpcy5jb25maWd1cmVfKGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshLi4vYXBpL3N1YnNjcmlwdGlvbnMuQ29uZmlnfSBjb25maWdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbmZpZ3VyZV8oY29uZmlnKSB7XG4gICAgLy8gVmFsaWRhdGUgZmlyc3QuXG4gICAgbGV0IGVycm9yID0gJyc7XG4gICAgZm9yIChjb25zdCBrIGluIGNvbmZpZykge1xuICAgICAgY29uc3QgdiA9IGNvbmZpZ1trXTtcbiAgICAgIHN3aXRjaCAoaykge1xuICAgICAgICBjYXNlICd3aW5kb3dPcGVuTW9kZSc6XG4gICAgICAgICAgaWYgKHYgIT0gV2luZG93T3Blbk1vZGUuQVVUTyAmJiB2ICE9IFdpbmRvd09wZW5Nb2RlLlJFRElSRUNUKSB7XG4gICAgICAgICAgICBlcnJvciA9ICdVbmtub3duIHdpbmRvd09wZW5Nb2RlOiAnICsgdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2V4cGVyaW1lbnRzJzpcbiAgICAgICAgICB2LmZvckVhY2goZXhwZXJpbWVudCA9PiBzZXRFeHBlcmltZW50KHRoaXMud2luXywgZXhwZXJpbWVudCwgdHJ1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhbmFseXRpY3NNb2RlJzpcbiAgICAgICAgICBpZiAodiAhPSBBbmFseXRpY3NNb2RlLkRFRkFVTFQgJiYgdiAhPSBBbmFseXRpY3NNb2RlLklNUFJFU1NJT05TKSB7XG4gICAgICAgICAgICBlcnJvciA9ICdVbmtub3duIGFuYWx5dGljcyBtb2RlOiAnICsgdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2VuYWJsZVN3Z0FuYWx5dGljcyc6XG4gICAgICAgICAgaWYgKCFpc0Jvb2xlYW4odikpIHtcbiAgICAgICAgICAgIGVycm9yID0gJ1Vua25vd24gZW5hYmxlU3dnQW5hbHl0aWNzIHZhbHVlOiAnICsgdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2VuYWJsZVByb3BlbnNpdHknOlxuICAgICAgICAgIGlmICghaXNCb29sZWFuKHYpKSB7XG4gICAgICAgICAgICBlcnJvciA9ICdVbmtub3duIGVuYWJsZVByb3BlbnNpdHkgdmFsdWU6ICcgKyB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBlcnJvciA9ICdVbmtub3duIGNvbmZpZyBwcm9wZXJ0eTogJyArIGs7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRocm93IGVycm9yIHN0cmluZyBpZiBpdCdzIG5vdCBudWxsXG4gICAgYXNzZXJ0KCFlcnJvciwgZXJyb3IgfHwgdW5kZWZpbmVkKTtcbiAgICAvLyBBc3NpZ24uXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbmZpZ18sIGNvbmZpZyk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdfO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLmVudGl0bGVtZW50c01hbmFnZXJfLnJlc2V0KCk7XG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXy5jb21wbGV0ZUFsbCgpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLmVudGl0bGVtZW50c01hbmFnZXJfLmNsZWFyKCk7XG4gICAgdGhpcy5kaWFsb2dNYW5hZ2VyXy5jb21wbGV0ZUFsbCgpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGFydCgpIHtcbiAgICAvLyBObyBuZWVkIHRvIHJ1biBlbnRpdGxlbWVudHMgd2l0aG91dCBhIHByb2R1Y3Qgb3IgZm9yIGFuIHVubG9ja2VkIHBhZ2UuXG4gICAgaWYgKCF0aGlzLnBhZ2VDb25maWdfLmdldFByb2R1Y3RJZCgpIHx8ICF0aGlzLnBhZ2VDb25maWdfLmlzTG9ja2VkKCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgdGhpcy5nZXRFbnRpdGxlbWVudHMoKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0RW50aXRsZW1lbnRzKGVuY3J5cHRlZERvY3VtZW50S2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXRsZW1lbnRzTWFuYWdlcl9cbiAgICAgIC5nZXRFbnRpdGxlbWVudHMoZW5jcnlwdGVkRG9jdW1lbnRLZXkpXG4gICAgICAudGhlbihlbnRpdGxlbWVudHMgPT4ge1xuICAgICAgICAvLyBBdXRvIHVwZGF0ZSBpbnRlcm5hbCB0aGluZ3MgdHJhY2tpbmcgdGhlIHVzZXIncyBjdXJyZW50IFNLVS5cbiAgICAgICAgaWYgKGVudGl0bGVtZW50cykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBza3VzID0gZW50aXRsZW1lbnRzLmVudGl0bGVtZW50cy5tYXAoXG4gICAgICAgICAgICAgIGVudGl0bGVtZW50ID0+IGVudGl0bGVtZW50LmdldFNrdSgpIHx8ICd1bmtub3duIHN1YnNjcmlwdGlvblRva2VuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChza3VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlXy5zZXRTa3Uoc2t1cy5qb2luKCcsJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRpdGxlbWVudHMuY2xvbmUoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZXRPbkVudGl0bGVtZW50c1Jlc3BvbnNlKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jYWxsYmFja3NfLnNldE9uRW50aXRsZW1lbnRzUmVzcG9uc2UoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRPZmZlcnMob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm9mZmVyc0FwaV8uZ2V0T2ZmZXJzKG9wdGlvbnMgJiYgb3B0aW9ucy5wcm9kdWN0SWQpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93T2ZmZXJzKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAnVGhlIHNob3dPZmZlcnMoKSBtZXRob2QgY2Fubm90IGJlIHVzZWQgdG8gdXBkYXRlIGEgc3Vic2NyaXB0aW9uLiAnICtcbiAgICAgICAgJ1VzZSB0aGUgc2hvd1VwZGF0ZU9mZmVycygpIG1ldGhvZCBpbnN0ZWFkLic7XG4gICAgICBhc3NlcnQob3B0aW9ucyA/ICFvcHRpb25zWydvbGRTa3UnXSA6IHRydWUsIGVycm9yTWVzc2FnZSk7XG4gICAgICBjb25zdCBmbG93ID0gbmV3IE9mZmVyc0Zsb3codGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gZmxvdy5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93VXBkYXRlT2ZmZXJzKG9wdGlvbnMpIHtcbiAgICBhc3NlcnQoXG4gICAgICBpc0V4cGVyaW1lbnRPbih0aGlzLndpbl8sIEV4cGVyaW1lbnRGbGFncy5SRVBMQUNFX1NVQlNDUklQVElPTiksXG4gICAgICAnTm90IHlldCBsYXVuY2hlZCEnXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAnVGhlIHNob3dVcGRhdGVPZmZlcnMoKSBtZXRob2QgY2Fubm90IGJlIHVzZWQgZm9yIG5ldyBzdWJzY3JpYmVycy4gJyArXG4gICAgICAgICdVc2UgdGhlIHNob3dPZmZlcnMoKSBtZXRob2QgaW5zdGVhZC4nO1xuICAgICAgYXNzZXJ0KG9wdGlvbnMgPyAhIW9wdGlvbnNbJ29sZFNrdSddIDogZmFsc2UsIGVycm9yTWVzc2FnZSk7XG4gICAgICBjb25zdCBmbG93ID0gbmV3IE9mZmVyc0Zsb3codGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gZmxvdy5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93U3Vic2NyaWJlT3B0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBmbG93ID0gbmV3IFN1YnNjcmliZU9wdGlvbkZsb3codGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gZmxvdy5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93QWJicnZPZmZlcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRQYXJzZWRfLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgZmxvdyA9IG5ldyBBYmJydk9mZmVyRmxvdyh0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBmbG93LnN0YXJ0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNob3dDb250cmlidXRpb25PcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBmbG93ID0gbmV3IENvbnRyaWJ1dGlvbnNGbG93KHRoaXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGZsb3cuc3RhcnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgd2FpdEZvclN1YnNjcmlwdGlvbkxvb2t1cChhY2NvdW50UHJvbWlzZSkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50UGFyc2VkXy50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IHdhaXQgPSBuZXcgV2FpdEZvclN1YnNjcmlwdGlvbkxvb2t1cEFwaSh0aGlzLCBhY2NvdW50UHJvbWlzZSk7XG4gICAgICByZXR1cm4gd2FpdC5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZXRPbkxvZ2luUmVxdWVzdChjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2tzXy5zZXRPbkxvZ2luUmVxdWVzdChjYWxsYmFjayk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNldE9uTGlua0NvbXBsZXRlKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jYWxsYmFja3NfLnNldE9uTGlua0NvbXBsZXRlKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbGlua0FjY291bnQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IExpbmtiYWNrRmxvdyh0aGlzKS5zdGFydChwYXJhbXMpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzYXZlU3Vic2NyaXB0aW9uKHNhdmVTdWJzY3JpcHRpb25SZXF1ZXN0Q2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IExpbmtTYXZlRmxvdyh0aGlzLCBzYXZlU3Vic2NyaXB0aW9uUmVxdWVzdENhbGxiYWNrKS5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93TG9naW5Qcm9tcHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRQYXJzZWRfLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMb2dpblByb21wdEFwaSh0aGlzKS5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzaG93TG9naW5Ob3RpZmljYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRQYXJzZWRfLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMb2dpbk5vdGlmaWNhdGlvbkFwaSh0aGlzKS5zdGFydCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZXRPbk5hdGl2ZVN1YnNjcmliZVJlcXVlc3QoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNhbGxiYWNrc18uc2V0T25TdWJzY3JpYmVSZXF1ZXN0KGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25TdWJzY3JpYmVSZXNwb25zZShjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2tzXy5zZXRPblN1YnNjcmliZVJlc3BvbnNlKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25QYXltZW50UmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNhbGxiYWNrc18uc2V0T25QYXltZW50UmVzcG9uc2UoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdWJzY3JpYmUoc2t1KSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICdUaGUgc3Vic2NyaWJlKCkgbWV0aG9kIGNhbiBvbmx5IHRha2UgYSBza3UgYXMgaXRzIHBhcmFtZXRlcjsgJyArXG4gICAgICAnZm9yIHN1YnNjcmlwdGlvbiB1cGRhdGVzIHBsZWFzZSB1c2UgdGhlIHVwZGF0ZVN1YnNjcmlwdGlvbigpIG1ldGhvZCc7XG4gICAgYXNzZXJ0KHR5cGVvZiBza3UgPT09ICdzdHJpbmcnLCBlcnJvck1lc3NhZ2UpO1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50UGFyc2VkXy50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUGF5U3RhcnRGbG93KHRoaXMsIHNrdSkuc3RhcnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdXBkYXRlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblJlcXVlc3QpIHtcbiAgICBhc3NlcnQoXG4gICAgICBpc0V4cGVyaW1lbnRPbih0aGlzLndpbl8sIEV4cGVyaW1lbnRGbGFncy5SRVBMQUNFX1NVQlNDUklQVElPTiksXG4gICAgICAnTm90IHlldCBsYXVuY2hlZCEnXG4gICAgKTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgJ1RoZSB1cGRhdGVTdWJzY3JpcHRpb24oKSBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgZm9yIHN1YnNjcmlwdGlvbiAnICtcbiAgICAgICd1cGRhdGVzOyBmb3IgbmV3IHN1YnNjcmlwdGlvbnMgcGxlYXNlIHVzZSB0aGUgc3Vic2NyaWJlKCkgbWV0aG9kJztcbiAgICBhc3NlcnQoXG4gICAgICBzdWJzY3JpcHRpb25SZXF1ZXN0ID8gc3Vic2NyaXB0aW9uUmVxdWVzdFsnb2xkU2t1J10gOiBmYWxzZSxcbiAgICAgIGVycm9yTWVzc2FnZVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRQYXJzZWRfLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQYXlTdGFydEZsb3codGhpcywgc3Vic2NyaXB0aW9uUmVxdWVzdCkuc3RhcnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25Db250cmlidXRpb25SZXNwb25zZShjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2tzXy5zZXRPbkNvbnRyaWJ1dGlvblJlc3BvbnNlKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY29udHJpYnV0ZShza3VPclN1YnNjcmlwdGlvblJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFBhcnNlZF8udGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFBheVN0YXJ0RmxvdyhcbiAgICAgICAgdGhpcyxcbiAgICAgICAgc2t1T3JTdWJzY3JpcHRpb25SZXF1ZXN0LFxuICAgICAgICBQcm9kdWN0VHlwZS5VSV9DT05UUklCVVRJT05cbiAgICAgICkuc3RhcnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY29tcGxldGVEZWZlcnJlZEFjY291bnRDcmVhdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRQYXJzZWRfLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBEZWZlcnJlZEFjY291bnRGbG93KHRoaXMsIG9wdGlvbnMgfHwgbnVsbCkuc3RhcnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25GbG93U3RhcnRlZChjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2tzXy5zZXRPbkZsb3dTdGFydGVkKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2V0T25GbG93Q2FuY2VsZWQoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNhbGxiYWNrc18uc2V0T25GbG93Q2FuY2VsZWQoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjcmVhdGVCdXR0b24ob3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBpcyBhIG1pbm9yIGR1cGxpY2F0aW9uIHRvIGFsbG93IHRoaXMgY29kZSB0byBiZSBzeW5jLlxuICAgIHJldHVybiB0aGlzLmJ1dHRvbkFwaV8uY3JlYXRlKG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGF0dGFjaEJ1dHRvbihidXR0b24sIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgaXMgYSBtaW5vciBkdXBsaWNhdGlvbiB0byBhbGxvdyB0aGlzIGNvZGUgdG8gYmUgc3luYy5cbiAgICB0aGlzLmJ1dHRvbkFwaV8uYXR0YWNoKGJ1dHRvbiwgb3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXR0YWNoU21hcnRCdXR0b24oYnV0dG9uLCBvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgICBhc3NlcnQoXG4gICAgICBpc0V4cGVyaW1lbnRPbih0aGlzLndpbl8sIEV4cGVyaW1lbnRGbGFncy5TTUFSVEJPWCksXG4gICAgICAnTm90IHlldCBsYXVuY2hlZCEnXG4gICAgKTtcbiAgICB0aGlzLmJ1dHRvbkFwaV8uYXR0YWNoU21hcnRCdXR0b24oXG4gICAgICB0aGlzLFxuICAgICAgYnV0dG9uLFxuICAgICAgb3B0aW9uc09yQ2FsbGJhY2ssXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFByb3BlbnNpdHlNb2R1bGUoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnByb3BlbnNpdHlNb2R1bGVfKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7IUNsaWVudEV2ZW50TWFuYWdlcn1cbiAgICovXG4gIGV2ZW50TWFuYWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudE1hbmFnZXJfO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRMb2dnZXIoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmxvZ2dlcl8pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHshUnVudGltZX0gcnVudGltZVxuICogQHJldHVybiB7IVN1YnNjcmlwdGlvbnN9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVB1YmxpY1J1bnRpbWUocnVudGltZSkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshU3Vic2NyaXB0aW9uc30gKi8gKHtcbiAgICBpbml0OiBydW50aW1lLmluaXQuYmluZChydW50aW1lKSxcbiAgICBjb25maWd1cmU6IHJ1bnRpbWUuY29uZmlndXJlLmJpbmQocnVudGltZSksXG4gICAgc3RhcnQ6IHJ1bnRpbWUuc3RhcnQuYmluZChydW50aW1lKSxcbiAgICByZXNldDogcnVudGltZS5yZXNldC5iaW5kKHJ1bnRpbWUpLFxuICAgIGNsZWFyOiBydW50aW1lLmNsZWFyLmJpbmQocnVudGltZSksXG4gICAgZ2V0RW50aXRsZW1lbnRzOiBydW50aW1lLmdldEVudGl0bGVtZW50cy5iaW5kKHJ1bnRpbWUpLFxuICAgIGxpbmtBY2NvdW50OiBydW50aW1lLmxpbmtBY2NvdW50LmJpbmQocnVudGltZSksXG4gICAgc2hvd0xvZ2luUHJvbXB0OiBydW50aW1lLnNob3dMb2dpblByb21wdC5iaW5kKHJ1bnRpbWUpLFxuICAgIHNob3dMb2dpbk5vdGlmaWNhdGlvbjogcnVudGltZS5zaG93TG9naW5Ob3RpZmljYXRpb24uYmluZChydW50aW1lKSxcbiAgICBnZXRPZmZlcnM6IHJ1bnRpbWUuZ2V0T2ZmZXJzLmJpbmQocnVudGltZSksXG4gICAgc2hvd09mZmVyczogcnVudGltZS5zaG93T2ZmZXJzLmJpbmQocnVudGltZSksXG4gICAgc2hvd1VwZGF0ZU9mZmVyczogcnVudGltZS5zaG93VXBkYXRlT2ZmZXJzLmJpbmQocnVudGltZSksXG4gICAgc2hvd0FiYnJ2T2ZmZXI6IHJ1bnRpbWUuc2hvd0FiYnJ2T2ZmZXIuYmluZChydW50aW1lKSxcbiAgICBzaG93U3Vic2NyaWJlT3B0aW9uOiBydW50aW1lLnNob3dTdWJzY3JpYmVPcHRpb24uYmluZChydW50aW1lKSxcbiAgICBzaG93Q29udHJpYnV0aW9uT3B0aW9uczogcnVudGltZS5zaG93Q29udHJpYnV0aW9uT3B0aW9ucy5iaW5kKHJ1bnRpbWUpLFxuICAgIHdhaXRGb3JTdWJzY3JpcHRpb25Mb29rdXA6IHJ1bnRpbWUud2FpdEZvclN1YnNjcmlwdGlvbkxvb2t1cC5iaW5kKHJ1bnRpbWUpLFxuICAgIHN1YnNjcmliZTogcnVudGltZS5zdWJzY3JpYmUuYmluZChydW50aW1lKSxcbiAgICB1cGRhdGVTdWJzY3JpcHRpb246IHJ1bnRpbWUudXBkYXRlU3Vic2NyaXB0aW9uLmJpbmQocnVudGltZSksXG4gICAgY29udHJpYnV0ZTogcnVudGltZS5jb250cmlidXRlLmJpbmQocnVudGltZSksXG4gICAgY29tcGxldGVEZWZlcnJlZEFjY291bnRDcmVhdGlvbjogcnVudGltZS5jb21wbGV0ZURlZmVycmVkQWNjb3VudENyZWF0aW9uLmJpbmQoXG4gICAgICBydW50aW1lXG4gICAgKSxcbiAgICBzZXRPbkVudGl0bGVtZW50c1Jlc3BvbnNlOiBydW50aW1lLnNldE9uRW50aXRsZW1lbnRzUmVzcG9uc2UuYmluZChydW50aW1lKSxcbiAgICBzZXRPbkxvZ2luUmVxdWVzdDogcnVudGltZS5zZXRPbkxvZ2luUmVxdWVzdC5iaW5kKHJ1bnRpbWUpLFxuICAgIHNldE9uTGlua0NvbXBsZXRlOiBydW50aW1lLnNldE9uTGlua0NvbXBsZXRlLmJpbmQocnVudGltZSksXG4gICAgc2V0T25OYXRpdmVTdWJzY3JpYmVSZXF1ZXN0OiBydW50aW1lLnNldE9uTmF0aXZlU3Vic2NyaWJlUmVxdWVzdC5iaW5kKFxuICAgICAgcnVudGltZVxuICAgICksXG4gICAgc2V0T25QYXltZW50UmVzcG9uc2U6IHJ1bnRpbWUuc2V0T25QYXltZW50UmVzcG9uc2UuYmluZChydW50aW1lKSxcbiAgICBzZXRPblN1YnNjcmliZVJlc3BvbnNlOiBydW50aW1lLnNldE9uU3Vic2NyaWJlUmVzcG9uc2UuYmluZChydW50aW1lKSxcbiAgICBzZXRPbkNvbnRyaWJ1dGlvblJlc3BvbnNlOiBydW50aW1lLnNldE9uQ29udHJpYnV0aW9uUmVzcG9uc2UuYmluZChydW50aW1lKSxcbiAgICBzZXRPbkZsb3dTdGFydGVkOiBydW50aW1lLnNldE9uRmxvd1N0YXJ0ZWQuYmluZChydW50aW1lKSxcbiAgICBzZXRPbkZsb3dDYW5jZWxlZDogcnVudGltZS5zZXRPbkZsb3dDYW5jZWxlZC5iaW5kKHJ1bnRpbWUpLFxuICAgIHNhdmVTdWJzY3JpcHRpb246IHJ1bnRpbWUuc2F2ZVN1YnNjcmlwdGlvbi5iaW5kKHJ1bnRpbWUpLFxuICAgIGNyZWF0ZUJ1dHRvbjogcnVudGltZS5jcmVhdGVCdXR0b24uYmluZChydW50aW1lKSxcbiAgICBhdHRhY2hCdXR0b246IHJ1bnRpbWUuYXR0YWNoQnV0dG9uLmJpbmQocnVudGltZSksXG4gICAgYXR0YWNoU21hcnRCdXR0b246IHJ1bnRpbWUuYXR0YWNoU21hcnRCdXR0b24uYmluZChydW50aW1lKSxcbiAgICBnZXRQcm9wZW5zaXR5TW9kdWxlOiBydW50aW1lLmdldFByb3BlbnNpdHlNb2R1bGUuYmluZChydW50aW1lKSxcbiAgICBnZXRMb2dnZXI6IHJ1bnRpbWUuZ2V0TG9nZ2VyLmJpbmQocnVudGltZSksXG4gIH0pO1xufVxuXG4vKipcbiAqIEByZXR1cm4geyFGdW5jdGlvbn1cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbnNDbGFzc0ZvclRlc3RpbmcoKSB7XG4gIHJldHVybiBTdWJzY3JpcHRpb25zO1xufVxuXG4vKipcbiAqIEByZXR1cm4geyFGdW5jdGlvbn1cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZldGNoZXJDbGFzc0ZvclRlc3RpbmcoKSB7XG4gIHJldHVybiBGZXRjaGVyO1xufVxuXG4vKiogQHBhY2thZ2UgVmlzaWJsZSBmb3IgdGVzdGluZyBvbmx5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERvY0NsYXNzRm9yVGVzdGluZygpIHtcbiAgcmV0dXJuIERvYztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHthZGRRdWVyeVBhcmFtLCBwYXJzZVF1ZXJ5U3RyaW5nLCBwYXJzZVVybH0gZnJvbSAnLi4vdXRpbHMvdXJsJztcblxuLyoqXG4gKiBIYXZlIHRvIHB1dCB0aGVzZSBpbiB0aGUgbWFwIHRvIGF2b2lkIGNvbXBpbGVyIG9wdGltaXphdGlvbi4gRHVlIHRvXG4gKiBvcHRpbWl6YXRpb24gaXNzdWVzLCB0aGlzIG1hcCBvbmx5IGFsbG93cyBwcm9wZXJ0eS1zdHlsZSBrZXlzLiBFLmcuIFwiaHIxXCIsXG4gKiBhcyBvcHBvc2VkIHRvIFwiMWhyXCIuXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIG51bWJlcj59XG4gKiBAcGFja2FnZSBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkuXG4gKi9cbmV4cG9ydCBjb25zdCBDQUNIRV9LRVlTID0ge1xuICAnbm9jYWNoZSc6IDEsXG4gICdocjEnOiAzNjAwMDAwLCAvLyAxaHIgPSAxMDAwICogNjAgKiA2MFxuICAnaHIxMic6IDQzMjAwMDAwLCAvLyAxMmhyID0gMTAwMCAqIDYwICogNjAgKiAxMlxufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmZU9yaWdpbigpIHtcbiAgcmV0dXJuIHBhcnNlVXJsKCckZnJvbnRlbmQkJykub3JpZ2luO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgVVJMLCBlLmcuIFwiL3NlcnZpY2UxXCIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wbGV0ZSBVUkwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJ2aWNlVXJsKHVybCkge1xuICByZXR1cm4gJyRmcm9udGVuZCQvc3dnL18vYXBpL3YxJyArIHVybDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsICBSZWxhdGl2ZSBVUkwsIGUuZy4gXCIvc2VydmljZTFcIi5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXBsZXRlIFVSTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkc1VybCh1cmwpIHtcbiAgcmV0dXJuICckYWRzU2VydmVyJCcgKyB1cmw7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBVUkwsIGUuZy4gXCIvb2ZmZXJzaWZyYW1lXCIuXG4gKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeFxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcGxldGUgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmVVcmwodXJsLCBwcmVmaXggPSAnJykge1xuICAvLyBBZGQgY2FjaGUgcGFyYW0uXG4gIHVybCA9IGZlQ2FjaGVkKCckZnJvbnRlbmQkJyArIHByZWZpeCArICcvc3dnL18vdWkvdjEnICsgdXJsKTtcblxuICAvLyBPcHRpb25hbGx5IGFkZCBqc21vZGUgcGFyYW0uIFRoaXMgYWxsb3dzIHVzIHRvIHRlc3QgYWdhaW5zdCBcImFnZ3Jlc3NpdmVseVwiIGNvbXBpbGVkIEJvcSBKUy5cbiAgY29uc3QgcXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKHNlbGYubG9jYXRpb24uaGFzaCk7XG4gIGNvbnN0IGJvcUpzTW9kZSA9IHF1ZXJ5Wydzd2cuYm9xanNtb2RlJ107XG4gIGlmIChib3FKc01vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHVybCA9IGFkZFF1ZXJ5UGFyYW0odXJsLCAnanNtb2RlJywgYm9xSnNNb2RlKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBGRSBVUkwuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wbGV0ZSBVUkwgaW5jbHVkaW5nIGNhY2hlIHBhcmFtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmVDYWNoZWQodXJsKSB7XG4gIHJldHVybiBhZGRRdWVyeVBhcmFtKHVybCwgJ18nLCBjYWNoZVBhcmFtKCckZnJvbnRlbmRDYWNoZSQnKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgPz59IGFyZ3NcbiAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCA/Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZlQXJncyhhcmdzKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGFyZ3MsIHtcbiAgICAnX2NsaWVudCc6ICdTd0cgJGludGVybmFsUnVudGltZVZlcnNpb24kJyxcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlS2V5XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcGFja2FnZSBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWNoZVBhcmFtKGNhY2hlS2V5KSB7XG4gIGxldCBwZXJpb2QgPSBDQUNIRV9LRVlTW2NhY2hlS2V5XTtcbiAgaWYgKHBlcmlvZCA9PSBudWxsKSB7XG4gICAgcGVyaW9kID0gMTtcbiAgfVxuICBpZiAocGVyaW9kID09PSAwKSB7XG4gICAgcmV0dXJuICdfJztcbiAgfVxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICByZXR1cm4gU3RyaW5nKHBlcmlvZCA8PSAxID8gbm93IDogTWF0aC5mbG9vcihub3cgLyBwZXJpb2QpKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtTbWFydEJveE1lc3NhZ2V9IGZyb20gJy4uL3Byb3RvL2FwaV9tZXNzYWdlcyc7XG5pbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gJy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQge2ZlQXJncywgZmVVcmx9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHtzZXRJbXBvcnRhbnRTdHlsZXN9IGZyb20gJy4uL3V0aWxzL3N0eWxlJztcblxuLyoqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59ICovXG5jb25zdCBpZnJhbWVBdHRyaWJ1dGVzID0ge1xuICAnZnJhbWVib3JkZXInOiAnMCcsXG4gICdzY3JvbGxpbmcnOiAnbm8nLFxufTtcblxuLyoqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgVGhlbWUgPSB7XG4gIExJR0hUOiAnbGlnaHQnLFxuICBEQVJLOiAnZGFyaycsXG59O1xuXG4vKipcbiAqIFRoZSBjbGFzcyBmb3IgU21hcnQgYnV0dG9uIEFwaS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNtYXJ0U3Vic2NyaXB0aW9uQnV0dG9uQXBpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vZGVwcy5EZXBzRGVmfSBkZXBzXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IGJ1dHRvblxuICAgKiBAcGFyYW0geyEuLi9hcGkvc3Vic2NyaXB0aW9ucy5TbWFydEJ1dHRvbk9wdGlvbnN9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gY2FsbGJhY2tcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlcHMsIGJ1dHRvbiwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9kZXBzLkRlcHNEZWZ9ICovXG4gICAgdGhpcy5kZXBzXyA9IGRlcHM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IGRlcHMud2luKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRG9jdW1lbnR9ICovXG4gICAgdGhpcy5kb2NfID0gdGhpcy53aW5fLmRvY3VtZW50O1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvYWN0aXZpdGllcy5BY3Rpdml0eVBvcnRzfSAqL1xuICAgIHRoaXMuYWN0aXZpdHlQb3J0c18gPSBkZXBzLmFjdGl2aXRpZXMoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSAvKiogQHR5cGUgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi8gKGNyZWF0ZUVsZW1lbnQoXG4gICAgICB0aGlzLmRvY18sXG4gICAgICAnaWZyYW1lJyxcbiAgICAgIGlmcmFtZUF0dHJpYnV0ZXNcbiAgICApKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFFbGVtZW50fSAqL1xuICAgIHRoaXMuYnV0dG9uXyA9IGJ1dHRvbjtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IS4uL2FwaS9zdWJzY3JpcHRpb25zLlNtYXJ0QnV0dG9uT3B0aW9uc30gKi9cbiAgICB0aGlzLm9wdGlvbnNfID0gb3B0aW9ucztcblxuICAgIC8qKiBAcHJpdmF0ZSBjb25zdCB7ZnVuY3Rpb24oKT19ICovXG4gICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjaztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnNyY18gPSBmZVVybCgnL3NtYXJ0Ym94aWZyYW1lJyk7XG5cbiAgICBjb25zdCBmcm9udGVuZEFyZ3VtZW50cyA9IHtcbiAgICAgICdwcm9kdWN0SWQnOiB0aGlzLmRlcHNfLnBhZ2VDb25maWcoKS5nZXRQcm9kdWN0SWQoKSxcbiAgICAgICdwdWJsaWNhdGlvbklkJzogdGhpcy5kZXBzXy5wYWdlQ29uZmlnKCkuZ2V0UHVibGljYXRpb25JZCgpLFxuICAgICAgJ3RoZW1lJzogKHRoaXMub3B0aW9uc18gJiYgdGhpcy5vcHRpb25zXy50aGVtZSkgfHwgJ2xpZ2h0JyxcbiAgICAgICdsYW5nJzogKHRoaXMub3B0aW9uc18gJiYgdGhpcy5vcHRpb25zXy5sYW5nKSB8fCAnZW4nLFxuICAgIH07XG4gICAgY29uc3QgbWVzc2FnZVRleHRDb2xvciA9IHRoaXMub3B0aW9uc18gJiYgdGhpcy5vcHRpb25zXy5tZXNzYWdlVGV4dENvbG9yO1xuICAgIGlmIChtZXNzYWdlVGV4dENvbG9yKSB7XG4gICAgICBmcm9udGVuZEFyZ3VtZW50c1snbWVzc2FnZVRleHRDb2xvciddID0gbWVzc2FnZVRleHRDb2xvcjtcbiAgICB9XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0fSAqL1xuICAgIHRoaXMuYXJnc18gPSBmZUFyZ3MoZnJvbnRlbmRBcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U21hcnRCb3hNZXNzYWdlfSBzbWFydEJveE1lc3NhZ2VcbiAgICovXG4gIGhhbmRsZVNtYXJ0Qm94Q2xpY2tfKHNtYXJ0Qm94TWVzc2FnZSkge1xuICAgIGlmIChzbWFydEJveE1lc3NhZ2UgJiYgc21hcnRCb3hNZXNzYWdlLmdldElzQ2xpY2tlZCgpKSB7XG4gICAgICBpZiAoIXRoaXMuY2FsbGJhY2tfKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FsbGJhY2shJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhbGxiYWNrXygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGEgY2FsbCB0byBidWlsZCBidXR0b24gY29udGVudCBhbmQgbGlzdGVucyBmb3IgdGhlICdjbGljaycgbWVzc2FnZS5cbiAgICogQHJldHVybiB7IUVsZW1lbnR9XG4gICAqL1xuICBzdGFydCgpIHtcbiAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5pZnJhbWVfLCB7XG4gICAgICAnb3BhY2l0eSc6IDEsXG4gICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAgICAgJ3RvcCc6IDAsXG4gICAgICAnYm90dG9tJzogMCxcbiAgICAgICdsZWZ0JzogMCxcbiAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAncmlnaHQnOiAwLFxuICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgIH0pO1xuICAgIHRoaXMuYnV0dG9uXy5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZV8pO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmFjdGl2aXR5UG9ydHNfLmFkZERlZmF1bHRBcmd1bWVudHModGhpcy5hcmdzXyk7XG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXy5vcGVuSWZyYW1lKHRoaXMuaWZyYW1lXywgdGhpcy5zcmNfLCBhcmdzKS50aGVuKHBvcnQgPT4ge1xuICAgICAgcG9ydC5vbihTbWFydEJveE1lc3NhZ2UsIHRoaXMuaGFuZGxlU21hcnRCb3hDbGlja18uYmluZCh0aGlzKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaWZyYW1lXztcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jb25zdCBQUkVGSVggPSAnc3Vic2NyaWJlLmdvb2dsZS5jb20nO1xuXG5leHBvcnQgY2xhc3MgU3RvcmFnZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKi9cbiAgY29uc3RydWN0b3Iod2luKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgIVByb21pc2U8P3N0cmluZz4+fSAqL1xuICAgIHRoaXMudmFsdWVzXyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybiB7IVByb21pc2U8P3N0cmluZz59XG4gICAqL1xuICBnZXQoa2V5KSB7XG4gICAgaWYgKCF0aGlzLnZhbHVlc19ba2V5XSkge1xuICAgICAgdGhpcy52YWx1ZXNfW2tleV0gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgaWYgKHRoaXMud2luXy5zZXNzaW9uU3RvcmFnZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMud2luXy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkoa2V5KSkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvci5cbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWx1ZXNfW2tleV07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMudmFsdWVzX1trZXldID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBpZiAodGhpcy53aW5fLnNlc3Npb25TdG9yYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy53aW5fLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleShrZXkpLCB2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgZXJyb3IuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgcmVtb3ZlKGtleSkge1xuICAgIGRlbGV0ZSB0aGlzLnZhbHVlc19ba2V5XTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBpZiAodGhpcy53aW5fLnNlc3Npb25TdG9yYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy53aW5fLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oc3RvcmFnZUtleShrZXkpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIElnbm9yZSBlcnJvci5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBzdG9yYWdlS2V5KGtleSkge1xuICByZXR1cm4gUFJFRklYICsgJzonICsga2V5O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0FjdGl2aXR5SWZyYW1lVmlld30gZnJvbSAnLi4vdWkvYWN0aXZpdHktaWZyYW1lLXZpZXcnO1xuaW1wb3J0IHtEZWZlcnJlZEFjY291bnRDcmVhdGlvblJlc3BvbnNlfSBmcm9tICcuLi9hcGkvZGVmZXJyZWQtYWNjb3VudC1jcmVhdGlvbic7XG5pbXBvcnQge2ZlQXJncywgZmVVcmx9IGZyb20gJy4vc2VydmljZXMnO1xuXG5jb25zdCBOT19QUk9NSVNFX0VSUiA9ICdObyBhY2NvdW50IHByb21pc2UgcHJvdmlkZWQnO1xuXG5leHBvcnQgY2xhc3MgV2FpdEZvclN1YnNjcmlwdGlvbkxvb2t1cEFwaSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2RlcHMuRGVwc0RlZn0gZGVwc1xuICAgKiBAcGFyYW0gez9Qcm9taXNlfSBhY2NvdW50UHJvbWlzZVxuICAgKi9cbiAgY29uc3RydWN0b3IoZGVwcywgYWNjb3VudFByb21pc2UpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi9kZXBzLkRlcHNEZWZ9ICovXG4gICAgdGhpcy5kZXBzXyA9IGRlcHM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IGRlcHMud2luKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vY29tcG9uZW50cy9hY3Rpdml0aWVzLkFjdGl2aXR5UG9ydHN9ICovXG4gICAgdGhpcy5hY3Rpdml0eVBvcnRzXyA9IGRlcHMuYWN0aXZpdGllcygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL2NvbXBvbmVudHMvZGlhbG9nLW1hbmFnZXIuRGlhbG9nTWFuYWdlcn0gKi9cbiAgICB0aGlzLmRpYWxvZ01hbmFnZXJfID0gZGVwcy5kaWFsb2dNYW5hZ2VyKCk7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlfSAqL1xuICAgIHRoaXMub3BlblZpZXdQcm9taXNlXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgeyFQcm9taXNlfSAqL1xuICAgIHRoaXMuYWNjb3VudFByb21pc2VfID0gYWNjb3VudFByb21pc2UgfHwgUHJvbWlzZS5yZWplY3QoTk9fUFJPTUlTRV9FUlIpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUFjdGl2aXR5SWZyYW1lVmlld30gKi9cbiAgICB0aGlzLmFjdGl2aXR5SWZyYW1lVmlld18gPSBuZXcgQWN0aXZpdHlJZnJhbWVWaWV3KFxuICAgICAgdGhpcy53aW5fLFxuICAgICAgdGhpcy5hY3Rpdml0eVBvcnRzXyxcbiAgICAgIGZlVXJsKCcvd2FpdGZvcnN1YnNjcmlwdGlvbmxvb2t1cGlmcmFtZScpLFxuICAgICAgZmVBcmdzKHtcbiAgICAgICAgcHVibGljYXRpb25JZDogZGVwcy5wYWdlQ29uZmlnKCkuZ2V0UHVibGljYXRpb25JZCgpLFxuICAgICAgICBwcm9kdWN0SWQ6IGRlcHMucGFnZUNvbmZpZygpLmdldFByb2R1Y3RJZCgpLFxuICAgICAgfSksXG4gICAgICAvKiBzaG91bGRGYWRlQm9keSAqLyB0cnVlLFxuICAgICAgLyogaGFzTG9hZGluZ0luZGljYXRvciAqLyB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIExvZ2luIEZsb3cuXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5vcGVuVmlld1Byb21pc2VfID0gdGhpcy5kaWFsb2dNYW5hZ2VyXy5vcGVuVmlldyhcbiAgICAgIHRoaXMuYWN0aXZpdHlJZnJhbWVWaWV3X1xuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5hY2NvdW50UHJvbWlzZV8udGhlbihcbiAgICAgIGFjY291bnQgPT4ge1xuICAgICAgICAvLyBBY2NvdW50IHdhcyBmb3VuZC5cbiAgICAgICAgdGhpcy5kaWFsb2dNYW5hZ2VyXy5jb21wbGV0ZVZpZXcodGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfKTtcbiAgICAgICAgcmV0dXJuIGFjY291bnQ7XG4gICAgICB9LFxuICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgdGhpcy5kaWFsb2dNYW5hZ2VyXy5jb21wbGV0ZVZpZXcodGhpcy5hY3Rpdml0eUlmcmFtZVZpZXdfKTtcbiAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtNZXNzYWdlfSBmcm9tICcuLi9wcm90by9hcGlfbWVzc2FnZXMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQge1ZpZXd9IGZyb20gJy4uL2NvbXBvbmVudHMvdmlldyc7XG5pbXBvcnQge2FjY2VwdFBvcnRSZXN1bHREYXRhfSBmcm9tICcuLi91dGlscy9hY3Rpdml0eS11dGlscyc7XG5pbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gJy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQge2lzQ2FuY2VsRXJyb3J9IGZyb20gJy4uL3V0aWxzL2Vycm9ycyc7XG5cbi8qKiBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqL1xuY29uc3QgaWZyYW1lQXR0cmlidXRlcyA9IHtcbiAgJ2ZyYW1lYm9yZGVyJzogJzAnLFxuICAnc2Nyb2xsaW5nJzogJ25vJyxcbn07XG5cbi8qKlxuICogQ2xhc3MgdG8gYnVpbGQgYW5kIHJlbmRlciBBY3Rpdml0eSBpZnJhbWUgdmlldy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFjdGl2aXR5SWZyYW1lVmlldyBleHRlbmRzIFZpZXcge1xuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHBhcmFtIHshLi4vY29tcG9uZW50cy9hY3Rpdml0aWVzLkFjdGl2aXR5UG9ydHN9IGFjdGl2aXR5UG9ydHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNyY1xuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCA/Pj19IGFyZ3NcbiAgICogQHBhcmFtIHtib29sZWFuPX0gc2hvdWxkRmFkZUJvZHlcbiAgICogQHBhcmFtIHtib29sZWFuPX0gaGFzTG9hZGluZ0luZGljYXRvclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgd2luLFxuICAgIGFjdGl2aXR5UG9ydHMsXG4gICAgc3JjLFxuICAgIGFyZ3MsXG4gICAgc2hvdWxkRmFkZUJvZHkgPSBmYWxzZSxcbiAgICBoYXNMb2FkaW5nSW5kaWNhdG9yID0gZmFsc2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gd2luO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IURvY3VtZW50fSAqL1xuICAgIHRoaXMuZG9jXyA9IHRoaXMud2luXy5kb2N1bWVudDtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSAvKiogQHR5cGUgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi8gKGNyZWF0ZUVsZW1lbnQoXG4gICAgICB0aGlzLmRvY18sXG4gICAgICAnaWZyYW1lJyxcbiAgICAgIGlmcmFtZUF0dHJpYnV0ZXNcbiAgICApKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gYWN0aXZpdHlQb3J0cztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbiAgICB0aGlzLnNyY18gPSBzcmM7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgPz59ICovXG4gICAgdGhpcy5hcmdzXyA9IGFyZ3MgfHwge307XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMuc2hvdWxkRmFkZUJvZHlfID0gc2hvdWxkRmFkZUJvZHk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMuaGFzTG9hZGluZ0luZGljYXRvcl8gPSBoYXNMb2FkaW5nSW5kaWNhdG9yO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/Li4vY29tcG9uZW50cy9hY3Rpdml0aWVzLkFjdGl2aXR5SWZyYW1lUG9ydH0gKi9cbiAgICB0aGlzLnBvcnRfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogez9mdW5jdGlvbjwhd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMuQWN0aXZpdHlJZnJhbWVQb3J0fCFQcm9taXNlPn1cbiAgICAgKi9cbiAgICB0aGlzLnBvcnRSZXNvbHZlcl8gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGUgQGNvbnN0XG4gICAgICogeyFQcm9taXNlPCF3ZWItYWN0aXZpdGllcy9hY3Rpdml0eS1wb3J0cy5BY3Rpdml0eUlmcmFtZVBvcnQ+fVxuICAgICAqL1xuICAgIHRoaXMucG9ydFByb21pc2VfID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLnBvcnRSZXNvbHZlcl8gPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmlmcmFtZV87XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGluaXQoZGlhbG9nKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZpdHlQb3J0c19cbiAgICAgIC5vcGVuSWZyYW1lKHRoaXMuaWZyYW1lXywgdGhpcy5zcmNfLCB0aGlzLmFyZ3NfKVxuICAgICAgLnRoZW4ocG9ydCA9PiB0aGlzLm9uT3BlbklmcmFtZVJlc3BvbnNlXyhwb3J0LCBkaWFsb2cpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGlmIGRvY3VtZW50IHNob3VsZCBmYWRlIGZvciB0aGlzIHZpZXcuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzaG91bGRGYWRlQm9keSgpIHtcbiAgICByZXR1cm4gdGhpcy5zaG91bGRGYWRlQm9keV87XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpZiB0aGUgdmlldyBzaG93cyBsb2FkaW5nIGluZGljYXRvci5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc0xvYWRpbmdJbmRpY2F0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzTG9hZGluZ0luZGljYXRvcl87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshLi4vY29tcG9uZW50cy9hY3Rpdml0aWVzLkFjdGl2aXR5SWZyYW1lUG9ydH0gcG9ydFxuICAgKiBAcGFyYW0geyEuLi9jb21wb25lbnRzL2RpYWxvZy5EaWFsb2d9IGRpYWxvZ1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIG9uT3BlbklmcmFtZVJlc3BvbnNlXyhwb3J0LCBkaWFsb2cpIHtcbiAgICB0aGlzLnBvcnRfID0gcG9ydDtcbiAgICB0aGlzLnBvcnRSZXNvbHZlcl8ocG9ydCk7XG5cbiAgICB0aGlzLnBvcnRfLm9uUmVzaXplUmVxdWVzdChoZWlnaHQgPT4ge1xuICAgICAgZGlhbG9nLnJlc2l6ZVZpZXcodGhpcywgaGVpZ2h0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLnBvcnRfLndoZW5SZWFkeSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlJZnJhbWVQb3J0Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFBvcnRQcm9taXNlXygpIHtcbiAgICByZXR1cm4gdGhpcy5wb3J0UHJvbWlzZV87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshZnVuY3Rpb24obmV3OiBUKX0gIG1lc3NhZ2VcbiAgICogQHBhcmFtIHtmdW5jdGlvbiguLi9wcm90by9hcGlfbWVzc2FnZXMuTWVzc2FnZSl9IGNhbGxiYWNrXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqL1xuICBvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgIHRoaXMuZ2V0UG9ydFByb21pc2VfKCkudGhlbihwb3J0ID0+IHtcbiAgICAgIHBvcnQub24obWVzc2FnZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4uL3Byb3RvL2FwaV9tZXNzYWdlcy5NZXNzYWdlfSByZXF1ZXN0XG4gICAqL1xuICBleGVjdXRlKHJlcXVlc3QpIHtcbiAgICB0aGlzLmdldFBvcnRQcm9taXNlXygpLnRoZW4ocG9ydCA9PiB7XG4gICAgICBwb3J0LmV4ZWN1dGUocmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWNjZXB0cyByZXN1bHRzIGZyb20gdGhlIGNhbGxlci5cbiAgICogQHJldHVybiB7IVByb21pc2U8IXdlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzLkFjdGl2aXR5UmVzdWx0Pn1cbiAgICovXG4gIGFjY2VwdFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb3J0UHJvbWlzZV8oKS50aGVuKHBvcnQgPT4gcG9ydC5hY2NlcHRSZXN1bHQoKSk7XG4gIH1cblxuICAvKipcbiAgICogQWNjZXB0cyByZXN1bHRzIGZyb20gdGhlIGNhbGxlciBhbmQgdmVyaWZpZXMgb3JpZ2luLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWlyZU9yaWdpblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVPcmlnaW5WZXJpZmllZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVTZWN1cmVDaGFubmVsXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCFPYmplY3Q+fVxuICAgKi9cbiAgYWNjZXB0UmVzdWx0QW5kVmVyaWZ5KFxuICAgIHJlcXVpcmVPcmlnaW4sXG4gICAgcmVxdWlyZU9yaWdpblZlcmlmaWVkLFxuICAgIHJlcXVpcmVTZWN1cmVDaGFubmVsXG4gICkge1xuICAgIHJldHVybiB0aGlzLmdldFBvcnRQcm9taXNlXygpLnRoZW4ocG9ydCA9PiB7XG4gICAgICByZXR1cm4gYWNjZXB0UG9ydFJlc3VsdERhdGEoXG4gICAgICAgIHBvcnQsXG4gICAgICAgIHJlcXVpcmVPcmlnaW4sXG4gICAgICAgIHJlcXVpcmVPcmlnaW5WZXJpZmllZCxcbiAgICAgICAgcmVxdWlyZVNlY3VyZUNoYW5uZWxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGxldGVzIHRoZSBmbG93LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdoZW5Db21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NlcHRSZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrXG4gICAqL1xuICBvbkNhbmNlbChjYWxsYmFjaykge1xuICAgIHRoaXMuYWNjZXB0UmVzdWx0KCkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgIGlmIChpc0NhbmNlbEVycm9yKHJlYXNvbikpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIHRocm93IHJlYXNvbjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcmVzaXplZCgpIHtcbiAgICBpZiAodGhpcy5wb3J0Xykge1xuICAgICAgdGhpcy5wb3J0Xy5yZXNpemVkKCk7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Y3JlYXRlRWxlbWVudH0gZnJvbSAnLi4vdXRpbHMvZG9tJztcblxuLyoqXG4gKiBMb2FkaW5nIGluZGljYXRvciBjbGFzcy4gQnVpbGRzIHRoZSBsb2FkaW5nIGluZGljYXRvciB2aWV3IHRvIGJlIGluamVjdGVkIGluXG4gKiBwYXJlbnQgZWxlbWVudCA8aWZyYW1lIGNsYXNzPVwic3dnLWRpYWxvZ1wiPiBlbGVtZW50LiBQcm92aWRlcyBtZXRob2RzIHRvXG4gKiBzaG93L2hpZGUgbG9hZGluZyBpbmRpY2F0b3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2FkaW5nVmlldyB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRG9jdW1lbnR9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUVsZW1lbnR9ICovXG4gICAgdGhpcy5sb2FkaW5nQ29udGFpbmVyXyA9IGNyZWF0ZUVsZW1lbnQoXG4gICAgICB0aGlzLmRvY18sXG4gICAgICAnc3dnLWxvYWRpbmctY29udGFpbmVyJyxcbiAgICAgIHt9XG4gICAgKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFFbGVtZW50fSAqL1xuICAgIHRoaXMubG9hZGluZ18gPSBjcmVhdGVFbGVtZW50KHRoaXMuZG9jXywgJ3N3Zy1sb2FkaW5nJywge30pO1xuICAgIHRoaXMubG9hZGluZ0NvbnRhaW5lcl8uYXBwZW5kQ2hpbGQodGhpcy5sb2FkaW5nXyk7XG5cbiAgICB0aGlzLmxvYWRpbmdDb250YWluZXJfLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnLCAnaW1wb3J0YW50Jyk7XG5cbiAgICAvLyBCdWlsZCB0aGUgYW5pbWF0ZWQgbG9hZGluZyBpbmRpY2F0b3IuXG4gICAgdGhpcy5idWlsZExvYWRpbmdJbmRpY2F0b3JfKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcG9wdWxhdGVkIGxvYWRpbmcgY29udGFpbmVyLlxuICAgKiBAcmV0dXJuIHshRWxlbWVudH1cbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGluZ0NvbnRhaW5lcl87XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIHdpdGhpbiB0aGUgY29udGFpbmVyIGVsZW1lbnQuXG4gICAqL1xuICBzaG93KCkge1xuICAgIHRoaXMubG9hZGluZ0NvbnRhaW5lcl8uc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2Rpc3BsYXknKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgbG9hZGluZyBpbmRpY2F0b3Igd2l0aGluIHRoZSBjb250YWluZXIgZWxlbWVudC5cbiAgICovXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5sb2FkaW5nQ29udGFpbmVyXy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJywgJ2ltcG9ydGFudCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlcyB0aGUgbG9hZGluZyBpbmRpdmljYXRvci4gVGhlIHBvcHVsYXRlZCBlbGVtZW50XG4gICAqIGNhbiBiZSBhZGRlZCBpbiBhbnkgdmlldywgd2hlbiByZXF1aXJlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJ1aWxkTG9hZGluZ0luZGljYXRvcl8oKSB7XG4gICAgY29uc3QgbG9hZGluZ0NvbnRhaW5lciA9IHRoaXMubG9hZGluZ187XG5cbiAgICBjb25zdCBsb2FkaW5nSW5kaWNhdG9yVG9wQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcbiAgICAgIHRoaXMuZG9jXyxcbiAgICAgICdzd2ctbG9hZGluZy1hbmltYXRlJyxcbiAgICAgIHt9XG4gICAgKTtcbiAgICBsb2FkaW5nQ29udGFpbmVyLmFwcGVuZENoaWxkKGxvYWRpbmdJbmRpY2F0b3JUb3BDb250YWluZXIpO1xuXG4gICAgY29uc3QgbG9hZGluZ0luZGljYXRvckNoaWxkQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcbiAgICAgIHRoaXMuZG9jXyxcbiAgICAgICdzd2ctbG9hZGluZy1pbWFnZScsXG4gICAgICB7fVxuICAgICk7XG4gICAgbG9hZGluZ0luZGljYXRvclRvcENvbnRhaW5lci5hcHBlbmRDaGlsZChsb2FkaW5nSW5kaWNhdG9yQ2hpbGRDb250YWluZXIpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Y3JlYXRlRWxlbWVudH0gZnJvbSAnLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7cmVzZXRTdHlsZXMsIHNldEltcG9ydGFudFN0eWxlc30gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHt0cmFuc2l0aW9ufSBmcm9tICcuLi91dGlscy9hbmltYXRpb24nO1xuXG4vKiogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nfG51bWJlcj59ICovXG5leHBvcnQgY29uc3QgdG9hc3RJbXBvcnRhbnRTdHlsZXMgPSB7XG4gICdoZWlnaHQnOiAwLFxufTtcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiAgICB0ZXh0OiBzdHJpbmcsXG4gKiAgICBhY3Rpb246ICh7bGFiZWw6IHN0cmluZywgaGFuZGxlcjogZnVuY3Rpb24oKX18dW5kZWZpbmVkKVxuICogIH19XG4gKi9cbmV4cG9ydCBsZXQgVG9hc3RTcGVjRGVmO1xuXG4vKiogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbmNvbnN0IGlmcmFtZUF0dHJpYnV0ZXMgPSB7XG4gICdmcmFtZWJvcmRlcic6ICcwJyxcbiAgJ3Njcm9sbGluZyc6ICdubycsXG4gICdjbGFzcyc6ICdzd2ctdG9hc3QnLFxufTtcblxuLyoqXG4gKiBUaGUgY2xhc3MgTm90aWZpY2F0aW9uIHRvYXN0LlxuICovXG5leHBvcnQgY2xhc3MgVG9hc3Qge1xuICAvKipcbiAgICogQHBhcmFtIHshLi4vcnVudGltZS9kZXBzLkRlcHNEZWZ9IGRlcHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNyY1xuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCA/Pn0gYXJnc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGVwcywgc3JjLCBhcmdzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4uL21vZGVsL2RvYy5Eb2N9ICovXG4gICAgdGhpcy5kb2NfID0gZGVwcy5kb2MoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0c30gKi9cbiAgICB0aGlzLmFjdGl2aXR5UG9ydHNfID0gZGVwcy5hY3Rpdml0aWVzKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5zcmNfID0gc3JjO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsID8+fSAqL1xuICAgIHRoaXMuYXJnc18gPSBhcmdzO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/UHJvbWlzZX0gKi9cbiAgICB0aGlzLmFuaW1hdGluZ18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUhUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgIHRoaXMuaWZyYW1lXyA9IC8qKiBAdHlwZSB7IUhUTUxJRnJhbWVFbGVtZW50fSAqLyAoY3JlYXRlRWxlbWVudChcbiAgICAgIHRoaXMuZG9jXy5nZXRXaW4oKS5kb2N1bWVudCxcbiAgICAgICdpZnJhbWUnLFxuICAgICAgaWZyYW1lQXR0cmlidXRlc1xuICAgICkpO1xuXG4gICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuaWZyYW1lXywgdG9hc3RJbXBvcnRhbnRTdHlsZXMpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVByb21pc2V9ICovXG4gICAgdGhpcy5yZWFkeV8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuaWZyYW1lXy5vbmxvYWQgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlmcmFtZSBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHshSFRNTElGcmFtZUVsZW1lbnR9XG4gICAqL1xuICBnZXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmlmcmFtZV87XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG5vdGlmaWNhdGlvbiB0b2FzdC5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBvcGVuKCkge1xuICAgIHRoaXMuZG9jXy5nZXRCb2R5KCkuYXBwZW5kQ2hpbGQodGhpcy5pZnJhbWVfKTsgLy8gRmlyZXMgb25sb2FkLlxuICAgIHJldHVybiB0aGlzLmJ1aWxkVG9hc3RfKCk7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIHRoZSBjb250ZW50IG9mIHRoZSBpZnJhbWUuIE9uIGxvYWQsIGFuaW1hdGVzIHRoZSB0b2FzdC5cbiAgICovXG4gIGJ1aWxkVG9hc3RfKCkge1xuICAgIGNvbnN0IHRvYXN0RHVyYXRpb25TZWNvbmRzID0gNztcbiAgICByZXR1cm4gdGhpcy5hY3Rpdml0eVBvcnRzX1xuICAgICAgLm9wZW5JZnJhbWUodGhpcy5pZnJhbWVfLCB0aGlzLnNyY18sIHRoaXMuYXJnc18pXG4gICAgICAudGhlbihwb3J0ID0+IHtcbiAgICAgICAgcmV0dXJuIHBvcnQud2hlblJlYWR5KCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXNldFN0eWxlcyh0aGlzLmlmcmFtZV8sIFsnaGVpZ2h0J10pO1xuXG4gICAgICAgIHRoaXMuYW5pbWF0ZV8oKCkgPT4ge1xuICAgICAgICAgIHNldEltcG9ydGFudFN0eWxlcyh0aGlzLmlmcmFtZV8sIHtcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgxMDAlKScsXG4gICAgICAgICAgICAnb3BhY3RpeSc6IDEsXG4gICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbihcbiAgICAgICAgICAgIHRoaXMuaWZyYW1lXyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKDApJyxcbiAgICAgICAgICAgICAgJ29wYWNpdHknOiAxLFxuICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICA0MDAsXG4gICAgICAgICAgICAnZWFzZS1vdXQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2xvc2UgdGhlIFRvYXN0IGFmdGVyIHRoZSBzcGVjaWZpZWQgZHVyYXRpb24uXG4gICAgICAgIHRoaXMuZG9jXy5nZXRXaW4oKS5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0sICh0b2FzdER1cmF0aW9uU2Vjb25kcyArIDEpICogMTAwMCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IVByb21pc2V9IGNhbGxiYWNrXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYW5pbWF0ZV8oY2FsbGJhY2spIHtcbiAgICBjb25zdCB3YWl0ID0gdGhpcy5hbmltYXRpbmdfIHx8IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHJldHVybiAodGhpcy5hbmltYXRpbmdfID0gd2FpdFxuICAgICAgLnRoZW4oXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIElnbm9yZSBlcnJvcnMgdG8gbWFrZSBzdXJlIGFuaW1hdGlvbnMgZG9uJ3QgZ2V0IHN0dWNrLlxuICAgICAgICB9XG4gICAgICApXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW5nXyA9IG51bGw7XG4gICAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0b2FzdC5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hbmltYXRlXygoKSA9PiB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHRvYXN0IGZyb20gdGhlIERPTSBhZnRlciBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICB0aGlzLmRvY18uZ2V0V2luKCkuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZG9jXy5nZXRCb2R5KCkucmVtb3ZlQ2hpbGQodGhpcy5pZnJhbWVfKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfSwgNTAwKTtcblxuICAgICAgcmV0dXJuIHRyYW5zaXRpb24oXG4gICAgICAgIHRoaXMuaWZyYW1lXyxcbiAgICAgICAge1xuICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgxMDAlKScsXG4gICAgICAgICAgJ29wYWNpdHknOiAxLFxuICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICB9LFxuICAgICAgICA0MDAsXG4gICAgICAgICdlYXNlLW91dCdcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyEuLi9jb21wb25lbnRzL2FjdGl2aXRpZXMuQWN0aXZpdHlQb3J0RGVmfSBwb3J0XG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWlyZU9yaWdpblxuICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlT3JpZ2luVmVyaWZpZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZVNlY3VyZUNoYW5uZWxcbiAqIEByZXR1cm4geyFQcm9taXNlPCFPYmplY3Q+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWNjZXB0UG9ydFJlc3VsdERhdGEoXG4gIHBvcnQsXG4gIHJlcXVpcmVPcmlnaW4sXG4gIHJlcXVpcmVPcmlnaW5WZXJpZmllZCxcbiAgcmVxdWlyZVNlY3VyZUNoYW5uZWxcbikge1xuICByZXR1cm4gcG9ydC5hY2NlcHRSZXN1bHQoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgaWYgKFxuICAgICAgcmVzdWx0Lm9yaWdpbiAhPSByZXF1aXJlT3JpZ2luIHx8XG4gICAgICAocmVxdWlyZU9yaWdpblZlcmlmaWVkICYmICFyZXN1bHQub3JpZ2luVmVyaWZpZWQpIHx8XG4gICAgICAocmVxdWlyZVNlY3VyZUNoYW5uZWwgJiYgIXJlc3VsdC5zZWN1cmVDaGFubmVsKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjaGFubmVsIG1pc21hdGNoJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgfSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7c2V0SW1wb3J0YW50U3R5bGVzfSBmcm9tICcuL3N0eWxlJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhZnRlciB0aGUgZ2l2ZW4gZHVyYXRpb24gb2YgYW5pbWF0aW9uXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyPn0gcHJvcHMgLSBwcm9wZXJ0aWVzIHRvIGJlIGFuaW1hdGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uTWlsbGlzIC0gZHVyYXRpb24gb2YgYW5pbWF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnZlIC0gdHJhbnNpdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGFuaW1hdGlvbi5cbiAqIEByZXR1cm4geyFQcm9taXNlfSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBkb25lIHBsYXlpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uKGVsLCBwcm9wcywgZHVyYXRpb25NaWxsaXMsIGN1cnZlKSB7XG4gIGNvbnN0IHdpbiA9IGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNvbnN0IHByZXZpb3VzVHJhbnNpdGlvblZhbHVlID0gZWwuc3R5bGUudHJhbnNpdGlvbiB8fCAnJztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHdpbi5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHdpbi5zZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uTWlsbGlzKTtcbiAgICAgIGNvbnN0IHRyID0gYCR7ZHVyYXRpb25NaWxsaXN9bXMgJHtjdXJ2ZX1gO1xuICAgICAgc2V0SW1wb3J0YW50U3R5bGVzKFxuICAgICAgICBlbCxcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICAndHJhbnNpdGlvbic6IGB0cmFuc2Zvcm0gJHt0cn0sIG9wYWNpdHkgJHt0cn1gLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJvcHNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSkudGhlbigoKSA9PiB7XG4gICAgc2V0SW1wb3J0YW50U3R5bGVzKGVsLCB7XG4gICAgICAndHJhbnNpdGlvbic6IHByZXZpb3VzVHJhbnNpdGlvblZhbHVlLFxuICAgIH0pO1xuICB9KTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHthc3NlcnR9IGZyb20gJy4vbG9nJztcblxuLyoqXG4gKiBDaGFyYWN0ZXIgbWFwcGluZyBmcm9tIGJhc2U2NHVybCB0byBiYXNlNjQuXG4gKiBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5jb25zdCBiYXNlNjRVcmxEZWNvZGVTdWJzID0geyctJzogJysnLCAnXyc6ICcvJywgJy4nOiAnPSd9O1xuXG4vKipcbiAqIENoYXJhY3RlciBtYXBwaW5nIGZyb20gYmFzZTY0IHRvIGJhc2U2NHVybC5cbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmNvbnN0IGJhc2U2NFVybEVuY29kZVN1YnMgPSB7JysnOiAnLScsICcvJzogJ18nfTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB3aGljaCBob2xkcyA4LWJpdCBjb2RlIHBvaW50cywgc3VjaCBhcyB0aGUgcmVzdWx0IG9mIGF0b2IsXG4gKiBpbnRvIGEgVWludDhBcnJheSB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGJ5dGVzLlxuICogSWYgeW91IGhhdmUgYSBzdHJpbmcgb2YgY2hhcmFjdGVycywgeW91IHByb2JhYmx5IHdhbnQgdG8gYmUgdXNpbmcgdXRmOEVuY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGFzc2VydChjaGFyQ29kZSA8PSAyNTUsICdDaGFyYWN0ZXJzIG11c3QgYmUgaW4gcmFuZ2UgWzAsMjU1XScpO1xuICAgIGJ5dGVzW2ldID0gY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgOC1iaXQgYnl0ZXMgYXJyYXkgaW50byBhIHN0cmluZ1xuICogQHBhcmFtIHshVWludDhBcnJheX0gYnl0ZXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZXMpIHtcbiAgLy8gSW50ZW50aW9uYWxseSBhdm9pZHMgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSBzbyB3ZSBkb24ndCBzdWZmZXIgYVxuICAvLyBzdGFjayBvdmVyZmxvdy4gIzEwNDk1LCBodHRwczovL2pzcGVyZi5jb20vYnl0ZXNUb1N0cmluZy0yXG4gIGNvbnN0IGFycmF5ID0gbmV3IEFycmF5KGJ5dGVzLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheVtpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICB9XG4gIHJldHVybiBhcnJheS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBJbnRlcnByZXQgYSBieXRlIGFycmF5IGFzIGEgVVRGLTggc3RyaW5nLlxuICogQHBhcmFtIHshQnVmZmVyU291cmNlfSBieXRlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXRmOERlY29kZVN5bmMoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpLmRlY29kZShieXRlcyk7XG4gIH1cbiAgY29uc3QgYXNjaWlTdHJpbmcgPSBieXRlc1RvU3RyaW5nKG5ldyBVaW50OEFycmF5KGJ5dGVzLmJ1ZmZlciB8fCBieXRlcykpO1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShhc2NpaVN0cmluZykpO1xufVxuXG4vKipcbiAqIFR1cm4gYSBzdHJpbmcgaW50byBVVEYtOCBieXRlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXRmOEVuY29kZVN5bmMoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKS5lbmNvZGUoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nVG9CeXRlcyh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKSkpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIHdoaWNoIGlzIGluIGJhc2U2NHVybCBlbmNvZGluZyBpbnRvIGEgVWludDhBcnJheVxuICogY29udGFpbmluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFzZTY0VXJsRGVjb2RlVG9CeXRlcyhzdHIpIHtcbiAgY29uc3QgZW5jb2RlZCA9IGF0b2Ioc3RyLnJlcGxhY2UoL1stXy5dL2csIGNoID0+IGJhc2U2NFVybERlY29kZVN1YnNbY2hdKSk7XG4gIHJldHVybiBzdHJpbmdUb0J5dGVzKGVuY29kZWQpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYnl0ZXMgYXJyYXkgaW50byBiYXNlNjR1cmwgZW5jb2RlZCBzdHJpbmcuXG4gKiBiYXNlNjR1cmwgaXMgZGVmaW5lZCBpbiBSRkMgNDY0OC4gSXQgaXMgc29tZXRpbWVzIHJlZmVycmVkIHRvIGFzIFwid2ViIHNhZmVcIi5cbiAqIEBwYXJhbSB7IVVpbnQ4QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYXNlNjRVcmxFbmNvZGVGcm9tQnl0ZXMoYnl0ZXMpIHtcbiAgY29uc3Qgc3RyID0gYnl0ZXNUb1N0cmluZyhieXRlcyk7XG4gIHJldHVybiBidG9hKHN0cikucmVwbGFjZSgvWysvXS9nLCBjaCA9PiBiYXNlNjRVcmxFbmNvZGVTdWJzW2NoXSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRSZWFkeVN0YXRlKGRvYykge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkb2NbJ3JlYWR5U3RhdGUnXSk7XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEb2N1bWVudFJlYWR5KGRvYykge1xuICBjb25zdCByZWFkeVN0YXRlID0gZ2V0UmVhZHlTdGF0ZShkb2MpO1xuICByZXR1cm4gcmVhZHlTdGF0ZSAhPSAnbG9hZGluZycgJiYgcmVhZHlTdGF0ZSAhPSAndW5pbml0aWFsaXplZCc7XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgZG9jdW1lbnQgaGFzIGxvYWRlZCBhbGwgdGhlIGNzcyBhbmQgc3ViLXJlc291cmNlcy5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRG9jdW1lbnRDb21wbGV0ZShkb2MpIHtcbiAgcmV0dXJuIGdldFJlYWR5U3RhdGUoZG9jKSA9PSAnY29tcGxldGUnO1xufVxuXG4vKipcbiAqIENhbGxzIHRoZSBjYWxsYmFjayB3aGVuIGRvY3VtZW50IGlzIHJlYWR5LlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtmdW5jdGlvbighRG9jdW1lbnQpfSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gb25Eb2N1bWVudFJlYWR5KGRvYywgY2FsbGJhY2spIHtcbiAgb25Eb2N1bWVudFN0YXRlKGRvYywgaXNEb2N1bWVudFJlYWR5LCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gZG9jdW1lbnQncyBzdGF0ZSBzYXRpc2ZpZXMgdGhlIHN0YXRlRm4uXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFEb2N1bWVudCk6Ym9vbGVhbn0gc3RhdGVGblxuICogQHBhcmFtIHtmdW5jdGlvbighRG9jdW1lbnQpfSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBvbkRvY3VtZW50U3RhdGUoZG9jLCBzdGF0ZUZuLCBjYWxsYmFjaykge1xuICBsZXQgcmVhZHkgPSBzdGF0ZUZuKGRvYyk7XG4gIGlmIChyZWFkeSkge1xuICAgIGNhbGxiYWNrKGRvYyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVhZHlMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgIGlmIChzdGF0ZUZuKGRvYykpIHtcbiAgICAgICAgaWYgKCFyZWFkeSkge1xuICAgICAgICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICBjYWxsYmFjayhkb2MpO1xuICAgICAgICB9XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgcmVhZHlMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIHJlYWR5TGlzdGVuZXIpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGRvY3VtZW50IGlzIHJlYWR5LlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7IVByb21pc2U8IURvY3VtZW50Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5Eb2N1bWVudFJlYWR5KGRvYykge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgb25Eb2N1bWVudFJlYWR5KGRvYywgcmVzb2x2ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBkb2N1bWVudCBpcyBjb21wbGV0ZS5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAqIEByZXR1cm4geyFQcm9taXNlPCFEb2N1bWVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGVuRG9jdW1lbnRDb21wbGV0ZShkb2MpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIG9uRG9jdW1lbnRTdGF0ZShkb2MsIGlzRG9jdW1lbnRDb21wbGV0ZSwgcmVzb2x2ZSk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2Fzc2VydH0gZnJvbSAnLi9sb2cnO1xuaW1wb3J0IHtzZXRTdHlsZXN9IGZyb20gJy4vc3R5bGUnO1xuXG4vKiogQGNvbnN0IEBlbnVte3N0cmluZ30gKi9cbmV4cG9ydCBjb25zdCBzdHlsZUxpbmtBdHRycyA9IHtcbiAgJ3JlbCc6ICdzdHlsZXNoZWV0JyxcbiAgJ3R5cGUnOiAndGV4dC9jc3MnLFxufTtcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IHN0eWxlVHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmV4cG9ydCBjb25zdCBzdHlsZUV4aXN0c1F1ZXJ5U2VsZWN0b3IgPSAnbGlua1tyZWw9c3R5bGVzaGVldF1baHJlZl0nO1xuXG4vKipcbiAqIEFkZCBhdHRyaWJ1dGVzIHRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyfGJvb2xlYW58IU9iamVjdDxzdHJpbmcsIHN0cmluZ3xudW1iZXJ8Ym9vbGVhbj4+fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gdXBkYXRlZCBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQXR0cmlidXRlc1RvRWxlbWVudChlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIGZvciAoY29uc3QgYXR0ciBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKGF0dHIgPT0gJ3N0eWxlJykge1xuICAgICAgc2V0U3R5bGVzKFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmd8Ym9vbGVhbnxudW1iZXI+fSAqL1xuICAgICAgICAoYXR0cmlidXRlc1thdHRyXSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICBhdHRyLFxuICAgICAgICAvKiogQHR5cGUge3N0cmluZ3xib29sZWFufG51bWJlcn0gKi8gKGF0dHJpYnV0ZXNbYXR0cl0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZWxlbWVudCBvbiBkb2N1bWVudCB3aXRoIHNwZWNpZmllZCB0YWdOYW1lIGFuZCBhdHRyaWJ1dGVzLlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7PyhzdHJpbmd8IU5vZGV8IUFycmF5TGlrZTwhTm9kZT58IUFycmF5PCFOb2RlPik9fSBjb250ZW50XG4gKiBAcmV0dXJuIHshRWxlbWVudH0gY3JlYXRlZCBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudChkb2MsIHRhZ05hbWUsIGF0dHJpYnV0ZXMsIGNvbnRlbnQpIHtcbiAgY29uc3QgZWxlbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBhZGRBdHRyaWJ1dGVzVG9FbGVtZW50KGVsZW1lbnQsIGF0dHJpYnV0ZXMpO1xuICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09ICdzdHJpbmcnKSB7XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnQubm9kZVR5cGUpIHtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfSBlbHNlIGlmICgnbGVuZ3RoJyBpbiBjb250ZW50KSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50W2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnVW5zdXBwb3J0ZWQgY29udGVudDogJXMnLCBjb250ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgZWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBwYXJlbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuKHBhcmVudCkge1xuICBwYXJlbnQudGV4dENvbnRlbnQgPSAnJztcbn1cblxuLyoqXG4gKiBJbmplY3RzIHRoZSBwcm92aWRlZCBzdHlsZXMgaW4gdGhlIEhFQUQgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnQuXG4gKiBAcGFyYW0geyEuLi9tb2RlbC9kb2MuRG9jfSBkb2MgVGhlIGRvY3VtZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZVRleHQgVGhlIHN0eWxlIHN0cmluZy5cbiAqIEByZXR1cm4geyFFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0U3R5bGVTaGVldChkb2MsIHN0eWxlVGV4dCkge1xuICBjb25zdCBzdHlsZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KGRvYy5nZXRXaW4oKS5kb2N1bWVudCwgJ3N0eWxlJywge1xuICAgICd0eXBlJzogc3R5bGVUeXBlLFxuICB9KTtcbiAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gc3R5bGVUZXh0O1xuICBkb2MuZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG4gIHJldHVybiBzdHlsZUVsZW1lbnQ7XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgZWxlbWVudCBoYXZlIGEgbmV4dCBub2RlIGluIHRoZSBkb2N1bWVudCBvcmRlci5cbiAqIFRoaXMgbWVhbnMgZWl0aGVyOlxuICogIGEuIFRoZSBlbGVtZW50IGl0c2VsZiBoYXMgYSBuZXh0U2libGluZy5cbiAqICBiLiBBbnkgb2YgdGhlIGVsZW1lbnQgYW5jZXN0b3JzIGhhcyBhIG5leHRTaWJsaW5nLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHs/Tm9kZT19IHN0b3BOb2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzTmV4dE5vZGVJbkRvY3VtZW50T3JkZXIoZWxlbWVudCwgc3RvcE5vZGUpIHtcbiAgbGV0IGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgZG8ge1xuICAgIGlmIChjdXJyZW50RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IHdoaWxlIChcbiAgICAoY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5wYXJlbnROb2RlKSAmJlxuICAgIGN1cnJlbnRFbGVtZW50ICE9IHN0b3BOb2RlXG4gICk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBQb2x5ZmlsbCBvZiB0aGUgYE5vZGUuaXNDb25uZWN0ZWRgIEFQSS4gU2VlXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9pc0Nvbm5lY3RlZC5cbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Nvbm5lY3RlZChub2RlKSB7XG4gIC8vIEVuc3VyZSB0aGF0IG5vZGUgaXMgYXR0YWNoZWQgaWYgc3BlY2lmaWVkLiBUaGlzIGNoZWNrIHVzZXMgYSBuZXcgYW5kXG4gIC8vIGZhc3QgYGlzQ29ubmVjdGVkYCBBUEkgYW5kIHRodXMgb25seSBjaGVja2VkIG9uIHBsYXRmb3JtcyB0aGF0IGhhdmUgaXQuXG4gIC8vIFNlZSBodHRwczovL3d3dy5jaHJvbWVzdGF0dXMuY29tL2ZlYXR1cmUvNTY3NjExMDU0OTM1MjQ0OC5cbiAgaWYgKCdpc0Nvbm5lY3RlZCcgaW4gbm9kZSkge1xuICAgIHJldHVybiBub2RlWydpc0Nvbm5lY3RlZCddO1xuICB9XG4gIC8vIFBvbHlmaWxsLlxuICBjb25zdCByb290ID0gbm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHJldHVybiAocm9vdCAmJiByb290LmNvbnRhaW5zKG5vZGUpKSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWRnZUJyb3dzZXIod2luKSB7XG4gIGNvbnN0IG5hdiA9IHdpbi5uYXZpZ2F0b3I7XG4gIHJldHVybiAvRWRnZS9pLnRlc3QobmF2ICYmIG5hdi51c2VyQWdlbnQpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2NyZWF0ZUFib3J0RXJyb3IsIGlzQWJvcnRFcnJvcn0gZnJvbSAnd2ViLWFjdGl2aXRpZXMvYWN0aXZpdHktcG9ydHMnO1xuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHNwZWNpZmllZCBlcnJvciBpcyBhbiBBYm9ydEVycm9yIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9oZXljYW0uZ2l0aHViLmlvL3dlYmlkbC8jYWJvcnRlcnJvci5cbiAqIEBwYXJhbSB7Kn0gZXJyb3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbEVycm9yKGVycm9yKSB7XG4gIHJldHVybiBpc0Fib3J0RXJyb3IoZXJyb3IpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgb3IgZW11bGF0ZXMgYSBET01FeGNlcHRpb24gb2YgQWJvcnRFcnJvciB0eXBlLlxuICogU2VlIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2Fib3J0ZXJyb3IuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlXG4gKiBAcmV0dXJuIHshRE9NRXhjZXB0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FuY2VsRXJyb3Iod2luLCBtZXNzYWdlKSB7XG4gIHJldHVybiBjcmVhdGVBYm9ydEVycm9yKHdpbiwgbWVzc2FnZSk7XG59XG5cbi8qKlxuICogQSBzZXQgb2YgZXJyb3IgdXRpbGl0aWVzIGNvbWJpbmVkIGluIGEgY2xhc3MgdG8gYWxsb3cgZWFzeSBzdHViYmluZyBpbiB0ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yVXRpbHMge1xuICAvKipcbiAgICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG4gICAqL1xuICBzdGF0aWMgdGhyb3dBc3luYyhlcnJvcikge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBtYXBcbiAqIEBwYXJhbSB7P3N0cmluZ3w/RWxlbWVudH0gbGFuZ09yRWxlbWVudFxuICogQHJldHVybiB7P3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1zZyhtYXAsIGxhbmdPckVsZW1lbnQpIHtcbiAgY29uc3QgbGFuZyA9ICFsYW5nT3JFbGVtZW50XG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIGxhbmdPckVsZW1lbnQgPT0gJ3N0cmluZydcbiAgICA/IGxhbmdPckVsZW1lbnRcbiAgICA6IGxhbmdPckVsZW1lbnQubGFuZyB8fFxuICAgICAgKGxhbmdPckVsZW1lbnQub3duZXJEb2N1bWVudCAmJlxuICAgICAgICBsYW5nT3JFbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcpO1xuICBsZXQgc2VhcmNoID0gKChsYW5nICYmIGxhbmcudG9Mb3dlckNhc2UoKSkgfHwgJ2VuJykucmVwbGFjZSgvXy9nLCAnLScpO1xuICB3aGlsZSAoc2VhcmNoKSB7XG4gICAgaWYgKHNlYXJjaCBpbiBtYXApIHtcbiAgICAgIHJldHVybiBtYXBbc2VhcmNoXTtcbiAgICB9XG4gICAgY29uc3QgZGFzaCA9IHNlYXJjaC5sYXN0SW5kZXhPZignLScpO1xuICAgIHNlYXJjaCA9IGRhc2ggIT0gLTEgPyBzZWFyY2guc3Vic3RyaW5nKDAsIGRhc2gpIDogJyc7XG4gIH1cbiAgLy8gXCJlblwiIGlzIGFsd2F5cyBkZWZhdWx0LlxuICByZXR1cm4gbWFwWydlbiddO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhpcyBtb2R1bGUgZGVjbGFyZXMgSlNPTiB0eXBlcyBhcyBkZWZpbmVkIGluIHRoZVxuICoge0BsaW5rIGh0dHA6Ly9qc29uLm9yZy99LlxuICovXG5cbmltcG9ydCB7aXNPYmplY3R9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFJlY3JlYXRlcyBvYmplY3RzIHdpdGggcHJvdG90eXBlLWxlc3MgY29waWVzLlxuICogQHBhcmFtIHshSnNvbk9iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHshSnNvbk9iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY3JlYXRlTm9uUHJvdG9PYmplY3Qob2JqKSB7XG4gIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdiA9IG9ialtrXTtcbiAgICBjb3B5W2tdID0gaXNPYmplY3QodikgPyByZWNyZWF0ZU5vblByb3RvT2JqZWN0KHYpIDogdjtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHshSnNvbk9iamVjdH0gKi8gKGNvcHkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBmcm9tIGFuIG9iamVjdCBmb3IgYSBmaWVsZC1iYXNlZCBleHByZXNzaW9uLiBUaGUgZXhwcmVzc2lvblxuICogaXMgYSBzaW1wbGUgbmVzdGVkIGRvdC1ub3RhdGlvbiBvZiBmaWVsZHMsIHN1Y2ggYXMgYGZpZWxkMS5maWVsZDJgLiBJZiBhbnlcbiAqIGZpZWxkIGluIGEgY2hhaW4gZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IGFuIG9iamVjdCwgdGhlIHJldHVybmVkIHZhbHVlIHdpbGxcbiAqIGJlIGB1bmRlZmluZWRgLlxuICpcbiAqIEBwYXJhbSB7IUpzb25PYmplY3R9IG9ialxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZUZvckV4cHIob2JqLCBleHByKSB7XG4gIC8vIFRoZSBgLmAgaW5kaWNhdGVzIFwidGhlIG9iamVjdCBpdHNlbGZcIi5cbiAgaWYgKGV4cHIgPT0gJy4nKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICAvLyBPdGhlcndpc2UsIG5hdmlnYXRlIHZpYSBwcm9wZXJ0aWVzLlxuICBjb25zdCBwYXJ0cyA9IGV4cHIuc3BsaXQoJy4nKTtcbiAgbGV0IHZhbHVlID0gb2JqO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmICghcGFydCkge1xuICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIWlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdmFsdWVbcGFydF0gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgIWhhc093blByb3BlcnR5KHZhbHVlLCBwYXJ0KVxuICAgICkge1xuICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZVtwYXJ0XTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogU2ltcGxlIHdyYXBwZXIgYXJvdW5kIEpTT04ucGFyc2UgdGhhdCBjYXN0cyB0aGUgcmV0dXJuIHZhbHVlXG4gKiB0byBKc29uT2JqZWN0LlxuICogQ3JlYXRlIGEgbmV3IHdyYXBwZXIgaWYgYW4gYXJyYXkgcmV0dXJuIHZhbHVlIGlzIGRlc2lyZWQuXG4gKiBAcGFyYW0geyp9IGpzb24gSlNPTiBzdHJpbmcgdG8gcGFyc2VcbiAqIEByZXR1cm4gez9Kc29uT2JqZWN0fHVuZGVmaW5lZH0gTWF5IGJlIGV4dGVuZCB0byBwYXJzZSBhcnJheXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUpzb24oanNvbikge1xuICByZXR1cm4gLyoqIEB0eXBlIHs/SnNvbk9iamVjdH0gKi8gKEpTT04ucGFyc2UoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc29uKSkpO1xufVxuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gYGpzb25gIHN0cmluZyB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvbiBpZiBub3QgdmFsaWQuXG4gKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHBhcnNpbmcgZmFpbHMuXG4gKiBSZXR1cm5zIHRoZSBgT2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBKU09OIHN0cmluZyB3aGVuIHBhcnNpbmcgc3VjY2VlZHMuXG4gKiBAcGFyYW0geyp9IGpzb24gSlNPTiBzdHJpbmcgdG8gcGFyc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVycm9yKT19IG9uRmFpbGVkIE9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWRcbiAqICAgICB3aXRoIHRoZSBlcnJvciBpZiBwYXJzaW5nIGZhaWxzLlxuICogQHJldHVybiB7P0pzb25PYmplY3R8dW5kZWZpbmVkfSBNYXkgYmUgZXh0ZW5kIHRvIHBhcnNlIGFycmF5cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeVBhcnNlSnNvbihqc29uLCBvbkZhaWxlZCkge1xuICB0cnkge1xuICAgIHJldHVybiBwYXJzZUpzb24oanNvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAob25GYWlsZWQpIHtcbiAgICAgIG9uRmFpbGVkKGUpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gIGlmIChvYmogPT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAob2JqKSxcbiAgICBrZXlcbiAgKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgcGFzc2VkIHN0cmluZyBpbnRvIGEgSlNPTiBvYmplY3QgKGlmIHBvc3NpYmxlKSBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eU5hbWUgb24gdGhhdCBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ganNvblN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5TmFtZVxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnR5RnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgcHJvcGVydHlOYW1lKSB7XG4gIGNvbnN0IGpzb24gPSB0cnlQYXJzZUpzb24oanNvblN0cmluZyk7XG4gIHJldHVybiAoanNvbiAmJiBqc29uW3Byb3BlcnR5TmFtZV0pIHx8IG51bGw7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7YmFzZTY0VXJsRGVjb2RlVG9CeXRlcywgdXRmOERlY29kZVN5bmN9IGZyb20gJy4vYnl0ZXMnO1xuaW1wb3J0IHt0cnlQYXJzZUpzb259IGZyb20gJy4vanNvbic7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgaGVhZGVyOiAoP0pzb25PYmplY3R8dW5kZWZpbmVkKSxcbiAqICAgcGF5bG9hZDogKD9Kc29uT2JqZWN0fHVuZGVmaW5lZCksXG4gKiAgIHZlcmlmaWFibGU6IHN0cmluZyxcbiAqICAgc2lnOiBzdHJpbmcsXG4gKiB9fVxuICovXG5sZXQgSnd0VG9rZW5JbnRlcm5hbERlZjtcblxuLyoqXG4gKiBQcm92aWRlcyBoZWxwZXIgbWV0aG9kcyB0byBkZWNvZGUgYW5kIHZlcmlmeSBKV1QgdG9rZW5zLlxuICovXG5leHBvcnQgY2xhc3MgSnd0SGVscGVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIEpXVCB0b2tlbiBhbmQgcmV0dXJucyBpdHMgcGF5bG9hZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVuY29kZWRUb2tlblxuICAgKiBAcmV0dXJuIHs/SnNvbk9iamVjdHx1bmRlZmluZWR9XG4gICAqL1xuICBkZWNvZGUoZW5jb2RlZFRva2VuKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVjb2RlSW50ZXJuYWxfKGVuY29kZWRUb2tlbikucGF5bG9hZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RlZFRva2VuXG4gICAqIEByZXR1cm4geyFKd3RUb2tlbkludGVybmFsRGVmfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGVjb2RlSW50ZXJuYWxfKGVuY29kZWRUb2tlbikge1xuICAgIC8vIFNlZSBodHRwczovL2p3dC5pby9pbnRyb2R1Y3Rpb24vXG4gICAgLyoqXG4gICAgICogVGhyb3dzIGVycm9yIGFib3V0IGludmFsaWQgdG9rZW4uXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52YWxpZFRva2VuKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRva2VuOiBcIiR7ZW5jb2RlZFRva2VufVwiYCk7XG4gICAgfVxuXG4gICAgLy8gRW5jb2RlZCB0b2tlbiBoYXMgdGhyZWUgcGFydHM6IGhlYWRlci5wYXlsb2FkLnNpZ1xuICAgIC8vIE5vdGUhIFRoZSBwYWRkaW5nIGlzIG5vdCBhbGxvd2VkIGJ5IEpXVCBzcGVjOlxuICAgIC8vIGh0dHA6Ly9zZWxmLWlzc3VlZC5pbmZvL2RvY3MvZHJhZnQtZ29sYW5kLWpzb24td2ViLXRva2VuLTAwLmh0bWwjcmZjLnNlY3Rpb24uNVxuICAgIGNvbnN0IHBhcnRzID0gZW5jb2RlZFRva2VuLnNwbGl0KCcuJyk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCAhPSAzKSB7XG4gICAgICBpbnZhbGlkVG9rZW4oKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVyVXRmOEJ5dGVzID0gYmFzZTY0VXJsRGVjb2RlVG9CeXRlcyhwYXJ0c1swXSk7XG4gICAgY29uc3QgcGF5bG9hZFV0ZjhCeXRlcyA9IGJhc2U2NFVybERlY29kZVRvQnl0ZXMocGFydHNbMV0pO1xuICAgIHJldHVybiB7XG4gICAgICBoZWFkZXI6IHRyeVBhcnNlSnNvbih1dGY4RGVjb2RlU3luYyhoZWFkZXJVdGY4Qnl0ZXMpLCBpbnZhbGlkVG9rZW4pLFxuICAgICAgcGF5bG9hZDogdHJ5UGFyc2VKc29uKHV0ZjhEZWNvZGVTeW5jKHBheWxvYWRVdGY4Qnl0ZXMpLCBpbnZhbGlkVG9rZW4pLFxuICAgICAgdmVyaWZpYWJsZTogYCR7cGFydHNbMF19LiR7cGFydHNbMV19YCxcbiAgICAgIHNpZzogcGFydHNbMl0sXG4gICAgfTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIERlYnVnIGxvZ2dlciwgb25seSBsb2cgbWVzc2FnZSBpZiAjc3dnLmxvZz0xXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFtkZWNyaXB0aW9uXVxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmZ1bmN0aW9uIGRlYnVnTG9nKHZhcl9hcmdzKSB7XG4gIGlmICgvc3dnLmRlYnVnPTEvLnRlc3Qoc2VsZi5sb2NhdGlvbi5oYXNoKSkge1xuICAgIGNvbnN0IGxvZ0FyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgIGxvZ0FyZ3MudW5zaGlmdCgnW1N1YnNjcmlwdGlvbnNdJyk7XG4gICAgbG9nLmFwcGx5KGxvZywgbG9nQXJncyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gIHsuLi4qfSB2YXJfYXJncyBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIGxvZyh2YXJfYXJncykge1xuICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSAgey4uLip9IHZhcl9hcmdzIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gd2Fybih2YXJfYXJncykge1xuICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzbid0IHRydWVpc2guXG4gKlxuICogU3VwcG9ydHMgYXJndW1lbnQgc3Vic3RpdHV0aW9uIGludG8gdGhlIG1lc3NhZ2UgdmlhICVzIHBsYWNlaG9sZGVycy5cbiAqXG4gKiBUaHJvd3MgYW4gZXJyb3Igb2JqZWN0IHRoYXQgaGFzIHR3byBleHRyYSBwcm9wZXJ0aWVzOlxuICogLSBhc3NvY2lhdGVkRWxlbWVudDogVGhpcyBpcyB0aGUgZmlyc3QgZWxlbWVudCBwcm92aWRlZCBpbiB0aGUgdmFyIGFyZ3MuXG4gKiAgIEl0IGNhbiBiZSB1c2VkIGZvciBpbXByb3ZlZCBkaXNwbGF5IG9mIGVycm9yIG1lc3NhZ2VzLlxuICogLSBtZXNzYWdlQXJyYXk6IFRoZSBlbGVtZW50cyBvZiB0aGUgc3Vic3RpdHV0ZWQgbWVzc2FnZSBhcyBub24tc3RyaW5naWZpZWRcbiAqICAgZWxlbWVudHMgaW4gYW4gYXJyYXkuIFdoZW4gZS5nLiBwYXNzZWQgdG8gY29uc29sZS5lcnJvciB0aGlzIHlpZWxkc1xuICogICBuYXRpdmUgZGlzcGxheXMgb2YgdGhpbmdzIGxpa2UgSFRNTCBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge1R9IHNob3VsZEJlVHJ1ZWlzaCBUaGUgdmFsdWUgdG8gYXNzZXJ0LiBUaGUgYXNzZXJ0IGZhaWxzIGlmIGl0IGRvZXNcbiAqICAgICBub3QgZXZhbHVhdGUgdG8gdHJ1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgYXNzZXJ0aW9uIG1lc3NhZ2VcbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgQXJndW1lbnRzIHN1YnN0aXR1dGVkIGludG8gJXMgaW4gdGhlIG1lc3NhZ2UuXG4gKiBAcmV0dXJuIHtUfSBUaGUgdmFsdWUgb2Ygc2hvdWxkQmVUcnVlaXNoLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KHNob3VsZEJlVHJ1ZWlzaCwgbWVzc2FnZSwgdmFyX2FyZ3MpIHtcbiAgbGV0IGZpcnN0RWxlbWVudDtcbiAgaWYgKCFzaG91bGRCZVRydWVpc2gpIHtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnQXNzZXJ0aW9uIGZhaWxlZCc7XG4gICAgY29uc3Qgc3BsaXRNZXNzYWdlID0gbWVzc2FnZS5zcGxpdCgnJXMnKTtcbiAgICBjb25zdCBmaXJzdCA9IHNwbGl0TWVzc2FnZS5zaGlmdCgpO1xuICAgIGxldCBmb3JtYXR0ZWQgPSBmaXJzdDtcbiAgICBjb25zdCBtZXNzYWdlQXJyYXkgPSBbXTtcbiAgICBwdXNoSWZOb25FbXB0eShtZXNzYWdlQXJyYXksIGZpcnN0KTtcbiAgICBmb3IgKGxldCBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsID0gYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKHZhbCAmJiB2YWwudGFnTmFtZSkge1xuICAgICAgICBmaXJzdEVsZW1lbnQgPSB2YWw7XG4gICAgICB9XG4gICAgICBjb25zdCBuZXh0Q29uc3RhbnQgPSBzcGxpdE1lc3NhZ2Uuc2hpZnQoKTtcbiAgICAgIG1lc3NhZ2VBcnJheS5wdXNoKHZhbCk7XG4gICAgICBwdXNoSWZOb25FbXB0eShtZXNzYWdlQXJyYXksIG5leHRDb25zdGFudC50cmltKCkpO1xuICAgICAgZm9ybWF0dGVkICs9IHRvU3RyaW5nKHZhbCkgKyBuZXh0Q29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0IGUgPSBuZXcgRXJyb3IoZm9ybWF0dGVkKTtcbiAgICBlLmZyb21Bc3NlcnQgPSB0cnVlO1xuICAgIGUuYXNzb2NpYXRlZEVsZW1lbnQgPSBmaXJzdEVsZW1lbnQ7XG4gICAgZS5tZXNzYWdlQXJyYXkgPSBtZXNzYWdlQXJyYXk7XG4gICAgdGhyb3cgZTtcbiAgfVxuICByZXR1cm4gc2hvdWxkQmVUcnVlaXNoO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5fSBhcnJheVxuICogQHBhcmFtIHsqfSB2YWxcbiAqL1xuZnVuY3Rpb24gcHVzaElmTm9uRW1wdHkoYXJyYXksIHZhbCkge1xuICBpZiAodmFsICE9ICcnKSB7XG4gICAgYXJyYXkucHVzaCh2YWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbCkge1xuICAvLyBEbyBjaGVjayBlcXVpdmFsZW50IHRvIGB2YWwgaW5zdGFuY2VvZiBFbGVtZW50YCB3aXRob3V0IGNyb3NzLXdpbmRvdyBidWdcbiAgaWYgKHZhbCAmJiB2YWwubm9kZVR5cGUgPT0gMSkge1xuICAgIHJldHVybiB2YWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpICsgKHZhbC5pZCA/ICcjJyArIHZhbC5pZCA6ICcnKTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0LFxuICBkZWJ1Z0xvZyxcbiAgd2FybixcbiAgbG9nXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBtYXAtbGlrZSBvYmplY3QuXG4gKiBJZiBpbml0aWFsIGlzIHByb3ZpZGVkLCBjb3BpZXMgaXRzIG93biBwcm9wZXJ0aWVzIGludG8gdGhlXG4gKiBuZXdseSBjcmVhdGVkIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gaW5pdGlhbCBUaGlzIHNob3VsZCB0eXBpY2FsbHkgYmUgYW4gb2JqZWN0IGxpdGVyYWwuXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcChpbml0aWFsKSB7XG4gIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChpbml0aWFsKSB7XG4gICAgT2JqZWN0LmFzc2lnbihvYmosIGluaXRpYWwpO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBgQXJyYXkuZmluZCgpYCBtZXRob2QgdGhhdCdzIG5vdCB5ZXQgYXZhaWxhYmxlIGluIGFsbCBicm93c2Vycy5cbiAqXG4gKiBAcGFyYW0gez9BcnJheTxUPn0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCwgbnVtYmVyLCAhQXJyYXk8VD4pOmJvb2xlYW59IHByZWRpY2F0ZVxuICogQHJldHVybiB7P1R9XG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEluQXJyYXkoYXJyYXksIHByZWRpY2F0ZSkge1xuICBpZiAoIWFycmF5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgbGVuID0gYXJyYXkubGVuZ3RoIHx8IDA7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3Qgb3RoZXIgPSBhcnJheVtpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob3RoZXIsIGksIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gJy4vZG9tJztcblxuZXhwb3J0IGNsYXNzIFByZWNvbm5lY3Qge1xuICAvKipcbiAgICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICAgKi9cbiAgY29uc3RydWN0b3IoZG9jKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IURvY3VtZW50fSAqL1xuICAgIHRoaXMuZG9jXyA9IGRvYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqL1xuICBwcmVjb25uZWN0KHVybCkge1xuICAgIHRoaXMucHJlXyh1cmwsICdwcmVjb25uZWN0Jyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgZG5zUHJlZmV0Y2godXJsKSB7XG4gICAgdGhpcy5wcmVfKHVybCwgJ2Rucy1wcmVmZXRjaCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIHByZWZldGNoKHVybCkge1xuICAgIHRoaXMucHJlXyh1cmwsICdwcmVjb25uZWN0IHByZWZldGNoJyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXNcbiAgICovXG4gIHByZWxvYWQodXJsLCBhcykge1xuICAgIHRoaXMucHJlXyh1cmwsICdwcmVjb25uZWN0IHByZWxvYWQnLCBhcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVsXG4gICAqIEBwYXJhbSB7P3N0cmluZz19IGFzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcmVfKHVybCwgcmVsLCBhcykge1xuICAgIC8vIDxsaW5rIHJlbD1cInByZWZldGNoXCIgaHJlZj1cIi4uLlwiIGFzPVwiXCI+XG4gICAgY29uc3QgbGlua0VsID0gY3JlYXRlRWxlbWVudCh0aGlzLmRvY18sICdsaW5rJywge1xuICAgICAgJ3JlbCc6IHJlbCxcbiAgICAgICdocmVmJzogdXJsLFxuICAgIH0pO1xuICAgIGlmIChhcykge1xuICAgICAgbGlua0VsLnNldEF0dHJpYnV0ZSgnYXMnLCBhcyk7XG4gICAgfVxuICAgIHRoaXMuZG9jXy5oZWFkLmFwcGVuZENoaWxkKGxpbmtFbCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVGhlIFN1YnNjcmliZSB3aXRoIEdvb2dsZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHJhbmRvbSB2YWx1ZXMuICBUaGUgbGVuZ3RoIG9mIHRoZSBhcnJheSBpcyBudW1JbnRzLiAgRWFjaFxuICogaW50IHdpbGwgYmUgPj0gMCBhbmQgPCBtYXhWYWwuXG4gKiBAcGFyYW0geyFudW1iZXJ9IG51bUludHNcbiAqIEBwYXJhbSB7IW51bWJlcn0gbWF4VmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRzKG51bUludHMsIG1heFZhbCkge1xuICAvLyBFbnN1cmUgYXJyYXkgdHlwZSBpcyBhcHByb3ByaWF0ZSBmb3IgdGhlIG1heCB2YWx1ZSAocGVyZm9ybWFuY2UpXG4gIGNvbnN0IGFyciA9XG4gICAgbWF4VmFsIDwgMjU2XG4gICAgICA/IG5ldyBVaW50OEFycmF5KG51bUludHMpXG4gICAgICA6IG1heFZhbCA8IDMyNzY4XG4gICAgICA/IG5ldyBVaW50MTZBcnJheShudW1JbnRzKVxuICAgICAgOiBuZXcgVWludDMyQXJyYXkobnVtSW50cyk7XG5cbiAgaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgIGZvciAobGV0IGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICAgIGFycltpXSA9IGFycltpXSAlIG1heFZhbDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgZm9yIChsZXQgaSA9IGFyci5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgYXJyW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4VmFsKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2dldFJhbmRvbUludHN9IGZyb20gJy4vcmFuZG9tJztcblxuY29uc3QgQ0hBUlMgPSAnMDEyMzQ1Njc4OUFCQ0RFRic7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IF9tYXRjaFxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlclxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1VwcGVyQ2FzZShfbWF0Y2gsIGNoYXJhY3Rlcikge1xuICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQXR0cmlidXRlIG5hbWUgd2l0aCBkYXNoZXNcbiAqIEByZXR1cm4ge3N0cmluZ30gRGFzaGVzIHJlbW92ZWQgYW5kIGNoYXJhY3RlciBhZnRlciB0byB1cHBlciBjYXNlLlxuICogdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhc2hUb0NhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoLy0oW2Etel0pL2csIHRvVXBwZXJDYXNlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZSB3aXRoIGRhc2hlc1xuICogQHJldHVybiB7c3RyaW5nfSBEYXNoZXMgcmVwbGFjZWQgYnkgdW5kZXJsaW5lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhc2hUb1VuZGVybGluZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoJy0nLCAnXycpO1xufVxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IHN1ZmZpeFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgc3VmZml4KSB7XG4gIGNvbnN0IGluZGV4ID0gc3RyaW5nLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGg7XG4gIHJldHVybiBpbmRleCA+PSAwICYmIHN0cmluZy5pbmRleE9mKHN1ZmZpeCwgaW5kZXgpID09IGluZGV4O1xufVxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGguXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHByZWZpeCkge1xuICBpZiAocHJlZml4Lmxlbmd0aCA+IHN0cmluZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5sYXN0SW5kZXhPZihwcmVmaXgsIDApID09IDA7XG59XG5cbi8qKlxuICogRXhwYW5kcyBwbGFjZWhvbGRlcnMgaW4gYSBnaXZlbiB0ZW1wbGF0ZSBzdHJpbmcgd2l0aCB2YWx1ZXMuXG4gKlxuICogUGxhY2Vob2xkZXJzIHVzZSAke2tleS1uYW1lfSBzeW50YXggYW5kIGFyZSByZXBsYWNlZCB3aXRoIHRoZSB2YWx1ZVxuICogcmV0dXJuZWQgZnJvbSB0aGUgZ2l2ZW4gZ2V0dGVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgc3RyaW5nIHRvIGV4cGFuZC5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKHN0cmluZyk6Kn0gZ2V0dGVyIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgYSB2YWx1ZSBmb3IgYVxuICogICBwbGFjZWhvbGRlci4gUmV0dXJucyB2YWx1ZXMgd2lsbCBiZSBjb2VyY2VkIGludG8gc3RyaW5ncy5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4SXRlcmF0aW9ucyBOdW1iZXIgb2YgdGltZXMgdG8gZXhwYW5kIHRoZSB0ZW1wbGF0ZS5cbiAqICAgRGVmYXVsdHMgdG8gMSwgYnV0IHNob3VsZCBiZSBzZXQgdG8gYSBsYXJnZXIgdmFsdWUgeW91ciBwbGFjZWhvbGRlciB0b2tlbnNcbiAqICAgY2FuIGJlIGV4cGFuZGVkIHRvIG90aGVyIHBsYWNlaG9sZGVyIHRva2Vucy4gVGFrZSBjYXV0aW9uIHdpdGggbGFyZ2UgdmFsdWVzXG4gKiAgIGFzIHJlY3Vyc2l2ZWx5IGV4cGFuZGluZyBhIHN0cmluZyBjYW4gYmUgZXhwb25lbnRpYWxseSBleHBlbnNpdmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgZ2V0dGVyLCBtYXhJdGVyYXRpb25zID0gMSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1heEl0ZXJhdGlvbnM7IGkrKykge1xuICAgIGxldCBtYXRjaGVzID0gMDtcbiAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL1xcJHsoW159XSopfS9nLCAoX2EsIGIpID0+IHtcbiAgICAgIG1hdGNoZXMrKztcbiAgICAgIHJldHVybiBnZXR0ZXIoYik7XG4gICAgfSk7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG4vKipcbiAqIEhhc2ggZnVuY3Rpb24gZGpiMmFcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgYSBzaW1wbGUsIGZhc3QgaGFzaGluZyBmdW5jdGlvbiB1c2luZyBtaW5pbWFsIGNvZGUuXG4gKiBJdCBkb2VzICpub3QqIGhhdmUgZ29vZCBjcnlwdG9ncmFwaGljIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IDMyLWJpdCB1bnNpZ25lZCBoYXNoIG9mIHRoZSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0hhc2gzMihzdHIpIHtcbiAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgbGV0IGhhc2ggPSA1MzgxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgLy8gQ29udmVydCBmcm9tIDMyLWJpdCBzaWduZWQgdG8gdW5zaWduZWQuXG4gIHJldHVybiBTdHJpbmcoaGFzaCA+Pj4gMCk7XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGUgcGFzc2VkIHZhbHVlIGlzIHNhZmUgdG8gdXNlIGZvciBjaGFyYWN0ZXIgMTkgcGVyIHJmYzQxMjIsXG4gKiBzZWMuIDQuMS41LiAgXCJTZXRzIHRoZSBoaWdoIGJpdHMgb2YgY2xvY2sgc2VxdWVuY2VcIi5cbiAqIEBwYXJhbSB7IW51bWJlcn0gdlxuICovXG5mdW5jdGlvbiBnZXRDaGFyMTkodikge1xuICByZXR1cm4gQ0hBUlNbKHYgJiAweDMpIHwgMHg4XTtcbn1cblxuLyoqXG4gKiBUaGUgcmV0dXJuZWQgaWRlbnRpZmllciB3aWxsIGFsd2F5cyBiZSBhbiA4IGRpZ2l0IHZhbGlkIGhleGlkZWNpbWFsIG51bWJlclxuICogYW5kIHdpbGwgYmUgdW5pcXVlIGZvciBlYWNoIE1TIHdpdGhpbiBhIGdpdmVuIG1vbnRoLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRNb250aGx5VGltZUlkZW50aWZpZXIoKSB7XG4gIGNvbnN0IGhleFRpbWUgPSBEYXRlLm5vdygpLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleFRpbWUuc3Vic3RyaW5nKGhleFRpbWUubGVuZ3RoIC0gOCkudG9VcHBlckNhc2UoKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBSRkMgNDEyMiBWNCBVVUlELiBFeDogXCI5MjMyOUQzOS02RjVDLTQ1MjAtQUJGQy1BQUI2NDU0NEUxNzJcIlxuICogVGhlIGZpcnN0IDggZGlnaXRzIGFyZSB1bmlxdWUgZm9yIHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgbW9udGguICBUaGUgcmVzdFxuICogYXJlIHJhbmRvbWx5IGdlbmVyYXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFV1aWQoKSB7XG4gIGxldCB1dWlkID0gZ2V0TW9udGhseVRpbWVJZGVudGlmaWVyKCkgKyAnLSc7XG4gIGxldCBySW5kZXggPSAwO1xuICBjb25zdCByYW5kcyA9IGdldFJhbmRvbUludHMoMjMsIDE2KTtcbiAgZm9yIChsZXQgaSA9IDk7IGkgPCAzNjsgaSsrKSB7XG4gICAgc3dpdGNoIChpKSB7XG4gICAgICBjYXNlIDEzOlxuICAgICAgY2FzZSAxODpcbiAgICAgIGNhc2UgMjM6XG4gICAgICAgIHV1aWQgKz0gJy0nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTQ6XG4gICAgICAgIHV1aWQgKz0gJzQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTk6XG4gICAgICAgIHV1aWQgKz0gZ2V0Q2hhcjE5KHJhbmRzW3JJbmRleCsrXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdXVpZCArPSBDSEFSU1tyYW5kc1tySW5kZXgrK11dO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHV1aWQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIE5vdGU6IGxvYWRlZCBieSAzcCBzeXN0ZW0uIENhbm5vdCByZWx5IG9uIGJhYmVsIHBvbHlmaWxscy5cbmltcG9ydCB7bWFwfSBmcm9tICcuL29iamVjdC5qcyc7XG5pbXBvcnQge3N0YXJ0c1dpdGh9IGZyb20gJy4vc3RyaW5nJztcblxuLyoqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqL1xubGV0IHByb3BlcnR5TmFtZUNhY2hlO1xuXG4vKiogQGNvbnN0IHshQXJyYXk8c3RyaW5nPn0gKi9cbmNvbnN0IHZlbmRvclByZWZpeGVzID0gWydXZWJraXQnLCAnd2Via2l0JywgJ01veicsICdtb3onLCAnbXMnLCAnTycsICdvJ107XG5cbi8qKlxuICogRGVmYXVsdCBzdHlsZXMgdG8gYmUgc2V0IGZvciB0b3AgbGV2ZWwgZnJpZW5kbHkgaWZyYW1lLlxuICogU29tZSBhdHRyaWJ1dGVzIGFyZSBub3QgaW5jbHVkZWQgc3VjaCBhcyBoZWlnaHQsIGxlZnQsIG1hcmdpbi1sZWZ0OyBzaW5jZVxuICogdGhlc2UgYXR0cmlidXRlcyBhcmUgdXBkYXRlZCBieSBAbWVkaWEgcXVlcmllcyBhbmQgaGF2aW5nIHRoZXNlIHZhbHVlc1xuICogZGVmaW5lZCBoZXJlIGFzICFpbXBvcnRhbnQgZG9lcyBub3Qgd29yayBvbiBJRS9lZGdlIGJyb3dzZXJzLlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nfG51bWJlcj59XG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0U3R5bGVzID0ge1xuICAnYWxpZ24tY29udGVudCc6ICdub3JtYWwnLFxuICAnYW5pbWF0aW9uJzogJ25vbmUnLFxuICAnYWxpZ24taXRlbXMnOiAnbm9ybWFsJyxcbiAgJ2FsaWduLXNlbGYnOiAnYXV0bycsXG4gICdhbGlnbm1lbnQtYmFzZWxpbmUnOiAnYXV0bycsXG4gICdiYWNrZmFjZS12aXNpYmlsaXR5JzogJ2hpZGRlbicsXG4gICdiYWNrZ3JvdW5kLWNsaXAnOiAnYm9yZGVyLWJveCcsXG4gICdiYWNrZ3JvdW5kLWltYWdlJzogJ25vbmUnLFxuICAnYmFzZWxpbmUtc2hpZnQnOiAnMCcsXG4gICdibG9jay1zaXplJzogJ2F1dG8nLFxuICAnYm9yZGVyJzogJ25vbmUnLFxuICAnYm9yZGVyLWNvbGxhcHNlJzogJ3NlcGFyYXRlJyxcbiAgJ2JvdHRvbSc6ICcwJyxcbiAgJ2JveC1zaXppbmcnOiAnYm9yZGVyLWJveCcsXG4gICdicmVhay1hZnRlcic6ICdhdXRvJyxcbiAgJ2JyZWFrLWJlZm9yZSc6ICdhdXRvJyxcbiAgJ2JyZWFrLWluc2lkZSc6ICdhdXRvJyxcbiAgJ2J1ZmZlcmVkLXJlbmRlcmluZyc6ICdhdXRvJyxcbiAgJ2NhcHRpb24tc2lkZSc6ICd0b3AnLFxuICAnY2FyZXQtY29sb3InOiAncmdiKDUxLCA1MSwgNTEpJyxcbiAgJ2NsZWFyJzogJ25vbmUnLFxuICAnY29sb3InOiAncmdiKDUxLCA1MSwgNTEpJyxcbiAgJ2NvbG9yLXJlbmRlcmluZyc6ICdhdXRvJyxcbiAgJ2NvbHVtbi1jb3VudCc6ICdhdXRvJyxcbiAgJ2NvbHVtbi1maWxsJzogJ2JhbGFuY2UnLFxuICAnY29sdW1uLWdhcCc6ICdub3JtYWwnLFxuICAnY29sdW1uLXJ1bGUtY29sb3InOiAncmdiKDUxLCA1MSwgNTEpJyxcbiAgJ2NvbHVtbi1ydWxlLXN0eWxlJzogJ25vbmUnLFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiAnMCcsXG4gICdjb2x1bW4tc3Bhbic6ICdub25lJyxcbiAgJ2NvbHVtbi13aWR0aCc6ICdhdXRvJyxcbiAgJ2NvbnRhaW4nOiAnbm9uZScsXG4gICdjb3VudGVyLWluY3JlbWVudCc6ICdub25lJyxcbiAgJ2NvdW50ZXItcmVzZXQnOiAnbm9uZScsXG4gICdjdXJzb3InOiAnYXV0bycsXG4gICdkaXJlY3Rpb24nOiAnaW5oZXJpdCcsXG4gICdkaXNwbGF5JzogJ2Jsb2NrJyxcbiAgJ2VtcHR5LWNlbGxzJzogJ3Nob3cnLFxuICAnZmlsdGVyJzogJ25vbmUnLFxuICAnZmxleCc6ICdub25lJywgLy8gZmxleC1ncm93LCBmbGV4LXNocmluaywgYW5kIGZsZXgtYmFzaXMuXG4gICdmbGV4LWZsb3cnOiAncm93IG5vd3JhcCcsIC8vIGZsZXgtZGlyZWN0aW9uLCBmbGV4LXdyYXAuXG4gICdmbG9hdCc6ICdub25lJyxcbiAgJ2Zsb29kLWNvbG9yJzogJ3JnYigwLCAwLCAwKScsXG4gICdmbG9vZC1vcGFjaXR5JzogJzEnLFxuICAnZm9udCc6ICdub25lJyxcbiAgJ2ZvbnQtc2l6ZSc6ICdtZWRpdW0nLFxuICAnZm9udC1mYW1pbHknOiAnJyxcbiAgJ2hlaWdodCc6ICdhdXRvJyxcbiAgJ2h5cGhlbnMnOiAnbWFudWFsJyxcbiAgJ2ltYWdlLXJlbmRlcmluZyc6ICdhdXRvJyxcbiAgJ2lubGluZS1zaXplJzogJycsIC8vIFNldHRpbmcgdG8gJ2F1dG8nIHdpbGwgbm90IGFsbG93IG92ZXJyaWRlLlxuICAnaXNvbGF0aW9uJzogJ2F1dG8nLFxuICAnanVzdGlmeS1jb250ZW50JzogJ25vcm1hbCcsXG4gICdqdXN0aWZ5LWl0ZW1zJzogJ25vcm1hbCcsXG4gICdqdXN0aWZ5LXNlbGYnOiAnYXV0bycsXG4gICdsZXR0ZXItc3BhY2luZyc6ICdub3JtYWwnLFxuICAnbGlnaHRpbmctY29sb3InOiAncmdiKDI1NSwgMjU1LCAyNTUpJyxcbiAgJ2xpbmUtYnJlYWsnOiAnYXV0bycsXG4gICdsaW5lLWhlaWdodCc6ICdub3JtYWwnLFxuICAnbWFzayc6ICdub25lJyxcbiAgJ21heC1ibG9jay1zaXplJzogJ25vbmUnLFxuICAnbWF4LWhlaWdodCc6ICdub25lJyxcbiAgJ21heC1pbmxpbmUtc2l6ZSc6ICdub25lJyxcbiAgJ21heC13aWR0aCc6ICdub25lJyxcbiAgJ21pbi1ibG9jay1zaXplJzogJ25vbmUnLFxuICAnbWluLWhlaWdodCc6ICcwJyxcbiAgJ21pbi1pbmxpbmUtc2l6ZSc6ICcwJyxcbiAgJ21pbi13aWR0aCc6ICcwJyxcbiAgJ21peC1ibGVuZC1tb2RlJzogJ25vcm1hbCcsXG4gICdvYmplY3QtZml0JzogJ2ZpbGwnLCAvLyBJbXBvcnRhbnQgZm9yIFNhZmFyaSBicm93c2VyLlxuICAnb2Zmc2V0LWRpc3RhbmNlJzogJ25vbmUnLCAvLyBDaHJvbWUgb25seSAoRXhwZXJpbWVudGFsKS5cbiAgJ29mZnNldC1wYXRoJzogJ25vbmUnLCAvLyBDaHJvbWUgb25seSAoRXhwZXJpbWVudGFsKS5cbiAgJ29mZnNldC1yb3RhdGUnOiAnYXV0byAwZGVnJywgLy8gQ2hyb21lIG9ubHkgKEV4cGVyaW1lbnRhbCkuXG4gICdvcGFjaXR5JzogJzEnLFxuICAnb3JkZXInOiAnMCcsXG4gICdvcnBoYW5zJzogJzInLFxuICAnb3V0bGluZSc6ICdub25lJyxcbiAgJ292ZXJmbG93LWFuY2hvcic6ICdhdXRvJyxcbiAgJ292ZXJmbG93LXdyYXAnOiAnbm9ybWFsJyxcbiAgJ292ZXJmbG93JzogJ3Zpc2libGUnLFxuICAncGFkZGluZyc6ICcwJyxcbiAgJ3BhZ2UnOiAnJyxcbiAgJ3BlcnNwZWN0aXZlJzogJ25vbmUnLFxuICAncG9pbnRlci1ldmVudHMnOiAnYXV0bycsXG4gICdwb3NpdGlvbic6ICdzdGF0aWMnLFxuICAncXVvdGVzJzogJycsXG4gICdyZXNpemUnOiAnbm9uZScsXG4gICdyaWdodCc6ICcwJyxcbiAgJ3Njcm9sbC1iZWhhdmlvcic6ICdhdXRvJyxcbiAgJ3RhYi1zaXplJzogJzgnLCAvLyBPbmx5IENocm9tZSwgU2FmYXJpIChFeHBlcmltZW50YWwpLlxuICAndGFibGUtbGF5b3V0JzogJ2F1dG8nLFxuICAndGV4dC1hbGlnbic6ICdzdGFydCcsXG4gICd0ZXh0LWFsaWduLWxhc3QnOiAnYXV0bycsXG4gICd0ZXh0LWFuY2hvcic6ICdzdGFydCcsXG4gICd0ZXh0LWNvbWJpbmUtdXByaWdodCc6ICdub25lJyxcbiAgJ3RleHQtZGVjb3JhdGlvbic6ICdub25lJyxcbiAgJ3RleHQtaW5kZW50JzogJzAnLFxuICAndGV4dC1vcmllbnRhdGlvbic6ICdtaXhlZCcsXG4gICd0ZXh0LW92ZXJmbG93JzogJ2NsaXAnLFxuICAndGV4dC1yZW5kZXJpbmcnOiAnYXV0bycsXG4gICd0ZXh0LXNoYWRvdyc6ICdub25lJyxcbiAgJ3RleHQtc2l6ZS1hZGp1c3QnOiAnYXV0bycsXG4gICd0ZXh0LXRyYW5zZm9ybSc6ICdub25lJyxcbiAgJ3RleHQtdW5kZXJsaW5lLXBvc2l0aW9uJzogJ2F1dG8nLFxuICAndG9wJzogJ2F1dG8nLFxuICAndG91Y2gtYWN0aW9uJzogJ2F1dG8nLFxuICAndHJhbnNmb3JtJzogJ25vbmUnLFxuICAndHJhbnNpdGlvbic6ICdub25lIDBzIGVhc2UgMHMnLFxuICAndW5pY29kZS1iaWRpJzogJ25vcm1hbCcsXG4gICd1c2VyLXNlbGVjdCc6ICdhdXRvJyxcbiAgJ3ZlY3Rvci1lZmZlY3QnOiAnbm9uZScsXG4gICd2ZXJ0aWNhbC1hbGlnbic6ICdiYXNlbGluZScsXG4gICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAnd2hpdGUtc3BhY2UnOiAnbm9ybWFsJyxcbiAgJ3dpZG93cyc6ICcyJyxcbiAgJ3dvcmQtYnJlYWsnOiAnbm9ybWFsJyxcbiAgJ3dvcmQtc3BhY2luZyc6ICcwJyxcbiAgJ3dvcmQtd3JhcCc6ICdub3JtYWwnLFxuICAnd3JpdGluZy1tb2RlJzogJ2hvcml6b250YWwtdGInLFxuICAnem9vbSc6ICcxJyxcbiAgJ3otaW5kZXgnOiAnYXV0bycsXG59O1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgZ29vZ2xlRm9udHNVcmwgPVxuICAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUdvb2dsZStTYW5zJztcblxuLyoqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge3N0cmluZ30gY2FtZWxDYXNlIGNhbWVsIGNhc2VkIHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfSB0aXRsZSBjYXNlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsQ2FzZVRvVGl0bGVDYXNlKGNhbWVsQ2FzZSkge1xuICByZXR1cm4gY2FtZWxDYXNlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2FtZWxDYXNlLnNsaWNlKDEpO1xufVxuXG4vKipcbiAqIENoZWNrcyB0aGUgc3R5bGUgaWYgYSBwcmVmaXhlZCB2ZXJzaW9uIG9mIGEgcHJvcGVydHkgZXhpc3RzIGFuZCByZXR1cm5zXG4gKiBpdCBvciByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyFPYmplY3R9IHN0eWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVDYXNlIHRoZSB0aXRsZSBjYXNlIHZlcnNpb24gb2YgYSBjc3MgcHJvcGVydHkgbmFtZVxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcHJlZml4ZWQgcHJvcGVydHkgbmFtZSBvciBudWxsLlxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JKc1Byb3BlcnR5TmFtZV8oc3R5bGUsIHRpdGxlQ2FzZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZlbmRvclByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gdmVuZG9yUHJlZml4ZXNbaV0gKyB0aXRsZUNhc2U7XG4gICAgaWYgKHN0eWxlW3Byb3BlcnR5TmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5TmFtZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBvc3NpYmx5IHByZWZpeGVkIEphdmFTY3JpcHQgcHJvcGVydHkgbmFtZSBvZiBhIHN0eWxlIHByb3BlcnR5XG4gKiAoZXguIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvbikgZ2l2ZW4gYSBjYW1lbENhc2UnZCB2ZXJzaW9uIG9mIHRoZSBwcm9wZXJ0eVxuICogKGV4LiB0cmFuc2l0aW9uRHVyYXRpb24pLlxuICogQGV4cG9ydFxuICogQHBhcmFtIHshT2JqZWN0fSBzdHlsZVxuICogQHBhcmFtIHtzdHJpbmd9IGNhbWVsQ2FzZSB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBvZiBhIGNzcyBwcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBieXBhc3NDYWNoZSBieXBhc3MgdGhlIG1lbW9pemVkIGNhY2hlIG9mIHByb3BlcnR5XG4gKiAgIG1hcHBpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZlbmRvckpzUHJvcGVydHlOYW1lKHN0eWxlLCBjYW1lbENhc2UsIGJ5cGFzc0NhY2hlKSB7XG4gIGlmIChzdGFydHNXaXRoKGNhbWVsQ2FzZSwgJy0tJykpIHtcbiAgICAvLyBDU1MgdmFycyBhcmUgcmV0dXJuZWQgYXMgaXMuXG4gICAgcmV0dXJuIGNhbWVsQ2FzZTtcbiAgfVxuICBpZiAoIXByb3BlcnR5TmFtZUNhY2hlKSB7XG4gICAgcHJvcGVydHlOYW1lQ2FjaGUgPSBtYXAoKTtcbiAgfVxuICBsZXQgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lQ2FjaGVbY2FtZWxDYXNlXTtcbiAgaWYgKCFwcm9wZXJ0eU5hbWUgfHwgYnlwYXNzQ2FjaGUpIHtcbiAgICBwcm9wZXJ0eU5hbWUgPSBjYW1lbENhc2U7XG4gICAgaWYgKHN0eWxlW2NhbWVsQ2FzZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgdGl0bGVDYXNlID0gY2FtZWxDYXNlVG9UaXRsZUNhc2UoY2FtZWxDYXNlKTtcbiAgICAgIGNvbnN0IHByZWZpeGVkUHJvcGVydHlOYW1lID0gZ2V0VmVuZG9ySnNQcm9wZXJ0eU5hbWVfKHN0eWxlLCB0aXRsZUNhc2UpO1xuXG4gICAgICBpZiAoc3R5bGVbcHJlZml4ZWRQcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcGVydHlOYW1lID0gcHJlZml4ZWRQcm9wZXJ0eU5hbWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghYnlwYXNzQ2FjaGUpIHtcbiAgICAgIHByb3BlcnR5TmFtZUNhY2hlW2NhbWVsQ2FzZV0gPSBwcm9wZXJ0eU5hbWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wZXJ0eU5hbWU7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgQ1NTIHN0eWxlcyBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQgd2l0aCAhaW1wb3J0YW50LiBUaGUgc3R5bGVzXG4gKiBhcmUgc3BlY2lmaWVkIGFzIGEgbWFwIGZyb20gQ1NTIHByb3BlcnR5IG5hbWVzIHRvIHRoZWlyIHZhbHVlcy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZ3xudW1iZXI+fSBzdHlsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEltcG9ydGFudFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgZm9yIChjb25zdCBrIGluIHN0eWxlcykge1xuICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICBnZXRWZW5kb3JKc1Byb3BlcnR5TmFtZShzdHlsZXMsIGspLFxuICAgICAgc3R5bGVzW2tdLnRvU3RyaW5nKCksXG4gICAgICAnaW1wb3J0YW50J1xuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBDU1Mgc3R5bGUgb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50IHdpdGggb3B0aW9uYWwgdW5pdHMsIGUuZy4gXCJweFwiLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7P3N0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gdW5pdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGJ5cGFzc0NhY2hlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXRzLCBieXBhc3NDYWNoZSkge1xuICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBnZXRWZW5kb3JKc1Byb3BlcnR5TmFtZShcbiAgICBlbGVtZW50LnN0eWxlLFxuICAgIHByb3BlcnR5LFxuICAgIGJ5cGFzc0NhY2hlXG4gICk7XG4gIGlmIChwcm9wZXJ0eU5hbWUpIHtcbiAgICBlbGVtZW50LnN0eWxlW3Byb3BlcnR5TmFtZV0gPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHVuaXRzXG4gICAgICA/IHZhbHVlICsgdW5pdHNcbiAgICAgIDogdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIENTUyBzdHlsZSBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGJ5cGFzc0NhY2hlXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHksIGJ5cGFzc0NhY2hlKSB7XG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGdldFZlbmRvckpzUHJvcGVydHlOYW1lKFxuICAgIGVsZW1lbnQuc3R5bGUsXG4gICAgcHJvcGVydHksXG4gICAgYnlwYXNzQ2FjaGVcbiAgKTtcbiAgaWYgKCFwcm9wZXJ0eU5hbWUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBlbGVtZW50LnN0eWxlW3Byb3BlcnR5TmFtZV07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgQ1NTIHN0eWxlcyBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuIFRoZSBzdHlsZXNcbiAqIGEgc3BlY2lmaWVkIGFzIGEgbWFwIGZyb20gQ1NTIHByb3BlcnR5IG5hbWVzIHRvIHRoZWlyIHZhbHVlcy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsID9zdHJpbmd8bnVtYmVyfGJvb2xlYW4+fSBzdHlsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgZm9yIChjb25zdCBrIGluIHN0eWxlcykge1xuICAgIHNldFN0eWxlKGVsZW1lbnQsIGssIHN0eWxlc1trXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG93cyBvciBoaWRlcyB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBkaXNwbGF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGUoZWxlbWVudCwgZGlzcGxheSkge1xuICBpZiAoZGlzcGxheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGlzcGxheSA9IGdldFN0eWxlKGVsZW1lbnQsICdkaXNwbGF5JykgPT0gJ25vbmUnO1xuICB9XG4gIHNldFN0eWxlKGVsZW1lbnQsICdkaXNwbGF5JywgZGlzcGxheSA/ICcnIDogJ25vbmUnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGl4ZWwgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB4KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSArICdweCc7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFwidHJhbnNsYXRlWFwiIGZvciBDU1MgXCJ0cmFuc2Zvcm1cIiBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZVgodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBgdHJhbnNsYXRlWCgke3ZhbHVlfSlgO1xuICB9XG4gIHJldHVybiBgdHJhbnNsYXRlWCgke3B4KHZhbHVlKX0pYDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgXCJ0cmFuc2xhdGVYXCIgZm9yIENTUyBcInRyYW5zZm9ybVwiIHByb3BlcnR5LlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB4XG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IHlcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZSh4LCB5KSB7XG4gIGlmICh0eXBlb2YgeCA9PSAnbnVtYmVyJykge1xuICAgIHggPSBweCh4KTtcbiAgfVxuICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSlgO1xuICB9XG4gIGlmICh0eXBlb2YgeSA9PSAnbnVtYmVyJykge1xuICAgIHkgPSBweCh5KTtcbiAgfVxuICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KWA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFwic2NhbGVcIiBmb3IgQ1NTIFwidHJhbnNmb3JtXCIgcHJvcGVydHkuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZSh2YWx1ZSkge1xuICByZXR1cm4gYHNjYWxlKCR7dmFsdWV9KWA7XG59XG5cbi8qKlxuICogUmVtb3ZlIGFscGhhIHZhbHVlIGZyb20gYSByZ2JhIGNvbG9yIHZhbHVlLlxuICogUmV0dXJuIHRoZSBuZXcgY29sb3IgcHJvcGVydHkgd2l0aCBhbHBoYSBlcXVhbHMgaWYgaGFzIHRoZSBhbHBoYSB2YWx1ZS5cbiAqIENhbGxlciBuZWVkcyB0byBtYWtlIHN1cmUgdGhlIGlucHV0IGNvbG9yIHZhbHVlIGlzIGEgdmFsaWQgcmdiYS9yZ2IgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSByZ2JhQ29sb3JcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFscGhhRnJvbUNvbG9yKHJnYmFDb2xvcikge1xuICByZXR1cm4gcmdiYUNvbG9yLnJlcGxhY2UoXG4gICAgL1xcKChbXixdKyksKFteLF0rKSwoW14sKV0rKSxbXildK1xcKS9nLFxuICAgICcoJDEsJDIsJDMsIDEpJ1xuICApO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIHRoZSBlbGVtZW50LiBUaGUgaGVscGVyIGlzIG5lY2Vzc2FyeSB0byBlbmZvcmNlXG4gKiB0aGUgcG9zc2libGUgYG51bGxgIHZhbHVlIHJldHVybmVkIGJ5IGEgYnVnZ3kgRmlyZWZveC5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxcbiAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWRTdHlsZSh3aW4sIGVsKSB7XG4gIGNvbnN0IHN0eWxlID0gLyoqIEB0eXBlIHs/Q1NTU3R5bGVEZWNsYXJhdGlvbn0gKi8gKHdpbi5nZXRDb21wdXRlZFN0eWxlKGVsKSk7XG4gIHJldHVybiAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqLyAoc3R5bGUpIHx8IG1hcCgpO1xufVxuXG4vKipcbiAqIFJlc2V0cyBzdHlsZXMgdGhhdCB3ZXJlIHNldCBkeW5hbWljYWxseSAoaS5lLiBpbmxpbmUpXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFN0eWxlcyhlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IHN0eWxlT2JqID0ge307XG4gIHByb3BlcnRpZXMuZm9yRWFjaChwcm9wID0+IHtcbiAgICBzdHlsZU9ialtwcm9wXSA9IG51bGw7XG4gIH0pO1xuICBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVPYmopO1xufVxuXG4vKipcbiAqIFJlc2V0cyBhbGwgdGhlIHN0eWxlcyBvZiBhbiBlbGVtZW50IHRvIGEgZ2l2ZW4gdmFsdWUuIERlZmF1bHRzIHRvIG51bGwuXG4gKiBUaGUgdmFsaWQgdmFsdWVzIGFyZSAnaW5oZXJpdCcsICdpbml0aWFsJywgJ3Vuc2V0JyBvciBudWxsLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRBbGxTdHlsZXMoZWxlbWVudCkge1xuICBzZXRJbXBvcnRhbnRTdHlsZXMoZWxlbWVudCwgZGVmYXVsdFN0eWxlcyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIEBjb25zdCAqL1xuY29uc3QgdG9TdHJpbmdfID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBFQ01BIFtbQ2xhc3NdXSBvZiBhIHZhbHVlXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZ18uY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB2YWx1ZSBpcyBhY3R1YWxseSBhbiBBcnJheS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhbiBhcnJheS5cbiAqIEBwYXJhbSB7P0lBcnJheUxpa2U8VD58c3RyaW5nfSBhcnJheUxpa2VcbiAqIEByZXR1cm4geyFBcnJheTxUPn1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KGFycmF5TGlrZSkge1xuICBpZiAoIWFycmF5TGlrZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShhcnJheUxpa2UubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUxpa2UubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheVtpXSA9IGFycmF5TGlrZVtpXTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB2YWx1ZSBpcyBhY3R1YWxseSBhbiBPYmplY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB2YWx1ZSBpcyBvZiBudW1iZXIgdHlwZSBhbmQgZmluaXRlLlxuICogTmFOIGFuZCBJbmZpbml0eSBhcmUgbm90IGNvbnNpZGVyZWQgYSBmaW5pdGUgbnVtYmVyLlxuICogU3RyaW5nIG51bWJlcnMgYXJlIG5vdCBjb25zaWRlcmVkIG51bWJlcnMuXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGaW5pdGVOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdmFsdWUgaXMgb2YgRm9ybURhdGEgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYHNgIGlzIGEgdmFsaWQgdmFsdWUgb2YgYGVudW1PYmpgLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdDxUPn0gZW51bU9ialxuICogQHBhcmFtIHtUfSBzXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW51bVZhbHVlKGVudW1PYmosIHMpIHtcbiAgZm9yIChjb25zdCBrIGluIGVudW1PYmopIHtcbiAgICBpZiAoZW51bU9ialtrXSA9PT0gcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBhIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIFRydWUgaWYgdGhlIHZhbHVlIGlzIGVpdGhlciB0cnVlIG9yIGZhbHNlLlxuICogQHBhcmFtIHs/Kn0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgU3Vic2NyaWJlIHdpdGggR29vZ2xlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2lzQXJyYXl9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAgQHR5cGVkZWYge3tcbiAgICBocmVmOiBzdHJpbmcsXG4gICAgcHJvdG9jb2w6IHN0cmluZyxcbiAgICBob3N0OiBzdHJpbmcsXG4gICAgaG9zdG5hbWU6IHN0cmluZyxcbiAgICBwb3J0OiBzdHJpbmcsXG4gICAgcGF0aG5hbWU6IHN0cmluZyxcbiAgICBzZWFyY2g6IHN0cmluZyxcbiAgICBoYXNoOiBzdHJpbmcsXG4gICAgb3JpZ2luOiBzdHJpbmcsXG4gIH19XG4gICovXG5sZXQgTG9jYXRpb25EZWY7XG5cbi8qKlxuICogQ2FjaGVkIGEtdGFnIHRvIGF2b2lkIG1lbW9yeSBhbGxvY2F0aW9uIGR1cmluZyBVUkwgcGFyc2luZy5cbiAqIEB0eXBlIHtIVE1MQW5jaG9yRWxlbWVudH1cbiAqL1xubGV0IGE7XG5cbi8qKlxuICogV2UgY2FjaGVkIGFsbCBwYXJzZWQgVVJMcy4gQXMgb2Ygbm93IHRoZXJlIGFyZSBubyB1c2UgY2FzZXNcbiAqIG9mIEFNUCBkb2NzIHRoYXQgd291bGQgZXZlciBwYXJzZSBhbiBhY3R1YWwgbGFyZ2UgbnVtYmVyIG9mIFVSTHMsXG4gKiBidXQgd2Ugb2Z0ZW4gcGFyc2UgdGhlIHNhbWUgb25lIG92ZXIgYW5kIG92ZXIgYWdhaW4uXG4gKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgIUxvY2F0aW9uRGVmPn1cbiAqL1xubGV0IGNhY2hlO1xuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgbWFwIGludG8gYSBxdWVyeSBzdHJpbmcgd2l0aCBib3RoIGtleXNcbiAqIGFuZCB2YWx1ZXMgZW5jb2RlZC5cbiAqIEBwYXJhbSB7IUpzb25PYmplY3R9IHBhcmFtc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplUXVlcnlTdHJpbmcocGFyYW1zKSB7XG4gIGNvbnN0IHMgPSBbXTtcbiAgZm9yIChjb25zdCBrIGluIHBhcmFtcykge1xuICAgIGNvbnN0IHYgPSBwYXJhbXNba107XG4gICAgaWYgKHYgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHYpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3YgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHZbaV0pO1xuICAgICAgICBzLnB1c2goYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGspfT0ke2VuY29kZVVSSUNvbXBvbmVudChzdil9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN2ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2KTtcbiAgICAgIHMucHVzaChgJHtlbmNvZGVVUklDb21wb25lbnQoayl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHN2KX1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMuam9pbignJicpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBMb2NhdGlvbi1saWtlIG9iamVjdCBmb3IgdGhlIGdpdmVuIFVSTC4gSWYgaXQgaXMgcmVsYXRpdmUsXG4gKiB0aGUgVVJMIGdldHMgcmVzb2x2ZWQuXG4gKiBDb25zaWRlciB0aGUgcmV0dXJuZWQgb2JqZWN0IGltbXV0YWJsZS4gVGhpcyBpcyBlbmZvcmNlZCBkdXJpbmdcbiAqIHRlc3RpbmcgYnkgZnJlZXppbmcgdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4geyFMb2NhdGlvbkRlZn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICBpZiAoIWEpIHtcbiAgICBhID0gLyoqIEB0eXBlIHshSFRNTEFuY2hvckVsZW1lbnR9ICovIChzZWxmLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSk7XG4gICAgY2FjaGUgPSBzZWxmLlVybENhY2hlIHx8IChzZWxmLlVybENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIH1cblxuICBjb25zdCBmcm9tQ2FjaGUgPSBjYWNoZVt1cmxdO1xuICBpZiAoZnJvbUNhY2hlKSB7XG4gICAgcmV0dXJuIGZyb21DYWNoZTtcbiAgfVxuXG4gIGNvbnN0IGluZm8gPSBwYXJzZVVybFdpdGhBKGEsIHVybCk7XG5cbiAgcmV0dXJuIChjYWNoZVt1cmxdID0gaW5mbyk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIExvY2F0aW9uLWxpa2Ugb2JqZWN0IGZvciB0aGUgZ2l2ZW4gVVJMLiBJZiBpdCBpcyByZWxhdGl2ZSxcbiAqIHRoZSBVUkwgZ2V0cyByZXNvbHZlZC5cbiAqIEBwYXJhbSB7IUhUTUxBbmNob3JFbGVtZW50fSBhXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHshTG9jYXRpb25EZWZ9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlVXJsV2l0aEEoYSwgdXJsKSB7XG4gIGEuaHJlZiA9IHVybDtcblxuICAvLyBJRTExIGRvZXNuJ3QgcHJvdmlkZSBmdWxsIFVSTCBjb21wb25lbnRzIHdoZW4gcGFyc2luZyByZWxhdGl2ZSBVUkxzLlxuICAvLyBBc3NpZ25pbmcgdG8gaXRzZWxmIGFnYWluIGRvZXMgdGhlIHRyaWNrLlxuICBpZiAoIWEucHJvdG9jb2wpIHtcbiAgICBhLmhyZWYgPSBhLmhyZWY7XG4gIH1cblxuICAvKiogQHR5cGUgeyFMb2NhdGlvbkRlZn0gKi9cbiAgY29uc3QgaW5mbyA9IHtcbiAgICBocmVmOiBhLmhyZWYsXG4gICAgcHJvdG9jb2w6IGEucHJvdG9jb2wsXG4gICAgaG9zdDogYS5ob3N0LFxuICAgIGhvc3RuYW1lOiBhLmhvc3RuYW1lLFxuICAgIHBvcnQ6IGEucG9ydCA9PSAnMCcgPyAnJyA6IGEucG9ydCxcbiAgICBwYXRobmFtZTogYS5wYXRobmFtZSxcbiAgICBzZWFyY2g6IGEuc2VhcmNoLFxuICAgIGhhc2g6IGEuaGFzaCxcbiAgICBvcmlnaW46ICcnLCAvLyBTZXQgYmVsb3cuXG4gIH07XG5cbiAgLy8gU29tZSBJRTExIHNwZWNpZmljIHBvbHlmaWxscy5cbiAgLy8gMSkgSUUxMSBzdHJpcHMgb3V0IHRoZSBsZWFkaW5nICcvJyBpbiB0aGUgcGF0aG5hbWUuXG4gIGlmIChpbmZvLnBhdGhuYW1lWzBdICE9PSAnLycpIHtcbiAgICBpbmZvLnBhdGhuYW1lID0gJy8nICsgaW5mby5wYXRobmFtZTtcbiAgfVxuXG4gIC8vIDIpIEZvciBVUkxzIHdpdGggaW1wbGljaXQgcG9ydHMsIElFMTEgcGFyc2VzIHRvIGRlZmF1bHQgcG9ydHMgd2hpbGVcbiAgLy8gb3RoZXIgYnJvd3NlcnMgbGVhdmUgdGhlIHBvcnQgZmllbGQgZW1wdHkuXG4gIGlmIChcbiAgICAoaW5mby5wcm90b2NvbCA9PSAnaHR0cDonICYmIGluZm8ucG9ydCA9PSA4MCkgfHxcbiAgICAoaW5mby5wcm90b2NvbCA9PSAnaHR0cHM6JyAmJiBpbmZvLnBvcnQgPT0gNDQzKVxuICApIHtcbiAgICBpbmZvLnBvcnQgPSAnJztcbiAgICBpbmZvLmhvc3QgPSBpbmZvLmhvc3RuYW1lO1xuICB9XG5cbiAgLy8gRm9yIGRhdGEgVVJJIGEub3JpZ2luIGlzIGVxdWFsIHRvIHRoZSBzdHJpbmcgJ251bGwnIHdoaWNoIGlzIG5vdCB1c2VmdWwuXG4gIC8vIFdlIGluc3RlYWQgcmV0dXJuIHRoZSBhY3R1YWwgb3JpZ2luIHdoaWNoIGlzIHRoZSBmdWxsIFVSTC5cbiAgaWYgKGEub3JpZ2luICYmIGEub3JpZ2luICE9ICdudWxsJykge1xuICAgIGluZm8ub3JpZ2luID0gYS5vcmlnaW47XG4gIH0gZWxzZSBpZiAoaW5mby5wcm90b2NvbCA9PSAnZGF0YTonIHx8ICFpbmZvLmhvc3QpIHtcbiAgICBpbmZvLm9yaWdpbiA9IGluZm8uaHJlZjtcbiAgfSBlbHNlIHtcbiAgICBpbmZvLm9yaWdpbiA9IGluZm8ucHJvdG9jb2wgKyAnLy8nICsgaW5mby5ob3N0O1xuICB9XG4gIHJldHVybiBpbmZvO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbmQgYnVpbGRzIE9iamVjdCBvZiBVUkwgcXVlcnkgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFRoZSBVUkwgcXVlcnkgc3RyaW5nLlxuICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5KSB7XG4gIGlmICghcXVlcnkpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuICgvXls/I10vLnRlc3QocXVlcnkpID8gcXVlcnkuc2xpY2UoMSkgOiBxdWVyeSlcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5yZWR1Y2UoKHBhcmFtcywgcGFyYW0pID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBwYXJhbS5zcGxpdCgnPScpO1xuICAgICAgY29uc3Qga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0ZW1bMF0gfHwgJycpO1xuICAgICAgY29uc3QgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoaXRlbVsxXSB8fCAnJyk7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBBZGRzIGEgcGFyYW1ldGVyIHRvIGEgcXVlcnkgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFF1ZXJ5UGFyYW0odXJsLCBwYXJhbSwgdmFsdWUpIHtcbiAgY29uc3QgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/Jyk7XG4gIGNvbnN0IGZyYWdtZW50SW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICBsZXQgZnJhZ21lbnQgPSAnJztcbiAgaWYgKGZyYWdtZW50SW5kZXggIT0gLTEpIHtcbiAgICBmcmFnbWVudCA9IHVybC5zdWJzdHJpbmcoZnJhZ21lbnRJbmRleCk7XG4gICAgdXJsID0gdXJsLnN1YnN0cmluZygwLCBmcmFnbWVudEluZGV4KTtcbiAgfVxuICBpZiAocXVlcnlJbmRleCA9PSAtMSkge1xuICAgIHVybCArPSAnPyc7XG4gIH0gZWxzZSBpZiAocXVlcnlJbmRleCA8IHVybC5sZW5ndGggLSAxKSB7XG4gICAgdXJsICs9ICcmJztcbiAgfVxuICB1cmwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIHJldHVybiB1cmwgKyBmcmFnbWVudDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBVcmwgaW5jbHVkaW5nIHRoZSBwYXRoIGFuZCBzZWFyY2gsIHdpdGhvdXQgZnJlZ21lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIb3N0VXJsKHVybCkge1xuICBjb25zdCBsb2NhdGlvbkhyZWYgPSBwYXJzZVVybCh1cmwpO1xuICByZXR1cm4gbG9jYXRpb25IcmVmLm9yaWdpbiArIGxvY2F0aW9uSHJlZi5wYXRobmFtZSArIGxvY2F0aW9uSHJlZi5zZWFyY2g7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBTdWJzY3JpYmUgd2l0aCBHb29nbGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7YXNzZXJ0fSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge3BhcnNlSnNvbn0gZnJvbSAnLi9qc29uJztcbmltcG9ydCB7cGFyc2VVcmx9IGZyb20gJy4vdXJsJztcbmltcG9ydCB7dXRmOEVuY29kZVN5bmN9IGZyb20gJy4vYnl0ZXMnO1xuXG4vKipcbiAqIFRoZSBcImluaXRcIiBhcmd1bWVudCBvZiB0aGUgRmV0Y2ggQVBJLiBDdXJyZW50bHksIG9ubHkgXCJjcmVkZW50aWFsczogaW5jbHVkZVwiXG4gKiBpcyBpbXBsZW1lbnRlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dsb2JhbEZldGNoL2ZldGNoXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgYm9keTogKCFGb3JtRGF0YXxzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgY3JlZGVudGlhbHM6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgaGVhZGVyczogKCFPYmplY3R8dW5kZWZpbmVkKSxcbiAqICAgbWV0aG9kOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIHJlc3BvbnNlVHlwZTogKHN0cmluZylcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgRmV0Y2hJbml0RGVmO1xuXG4vKiogQHByaXZhdGUgQGNvbnN0IHshQXJyYXk8c3RyaW5nPn0gKi9cbmNvbnN0IGFsbG93ZWRNZXRob2RzXyA9IFsnR0VUJywgJ1BPU1QnXTtcblxuLyoqIEBwcml2YXRlIEBlbnVtIHtudW1iZXJ9IEFsbG93ZWQgZmV0Y2ggcmVzcG9uc2VzLiAqL1xuY29uc3QgYWxsb3dlZEZldGNoVHlwZXNfID0ge1xuICBkb2N1bWVudDogMSxcbiAgdGV4dDogMixcbn07XG5cbi8qKlxuICogQSBjbGFzcyB0aGF0IHBvbHlmaWxscyBGZXRjaCBBUEkuXG4gKi9cbmV4cG9ydCBjbGFzcyBYaHIge1xuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHdpbikge1xuICAgIC8qKiBAY29uc3QgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW4gPSB3aW47XG4gIH1cblxuICAvKipcbiAgICogV2Ugd2FudCB0byBjYWxsIGBmZXRjaF9gIHVuYm91bmQgZnJvbSBhbnkgY29udGV4dCBzaW5jZSBpdCBjb3VsZFxuICAgKiBiZSBlaXRoZXIgdGhlIG5hdGl2ZSBmZXRjaCBvciBvdXIgcG9seWZpbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICAgKiBAcGFyYW0geyFGZXRjaEluaXREZWZ9IGluaXRcbiAgICogQHJldHVybiB7IVByb21pc2U8IUZldGNoUmVzcG9uc2U+fCFQcm9taXNlPCFSZXNwb25zZT59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmZXRjaF8oaW5wdXQsIGluaXQpIHtcbiAgICAvLyBUT0RPKGF2aW1laHRhKTogU2hvdWxkIHRoZSByZXF1ZXN0cyBnbyB0aHJvdWdoIHdoZW4gcGFnZSBpcyBub3QgdmlzaWJsZT9cbiAgICBhc3NlcnQodHlwZW9mIGlucHV0ID09ICdzdHJpbmcnLCAnT25seSBVUkwgc3VwcG9ydGVkOiAlcycsIGlucHV0KTtcbiAgICAvLyBJbiBwYXJ0aWN1bGFyLCBGaXJlZm94IGRvZXMgbm90IHRvbGVyYXRlIGBudWxsYCB2YWx1ZXMgZm9yXG4gICAgLy8gYGNyZWRlbnRpYWxzYC5cbiAgICBjb25zdCBjcmVkcyA9IGluaXQuY3JlZGVudGlhbHM7XG4gICAgYXNzZXJ0KFxuICAgICAgY3JlZHMgPT09IHVuZGVmaW5lZCB8fCBjcmVkcyA9PSAnaW5jbHVkZScgfHwgY3JlZHMgPT0gJ29taXQnLFxuICAgICAgJ09ubHkgY3JlZGVudGlhbHM9aW5jbHVkZXxvbWl0IHN1cHBvcnQ6ICVzJyxcbiAgICAgIGNyZWRzXG4gICAgKTtcbiAgICAvLyBGYWxsYmFjayB0byB4aHIgcG9seWZpbGwgc2luY2UgYGZldGNoYCBhcGkgZG9lcyBub3Qgc3VwcG9ydFxuICAgIC8vIHJlc3BvbnNlVHlwZSA9ICdkb2N1bWVudCcuIFdlIGRvIHRoaXMgc28gd2UgZG9uJ3QgaGF2ZSB0byBkbyBhbnkgcGFyc2luZ1xuICAgIC8vIGFuZCBkb2N1bWVudCBjb25zdHJ1Y3Rpb24gb24gdGhlIFVJIHRocmVhZCB3aGljaCB3b3VsZCBiZSBleHBlbnNpdmUuXG4gICAgaWYgKGluaXQucmVzcG9uc2VUeXBlID09ICdkb2N1bWVudCcpIHtcbiAgICAgIHJldHVybiBmZXRjaFBvbHlmaWxsKGlucHV0LCBpbml0KTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLndpbi5mZXRjaCB8fCBmZXRjaFBvbHlmaWxsKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBVUkxcbiAgICogQHBhcmFtIHs/RmV0Y2hJbml0RGVmfSBpbml0IEZldGNoIG9wdGlvbnMgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhRmV0Y2hSZXNwb25zZT59XG4gICAqL1xuICBmZXRjaChpbnB1dCwgaW5pdCkge1xuICAgIC8vIFRPRE8gKGF2aW1laHRhKTogRmlndXJlIG91dCBpZiBDT1JTIG5lZWRzIGJlIGhhbmRsZWQgdGhlIHdheSBBTVAgZG9lcyBpdC5cbiAgICBpbml0ID0gc2V0dXBJbml0KGluaXQpO1xuICAgIHJldHVybiB0aGlzLmZldGNoXyhpbnB1dCwgaW5pdClcbiAgICAgIC50aGVuKFxuICAgICAgICByZXNwb25zZSA9PiByZXNwb25zZSxcbiAgICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRPcmlnaW4gPSBwYXJzZVVybChpbnB1dCkub3JpZ2luO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBYSFIgRmFpbGVkIGZldGNoaW5nICgke3RhcmdldE9yaWdpbn0vLi4uKTpgLFxuICAgICAgICAgICAgcmVhc29uICYmIHJlYXNvbi5tZXNzYWdlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gYXNzZXJ0U3VjY2VzcyhyZXNwb25zZSkpO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplZCBtZXRob2QgbmFtZSBieSB1cHBlcmNhc2luZy5cbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gbWV0aG9kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2RfKG1ldGhvZCkge1xuICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gJ0dFVCc7XG4gIH1cbiAgbWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG5cbiAgYXNzZXJ0KFxuICAgIGFsbG93ZWRNZXRob2RzXy5pbmNsdWRlcyhtZXRob2QpLFxuICAgICdPbmx5IG9uZSBvZiAlcyBpcyBjdXJyZW50bHkgYWxsb3dlZC4gR290ICVzJyxcbiAgICBhbGxvd2VkTWV0aG9kc18uam9pbignLCAnKSxcbiAgICBtZXRob2RcbiAgKTtcblxuICByZXR1cm4gbWV0aG9kO1xufVxuXG4vKipcbiAqIFNldHMgdXAgYW5kIG5vcm1hbGl6ZXMgdGhlIEZldGNoSW5pdERlZlxuICpcbiAqIEBwYXJhbSB7P0ZldGNoSW5pdERlZj19IGluaXQgRmV0Y2ggb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZz19IGFjY2VwdCBUaGUgSFRUUCBBY2NlcHQgaGVhZGVyIHZhbHVlLlxuICogQHJldHVybiB7IUZldGNoSW5pdERlZn1cbiAqL1xuZnVuY3Rpb24gc2V0dXBJbml0KGluaXQsIGFjY2VwdCkge1xuICBpbml0ID0gaW5pdCB8fCAvKiogQHR5cGUge0ZldGNoSW5pdERlZn0gKi8gKHt9KTtcbiAgaW5pdC5tZXRob2QgPSBub3JtYWxpemVNZXRob2RfKGluaXQubWV0aG9kKTtcbiAgaW5pdC5oZWFkZXJzID0gaW5pdC5oZWFkZXJzIHx8IHt9O1xuICBpZiAoYWNjZXB0KSB7XG4gICAgaW5pdC5oZWFkZXJzWydBY2NlcHQnXSA9IGFjY2VwdDtcbiAgfVxuICByZXR1cm4gaW5pdDtcbn1cblxuLyoqXG4gKiBBIG1pbmltYWwgcG9seWZpbGwgb2YgRmV0Y2ggQVBJLiBJdCBvbmx5IHBvbHlmaWxscyB3aGF0IHdlIGN1cnJlbnRseSB1c2UuXG4gKlxuICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HbG9iYWxGZXRjaC9mZXRjaFxuICpcbiAqIE5vdGljZSB0aGF0IHRoZSBcImZldGNoXCIgbWV0aG9kIGl0c2VsZiBpcyBub3QgZXhwb3J0ZWQgYXMgdGhhdCB3b3VsZCByZXF1aXJlXG4gKiB1cyB0byBpbW1lZGlhdGVseSBzdXBwb3J0IGEgbXVjaCB3aWRlIEFQSS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcbiAqIEBwYXJhbSB7IUZldGNoSW5pdERlZn0gaW5pdFxuICogQHJldHVybiB7IVByb21pc2U8IUZldGNoUmVzcG9uc2U+fVxuICogQHByaXZhdGUgVmlzaWJsZSBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hQb2x5ZmlsbChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY29uc3QgeGhyID0gY3JlYXRlWGhyUmVxdWVzdChpbml0Lm1ldGhvZCB8fCAnR0VUJywgaW5wdXQpO1xuXG4gICAgaWYgKGluaXQuY3JlZGVudGlhbHMgPT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5pdC5yZXNwb25zZVR5cGUgaW4gYWxsb3dlZEZldGNoVHlwZXNfKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gaW5pdC5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGluaXQuaGVhZGVycykge1xuICAgICAgT2JqZWN0LmtleXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGluaXQuaGVhZGVyc1toZWFkZXJdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPCAvKiBTVEFUVVNfUkVDRUlWRUQgKi8gMikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoeGhyLnN0YXR1cyA8IDEwMCB8fCB4aHIuc3RhdHVzID4gNTk5KSB7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBVbmtub3duIEhUVFAgc3RhdHVzICR7eGhyLnN0YXR1c31gKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETyhkdm95dGVua28pOiBUaGlzIGlzIGN1cnJlbnRseSBzaW1wbGlmaWVkOiB3ZSB3aWxsIHdhaXQgZm9yIHRoZVxuICAgICAgLy8gd2hvbGUgZG9jdW1lbnQgbG9hZGluZyB0byBjb21wbGV0ZS4gVGhpcyBpcyBmaW5lIGZvciB0aGUgdXNlIGNhc2VzXG4gICAgICAvLyB3ZSBoYXZlIG5vdywgYnV0IG1heSBuZWVkIHRvIGJlIHJlaW1wbGVtZW50ZWQgbGF0ZXIuXG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gLyogQ09NUExFVEUgKi8gNCkge1xuICAgICAgICByZXNvbHZlKG5ldyBGZXRjaFJlc3BvbnNlKHhocikpO1xuICAgICAgfVxuICAgIH07XG4gICAgeGhyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdOZXR3b3JrIGZhaWx1cmUnKSk7XG4gICAgfTtcbiAgICB4aHIub25hYm9ydCA9ICgpID0+IHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcpKTtcbiAgICB9O1xuXG4gICAgaWYgKGluaXQubWV0aG9kID09ICdQT1NUJykge1xuICAgICAgeGhyLnNlbmQoaW5pdC5ib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4geyFYTUxIdHRwUmVxdWVzdH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVhoclJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDT1JTIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgfVxuICByZXR1cm4geGhyO1xufVxuXG4vKipcbiAqIElmIDQxNSBvciBpbiB0aGUgNXh4IHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c1xuICovXG5mdW5jdGlvbiBpc1JldHJpYWJsZShzdGF0dXMpIHtcbiAgcmV0dXJuIHN0YXR1cyA9PSA0MTUgfHwgKHN0YXR1cyA+PSA1MDAgJiYgc3RhdHVzIDwgNjAwKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZXNwb25zZSBpZiBzdWNjZXNzZnVsIG9yIG90aGVyd2lzZSB0aHJvd3MgYW4gZXJyb3IuXG4gKiBAcGFyYW0geyFGZXRjaFJlc3BvbnNlfSByZXNwb25zZVxuICogQHJldHVybiB7IVByb21pc2U8IUZldGNoUmVzcG9uc2U+fVxuICogQHByaXZhdGUgVmlzaWJsZSBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U3VjY2VzcyhyZXNwb25zZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgfVxuXG4gICAgY29uc3Qge3N0YXR1c30gPSByZXNwb25zZTtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYEhUVFAgZXJyb3IgJHtzdGF0dXN9YCk7XG4gICAgZXJyLnJldHJpYWJsZSA9IGlzUmV0cmlhYmxlKHN0YXR1cyk7XG4gICAgLy8gVE9ETyhAanJpZGdld2VsbCwgIzk0NDgpOiBDYWxsZXJzIHdobyBuZWVkIHRoZSByZXNwb25zZSBzaG91bGRcbiAgICAvLyBza2lwIHByb2Nlc3NpbmcuXG4gICAgZXJyLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXNwb25zZSBvYmplY3QgaW4gdGhlIEZldGNoIEFQSS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dsb2JhbEZldGNoL2ZldGNoXG4gKi9cbmV4cG9ydCBjbGFzcyBGZXRjaFJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVhNTEh0dHBSZXF1ZXN0fSB4aHJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHhocikge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFYTUxIdHRwUmVxdWVzdH0gKi9cbiAgICB0aGlzLnhocl8gPSB4aHI7XG5cbiAgICAvKiogQGNvbnN0IHtudW1iZXJ9ICovXG4gICAgdGhpcy5zdGF0dXMgPSB0aGlzLnhocl8uc3RhdHVzO1xuXG4gICAgLyoqIEBjb25zdCB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwO1xuXG4gICAgLyoqIEBjb25zdCB7IUZldGNoUmVzcG9uc2VIZWFkZXJzfSAqL1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBGZXRjaFJlc3BvbnNlSGVhZGVycyh4aHIpO1xuXG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZTtcblxuICAgIC8qKiBAdHlwZSB7P1JlYWRhYmxlU3RyZWFtfSAqL1xuICAgIHRoaXMuYm9keSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY29weSBvZiB0aGUgcmVzcG9uc2UgYW5kIHJldHVybiBpdC5cbiAgICogQHJldHVybiB7IUZldGNoUmVzcG9uc2V9XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICBhc3NlcnQoIXRoaXMuYm9keVVzZWQsICdCb2R5IGFscmVhZHkgdXNlZCcpO1xuICAgIHJldHVybiBuZXcgRmV0Y2hSZXNwb25zZSh0aGlzLnhocl8pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYWlucyB0aGUgcmVzcG9uc2UgYW5kIHJldHVybnMgdGhlIHRleHQuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkcmFpblRleHRfKCkge1xuICAgIGFzc2VydCghdGhpcy5ib2R5VXNlZCwgJ0JvZHkgYWxyZWFkeSB1c2VkJyk7XG4gICAgdGhpcy5ib2R5VXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnhocl8ucmVzcG9uc2VUZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmFpbnMgdGhlIHJlc3BvbnNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlc3BvbnNlXG4gICAqIHRleHQuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICB0ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmRyYWluVGV4dF8oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmFpbnMgdGhlIHJlc3BvbnNlIGFuZCByZXR1cm5zIHRoZSBKU09OIG9iamVjdC5cbiAgICogQHJldHVybiB7IVByb21pc2U8IUpzb25PYmplY3Q+fVxuICAgKi9cbiAganNvbigpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTwhSnNvbk9iamVjdD59ICovICh0aGlzLmRyYWluVGV4dF8oKS50aGVuKFxuICAgICAgcGFyc2VKc29uXG4gICAgKSk7XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHhociByZXNwb25zZVhNTC5cbiAgICogQHJldHVybiB7IVByb21pc2U8IURvY3VtZW50Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRvY3VtZW50XygpIHtcbiAgICBhc3NlcnQoIXRoaXMuYm9keVVzZWQsICdCb2R5IGFscmVhZHkgdXNlZCcpO1xuICAgIHRoaXMuYm9keVVzZWQgPSB0cnVlO1xuICAgIGFzc2VydChcbiAgICAgIHRoaXMueGhyXy5yZXNwb25zZVhNTCxcbiAgICAgICdyZXNwb25zZVhNTCBzaG91bGQgZXhpc3QuIE1ha2Ugc3VyZSB0byByZXR1cm4gJyArXG4gICAgICAgICdDb250ZW50LVR5cGU6IHRleHQvaHRtbCBoZWFkZXIuJ1xuICAgICk7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb21pc2U8IURvY3VtZW50Pn0gKi8gKFByb21pc2UucmVzb2x2ZShcbiAgICAgIGFzc2VydCh0aGlzLnhocl8ucmVzcG9uc2VYTUwpXG4gICAgKSk7XG4gIH1cblxuICAvKipcbiAgICogRHJhaW5zIHRoZSByZXNwb25zZSBhbmQgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXNwb25zZVxuICAgKiBBcnJheUJ1ZmZlci5cbiAgICogQHJldHVybiB7IVByb21pc2U8IUFycmF5QnVmZmVyPn1cbiAgICovXG4gIGFycmF5QnVmZmVyKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlPCFBcnJheUJ1ZmZlcj59ICovICh0aGlzLmRyYWluVGV4dF8oKS50aGVuKFxuICAgICAgdXRmOEVuY29kZVN5bmNcbiAgICApKTtcbiAgfVxufVxuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgcmVzcG9uc2UgaGVhZGVycyBhcyBkZWZpbmVkIGluIHRoZSBGZXRjaCBBUEkuXG4gKiBAcHJpdmF0ZSBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovXG5leHBvcnQgY2xhc3MgRmV0Y2hSZXNwb25zZUhlYWRlcnMge1xuICAvKipcbiAgICogQHBhcmFtIHshWE1MSHR0cFJlcXVlc3R9IHhoclxuICAgKi9cbiAgY29uc3RydWN0b3IoeGhyKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVhNTEh0dHBSZXF1ZXN0fSAqL1xuICAgIHRoaXMueGhyXyA9IHhocjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnhocl8uZ2V0UmVzcG9uc2VIZWFkZXIobmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhcyhuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMueGhyXy5nZXRSZXNwb25zZUhlYWRlcihuYW1lKSAhPSBudWxsO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgTUFYX1pfSU5ERVggPSAyMTQ3NDgzNjQ3O1xuXG5jb25zdCBDb25zdGFudHMgPSB7fTtcblxuLyoqXG4gKiBTdXBwb3J0ZWQgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbkNvbnN0YW50cy5FbnZpcm9ubWVudCA9IHtcbiAgTE9DQUw6ICdMT0NBTCcsXG4gIFBSRVBST0Q6ICdQUkVQUk9EJyxcbiAgUFJPRFVDVElPTjogJ1BST0RVQ1RJT04nLFxuICBTQU5EQk9YOiAnU0FOREJPWCcsXG4gIFRFU1Q6ICdURVNUJyxcbiAgVElOOiAnVElOJyxcbn07XG5cbi8qKlxuICogU3VwcG9ydGVkIHBheW1lbnQgbWV0aG9kcy5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5Db25zdGFudHMuUGF5bWVudE1ldGhvZCA9IHtcbiAgQ0FSRDogJ0NBUkQnLFxuICBUT0tFTklaRURfQ0FSRDogJ1RPS0VOSVpFRF9DQVJEJyxcbiAgVVBJOiAnVVBJJyxcbn07XG5cbi8qKlxuICogQXV0aCBtZXRob2RzLlxuICpcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbkNvbnN0YW50cy5BdXRoTWV0aG9kID0ge1xuICBDUllQVE9HUkFNXzNEUzogJ0NSWVBUT0dSQU1fM0RTJyxcbiAgUEFOX09OTFk6ICdQQU5fT05MWScsXG59O1xuXG4vKipcbiAqIFJldHVybmVkIHJlc3VsdCBzdGF0dXMuXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuQ29uc3RhbnRzLlJlc3BvbnNlU3RhdHVzID0ge1xuICBDQU5DRUxFRDogJ0NBTkNFTEVEJyxcbiAgREVWRUxPUEVSX0VSUk9SOiAnREVWRUxPUEVSX0VSUk9SJyxcbn07XG5cbi8qKlxuICogU3VwcG9ydGVkIHRvdGFsIHByaWNlIHN0YXR1cy5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5Db25zdGFudHMuVG90YWxQcmljZVN0YXR1cyA9IHtcbiAgRVNUSU1BVEVEOiAnRVNUSU1BVEVEJyxcbiAgRklOQUw6ICdGSU5BTCcsXG4gIE5PVF9DVVJSRU5UTFlfS05PV046ICdOT1RfQ1VSUkVOVExZX0tOT1dOJyxcbn07XG5cbi8qKlxuICogU3VwcG9ydGVkIEdvb2dsZSBQYXkgcGF5bWVudCBidXR0b24gdHlwZS5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5Db25zdGFudHMuQnV0dG9uVHlwZSA9IHtcbiAgU0hPUlQ6ICdzaG9ydCcsXG4gIExPTkc6ICdsb25nJyxcbn07XG5cbi8qKlxuICogU3VwcG9ydGVkIGJ1dHRvbiBjb2xvcnMuXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuQ29uc3RhbnRzLkJ1dHRvbkNvbG9yID0ge1xuICBERUZBVUxUOiAnZGVmYXVsdCcsICAvLyBDdXJyZW50bHkgZGVmYXVsdHMgdG8gYmxhY2suXG4gIEJMQUNLOiAnYmxhY2snLFxuICBXSElURTogJ3doaXRlJyxcbn07XG5cbi8qKlxuICogSWQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5Db25zdGFudHMuSWQgPSB7XG4gIFBPUFVQX1dJTkRPV19DT05UQUlORVI6ICdwb3B1cC13aW5kb3ctY29udGFpbmVyJyxcbn07XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbkNvbnN0YW50cy5TVE9SQUdFX0tFWV9QUkVGSVggPSAnZ29vZ2xlLnBheW1lbnRzLmFwaS5zdG9yYWdlJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuQ29uc3RhbnRzLklTX1JFQURZX1RPX1BBWV9SRVNVTFRfS0VZID1cbiAgICBDb25zdGFudHMuU1RPUkFHRV9LRVlfUFJFRklYICsgJy5pc3JlYWR5dG9wYXkucmVzdWx0JztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuQ29uc3RhbnRzLlVQSV9DQU5fTUFLRV9QQVlNRU5UX0NBQ0hFX0tFWSA9XG4gICAgQ29uc3RhbnRzLlNUT1JBR0VfS0VZX1BSRUZJWCArICcudXBpLmNhbk1ha2VQYXltZW50Q2FjaGUnO1xuXG5cbkNvbnN0YW50cy5DTEFTU19QUkVGSVggPSAnZ29vZ2xlLXBheW1lbnRzLSc7XG5Db25zdGFudHMuSUZSQU1FX0FDVElWRV9DT05UQUlORVJfQ0xBU1MgPVxuICAgIGAke0NvbnN0YW50cy5DTEFTU19QUkVGSVh9YWN0aXZlQ29udGFpbmVyYDtcbkNvbnN0YW50cy5JRlJBTUVfQ09OVEFJTkVSX0NMQVNTID0gYCR7Q29uc3RhbnRzLkNMQVNTX1BSRUZJWH1kaWFsb2dDb250YWluZXJgO1xuQ29uc3RhbnRzLklGUkFNRV9TVFlMRV9DRU5URVJfQ0xBU1MgPSBgJHtDb25zdGFudHMuQ0xBU1NfUFJFRklYfWRpYWxvZ0NlbnRlcmA7XG5Db25zdGFudHMuSUZSQU1FX1NUWUxFX0NMQVNTID0gYCR7Q29uc3RhbnRzLkNMQVNTX1BSRUZJWH1kaWFsb2dgO1xuXG5Db25zdGFudHMuSUZSQU1FX1NUWUxFID0gYFxuLiR7Q29uc3RhbnRzLklGUkFNRV9TVFlMRV9DTEFTU30ge1xuICAgIGFuaW1hdGlvbjogbm9uZSAwcyBlYXNlIDBzIDEgbm9ybWFsIG5vbmUgcnVubmluZztcbiAgICBiYWNrZ3JvdW5kOiBub25lIDAgMCAvIGF1dG8gcmVwZWF0IHNjcm9sbCBwYWRkaW5nLWJveCBib3JkZXItYm94ICNmZmY7XG4gICAgYmFja2dyb3VuZC1ibGVuZC1tb2RlOiBub3JtYWw7XG4gICAgYm9yZGVyOiAwIG5vbmUgIzMzMztcbiAgICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDAgMDtcbiAgICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBib3gtc2hhZG93OiAjODA4MDgwIDAgM3B4IDAgMCwgIzgwODA4MCAwIDAgMjJweDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgei1pbmRleDogJHtNQVhfWl9JTkRFWH07XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIGxlZnQ6IDA7XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcbiAgLiR7Q29uc3RhbnRzLklGUkFNRV9TVFlMRV9DTEFTU30ge1xuICAgIHdpZHRoOiA0ODBweCAhaW1wb3J0YW50O1xuICAgIGxlZnQ6IC0yNDBweCAhaW1wb3J0YW50O1xuICAgIG1hcmdpbi1sZWZ0OiBjYWxjKDEwMHZ3IC0gMTAwdncgLyAyKSAhaW1wb3J0YW50O1xuICB9XG59XG4uJHtDb25zdGFudHMuSUZSQU1FX0NPTlRBSU5FUl9DTEFTU30ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMjYpO1xuICBib3R0b206IDA7XG4gIGhlaWdodDogMTAwJTtcbiAgbGVmdDogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbn1cbi5pZnJhbWVDb250YWluZXIge1xuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XG59XG5gO1xuXG5Db25zdGFudHMuSUZSQU1FX1NUWUxFX0NFTlRFUiA9IGBcbi4ke0NvbnN0YW50cy5JRlJBTUVfU1RZTEVfQ0VOVEVSX0NMQVNTfSB7XG4gIGFuaW1hdGlvbjogbm9uZSAwcyBlYXNlIDBzIDEgbm9ybWFsIG5vbmUgcnVubmluZztcbiAgYmFja2dyb3VuZC1ibGVuZC1tb2RlOiBub3JtYWw7XG4gIGJhY2tncm91bmQ6IG5vbmUgMCAwIC8gYXV0byByZXBlYXQgc2Nyb2xsIHBhZGRpbmctYm94IGJvcmRlci1ib3ggI2ZmZjtcbiAgYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBib3JkZXI6IDBweCBub25lICMzMzM7XG4gIGJvdHRvbTogYXV0bztcbiAgYm94LXNoYWRvdzogIzgwODA4MCAwIDAgMjJweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgbGVmdDogLTI0MHB4O1xuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xuICBtYXJnaW4tbGVmdDogY2FsYygxMDB2dyAtIDEwMHZ3IC8gMikgIWltcG9ydGFudDtcbiAgbWF4LWhlaWdodDogOTAlO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwMCU7XG4gIHRyYW5zZm9ybTogc2NhbGUoMC44KTtcbiAgd2lkdGg6IDQ4MHB4O1xuICB6LWluZGV4OiAke01BWF9aX0lOREVYfTtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuQG1lZGlhIChtaW4taGVpZ2h0OiA2NjdweCkge1xuICAuJHtDb25zdGFudHMuSUZSQU1FX1NUWUxFX0NFTlRFUl9DTEFTU30ge1xuICAgIG1heC1oZWlnaHQ6IDYwMHB4O1xuICB9XG59XG4uJHtDb25zdGFudHMuSUZSQU1FX0FDVElWRV9DT05UQUlORVJfQ0xBU1N9IHtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4wKSB0cmFuc2xhdGVZKC01MCUpO1xufVxuYDtcblxuQ29uc3RhbnRzLkdQQVlfQlVUVE9OX1dJVEhfQ0FSRF9JTkZPX0lNQUdFID1cbiAgICAnYmFja2dyb3VuZC1pbWFnZTogdXJsKGh0dHBzOi8vcGF5Lmdvb2dsZS5jb20vZ3AvcC9nZW5lcmF0ZV9ncGF5X2J0bl9pbWcpOyc7XG5cbkNvbnN0YW50cy5CVVRUT05fTE9DQUxFX1RPX01JTl9XSURUSCA9IHtcbiAgJ2VuJzogMTUyLFxuICAnYmcnOiAxNjMsXG4gICdjcyc6IDE5MixcbiAgJ2RlJzogMTgzLFxuICAnZXMnOiAxODMsXG4gICdmcic6IDE4MyxcbiAgJ2hyJzogMTU3LFxuICAnaWQnOiAxODYsXG4gICdqYSc6IDE0OCxcbiAgJ2tvJzogMTM3LFxuICAnbXMnOiAxODYsXG4gICdubCc6IDE2NyxcbiAgJ3BsJzogMTgyLFxuICAncHQnOiAxOTMsXG4gICdydSc6IDIwNixcbiAgJ3NrJzogMTU3LFxuICAnc2wnOiAyMTEsXG4gICdzcic6IDE0NixcbiAgJ3RyJzogMTYxLFxuICAndWsnOiAyMDcsXG4gICd6aCc6IDE1Nixcbn07XG5cbi8qKlxuICogTmFtZSBvZiB0aGUgZ3JheXBhbmUuXG4gKlxuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cbkNvbnN0YW50cy5HUEFZX0dSQVlQQU5FID0gJ2dwYXktZ3JheXBhbmUnO1xuXG4vKipcbiAqIENsYXNzIHVzZWQgZm9yIHRoZSBncGF5IGJ1dHRvbi5cbiAqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuQ29uc3RhbnRzLkdQQVlfQlVUVE9OX0NMQVNTID0gJ2dwYXktYnV0dG9uJztcblxuQ29uc3RhbnRzLkJVVFRPTl9TVFlMRSA9IGBcbi4ke0NvbnN0YW50cy5HUEFZX0JVVFRPTl9DTEFTU30ge1xuICBiYWNrZ3JvdW5kLW9yaWdpbjogY29udGVudC1ib3g7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcbiAgYm9yZGVyOiAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYm94LXNoYWRvdzogcmdiYSg2MCwgNjQsIDY3LCAwLjMpIDBweCAxcHggMXB4IDBweCwgcmdiYSg2MCwgNjQsIDY3LCAwLjE1KSAwcHggMXB4IDNweCAxcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgaGVpZ2h0OiA0MHB4O1xuICBtaW4taGVpZ2h0OiA0MHB4O1xuICBwYWRkaW5nOiAxMXB4IDI0cHg7XG59XG5cbi4ke0NvbnN0YW50cy5HUEFZX0JVVFRPTl9DTEFTU30uYmxhY2sge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICBib3gtc2hhZG93OiBub25lO1xuICBwYWRkaW5nOiAxMnB4IDI0cHggMTBweDtcbn1cblxuLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NMQVNTfS53aGl0ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG59XG5cbi4ke0NvbnN0YW50cy5HUEFZX0JVVFRPTl9DTEFTU30uc2hvcnQge1xuICBtaW4td2lkdGg6IDkwcHg7XG4gIHdpZHRoOiAxNjBweDtcbn1cblxuLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NMQVNTfS5ibGFjay5zaG9ydCB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL3d3dy5nc3RhdGljLmNvbS9pbnN0YW50YnV5L3N2Zy9kYXJrX2dwYXkuc3ZnKTtcbn1cblxuLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NMQVNTfS53aGl0ZS5zaG9ydCB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL3d3dy5nc3RhdGljLmNvbS9pbnN0YW50YnV5L3N2Zy9saWdodF9ncGF5LnN2Zyk7XG59XG5cbi4ke0NvbnN0YW50cy5HUEFZX0JVVFRPTl9DTEFTU30uYmxhY2suYWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVmNjM2ODtcbn1cblxuLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NMQVNTfS5ibGFjay5ob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzYzQwNDM7XG59XG5cbi4ke0NvbnN0YW50cy5HUEFZX0JVVFRPTl9DTEFTU30ud2hpdGUuYWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbn1cblxuLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NMQVNTfS53aGl0ZS5mb2N1cyB7XG4gIGJveC1zaGFkb3c6ICNlOGU4ZTggMCAxcHggMXB4IDAsICNlOGU4ZTggMCAxcHggM3B4O1xufVxuXG4uJHtDb25zdGFudHMuR1BBWV9CVVRUT05fQ0xBU1N9LndoaXRlLmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcbn1cbmA7XG5cbkNvbnN0YW50cy5HUEFZX0JVVFRPTl9XSVRIX09GRkVSX0lDT05fQURESVRJT05BTF9TVFlMRSA9ICdwb3NpdGlvbjogcmVsYXRpdmU7JztcblxuQ29uc3RhbnRzLkdQQVlfT0ZGRVJfSUNPTl9DTEFTUyA9ICdncGF5LW9mZmVyLWljb24nO1xuXG5Db25zdGFudHMuR1BBWV9PRkZFUl9JQ09OX1NWRyA9XG4gICAgXCI8c3ZnIHdpZHRoPVxcXCIyMHB4XFxcIiBoZWlnaHQ9XFxcIjIwcHhcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgXCIgK1xuICAgIFwidmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHhtbG5zOnhsaW5rPVwiICtcbiAgICBcIlxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXFxcIiBjbGFzcz1cXFwiZ3BheS1vZmZlci1pY29uXFxcIj48ZGVmcz48cGF0aCBkPVxcXCJNMTkuNDEsOS41OCBMMTAuNDEsMC41OCBcIiArXG4gICAgXCJDMTAuMDUsMC4yMiA5LjU1LDAgOSwwIEwyLDAgQzAuOSwwIDAsMC45IDAsMiBMMCw5IEMwLDkuNTUgMC4yMiwxMC4wNSBcIiArXG4gICAgXCIwLjU5LDEwLjQyIEw5LjU5LDE5LjQyIEM5Ljk1LDE5Ljc4IDEwLjQ1LDIwIDExLDIwIEMxMS41NSwyMCAxMi4wNSwxOS43OCBcIiArXG4gICAgXCIxMi40MSwxOS40MSBMMTkuNDEsMTIuNDEgQzE5Ljc4LDEyLjA1IDIwLDExLjU1IDIwLDExIEMyMCwxMC40NSAxOS43NyxcIiArXG4gICAgXCI5Ljk0IDE5LjQxLDkuNTggWlxcXCIgaWQ9XFxcInBhdGgtMVxcXCI+PC9wYXRoPjwvZGVmcz48ZyBpZD1cXFwiYnV0dG9uc18xMC4wNVxcXCJcIiArXG4gICAgXCIgc3Ryb2tlPVxcXCJub25lXFxcIiBzdHJva2Utd2lkdGg9XFxcIjFcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+XCIgK1xuICAgIFwiPGcgaWQ9XFxcIkFydGJvYXJkXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtNDAuMDAwMDAwLCAtNDMuMDAwMDAwKVxcXCI+XCIgK1xuICAgIFwiPGcgaWQ9XFxcIkdyb3VwLTNcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDQwLjAwMDAwMCwgNDMuMDAwMDAwKVxcXCI+XCIgK1xuICAgIFwiPGcgaWQ9XFxcIkdyb3VwLTItQ29weS0yXFxcIj48ZyBpZD1cXFwiR3JvdXAtQ29weVxcXCI+PGcgaWQ9XFxcImljX2xveWFsdHlfMjRweFxcXCI+XCIgK1xuICAgIFwiPG1hc2sgaWQ9XFxcIm1hc2stMlxcXCIgZmlsbD1cXFwid2hpdGVcXFwiPjx1c2UgeGxpbms6aHJlZj1cXFwiI3BhdGgtMVxcXCI+PC91c2U+XCIgK1xuICAgIFwiPC9tYXNrPjx1c2UgaWQ9XFxcImdwYXktU2hhcGVcXFwiIGZpbGw9XFxcIiNGRjYxMDBcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgXCIgK1xuICAgIFwieGxpbms6aHJlZj1cXFwiI3BhdGgtMVxcXCI+PC91c2U+PHBhdGggZD1cXFwiTTMuNSw1IEMyLjY3LDUgMiw0LjMzIDIsMy41IEMyLFwiICtcbiAgICBcIjIuNjcgMi42NywyIDMuNSwyIEM0LjMzLDIgNSwyLjY3IDUsMy41IEM1LDQuMzMgNC4zMyw1IDMuNSw1IFpcXFwiIFwiICtcbiAgICBcImlkPVxcXCJQYXRoXFxcIiBmaWxsPVxcXCIjRkZGRkZGXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIG1hc2s9XFxcInVybCgjbWFzay0yKVxcXCI+XCIgK1xuICAgIFwiPC9wYXRoPjwvZz48L2c+PC9nPjxnIGlkPVxcXCJHcm91cC0xMy1Db3B5LTdcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlXCIgK1xuICAgIFwiKDYuMDAwMDAwLCA2LjAwMDAwMClcXFwiIGZpbGw9XFxcIiNGRkZGRkZcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCI+XCIgK1xuICAgIFwiPGcgaWQ9XFxcIkdyb3VwLTEzLUNvcHktMlxcXCI+PHBhdGggZD1cXFwiTTIuMTUyMTczOTEsNC41NTE3MjQxNCBDMC45NjM1NjEwODIsXCIgK1xuICAgIFwiNC41NTE3MjQxNCAxLjk5ODQwMTQ0ZS0xNCwzLjUzMjc4NTk4IDEuOTk4NDAxNDRlLTE0LDIuMjc1ODYyMDcgXCIgK1xuICAgIFwiQzEuOTk4NDAxNDRlLTE0LDEuMDE4OTM4MTYgMC45NjM1NjEwODIsNi4zMDYwNjY3OGUtMTQgMi4xNTIxNzM5MSw2LlwiICtcbiAgICBcIjMwNjA2Njc4ZS0xNCBDMy4zNDA3ODY3NCw2LjMwNjA2Njc4ZS0xNCA0LjMwNDM0NzgzLDEuMDE4OTM4MTYgNC4zMDQzNDc4MyxcIiArXG4gICAgXCIyLjI3NTg2MjA3IEM0LjMwNDM0NzgzLDMuNTMyNzg1OTggMy4zNDA3ODY3NCw0LjU1MTcyNDE0IDIuMTUyMTczOTEsXCIgK1xuICAgIFwiNC41NTE3MjQxNCBaIE0yLjE1MjE3MzkxLDMuMzEwMzQ0ODMgQzIuNjkyNDUyNDcsMy4zMTAzNDQ4MyAzLjEzMDQzNDc4LDIuXCIgK1xuICAgIFwiODQ3MTkxMTIgMy4xMzA0MzQ3OCwyLjI3NTg2MjA3IEMzLjEzMDQzNDc4LDEuNzA0NTMzMDIgMi42OTI0NTI0NyxcIiArXG4gICAgXCIxLjI0MTM3OTMxIDIuMTUyMTczOTEsMS4yNDEzNzkzMSBDMS42MTE4OTUzNSwxLjI0MTM3OTMxIDEuMTczOTEzMDQsMVwiICtcbiAgICBcIi43MDQ1MzMwMiAxLjE3MzkxMzA0LDIuMjc1ODYyMDcgQzEuMTczOTEzMDQsMi44NDcxOTExMiAxLjYxMTg5NTM1LDMuXCIgK1xuICAgIFwiMzEwMzQ0ODMgMi4xNTIxNzM5MSwzLjMxMDM0NDgzIFpcXFwiIGlkPVxcXCJDb21iaW5lZC1TaGFwZVxcXCI+PC9wYXRoPlwiICtcbiAgICBcIjxwYXRoIGQ9XFxcIk02Ljg0NzgyNjA5LDkgQzUuNjU5MjEzMjYsOSA0LjY5NTY1MjE3LDcuOTgxMDYxODQgNC42OTU2NTIxNyxcIiArXG4gICAgXCI2LjcyNDEzNzkzIEM0LjY5NTY1MjE3LDUuNDY3MjE0MDIgNS42NTkyMTMyNiw0LjQ0ODI3NTg2IDYuODQ3ODI2MDksXCIgK1xuICAgIFwiNC40NDgyNzU4NiBDOC4wMzY0Mzg5Miw0LjQ0ODI3NTg2IDksNS40NjcyMTQwMiA5LDYuNzI0MTM3OTMgQzksNy45ODEwNjE4NFwiICtcbiAgICBcIiA4LjAzNjQzODkyLDkgNi44NDc4MjYwOSw5IFogTTYuODQ3ODI2MDksNy43NTg2MjA2OSBDNy4zODgxMDQ2NSxcIiArXG4gICAgXCI3Ljc1ODYyMDY5IDcuODI2MDg2OTYsNy4yOTU0NjY5OCA3LjgyNjA4Njk2LDYuNzI0MTM3OTMgQzcuODI2MDg2OTZcIiArXG4gICAgXCIsNi4xNTI4MDg4OCA3LjM4ODEwNDY1LDUuNjg5NjU1MTcgNi44NDc4MjYwOSw1LjY4OTY1NTE3IEM2LjMwNzU0NzUzLFwiICtcbiAgICBcIjUuNjg5NjU1MTcgNS44Njk1NjUyMiw2LjE1MjgwODg4IDUuODY5NTY1MjIsNi43MjQxMzc5MyBDNS44Njk1NjUyMixcIiArXG4gICAgXCI3LjI5NTQ2Njk4IDYuMzA3NTQ3NTMsNy43NTg2MjA2OSA2Ljg0NzgyNjA5LDcuNzU4NjIwNjkgWlxcXCIgXCIgK1xuICAgIFwiaWQ9XFxcIkNvbWJpbmVkLVNoYXBlXFxcIj48L3BhdGg+PHBvbHlnb24gaWQ9XFxcIlJlY3RhbmdsZVxcXCIgXCIgK1xuICAgIFwidHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoNC40OTc3MjAsIDQuNTQxOTM4KSByb3RhdGUoMzQuMDAwMDAwKSBcIiArXG4gICAgXCJ0cmFuc2xhdGUoLTQuNDk3NzIwLCAtNC41NDE5MzgpIFxcXCIgcG9pbnRzPVxcXCIzLjc3OTAxNzc4IC0wLjIwMjI5NTk3OCBcIiArXG4gICAgXCI0Ljk3NDAyNzMgLTAuMTcxMDE5MTYxIDUuMjE2NDIyNjMgOS4yODYxNzI3OCA0LjAyMTQxMzExIDkuMjU0ODk1OTZcXFwiPlwiICtcbiAgICBcIjwvcG9seWdvbj48L2c+PC9nPjwvZz48L2c+PC9nPjwvc3ZnPlwiO1xuXG5Db25zdGFudHMuR1BBWV9PRkZFUl9JQ09OX1NUWUxFID0gYFxuLiR7Q29uc3RhbnRzLkdQQVlfT0ZGRVJfSUNPTl9DTEFTU30ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAtNXB4O1xuICB0b3A6IC01cHg7XG59XG5cbiNpY19sb3lhbHR5XzI0cHggdXNlLmhvdmVyIHtcbiAgZmlsbDogI0ZDODUzQjtcbn1cbmA7XG5cbkNvbnN0YW50cy5HUEFZX09GRkVSX0RFU0NSSVBUSU9OX0NMQVNTID0gJ2dwYXktb2ZmZXItZGVzY3JpcHRpb24nO1xuXG5Db25zdGFudHMuR1BBWV9PRkZFUl9ERVNDUklQVElPTl9TVFlMRSA9IGBcbkBpbXBvcnQgdXJsKC8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Hb29nbGUrU2Fuczo1MDApO1xuLiR7Q29uc3RhbnRzLkdQQVlfT0ZGRVJfREVTQ1JJUFRJT05fQ0xBU1N9IHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250OiAxMHB4ICdHb29nbGUgU2Fucyc7XG4gIG1hcmdpbi10b3A6IDJweDtcbiAgbWFyZ2luLWJvdHRvbTogMHB4O1xufVxuXG4uJHtDb25zdGFudHMuR1BBWV9PRkZFUl9ERVNDUklQVElPTl9DTEFTU30uZ3BheS1idG4tY2xpY2tlZCB7XG4gIGNvbG9yOiAjM0M0MDQzO1xufVxuXG4uJHtDb25zdGFudHMuR1BBWV9PRkZFUl9ERVNDUklQVElPTl9DTEFTU30uc2hvcnQge1xuICBtaW4td2lkdGg6IDkwcHg7XG4gIHdpZHRoOiAxNjBweDtcbn1cblxuLiR7Q29uc3RhbnRzLkdQQVlfT0ZGRVJfREVTQ1JJUFRJT05fQ0xBU1N9Lmxvbmcge1xuICBtaW4td2lkdGg6IDE1MnB4O1xuICB3aWR0aDogMjQwcHg7XG59XG5gO1xuXG4vKipcbiAqIENsYXNzIHVzZWQgZm9yIHRoZSBuZXcgZ3BheSBidXR0b24gd2l0aCBjYXJkIGluZm8gKGxhc3QgNCBkaWdpdHMsIGNhcmQgbmV0KS5cbiAqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuQ29uc3RhbnRzLkdQQVlfQlVUVE9OX0NBUkRfSU5GT19DTEFTUyA9ICdncGF5LWNhcmQtaW5mby1idG4nO1xuXG5Db25zdGFudHMuR1BBWV9CVVRUT05fQ0FSRF9JTkZPX0JVVFRPTl9TVFlMRSA9IGBcbiAgLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NBUkRfSU5GT19DTEFTU30ge1xuICAgIGJhY2tncm91bmQtb3JpZ2luOiBjb250ZW50LWJveDtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xuICAgIGJvcmRlcjogMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBib3gtc2hhZG93OiByZ2JhKDYwLCA2NCwgNjcsIDAuMykgMHB4IDFweCAxcHggMHB4LCByZ2JhKDYwLCA2NCwgNjcsIDAuMTUpIDBweCAxcHggM3B4IDFweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIG1pbi1oZWlnaHQ6IDQwcHg7XG4gICAgcGFkZGluZzogMTFweCAyNHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBwYWRkaW5nOiA5cHggMjRweCAxMHB4O1xuICAgIG1pbi13aWR0aDogMTkwcHg7XG4gICAgd2lkdGg6IDI0MHB4O1xuICB9XG5cbiAgLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NBUkRfSU5GT19DTEFTU30uYWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWY2MzY4O1xuICB9XG5cbiAgLiR7Q29uc3RhbnRzLkdQQVlfQlVUVE9OX0NBUkRfSU5GT19DTEFTU30uaG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzYzQwNDM7XG4gIH1cbiAgYDtcblxuXG4vKipcbiAqIFRydXN0ZWQgZG9tYWluIGZvciBzZWN1cmUgY29udGV4dCB2YWxpZGF0aW9uXG4gKlxuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cbkNvbnN0YW50cy5UUlVTVEVEX0RPTUFJTiA9ICcuZ29vZ2xlLmNvbSc7XG5cbmV4cG9ydCB7Q29uc3RhbnRzfTtcblxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Q29uc3RhbnRzfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogSW5qZWN0cyB0aGUgcHJvdmlkZWQgc3R5bGUgc2hlZXQgdG8gdGhlIGRvY3VtZW50IGhlYWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVUZXh0IFRoZSBzdHlsZXNoZWV0IHRvIGJlIGluamVjdGVkLlxuICogQHJldHVybiB7IUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGluamVjdFN0eWxlU2hlZXQoc3R5bGVUZXh0KSB7XG4gIGNvbnN0IHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJztcbiAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gc3R5bGVUZXh0O1xuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG4gIHJldHVybiBzdHlsZUVsZW1lbnQ7XG59XG5cbi8qKlxuICogSW5qZWN0cyB0aGUgcGF5IHdpdGggZ29vZ2xlIGlmcmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZnJhbWVDbGFzc05hbWUgVGhlIGNsYXNzbmFtZSBvZiB0aGUgaUZyYW1lIHdyYXBwZXIuXG4gKiBAcmV0dXJuIHshe2NvbnRhaW5lcjogIUVsZW1lbnQsIGlmcmFtZTohSFRNTElGcmFtZUVsZW1lbnR9fVxuICovXG5mdW5jdGlvbiBpbmplY3RJZnJhbWUoaWZyYW1lQ2xhc3NOYW1lKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChDb25zdGFudHMuSUZSQU1FX0NPTlRBSU5FUl9DTEFTUyk7XG4gIGNvbnN0IGlmcmFtZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpZnJhbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaWZyYW1lQ29udGFpbmVyJyk7XG4gIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgY29uc3QgaWZyYW1lID1cbiAgICAgIC8qKiBAdHlwZSB7IUhUTUxJRnJhbWVFbGVtZW50fSAqLyAoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJykpO1xuICBpZnJhbWUuY2xhc3NMaXN0LmFkZChpZnJhbWVDbGFzc05hbWUpO1xuICBpZnJhbWUuc2V0QXR0cmlidXRlKCdmcmFtZWJvcmRlcicsICcwJyk7XG4gIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3Njcm9sbGluZycsICdubycpO1xuICBpZnJhbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlmcmFtZUNvbnRhaW5lcik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgcmV0dXJuIHsnY29udGFpbmVyJzogY29udGFpbmVyLCAnaWZyYW1lJzogaWZyYW1lfTtcbn1cblxuZXhwb3J0IHtcbiAgaW5qZWN0U3R5bGVTaGVldCxcbiAgaW5qZWN0SWZyYW1lLFxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0NvbnN0YW50c30gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5jb25zdCBNQVhfWl9JTkRFWCA9IDIxNDc0ODM2NDc7XG5cblxuY2xhc3MgR3JheXBhbmUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MpIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRG9jdW1lbnR9ICovXG4gICAgdGhpcy5kb2NfID0gZG9jO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUVsZW1lbnR9ICovXG4gICAgdGhpcy5lbGVtZW50XyA9IGRvYy5jcmVhdGVFbGVtZW50KENvbnN0YW50cy5HUEFZX0dSQVlQQU5FKTtcbiAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5lbGVtZW50Xywge1xuICAgICAgJ3otaW5kZXgnOiBNQVhfWl9JTkRFWCxcbiAgICAgICdkaXNwbGF5JzogJ25vbmUnLFxuICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICd0b3AnOiAwLFxuICAgICAgJ3JpZ2h0JzogMCxcbiAgICAgICdib3R0b20nOiAwLFxuICAgICAgJ2xlZnQnOiAwLFxuICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAncmdiYSgzMiwgMzMsIDM2LCAuNiknLFxuICAgIH0pO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/V2luZG93fSAqL1xuICAgIHRoaXMucG9wdXBXaW5kb3dfID0gbnVsbDtcblxuICAgIHRoaXMuZWxlbWVudF8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wb3B1cFdpbmRvd18pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnBvcHVwV2luZG93Xy5mb2N1cygpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gSWdub3JlIGVycm9yLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgdGhlIGdyYXlwYW5lLlxuICAgKiBAcGFyYW0gez9XaW5kb3d8dW5kZWZpbmVkfSBwb3B1cFdpbmRvd1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHNob3cocG9wdXBXaW5kb3cpIHtcbiAgICB0aGlzLnBvcHVwV2luZG93XyA9IHBvcHVwV2luZG93IHx8IG51bGw7XG4gICAgdGhpcy5kb2NfLmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50Xyk7XG4gICAgc2V0SW1wb3J0YW50U3R5bGVzKHRoaXMuZWxlbWVudF8sIHtcbiAgICAgICdkaXNwbGF5JzogJ2Jsb2NrJyxcbiAgICAgICdvcGFjaXR5JzogMCxcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbih0aGlzLmVsZW1lbnRfLCB7XG4gICAgICAnb3BhY2l0eSc6IDEsXG4gICAgfSwgMzAwLCAnZWFzZS1vdXQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgZ3JheXBhbmUuXG4gICAqIEByZXR1cm4geyFQcm9taXNlfHVuZGVmaW5lZH1cbiAgICovXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5wb3B1cFdpbmRvd18gPSBudWxsO1xuICAgIGlmICghdGhpcy5lbGVtZW50Xy5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAvLyBIYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgb3IgaGF2ZW4ndCBiZWVuIGV2ZW4gYWRkZWQgdG8gRE9NLlxuICAgICAgLy8gVGhpcyBjb3VsZCBiZSBwb3NzaWJsZSBhZnRlciByZWRpcmVjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zaXRpb24odGhpcy5lbGVtZW50Xywge1xuICAgICAgJ29wYWNpdHknOiAwLFxuICAgIH0sIDMwMCwgJ2Vhc2Utb3V0JykudGhlbigoKSA9PiB7XG4gICAgICBzZXRJbXBvcnRhbnRTdHlsZXModGhpcy5lbGVtZW50XywgeydkaXNwbGF5JzogJ25vbmUnfSk7XG4gICAgICB0aGlzLmRvY18uYm9keS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRfKTtcbiAgICB9KTtcbiAgfVxufVxuXG5cbi8qKlxuICogU2V0cyB0aGUgQ1NTIHN0eWxlcyBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQgd2l0aCAhaW1wb3J0YW50LiBUaGUgc3R5bGVzXG4gKiBhcmUgc3BlY2lmaWVkIGFzIGEgbWFwIGZyb20gQ1NTIHByb3BlcnR5IG5hbWVzIHRvIHRoZWlyIHZhbHVlcy5cbiAqXG4gKiBUaGUgYCFpbXBvcnRhbnRgIHN0eWxlcyBhcmUgdXNlZCB0byBhdm9pZCBhY2NpZGVudGFsIHNwZWNpZmljaXR5IG92ZXJyaWRlc1xuICogZnJvbSB0aGUgM3AgcGFnZSdzIHN0eWxlc2hlZXQuXG4gKlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nfG51bWJlcj59IHN0eWxlc1xuICovXG5mdW5jdGlvbiBzZXRJbXBvcnRhbnRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIGZvciAoY29uc3QgayBpbiBzdHlsZXMpIHtcbiAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGssIHN0eWxlc1trXS50b1N0cmluZygpLCAnaW1wb3J0YW50Jyk7XG4gIH1cbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFmdGVyIHRoZSBnaXZlbiBkdXJhdGlvbiBvZiBhbmltYXRpb25cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsIC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZ3xudW1iZXI+fSBwcm9wcyAtIHByb3BlcnRpZXMgdG8gYmUgYW5pbWF0ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25NaWxsaXMgLSBkdXJhdGlvbiBvZiBhbmltYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VydmUgLSB0cmFuc2l0aW9uIGZ1bmN0aW9uIGZvciB0aGUgYW5pbWF0aW9uLlxuICogQHJldHVybiB7IVByb21pc2V9IFByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGRvbmUgcGxheWluZy5cbiAqL1xuZnVuY3Rpb24gdHJhbnNpdGlvbihlbCwgcHJvcHMsIGR1cmF0aW9uTWlsbGlzLCBjdXJ2ZSkge1xuICBjb25zdCB3aW4gPSBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjb25zdCBwcmV2aW91c1RyYW5zaXRpb25WYWx1ZSA9IGVsLnN0eWxlLnRyYW5zaXRpb24gfHwgJyc7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICB3aW4uc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB3aW4uc2V0VGltZW91dChyZXNvbHZlLCBkdXJhdGlvbk1pbGxpcyk7XG4gICAgICBjb25zdCB0ciA9IGAke2R1cmF0aW9uTWlsbGlzfW1zICR7Y3VydmV9YDtcbiAgICAgIHNldEltcG9ydGFudFN0eWxlcyhlbCwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICd0cmFuc2l0aW9uJzogYHRyYW5zZm9ybSAke3RyfSwgb3BhY2l0eSAke3RyfWAsXG4gICAgICB9LCBwcm9wcykpO1xuICAgIH0pO1xuICB9KS50aGVuKCgpID0+IHtcbiAgICAvLyBTdG9wIHRyYW5zaXRpb24gYW5kIG1ha2Ugc3VyZSB0aGF0IHRoZSBmaW5hbCBwcm9wZXJ0aWVzIGdldCBzZXQuXG4gICAgc2V0SW1wb3J0YW50U3R5bGVzKGVsLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICd0cmFuc2l0aW9uJzogcHJldmlvdXNUcmFuc2l0aW9uVmFsdWUsXG4gICAgfSwgcHJvcHMpKTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IHtHcmF5cGFuZX07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtDb25zdGFudHN9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7UG9zdE1lc3NhZ2VTZXJ2aWNlfSBmcm9tICcuL3Bvc3RfbWVzc2FnZV9zZXJ2aWNlLmpzJztcblxuLyoqXG4gKiBTdXBwb3J0ZWQgaW50ZXJhY3Rpb25zIGJldHdlZW4gaWZyYW1lIGFuZCBtZXJjaGFudCBwYWdlLlxuICpcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbi8vIE5leHQgSWQ6IDEwXG5jb25zdCBQb3N0TWVzc2FnZUV2ZW50VHlwZSA9IHtcbiAgSVNfUkVBRFlfVE9fUEFZOiA2LFxuICBMT0dfQlVUVE9OX0NMSUNLOiA1LFxuICBMT0dfSVNfUkVBRFlfVE9fUEFZX0FQSTogMCxcbiAgTE9HX0xPQURfUEFZTUVOVF9EQVRBX0FQSTogMSxcbiAgTE9HX1JFTkRFUl9CVVRUT046IDIsXG4gIExPR19JTklUSUFMSVpFX1BBWU1FTlRTX0NMSUVOVDogOSxcbiAgTE9HX1BBWV9GUkFNRV9SRVFVRVNURUQ6IDE1LFxuICBMT0dfUEFZX0ZSQU1FX0xPQURFRDogMTYsXG4gIExPR19QQVlfRlJBTUVfTE9BREVEX1dJVEhfQUxMX0pTOiAxNyxcbiAgTE9HX0lOTElORV9QQVlNRU5UX1dJREdFVF9JTklUSUFMSVpFOiA0LFxuICBMT0dfSU5MSU5FX1BBWU1FTlRfV0lER0VUX1NVQk1JVDogMyxcbiAgTE9HX0lOTElORV9QQVlNRU5UX1dJREdFVF9ESVNQTEFZRUQ6IDcsXG4gIExPR19JTkxJTkVfUEFZTUVOVF9XSURHRVRfSElEREVOOiA4LFxufTtcblxuLyoqXG4gKiBUeXBlcyBvZiBidXkgZmxvdyBhY3Rpdml0eSBtb2Rlcy5cbiAqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5jb25zdCBCdXlGbG93QWN0aXZpdHlNb2RlID0ge1xuICBVTktOT1dOX01PREU6IDAsXG4gIElGUkFNRTogMSxcbiAgUE9QVVA6IDIsXG4gIFJFRElSRUNUOiAzLFxuICBBTkRST0lEX05BVElWRTogNCxcbiAgUEFZTUVOVF9IQU5ETEVSOiA1LFxufTtcblxuLyoqXG4gKiBUeXBlcyBvZiBidXkgZmxvdyBhY3Rpdml0eSBtb2Rlcy5cbiAqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5jb25zdCBQdWJsaWNFcnJvckNvZGUgPSB7XG4gIFVOS05PV05fRVJST1JfVFlQRTogMCxcbiAgSU5URVJOQUxfRVJST1I6IDEsXG4gIERFVkVMT1BFUl9FUlJPUjogMixcbiAgQlVZRVJfQUNDT1VOVF9FUlJPUjogMyxcbiAgTUVSQ0hBTlRfQUNDT1VOVF9FUlJPUjogNCxcbiAgVU5TVVBQT1JURURfQVBJX1ZFUlNJT046IDUsXG4gIEJVWUVSX0NBTkNFTDogNixcbn07XG5cbi8qKlxuICogVGhlIHByZXNlbnRhdGlvbiBtb2RlIG9mIHRoZSBidXkgZmxvd1xuICpcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmNvbnN0IEJ1eUZsb3dNb2RlID0ge1xuICBQQVlfV0lUSF9HT09HTEU6IDUsXG4gIFNVQlNDUklCRV9XSVRIX0dPT0dMRTogNixcbn07XG5cbi8qKlxuICogSWZyYW1lIHVzZWQgZm9yIGxvZ2dpbmcgYW5kIHByZWZldGNoaW5nLlxuICpcbiAqIEB0eXBlIHs/RWxlbWVudH1cbiAqL1xubGV0IGlmcmFtZSA9IG51bGw7XG5cbi8qKiBAdHlwZSB7P1Bvc3RNZXNzYWdlU2VydmljZX0gKi9cbmxldCBwb3N0TWVzc2FnZVNlcnZpY2UgPSBudWxsO1xuXG4vKiogQHR5cGUgez9zdHJpbmd9ICovXG5sZXQgZW52aXJvbm1lbnQgPSBudWxsO1xuXG4vKiogQHR5cGUgez9zdHJpbmd9ICovXG5sZXQgZ29vZ2xlVHJhbnNhY3Rpb25JZCA9IG51bGw7XG5cbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xubGV0IG9yaWdpblRpbWVNcyA9IERhdGUubm93KCk7XG5cbi8qKiBAdHlwZSB7P0J1eUZsb3dBY3Rpdml0eU1vZGV9ICovXG5sZXQgYnV5Rmxvd0FjdGl2aXR5TW9kZSA9IG51bGw7XG5cbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbmxldCBpZnJhbWVMb2FkZWQgPSBmYWxzZTtcblxuLyoqIEB0eXBlIHshQXJyYXk8IU9iamVjdD59ICovXG5sZXQgYnVmZmVyID0gW107XG5cbmNsYXNzIFBheUZyYW1lSGVscGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBoaWRkZW4gaWZyYW1lIGZvciBsb2dnaW5nIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSB0b3AgbGV2ZWxcbiAgICogZG9jdW1lbnQuXG4gICAqL1xuICBzdGF0aWMgbG9hZCgpIHtcbiAgICBpZiAoaWZyYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluaXRPcHRpb25zID1cbiAgICAgICAgLyoqIEB0eXBlIHshUGF5bWVudE9wdGlvbnN9ICovICh3aW5kb3dbJ2dwYXlJbml0UGFyYW1zJ10pIHx8IHt9O1xuICAgIGVudmlyb25tZW50ID0gaW5pdE9wdGlvbnMuZW52aXJvbm1lbnQgfHwgQ29uc3RhbnRzLkVudmlyb25tZW50LlBST0RVQ1RJT047XG4gICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgLy8gUGFzcyBpbiBvcmlnaW4gYmVjYXVzZSBkb2N1bWVudC5yZWZlcnJlciBpbnNpZGUgaWZyYW1lIGlzIGVtcHR5IGluXG4gICAgLy8gY2VydGFpbiBjYXNlc1xuICAgIC8vIENhbiBiZSByZXBsYWNlZCBieSBpZnJhbWUuc3JjPS4uLiBpbiBub24gR29vZ2xlIGNvbnRleHQuXG4gICAgaWZyYW1lLnNyYyA9IFBheUZyYW1lSGVscGVyLmdldElmcmFtZVVybF8oXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgaW5pdE9wdGlvbnMubWVyY2hhbnRJbmZvICYmIGluaXRPcHRpb25zLm1lcmNoYW50SW5mby5tZXJjaGFudElkKTtcbiAgICBQYXlGcmFtZUhlbHBlci5wb3N0TWVzc2FnZSh7XG4gICAgICAnZXZlbnRUeXBlJzogUG9zdE1lc3NhZ2VFdmVudFR5cGUuTE9HX1BBWV9GUkFNRV9SRVFVRVNURUQsXG4gICAgICAnY2xpZW50TGF0ZW5jeVN0YXJ0TXMnOiBEYXRlLm5vdygpLFxuICAgIH0pO1xuICAgIGlmcmFtZS5oZWlnaHQgPSAnMCc7XG4gICAgaWZyYW1lLndpZHRoID0gJzAnO1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgUGF5RnJhbWVIZWxwZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAnZXZlbnRUeXBlJzogUG9zdE1lc3NhZ2VFdmVudFR5cGUuTE9HX1BBWV9GUkFNRV9MT0FERURfV0lUSF9BTExfSlMsXG4gICAgICAgICdjbGllbnRMYXRlbmN5U3RhcnRNcyc6IERhdGUubm93KCksXG4gICAgICB9KTtcbiAgICAgIFBheUZyYW1lSGVscGVyLmlmcmFtZUxvYWRlZCgpO1xuICAgIH07XG4gICAgLy8gSWYgdGhlIGJvZHkgaXMgYWxyZWFkeSBsb2FkZWQsIGp1c3QgYXBwZW5kIHRoZSBpZnJhbWUuIE90aGVyd2lzZSwgd2Ugd2FpdFxuICAgIC8vIHVudGlsIHRoZSBET00gaGFzIGxvYWRlZCB0byBhcHBlbmQgdGhlIGlmcmFtZSwgb3RoZXJ3aXNlIGRvY3VtZW50LmJvZHkgaXNcbiAgICAvLyBudWxsLlxuICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICBQYXlGcmFtZUhlbHBlci5pbml0aWFsaXplXygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICdET01Db250ZW50TG9hZGVkJywgKCkgPT4gUGF5RnJhbWVIZWxwZXIuaW5pdGlhbGl6ZV8oKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGlmcmFtZSB0byB0aGUgRE9NIGFuZCB1cGRhdGVzIHRoZSBwb3N0IG1lc3NhZ2Ugc2VydmljZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBpbml0aWFsaXplXygpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgcG9zdE1lc3NhZ2VTZXJ2aWNlID0gbmV3IFBvc3RNZXNzYWdlU2VydmljZShpZnJhbWUuY29udGVudFdpbmRvdyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBpZnJhbWUgYW5kIHdhaXQgZm9yIGEgcmVzcG9uc2UuXG4gICAqIFVzZXMgdGhlIHJlc3BvbnNlSGFuZGxlciBzcGVjaWZpZWQgb25seSBpZiB0aGUgcmVzcG9uc2VUeXBlIGlzIGEgbWF0Y2guXG4gICAqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gZGF0YVxuICAgKiBAcGFyYW0geyFQb3N0TWVzc2FnZUV2ZW50VHlwZX0gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXNwb25zZVR5cGVcbiAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpfSByZXNwb25zZUhhbmRsZXJcbiAgICovXG4gIHN0YXRpYyBzZW5kQW5kV2FpdEZvclJlc3BvbnNlKFxuICAgICAgZGF0YSwgZXZlbnRUeXBlLCByZXNwb25zZVR5cGUsIHJlc3BvbnNlSGFuZGxlcikge1xuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuZGF0YVtyZXNwb25zZVR5cGVdKSB7XG4gICAgICAgIHJlc3BvbnNlSGFuZGxlcihldmVudCk7XG4gICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBwcm9jZXNzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBwYXlmcmFtZSBvbmNlLlxuICAgICAgICAvLyBzbyBzdG9wIGxpc3RlbmluZyB0byB0aGUgZXZlbnQgb25jZSBwcm9jZXNzZWQuXG4gICAgICAgIFBheUZyYW1lSGVscGVyLnJlbW92ZU1lc3NhZ2VFdmVudExpc3RlbmVyXyhjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgUGF5RnJhbWVIZWxwZXIuYWRkTWVzc2FnZUV2ZW50TGlzdGVuZXJfKGNhbGxiYWNrKTtcblxuICAgIGNvbnN0IHBvc3RNZXNzYWdlRGF0YSA9IE9iamVjdC5hc3NpZ24oeydldmVudFR5cGUnOiBldmVudFR5cGV9LCBkYXRhKTtcbiAgICBQYXlGcmFtZUhlbHBlci5wb3N0TWVzc2FnZShwb3N0TWVzc2FnZURhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciBmb3IgbGlzdGVuaW5nIHRvIG1lc3NhZ2VzIHJlY2VpdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGNhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgYWRkTWVzc2FnZUV2ZW50TGlzdGVuZXJfKGNhbGxiYWNrKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmb3IgbGlzdGVuaW5nIHRvIG1lc3NhZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGNhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgcmVtb3ZlTWVzc2FnZUV2ZW50TGlzdGVuZXJfKGNhbGxiYWNrKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogUG9zdHMgYSBtZXNzYWdlIHRvIHRoZSBpZnJhbWUgd2l0aCB0aGUgZ2l2ZW4gZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHshT2JqZWN0fSBkYXRhXG4gICAqL1xuICBzdGF0aWMgcG9zdE1lc3NhZ2UoZGF0YSkge1xuICAgIGlmICghaWZyYW1lTG9hZGVkKSB7XG4gICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcG9zdE1lc3NhZ2VEYXRhID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgICdidXlGbG93QWN0aXZpdHlNb2RlJzogYnV5Rmxvd0FjdGl2aXR5TW9kZSxcbiAgICAgICAgICAnZ29vZ2xlVHJhbnNhY3Rpb25JZCc6IGdvb2dsZVRyYW5zYWN0aW9uSWQsXG4gICAgICAgICAgJ29yaWdpblRpbWVNcyc6IG9yaWdpblRpbWVNcyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YSk7XG4gICAgcG9zdE1lc3NhZ2VTZXJ2aWNlLnBvc3RNZXNzYWdlKFxuICAgICAgICBwb3N0TWVzc2FnZURhdGEsIFBheUZyYW1lSGVscGVyLmdldElmcmFtZU9yaWdpbl8oKSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYWN0aXZpdHkgbW9kZS5cbiAgICpcbiAgICogQHBhcmFtIHshQnV5Rmxvd0FjdGl2aXR5TW9kZX0gbW9kZVxuICAgKi9cbiAgc3RhdGljIHNldEJ1eUZsb3dBY3Rpdml0eU1vZGUobW9kZSkge1xuICAgIGJ1eUZsb3dBY3Rpdml0eU1vZGUgPSBtb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdvb2dsZSB0cmFuc2FjdGlvbiBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR4bklkXG4gICAqL1xuICBzdGF0aWMgc2V0R29vZ2xlVHJhbnNhY3Rpb25JZCh0eG5JZCkge1xuICAgIGdvb2dsZVRyYW5zYWN0aW9uSWQgPSB0eG5JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBvcmlnaW5UaW1lTXMuIFRvIGJlIHVzZWQgb25seSBmb3IgdGVzdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcmlnaW5UaW1lTXNUZW1wXG4gICAqL1xuICBzdGF0aWMgc2V0T3JpZ2luVGltZU1zKG9yaWdpblRpbWVNc1RlbXApIHtcbiAgICBvcmlnaW5UaW1lTXMgPSBvcmlnaW5UaW1lTXNUZW1wO1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHBvc3RNZXNzYWdlU2VydmljZSBmb3IgdGVzdGluZy5cbiAgICpcbiAgICogQHBhcmFtIHshUG9zdE1lc3NhZ2VTZXJ2aWNlfSBtZXNzYWdlU2VydmljZVxuICAgKi9cbiAgc3RhdGljIHNldFBvc3RNZXNzYWdlU2VydmljZShtZXNzYWdlU2VydmljZSkge1xuICAgIHBvc3RNZXNzYWdlU2VydmljZSA9IG1lc3NhZ2VTZXJ2aWNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgc2luZ2xldG9uIHZhcmlhYmxlcy5cbiAgICovXG4gIHN0YXRpYyByZXNldCgpIHtcbiAgICBpZnJhbWUgPSBudWxsO1xuICAgIGJ1ZmZlci5sZW5ndGggPSAwO1xuICAgIGlmcmFtZUxvYWRlZCA9IGZhbHNlO1xuICAgIGJ1eUZsb3dBY3Rpdml0eU1vZGUgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciB0aGUgaWZyYW1lIGhhcyBiZWVuIGxvYWRlZCBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9hZGVkXG4gICAqL1xuICBzdGF0aWMgc2V0SWZyYW1lTG9hZGVkKGxvYWRlZCkge1xuICAgIGlmcmFtZUxvYWRlZCA9IGxvYWRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbmV2ZXIgdGhlIGlmcmFtZSBpcyBsb2FkZWQuXG4gICAqL1xuICBzdGF0aWMgaWZyYW1lTG9hZGVkKCkge1xuICAgIGlmcmFtZUxvYWRlZCA9IHRydWU7XG4gICAgYnVmZmVyLmZvckVhY2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgUGF5RnJhbWVIZWxwZXIucG9zdE1lc3NhZ2UoZGF0YSk7XG4gICAgfSk7XG4gICAgYnVmZmVyLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZXZlbnRzIHRoYXQgaGF2ZSBiZWVuIGJ1ZmZlcmVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IU9iamVjdD59XG4gICAqL1xuICBzdGF0aWMgZ2V0QnVmZmVyKCkge1xuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICAvKipcbiAgICogTW9ja3MgdGhlIGlmcmFtZSBhcyBhbiBhcmJpdHJhcnkgaHRtbCBlbGVtZW50IGluc3RlYWQgb2YgYWN0dWFsbHkgaW5qZWN0aW5nXG4gICAqIGl0IGZvciB0ZXN0aW5nLlxuICAgKi9cbiAgc3RhdGljIGluamVjdElmcmFtZUZvclRlc3RpbmcoKSB7XG4gICAgUGF5RnJhbWVIZWxwZXIucmVzZXQoKTtcbiAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgUGF5RnJhbWVIZWxwZXIuaWZyYW1lTG9hZGVkKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcGF5ZnJhbWUgb3JpZ2luIGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGdldElmcmFtZU9yaWdpbl8oKSB7XG4gICAgbGV0IGlmcmFtZVVybCA9ICdodHRwczovL3BheSc7XG4gICAgaWYgKGVudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5TQU5EQk9YKSB7XG4gICAgICBpZnJhbWVVcmwgKz0gJy5zYW5kYm94JztcbiAgICB9IGVsc2UgaWYgKGVudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5QUkVQUk9EKSB7XG4gICAgICBpZnJhbWVVcmwgKz0gJy1wcmVwcm9kLnNhbmRib3gnO1xuICAgIH1cbiAgICByZXR1cm4gaWZyYW1lVXJsICsgJy5nb29nbGUuY29tJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwYXlmcmFtZSBVUkwgYmFzZWQgb24gdGhlIGVudmlyb25tZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luIFRoZSBvcmlnaW4gdGhhdCBpcyBvcGVuaW5nIHRoZSBwYXlmcmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbD19IG1lcmNoYW50SWQgVGhlIG1lcmNoYW50IGlkLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgZ2V0SWZyYW1lVXJsXyhvcmlnaW4sIG1lcmNoYW50SWQpIHtcbiAgICAvLyBUcnVzdGVkUmVzb3VyY2VVcmwgaGVhZGVyIG5lZWRzIHRvIHN0YXJ0IHdpdGggaHR0cHMgb3IgJy8vJy5cbiAgICBjb25zdCBpZnJhbWVVcmwgPSBgaHR0cHM6Ly9wYXkke2Vudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5QUkVQUk9EID9cbiAgICAgICAgICAgICAnLXByZXByb2Quc2FuZGJveCcgOlxuICAgICAgICAgICAgIGVudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5TQU5EQk9YID8gJy5zYW5kYm94JyA6ICcnfS5nb29nbGUuY29tL2dwL3AvdWkvcGF5ZnJhbWU/b3JpZ2luPSR7b3JpZ2lufSZtaWQ9JXttZXJjaGFudElkfWA7XG4gICAgcmV0dXJuIGlmcmFtZVVybDtcbiAgfVxufVxuXG4vLyBTdGFydCBsb2FkaW5nIHBheSBmcmFtZSBlYXJseVxuUGF5RnJhbWVIZWxwZXIubG9hZCgpO1xuXG5leHBvcnQge1xuICBCdXlGbG93QWN0aXZpdHlNb2RlLFxuICBCdXlGbG93TW9kZSxcbiAgUGF5RnJhbWVIZWxwZXIsXG4gIFBvc3RNZXNzYWdlRXZlbnRUeXBlLFxuICBQdWJsaWNFcnJvckNvZGUsXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Q29uc3RhbnRzfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge1BheW1lbnRzQ2xpZW50RGVsZWdhdGVJbnRlcmZhY2V9IGZyb20gJy4vcGF5bWVudHNfY2xpZW50X2RlbGVnYXRlX2ludGVyZmFjZS5qcyc7XG5pbXBvcnQge1BheW1lbnRzUmVxdWVzdERlbGVnYXRlfSBmcm9tICcuL3BheW1lbnRzX3JlcXVlc3RfZGVsZWdhdGUuanMnO1xuaW1wb3J0IHtQYXltZW50c1dlYkFjdGl2aXR5RGVsZWdhdGV9IGZyb20gJy4vcGF5bWVudHNfd2ViX2FjdGl2aXR5X2RlbGVnYXRlLmpzJztcbmltcG9ydCB7VXBpSGFuZGxlcn0gZnJvbSAnLi91cGlfaGFuZGxlci5qcyc7XG5pbXBvcnQge0FjdGl2aXR5UG9ydHN9IGZyb20gJ3dlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzJztcbmltcG9ydCB7XG4gIEJ1eUZsb3dBY3Rpdml0eU1vZGUsXG4gIEJ1eUZsb3dNb2RlLFxuICBQYXlGcmFtZUhlbHBlcixcbiAgUG9zdE1lc3NhZ2VFdmVudFR5cGUsXG4gIFB1YmxpY0Vycm9yQ29kZSxcbn0gZnJvbSAnLi9wYXlfZnJhbWVfaGVscGVyLmpzJztcbmltcG9ydCB7XG4gIGFwaVYyRG9lc01lcmNoYW50U3VwcG9ydFNwZWNpZmllZENhcmRUeXBlLFxuICBjaHJvbWVTdXBwb3J0c1BheW1lbnRIYW5kbGVyLFxuICBjaHJvbWVTdXBwb3J0c1BheW1lbnRSZXF1ZXN0LFxuICBkb2VzTWVyY2hhbnRTdXBwb3J0T25seVRva2VuaXplZENhcmRzLFxuICBnZXRVcGlQYXltZW50TWV0aG9kLFxuICB2YWxpZGF0ZVBheW1lbnRPcHRpb25zLFxuICB2YWxpZGF0ZUlzUmVhZHlUb1BheVJlcXVlc3QsXG4gIHZhbGlkYXRlUGF5bWVudERhdGFSZXF1ZXN0LFxuICB2YWxpZGF0ZVNlY3VyZUNvbnRleHQsXG59IGZyb20gJy4vdmFsaWRhdG9yLmpzJztcblxuaW1wb3J0IHtjcmVhdGVHb29nbGVUcmFuc2FjdGlvbklkfSBmcm9tICcuL3V0aWxzLmpzJztcblxuY29uc3QgVFJVU1RFRF9ET01BSU5TID0gW1xuICAnYWN0aW9ucy5nb29nbGUuY29tJyxcbiAgJ2FtcC1hY3Rpb25zLnNhbmRib3guZ29vZ2xlLmNvbScsXG4gICdhbXAtYWN0aW9ucy1zdGFnaW5nLnNhbmRib3guZ29vZ2xlLmNvbScsXG4gICdhbXAtYWN0aW9ucy1hdXRvcHVzaC5zYW5kYm94Lmdvb2dsZS5jb20nLFxuICAncGF5bWVudHMuZGV2ZWxvcGVycy5nb29nbGUuY29tJyxcbiAgJ3BheW1lbnRzLmdvb2dsZS5jb20nLFxuXTtcblxuLyoqXG4gKiBUaGUgY2xpZW50IGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBHb29nbGUgUGF5bWVudCBBUElzLlxuICogPHA+XG4gKiBUaGUgYXN5bmMgcmVmZXJzIHRvIHRoZSBmYWN0IHRoYXQgdGhpcyBjbGllbnQgc3VwcG9ydHMgcmVkaXJlY3RzXG4gKiB3aGVuIHVzaW5nIHdlYmFjdGl2dGllcy5cbiAqIDxwPlxuICogSWYgeW91IGFyZSB1c2luZyB0aGlzIGJlIHN1cmUgdGhhdCB0aGlzIGlzIHdoYXQgeW91IHdhbnQuXG4gKiA8cD5cbiAqIEluIGFsbW9zdCBhbGwgY2FzZXMgUGF5bWVudHNDbGllbnQgaXMgdGhlIGJldHRlciBjbGllbnQgdG8gdXNlIGJlY2F1c2VcbiAqIGl0IGV4cG9zZXMgYSBwcm9taXNlcyBiYXNlZCBhcGkgd2hpY2ggaXMgZWFzaWVyIHRvIGRlYWwgd2l0aC5cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBQYXltZW50c0FzeW5jQ2xpZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBheW1lbnRPcHRpb25zfSBwYXltZW50T3B0aW9uc1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFQYXltZW50RGF0YT4pfSBvblBheW1lbnRSZXNwb25zZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1c2VJZnJhbWVcbiAgICogQHBhcmFtIHshQWN0aXZpdHlQb3J0cz19IGFjdGl2aXRpZXMgQ2FuIGJlIHVzZWQgdG8gcHJvdmlkZSBhIHNoYXJlZFxuICAgKiAgIGFjdGl2aXRpZXMgbWFuYWdlci4gQnkgZGVmYXVsdCwgdGhlIG5ldyBtYW5hZ2VyIGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXltZW50T3B0aW9ucywgb25QYXltZW50UmVzcG9uc2UsIHVzZUlmcmFtZSwgYWN0aXZpdGllcykge1xuICAgIHRoaXMub25QYXltZW50UmVzcG9uc2VfID0gb25QYXltZW50UmVzcG9uc2U7XG5cbiAgICB2YWxpZGF0ZVBheW1lbnRPcHRpb25zKHBheW1lbnRPcHRpb25zKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P251bWJlcn0gKi9cbiAgICB0aGlzLmxvYWRQYXltZW50RGF0YUFwaVN0YXJ0VGltZU1zXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9ICovXG4gICAgdGhpcy5lbnZpcm9ubWVudF8gPVxuICAgICAgcGF5bWVudE9wdGlvbnMuZW52aXJvbm1lbnQgfHwgQ29uc3RhbnRzLkVudmlyb25tZW50LlRFU1Q7XG4gICAgaWYgKCFQYXltZW50c0FzeW5jQ2xpZW50Lmdvb2dsZVRyYW5zYWN0aW9uSWRfKSB7XG4gICAgICBQYXltZW50c0FzeW5jQ2xpZW50Lmdvb2dsZVRyYW5zYWN0aW9uSWRfID1cbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0aGlzLmlzSW5UcnVzdGVkRG9tYWluXygpICYmXG4gICAgICAgIHBheW1lbnRPcHRpb25zWydpJ10gJiZcbiAgICAgICAgcGF5bWVudE9wdGlvbnNbJ2knXVsnZ29vZ2xlVHJhbnNhY3Rpb25JZCddXG4gICAgICAgICAgPyBwYXltZW50T3B0aW9uc1snaSddWydnb29nbGVUcmFuc2FjdGlvbklkJ11cbiAgICAgICAgICA6IGNyZWF0ZUdvb2dsZVRyYW5zYWN0aW9uSWQodGhpcy5lbnZpcm9ubWVudF8pKTtcbiAgICB9XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUGF5bWVudE9wdGlvbnN9ICovXG4gICAgdGhpcy5wYXltZW50T3B0aW9uc18gPSBwYXltZW50T3B0aW9ucztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFQYXltZW50c0NsaWVudERlbGVnYXRlSW50ZXJmYWNlfSAqL1xuICAgIHRoaXMud2ViQWN0aXZpdHlEZWxlZ2F0ZV8gPSBuZXcgUGF5bWVudHNXZWJBY3Rpdml0eURlbGVnYXRlKFxuICAgICAgdGhpcy5lbnZpcm9ubWVudF8sXG4gICAgICBQYXltZW50c0FzeW5jQ2xpZW50Lmdvb2dsZVRyYW5zYWN0aW9uSWRfLFxuICAgICAgdXNlSWZyYW1lLFxuICAgICAgYWN0aXZpdGllcyxcbiAgICAgIHBheW1lbnRPcHRpb25zWydpJ10gJiYgcGF5bWVudE9wdGlvbnNbJ2knXVsncmVkaXJlY3RLZXknXVxuICAgICk7XG5cbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLmJ1eUZsb3dNb2RlXyA9IEJ1eUZsb3dNb2RlLlBBWV9XSVRIX0dPT0dMRTtcblxuICAgIGNvbnN0IHBheW1lbnRSZXF1ZXN0U3VwcG9ydGVkID0gY2hyb21lU3VwcG9ydHNQYXltZW50UmVxdWVzdCgpO1xuICAgIC8vIFRPRE86IFJlbW92ZSB0aGUgdGVtcG9yYXJ5IGhhY2sgdGhhdCBkaXNhYmxlIHBheW1lbnRzXG4gICAgLy8gcmVxdWVzdCBmb3IgaW5saW5lIGZsb3cuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7P1BheW1lbnRzQ2xpZW50RGVsZWdhdGVJbnRlcmZhY2V9ICovXG4gICAgdGhpcy5kZWxlZ2F0ZV8gPVxuICAgICAgcGF5bWVudFJlcXVlc3RTdXBwb3J0ZWQgJiYgIXVzZUlmcmFtZVxuICAgICAgICA/IG5ldyBQYXltZW50c1JlcXVlc3REZWxlZ2F0ZSh0aGlzLmVudmlyb25tZW50XylcbiAgICAgICAgOiB0aGlzLndlYkFjdGl2aXR5RGVsZWdhdGVfO1xuXG4gICAgdGhpcy51cGlIYW5kbGVyXyA9IG5ldyBVcGlIYW5kbGVyKCk7XG5cbiAgICB0aGlzLndlYkFjdGl2aXR5RGVsZWdhdGVfLm9uUmVzdWx0KHRoaXMub25SZXN1bHRfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZGVsZWdhdGVfLm9uUmVzdWx0KHRoaXMub25SZXN1bHRfLmJpbmQodGhpcykpO1xuXG4gICAgLy8gSWYgd2ViIGRlbGVnYXRlIGlzIHVzZWQgYW55d2F5IHRoZW4gdGhpcyBpcyBvdmVycmlkZGVuIGluIHRoZSB3ZWJcbiAgICAvLyBhY3Rpdml0eSBkZWxlZ2F0ZSB3aGVuIGxvYWQgcGF5bWVudCBkYXRhIGlzIGNhbGxlZC5cbiAgICBpZiAoY2hyb21lU3VwcG9ydHNQYXltZW50SGFuZGxlcigpKSB7XG4gICAgICBQYXlGcmFtZUhlbHBlci5zZXRCdXlGbG93QWN0aXZpdHlNb2RlKFxuICAgICAgICBCdXlGbG93QWN0aXZpdHlNb2RlLlBBWU1FTlRfSEFORExFUlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHBheW1lbnRSZXF1ZXN0U3VwcG9ydGVkKSB7XG4gICAgICBQYXlGcmFtZUhlbHBlci5zZXRCdXlGbG93QWN0aXZpdHlNb2RlKEJ1eUZsb3dBY3Rpdml0eU1vZGUuQU5EUk9JRF9OQVRJVkUpO1xuICAgIH1cblxuICAgIFBheUZyYW1lSGVscGVyLnNldEdvb2dsZVRyYW5zYWN0aW9uSWQoXG4gICAgICBQYXltZW50c0FzeW5jQ2xpZW50Lmdvb2dsZVRyYW5zYWN0aW9uSWRfXG4gICAgKTtcbiAgICBQYXlGcmFtZUhlbHBlci5wb3N0TWVzc2FnZSh7XG4gICAgICAnZXZlbnRUeXBlJzogUG9zdE1lc3NhZ2VFdmVudFR5cGUuTE9HX0lOSVRJQUxJWkVfUEFZTUVOVFNfQ0xJRU5ULFxuICAgICAgJ2NsaWVudExhdGVuY3lTdGFydE1zJzogRGF0ZS5ub3coKSxcbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZXZlbnQgPT5cbiAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZUV2ZW50XyhldmVudClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIHVzZXIgY2FuIG1ha2UgcGF5bWVudHMgdXNpbmcgdGhlIFBheW1lbnQgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0geyFJc1JlYWR5VG9QYXlSZXF1ZXN0fSBpc1JlYWR5VG9QYXlSZXF1ZXN0XG4gICAqIEByZXR1cm4geyFQcm9taXNlfSBUaGUgcHJvbWlzZSB3aWxsIGNvbnRhaW4gdGhlIGJvb2xlYW4gcmVzdWx0IGFuZCBlcnJvclxuICAgKiAgICAgbWVzc2FnZSB3aGVuIHBvc3NpYmxlLlxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBpc1JlYWR5VG9QYXkoaXNSZWFkeVRvUGF5UmVxdWVzdCkge1xuICAgIC8vIE1lcmdlIHdpdGggcGF5bWVudE9wdGlvbnMsIHByZWZlcnJpbmcgdmFsdWVzIGZyb20gaXNSZWFkeVRvUGF5UmVxdWVzdFxuICAgIGlmIChpc1JlYWR5VG9QYXlSZXF1ZXN0KSB7XG4gICAgICBpc1JlYWR5VG9QYXlSZXF1ZXN0ID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIHRoaXMucGF5bWVudE9wdGlvbnNfLFxuICAgICAgICBpc1JlYWR5VG9QYXlSZXF1ZXN0XG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFRpbWVNcyA9IERhdGUubm93KCk7XG4gICAgLyoqIEB0eXBlIHs/c3RyaW5nfSAqL1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICB2YWxpZGF0ZVNlY3VyZUNvbnRleHQoKSB8fFxuICAgICAgdmFsaWRhdGVJc1JlYWR5VG9QYXlSZXF1ZXN0KGlzUmVhZHlUb1BheVJlcXVlc3QpO1xuICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIFBheW1lbnRzQXN5bmNDbGllbnQubG9nRGV2RXJyb3JUb0NvbnNvbGVfKCdpc1JlYWR5VG9QYXknLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICBQYXlGcmFtZUhlbHBlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgJ2V2ZW50VHlwZSc6IFBvc3RNZXNzYWdlRXZlbnRUeXBlLkxPR19JU19SRUFEWV9UT19QQVlfQVBJLFxuICAgICAgICAgICdlcnJvcic6IFB1YmxpY0Vycm9yQ29kZS5ERVZFTE9QRVJfRVJST1IsXG4gICAgICAgIH0pO1xuICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICdzdGF0dXNDb2RlJzogQ29uc3RhbnRzLlJlc3BvbnNlU3RhdHVzLkRFVkVMT1BFUl9FUlJPUixcbiAgICAgICAgICAnc3RhdHVzTWVzc2FnZSc6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBpc1JlYWR5VG9QYXlQcm9taXNlID0gdGhpcy5pc1JlYWR5VG9QYXlfKGlzUmVhZHlUb1BheVJlcXVlc3QpO1xuXG4gICAgaXNSZWFkeVRvUGF5UHJvbWlzZS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIFBheUZyYW1lSGVscGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgJ2V2ZW50VHlwZSc6IFBvc3RNZXNzYWdlRXZlbnRUeXBlLkxPR19JU19SRUFEWV9UT19QQVlfQVBJLFxuICAgICAgICAnY2xpZW50TGF0ZW5jeVN0YXJ0TXMnOiBzdGFydFRpbWVNcyxcbiAgICAgICAgJ2lzUmVhZHlUb1BheUFwaVJlc3BvbnNlJzogcmVzcG9uc2UsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXNSZWFkeVRvUGF5UHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3R1YWwgaW1wbGVtZW50YXRpb24gb2YgaXNSZWFkeVRvUGF5IGluIGEgcHJpdmF0ZSBtZXRob2Qgc28gdGhhdFxuICAgKiB3ZSBjYW4gYWRkIGNhbGxiYWNrcyB0byB0aGUgcHJvbWlzZSB0byBtZWFzdXJlIGxhdGVuY2llcy5cbiAgICpcbiAgICogQHBhcmFtIHshSXNSZWFkeVRvUGF5UmVxdWVzdH0gaXNSZWFkeVRvUGF5UmVxdWVzdFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX0gVGhlIHByb21pc2Ugd2lsbCBjb250YWluIHRoZSBib29sZWFuIHJlc3VsdCBhbmQgZXJyb3JcbiAgICogICAgIG1lc3NhZ2Ugd2hlbiBwb3NzaWJsZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzUmVhZHlUb1BheV8oaXNSZWFkeVRvUGF5UmVxdWVzdCkge1xuICAgIGlmICh0aGlzLnVwaUhhbmRsZXJfLmlzVXBpUmVxdWVzdChpc1JlYWR5VG9QYXlSZXF1ZXN0KSkge1xuICAgICAgcmV0dXJuIHRoaXMudXBpSGFuZGxlcl8uaXNSZWFkeVRvUGF5KGlzUmVhZHlUb1BheVJlcXVlc3QpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBjaHJvbWVTdXBwb3J0c1BheW1lbnRSZXF1ZXN0KCkgJiZcbiAgICAgICFpc05hdGl2ZURpc2FibGVkSW5SZXF1ZXN0KGlzUmVhZHlUb1BheVJlcXVlc3QpXG4gICAgKSB7XG4gICAgICBpZiAoaXNSZWFkeVRvUGF5UmVxdWVzdC5hcGlWZXJzaW9uID49IDIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNSZWFkeVRvUGF5QXBpVjJGb3JDaHJvbWVQYXltZW50UmVxdWVzdF8oXG4gICAgICAgICAgaXNSZWFkeVRvUGF5UmVxdWVzdFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgYXBpVmVyc2lvbiAxIGJyYW5jaC5cbiAgICAgICAgLy8gSWYgdGhlIG1lcmNoYW50IHN1cHBvcnRzIG9ubHkgVG9rZW5pemVkIGNhcmRzIHRoZW4ganVzdCByZWx5IG9uXG4gICAgICAgIC8vIGRlbGVnYXRlIHRvIGdpdmUgdXMgdGhlIHJlc3VsdC5cbiAgICAgICAgLy8gVGhpcyB3aWxsIG5lZWQgdG8gY2hhbmdlIG9uY2UgYi83ODUxOTE4OCBpcyBmaXhlZC5cbiAgICAgICAgY29uc3Qgd2ViUHJvbWlzZSA9IHRoaXMud2ViQWN0aXZpdHlEZWxlZ2F0ZV8uaXNSZWFkeVRvUGF5KFxuICAgICAgICAgIGlzUmVhZHlUb1BheVJlcXVlc3RcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmF0aXZlUHJvbWlzZSA9IHRoaXMuZGVsZWdhdGVfLmlzUmVhZHlUb1BheShpc1JlYWR5VG9QYXlSZXF1ZXN0KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGRvZXNNZXJjaGFudFN1cHBvcnRPbmx5VG9rZW5pemVkQ2FyZHMoaXNSZWFkeVRvUGF5UmVxdWVzdCkgJiZcbiAgICAgICAgICAhY2hyb21lU3VwcG9ydHNQYXltZW50SGFuZGxlcigpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBuYXRpdmVQcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiB3ZWJJc1JlYWR5VG9QYXkgb25seSBpZiBkZWxlZ2F0ZUlzUmVhZHlUb1BheSBoYXMgYmVlblxuICAgICAgICAvLyBleGVjdXRlZC5cbiAgICAgICAgcmV0dXJuIG5hdGl2ZVByb21pc2UudGhlbigoKSA9PiB3ZWJQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2ViUHJvbWlzZSA9IHRoaXMud2ViQWN0aXZpdHlEZWxlZ2F0ZV8uaXNSZWFkeVRvUGF5KFxuICAgICAgaXNSZWFkeVRvUGF5UmVxdWVzdFxuICAgICk7XG4gICAgcmV0dXJuIHdlYlByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGlzIHJlYWR5IHRvIHBheSBmb3IgYXBpIHYyLlxuICAgKlxuICAgKiBAcGFyYW0geyFJc1JlYWR5VG9QYXlSZXF1ZXN0fSBpc1JlYWR5VG9QYXlSZXF1ZXN0XG4gICAqIEByZXR1cm4geyFQcm9taXNlfSBUaGUgcHJvbWlzZSB3aWxsIGNvbnRhaW4gdGhlIGJvb2xlYW4gcmVzdWx0IGFuZCBlcnJvclxuICAgKiAgICAgbWVzc2FnZSB3aGVuIHBvc3NpYmxlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNSZWFkeVRvUGF5QXBpVjJGb3JDaHJvbWVQYXltZW50UmVxdWVzdF8oaXNSZWFkeVRvUGF5UmVxdWVzdCkge1xuICAgIGxldCBkZWZhdWx0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh7J3Jlc3VsdCc6IGZhbHNlfSk7XG4gICAgaWYgKGlzUmVhZHlUb1BheVJlcXVlc3QuZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQpIHtcbiAgICAgIGRlZmF1bHRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgJ3Jlc3VsdCc6IGZhbHNlLFxuICAgICAgICAncGF5bWVudE1ldGhvZFByZXNlbnQnOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCBuYXRpdmVQcm9taXNlID0gZGVmYXVsdFByb21pc2U7XG4gICAgaWYgKFxuICAgICAgYXBpVjJEb2VzTWVyY2hhbnRTdXBwb3J0U3BlY2lmaWVkQ2FyZFR5cGUoXG4gICAgICAgIGlzUmVhZHlUb1BheVJlcXVlc3QsXG4gICAgICAgIENvbnN0YW50cy5BdXRoTWV0aG9kLkNSWVBUT0dSQU1fM0RTXG4gICAgICApXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGUgbWVyY2hhbnQgc3VwcG9ydHMgdG9rZW5pemVkIGNhcmRzLlxuICAgICAgLy8gTWFrZSBhIHNlcGFyYXRlIGNhbGwgdG8gZ21zIGNvcmUgdG8gY2hlY2sgaWYgdGhlIHVzZXIgaXNSZWFkeVRvUGF5XG4gICAgICAvLyB3aXRoIGp1c3QgdG9rZW5pemVkIGNhcmRzLiBXZSBjYW4ndCBwYXNzIGluIFBBTl9PTkxZIGhlcmVcbiAgICAgIC8vIGJlY2F1c2UgZ21zIGNvcmUgYWx3YXlzIHJldHVybnMgdHJ1ZSBmb3IgUEFOX09OTFkuXG4gICAgICAvLyBMZWF2ZSBvdGhlciBwYXltZW50IG1ldGhvZHMgYXMgaXMuXG4gICAgICBjb25zdCBuYXRpdmVSdHBSZXF1ZXN0IC8qKiBAdHlwZSB7IUlzUmVhZHlUb1BheVJlcXVlc3R9ICovID0gSlNPTi5wYXJzZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoaXNSZWFkeVRvUGF5UmVxdWVzdClcbiAgICAgICk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hdGl2ZVJ0cFJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBuYXRpdmVSdHBSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kc1tpXS50eXBlID09XG4gICAgICAgICAgQ29uc3RhbnRzLlBheW1lbnRNZXRob2QuQ0FSRFxuICAgICAgICApIHtcbiAgICAgICAgICBuYXRpdmVSdHBSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kc1tpXS5wYXJhbWV0ZXJzW1xuICAgICAgICAgICAgJ2FsbG93ZWRBdXRoTWV0aG9kcydcbiAgICAgICAgICBdID0gW0NvbnN0YW50cy5BdXRoTWV0aG9kLkNSWVBUT0dSQU1fM0RTXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuYXRpdmVQcm9taXNlID0gdGhpcy5kZWxlZ2F0ZV8uaXNSZWFkeVRvUGF5KG5hdGl2ZVJ0cFJlcXVlc3QpO1xuICAgIH1cblxuICAgIGxldCB3ZWJQcm9taXNlID0gZGVmYXVsdFByb21pc2U7XG4gICAgaWYgKFxuICAgICAgYXBpVjJEb2VzTWVyY2hhbnRTdXBwb3J0U3BlY2lmaWVkQ2FyZFR5cGUoXG4gICAgICAgIGlzUmVhZHlUb1BheVJlcXVlc3QsXG4gICAgICAgIENvbnN0YW50cy5BdXRoTWV0aG9kLlBBTl9PTkxZXG4gICAgICApXG4gICAgKSB7XG4gICAgICB3ZWJQcm9taXNlID0gdGhpcy53ZWJBY3Rpdml0eURlbGVnYXRlXy5pc1JlYWR5VG9QYXkoaXNSZWFkeVRvUGF5UmVxdWVzdCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHNlc3Npb24gc3RvcmFnZSB3aXRoIHBheW1lbnQgaGFuZGxlciBjYW5NYWtlUGF5bWVudCByZXN1bHQgYnV0XG4gICAgLy8gcmVseSBvbiB3ZWIgZGVsZWdhdGUgZm9yIGFjdHVhbCByZXNwb25zZVxuICAgIGlmIChjaHJvbWVTdXBwb3J0c1BheW1lbnRIYW5kbGVyKCkpIHtcbiAgICAgIHJldHVybiBuYXRpdmVQcm9taXNlLnRoZW4oKCkgPT4gd2ViUHJvbWlzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hdGl2ZVByb21pc2UudGhlbihuYXRpdmVSZXN1bHQgPT4ge1xuICAgICAgaWYgKChuYXRpdmVSZXN1bHQgJiYgbmF0aXZlUmVzdWx0WydyZXN1bHQnXSkgPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlUmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdlYlByb21pc2U7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUHJlZmV0Y2ggcGF5bWVudERhdGEgdG8gc3BlZWQgdXAgbG9hZFBheW1lbnREYXRhIGNhbGwuIE5vdGUgdGhlIHByb3ZpZGVkXG4gICAqIHBheW1lbnREYXRhUmVxdWVzdCBzaG91bGQgZXhhY3RseSBiZSB0aGUgc2FtZSBhcyBwcm92aWRlZCBpblxuICAgKiBsb2FkUGF5bWVudERhdGEgdG8gbWFrZSB0aGUgbG9hZFBheW1lbnREYXRhIGNhbGwgZmFzdCBzaW5jZSBjdXJyZW50XG4gICAqIHdlYiBmbG93IHByZWZldGNoaW5nIGlzIGJhc2VkIG9uIHRoZSBmdWxsIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGFSZXF1ZXN0fSBwYXltZW50RGF0YVJlcXVlc3QgUHJvdmlkZXMgbmVjZXNzYXJ5XG4gICAqICAgICBpbmZvcm1hdGlvbiB0byBzdXBwb3J0IGEgcGF5bWVudC5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgcHJlZmV0Y2hQYXltZW50RGF0YShwYXltZW50RGF0YVJlcXVlc3QpIHtcbiAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgIHZhbGlkYXRlU2VjdXJlQ29udGV4dCgpIHx8IHZhbGlkYXRlUGF5bWVudERhdGFSZXF1ZXN0KHBheW1lbnREYXRhUmVxdWVzdCk7XG4gICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgUGF5bWVudHNBc3luY0NsaWVudC5sb2dEZXZFcnJvclRvQ29uc29sZV8oXG4gICAgICAgICdwcmVmZXRjaFBheW1lbnREYXRhJyxcbiAgICAgICAgZXJyb3JNZXNzYWdlXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFzc2lnbkludGVybmFsUGFyYW1zXyhwYXltZW50RGF0YVJlcXVlc3QpO1xuICAgIGlmIChcbiAgICAgIGNocm9tZVN1cHBvcnRzUGF5bWVudFJlcXVlc3QoKSAmJlxuICAgICAgIWlzTmF0aXZlRGlzYWJsZWRJblJlcXVlc3QocGF5bWVudERhdGFSZXF1ZXN0KVxuICAgICkge1xuICAgICAgdGhpcy5kZWxlZ2F0ZV8ucHJlZmV0Y2hQYXltZW50RGF0YShwYXltZW50RGF0YVJlcXVlc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3Igbm9uIGNocm9tZSBzdXBwb3J0cyBhbHdheXMgdXNlIHRoZSBob3N0aW5nIHBhZ2UuXG4gICAgICB0aGlzLndlYkFjdGl2aXR5RGVsZWdhdGVfLnByZWZldGNoUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBQYXltZW50RGF0YSwgd2hpY2ggY29udGFpbnMgbmVjZXNzYXJ5IGluZm9tYXJ0aW9uIHRvIGNvbXBsZXRlIGFcbiAgICogcGF5bWVudC5cbiAgICpcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGFSZXF1ZXN0fSBwYXltZW50RGF0YVJlcXVlc3QgUHJvdmlkZXMgbmVjZXNzYXJ5XG4gICAqICAgICBpbmZvcm1hdGlvbiB0byBzdXBwb3J0IGEgcGF5bWVudC5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgbG9hZFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIFBheUZyYW1lSGVscGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgICdldmVudFR5cGUnOiBQb3N0TWVzc2FnZUV2ZW50VHlwZS5MT0dfQlVUVE9OX0NMSUNLLFxuICAgIH0pO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICB2YWxpZGF0ZVNlY3VyZUNvbnRleHQoKSB8fCB2YWxpZGF0ZVBheW1lbnREYXRhUmVxdWVzdChwYXltZW50RGF0YVJlcXVlc3QpO1xuICAgIHRoaXMuYnV5Rmxvd01vZGVfID1cbiAgICAgIHBheW1lbnREYXRhUmVxdWVzdCAmJiBwYXltZW50RGF0YVJlcXVlc3Quc3dnXG4gICAgICAgID8gQnV5Rmxvd01vZGUuU1VCU0NSSUJFX1dJVEhfR09PR0xFXG4gICAgICAgIDogQnV5Rmxvd01vZGUuUEFZX1dJVEhfR09PR0xFO1xuICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgIHRoaXMub25QYXltZW50UmVzcG9uc2VfKFxuICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgUGF5RnJhbWVIZWxwZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgJ2V2ZW50VHlwZSc6IFBvc3RNZXNzYWdlRXZlbnRUeXBlLkxPR19MT0FEX1BBWU1FTlRfREFUQV9BUEksXG4gICAgICAgICAgICAnZXJyb3InOiBQdWJsaWNFcnJvckNvZGUuREVWRUxPUEVSX0VSUk9SLFxuICAgICAgICAgICAgJ2J1eUZsb3dNb2RlJzogdGhpcy5idXlGbG93TW9kZV8sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgUGF5bWVudHNBc3luY0NsaWVudC5sb2dEZXZFcnJvclRvQ29uc29sZV8oXG4gICAgICAgICAgICAnbG9hZFBheW1lbnREYXRhJyxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICdzdGF0dXNDb2RlJzogQ29uc3RhbnRzLlJlc3BvbnNlU3RhdHVzLkRFVkVMT1BFUl9FUlJPUixcbiAgICAgICAgICAgICdzdGF0dXNNZXNzYWdlJzogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGVyIGZvciBVUEkgUGF5bWVudE1ldGhvZFxuICAgIC8vIEN1cnJlbnRseSB3ZSBkb24ndCBzdXBwb3J0IFVQSSBhbG9uZyB3aXRoIG90aGVyIHBheW1lbnQgbWV0aG9kcywgaWZcbiAgICAvLyBVUEkgaXMgaW4gcGF5bWVudCBtZXRob2RzIHRoZW4gd2UgYXNzdW1lIGl0IGlzIFVQSSBvbmx5LlxuICAgIGNvbnN0IHVwaVBheW1lbnRNZXRob2QgPSBnZXRVcGlQYXltZW50TWV0aG9kKHBheW1lbnREYXRhUmVxdWVzdCk7XG4gICAgaWYgKHVwaVBheW1lbnRNZXRob2QpIHtcbiAgICAgIHRoaXMudXBpSGFuZGxlcl8ubG9hZFBheW1lbnREYXRhKFxuICAgICAgICBwYXltZW50RGF0YVJlcXVlc3QsXG4gICAgICAgIHVwaVBheW1lbnRNZXRob2QsXG4gICAgICAgIHRoaXMub25SZXN1bHRfLmJpbmQodGhpcylcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNSZWFkeVRvUGF5UmVzdWx0ID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXG4gICAgICBDb25zdGFudHMuSVNfUkVBRFlfVE9fUEFZX1JFU1VMVF9LRVlcbiAgICApO1xuICAgIHRoaXMubG9hZFBheW1lbnREYXRhQXBpU3RhcnRUaW1lTXNfID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLmFzc2lnbkludGVybmFsUGFyYW1zXyhwYXltZW50RGF0YVJlcXVlc3QpO1xuICAgIC8vIFdlIHdhbnQgdG8gZmFsbCBiYWNrIHRvIHRoZSB3ZWIgZGVsZWdhdGUgaWYgcGF5bWVudCBoYW5kbGVyIGlzIHN1cHBvcnRlZFxuICAgIC8vIGFuZCBpc1JlYWR5VG9QYXkgYml0IGlzIG5vdCBleHBsaWNpdGx5IHNldCB0byB0cnVlIChmYWxsYmFjayB0byB3ZWIgaWZcbiAgICAvLyBpc1JlYWR5VG9QYXkgd2Fzbid0IGNhbGxlZCBmb3IgUEgpXG4gICAgaWYgKFxuICAgICAgKGNocm9tZVN1cHBvcnRzUGF5bWVudEhhbmRsZXIoKSAmJiBpc1JlYWR5VG9QYXlSZXN1bHQgIT09ICd0cnVlJykgfHxcbiAgICAgIGlzTmF0aXZlRGlzYWJsZWRJblJlcXVlc3QocGF5bWVudERhdGFSZXF1ZXN0KVxuICAgICkge1xuICAgICAgdGhpcy53ZWJBY3Rpdml0eURlbGVnYXRlXy5sb2FkUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWxlZ2F0ZV8ubG9hZFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvZyBkZXZlbG9wZXIgZXJyb3IgdG8gY29uc29sZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwaU5hbWVcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBlcnJvck1lc3NhZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBsb2dEZXZFcnJvclRvQ29uc29sZV8oYXBpTmFtZSwgZXJyb3JNZXNzYWdlKSB7XG4gICAgY29uc29sZS5lcnJvcignREVWRUxPUEVSX0VSUk9SIGluICcgKyBhcGlOYW1lICsgJyA6ICcgKyBlcnJvck1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIDxkaXY+IGVsZW1lbnQgY29udGFpbmluZyBhIEdvb2dsZSBQYXkgcGF5bWVudCBidXR0b24uXG4gICAqXG4gICAqIEBwYXJhbSB7IUJ1dHRvbk9wdGlvbnM9fSBvcHRpb25zXG4gICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBjcmVhdGVCdXR0b24ob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgYnV0dG9uID0gbnVsbDtcbiAgICAvLyBPbmx5IGxvZyBpZiBidXR0b24gd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgY29uc3Qgc3RhcnRUaW1lTXMgPSBEYXRlLm5vdygpO1xuICAgIFBheUZyYW1lSGVscGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgICdldmVudFR5cGUnOiBQb3N0TWVzc2FnZUV2ZW50VHlwZS5MT0dfUkVOREVSX0JVVFRPTixcbiAgICAgICdjbGllbnRMYXRlbmN5U3RhcnRNcyc6IHN0YXJ0VGltZU1zLFxuICAgIH0pO1xuICAgIHJldHVybiBidXR0b247XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRXZlbnR9IGUgcG9zdE1lc3NhZ2UgZXZlbnQgZnJvbSB0aGUgQU1QIHBhZ2UuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVNZXNzYWdlRXZlbnRfKGUpIHtcbiAgICBpZiAodGhpcy5pc0luVHJ1c3RlZERvbWFpbl8oKSkge1xuICAgICAgLy8gT25seSBoYW5kbGVzIHRoZSBldmVudCByaWdodCBub3cgaWYgbG9hZGVkIGluIHRydXN0ZWQgZG9tYWluLlxuICAgICAgaWYgKGUuZGF0YVsnbmFtZSddID09PSAnbG9nUGF5bWVudERhdGEnKSB7XG4gICAgICAgIFBheUZyYW1lSGVscGVyLnBvc3RNZXNzYWdlKGUuZGF0YVsnZGF0YSddKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzSW5UcnVzdGVkRG9tYWluXygpIHtcbiAgICByZXR1cm4gVFJVU1RFRF9ET01BSU5TLmluZGV4T2Yod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKSAhPSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBsb2FkIHBheW1lbnQgZGF0YSByZXN1bHQgaXMgcmV0dXJuZWQuIFRoaXMgdHJpZ2dlcnMgdGhlIHBheW1lbnRcbiAgICogcmVzcG9uc2UgY2FsbGJhY2sgcGFzc2VkIHRvIHRoZSBjbGllbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblJlc3VsdF8ocmVzcG9uc2UpIHtcbiAgICByZXNwb25zZVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgUGF5RnJhbWVIZWxwZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICdldmVudFR5cGUnOiBQb3N0TWVzc2FnZUV2ZW50VHlwZS5MT0dfTE9BRF9QQVlNRU5UX0RBVEFfQVBJLFxuICAgICAgICAgICdjbGllbnRMYXRlbmN5U3RhcnRNcyc6IHRoaXMubG9hZFBheW1lbnREYXRhQXBpU3RhcnRUaW1lTXNfLFxuICAgICAgICAgICdidXlGbG93TW9kZSc6IHRoaXMuYnV5Rmxvd01vZGVfLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdFsnZXJyb3JDb2RlJ10pIHtcbiAgICAgICAgICBQYXlGcmFtZUhlbHBlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAnZXZlbnRUeXBlJzogUG9zdE1lc3NhZ2VFdmVudFR5cGUuTE9HX0xPQURfUEFZTUVOVF9EQVRBX0FQSSxcbiAgICAgICAgICAgICdlcnJvcic6IC8qKiBAdHlwZSB7IVB1YmxpY0Vycm9yQ29kZX0gKi8gKHJlc3VsdFsnZXJyb3JDb2RlJ10pLFxuICAgICAgICAgICAgJ2J1eUZsb3dNb2RlJzogdGhpcy5idXlGbG93TW9kZV8sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdXNlciBjbG9zZXMgd2luZG93IHdlIGRvbid0IGdldCBhIGVycm9yIGNvZGVcbiAgICAgICAgICBQYXlGcmFtZUhlbHBlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAnZXZlbnRUeXBlJzogUG9zdE1lc3NhZ2VFdmVudFR5cGUuTE9HX0xPQURfUEFZTUVOVF9EQVRBX0FQSSxcbiAgICAgICAgICAgICdlcnJvcic6IFB1YmxpY0Vycm9yQ29kZS5CVVlFUl9DQU5DRUwsXG4gICAgICAgICAgICAnYnV5Rmxvd01vZGUnOiB0aGlzLmJ1eUZsb3dNb2RlXyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgdGhpcy5vblBheW1lbnRSZXNwb25zZV8ocmVzcG9uc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBheW1lbnREYXRhUmVxdWVzdH0gcGF5bWVudERhdGFSZXF1ZXN0XG4gICAqIEByZXR1cm4geyFQYXltZW50RGF0YVJlcXVlc3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3NpZ25JbnRlcm5hbFBhcmFtc18ocGF5bWVudERhdGFSZXF1ZXN0KSB7XG4gICAgY29uc3QgaW50ZXJuYWxQYXJhbSA9IHtcbiAgICAgICdzdGFydFRpbWVNcyc6IERhdGUubm93KCksXG4gICAgICAnZ29vZ2xlVHJhbnNhY3Rpb25JZCc6IFBheW1lbnRzQXN5bmNDbGllbnQuZ29vZ2xlVHJhbnNhY3Rpb25JZF8sXG4gICAgfTtcbiAgICBwYXltZW50RGF0YVJlcXVlc3RbJ2knXSA9IHBheW1lbnREYXRhUmVxdWVzdFsnaSddXG4gICAgICA/IE9iamVjdC5hc3NpZ24oaW50ZXJuYWxQYXJhbSwgcGF5bWVudERhdGFSZXF1ZXN0WydpJ10pXG4gICAgICA6IGludGVybmFsUGFyYW07XG4gICAgcmV0dXJuIHBheW1lbnREYXRhUmVxdWVzdDtcbiAgfVxufVxuXG4vKiogQGNvbnN0IHs/c3RyaW5nfSAqL1xuUGF5bWVudHNBc3luY0NsaWVudC5nb29nbGVUcmFuc2FjdGlvbklkXztcblxuLyoqXG4gKiBXaGV0aGVyIHRoZSByZXF1ZXN0IHNwZWNpZmllcyB0aGF0IHRoZSBuYXRpdmUgc3VwcG9ydCBoYXMgdG8gYmUgZGlzYWJsZWQuXG4gKlxuICogQHBhcmFtIHshSXNSZWFkeVRvUGF5UmVxdWVzdHwhUGF5bWVudERhdGFSZXF1ZXN0fSByZXF1ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc05hdGl2ZURpc2FibGVkSW5SZXF1ZXN0KHJlcXVlc3QpIHtcbiAgcmV0dXJuIChyZXF1ZXN0WydpJ10gJiYgcmVxdWVzdFsnaSddWydkaXNhYmxlTmF0aXZlJ10pID09PSB0cnVlO1xufVxuXG5leHBvcnQge1BheW1lbnRzQXN5bmNDbGllbnR9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHdoaWNoIGNhcHR1cmVzIHdoYXQgd2UgbmVlZCB0byBzdGFydCB1cCBidXlmbG93IGFjcm9zcyBzdXJmYWNlcy5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuY2xhc3MgUGF5bWVudHNDbGllbnREZWxlZ2F0ZUludGVyZmFjZSB7XG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHRoZSB1c2VyIGNhbiBtYWtlIHBheW1lbnRzIHVzaW5nIHRoZSBQYXltZW50IEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHshSXNSZWFkeVRvUGF5UmVxdWVzdH0gaXNSZWFkeVRvUGF5UmVxdWVzdFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX0gVGhlIHByb21pc2Ugd2lsbCBjb250YWluIHRoZSBib29sZWFuIHJlc3VsdCBhbmQgZXJyb3JcbiAgICogICAgIG1lc3NhZ2Ugd2hlbiBwb3NzaWJsZS5cbiAgICovXG4gIGlzUmVhZHlUb1BheShpc1JlYWR5VG9QYXlSZXF1ZXN0KSB7fVxuXG4gIC8qKlxuICAgKiBQcmVmZXRjaCBwYXltZW50RGF0YSB0byBzcGVlZCB1cCBsb2FkUGF5bWVudERhdGEgY2FsbC4gTm90ZSB0aGUgcHJvdmlkZWRcbiAgICogcGF5bWVudERhdGFSZXF1ZXN0IHNob3VsZCBleGFjdGx5IGJlIHRoZSBzYW1lIGFzIHByb3ZpZGVkIGluXG4gICAqIGxvYWRQYXltZW50RGF0YSB0byBtYWtlIHRoZSBsb2FkUGF5bWVudERhdGEgY2FsbCBmYXN0LlxuICAgKlxuICAgKiBAcGFyYW0geyFQYXltZW50RGF0YVJlcXVlc3R9IHBheW1lbnREYXRhUmVxdWVzdCBQcm92aWRlcyBuZWNlc3NhcnlcbiAgICogICAgIGluZm9ybWF0aW9uIHRvIHN1cHBvcnQgYSBwYXltZW50LlxuICAgKi9cbiAgcHJlZmV0Y2hQYXltZW50RGF0YShwYXltZW50RGF0YVJlcXVlc3QpIHt9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgUGF5bWVudERhdGEsIHdoaWNoIGNvbnRhaW5zIG5lY2Vzc2FyeSBpbmZvbWFydGlvbiB0byBjb21wbGV0ZSBhXG4gICAqIHBheW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7IVBheW1lbnREYXRhUmVxdWVzdH0gcGF5bWVudERhdGFSZXF1ZXN0IFByb3ZpZGVzIG5lY2Vzc2FyeVxuICAgKiAgICAgaW5mb3JtYXRpb24gdG8gc3VwcG9ydCBhIHBheW1lbnQuXG4gICAqL1xuICBsb2FkUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0KSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFQcm9taXNlPCFQYXltZW50RGF0YT4pfSBjYWxsYmFja1xuICAgKi9cbiAgb25SZXN1bHQoY2FsbGJhY2spIHt9XG59XG5cbmV4cG9ydCB7UGF5bWVudHNDbGllbnREZWxlZ2F0ZUludGVyZmFjZX07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERlc2NyaXB0aW9uIG9mIHRoaXMgZmlsZS5cbiAqL1xuaW1wb3J0IHtDb25zdGFudHN9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7UGF5bWVudHNDbGllbnREZWxlZ2F0ZUludGVyZmFjZX0gZnJvbSAnLi9wYXltZW50c19jbGllbnRfZGVsZWdhdGVfaW50ZXJmYWNlLmpzJztcblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBQYXltZW50c0NsaWVudERlbGVnYXRlSW50ZXJmYWNlIHRoYXQgbGV2ZXJhZ2VzIHBheW1lbnRcbiAqIHJlcXVlc3QuXG4gKiBAaW1wbGVtZW50cyB7UGF5bWVudHNDbGllbnREZWxlZ2F0ZUludGVyZmFjZX1cbiAqL1xuY2xhc3MgUGF5bWVudHNSZXF1ZXN0RGVsZWdhdGUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudmlyb25tZW50XG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnZpcm9ubWVudCkge1xuICAgIHRoaXMuZW52aXJvbm1lbnRfID0gZW52aXJvbm1lbnQ7XG5cbiAgICAvKiogQHByaXZhdGUgez9mdW5jdGlvbighUHJvbWlzZTwhUGF5bWVudERhdGE+KX0gKi9cbiAgICB0aGlzLmNhbGxiYWNrXyA9IG51bGw7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIG9uUmVzdWx0KGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjaztcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgaXNSZWFkeVRvUGF5KGlzUmVhZHlUb1BheVJlcXVlc3QpIHtcbiAgICAvKiogQHR5cGV7IVBheW1lbnRSZXF1ZXN0fSAqL1xuICAgIGNvbnN0IHBheW1lbnRSZXF1ZXN0ID0gdGhpcy5jcmVhdGVQYXltZW50UmVxdWVzdF8oaXNSZWFkeVRvUGF5UmVxdWVzdCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHBheW1lbnRSZXF1ZXN0LmNhbk1ha2VQYXltZW50KClcbiAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgICAgICAgICAgQ29uc3RhbnRzLklTX1JFQURZX1RPX1BBWV9SRVNVTFRfS0VZLCByZXN1bHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHsncmVzdWx0JzogcmVzdWx0fTtcbiAgICAgICAgICAgIGlmIChpc1JlYWR5VG9QYXlSZXF1ZXN0LmFwaVZlcnNpb24gPj0gMiAmJlxuICAgICAgICAgICAgICAgIGlzUmVhZHlUb1BheVJlcXVlc3QuZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgLy8gRm9yIGFwaVZlcnNpb24gMiwgd2UgYWx3YXlzIHVzZSBuYXRpdmUgdG8gb25seSBjaGVjayBmb3JcbiAgICAgICAgICAgICAgLy8gdG9rZW5pemVkIGNhcmRzLlxuICAgICAgICAgICAgICAvLyBGb3IgdG9rZW5pemVkIGNhcmRzIG5hdGl2ZSBhbHdheXMgZG9lcyBhIHByZXNlbmNlIGNoZWNrIHNvXG4gICAgICAgICAgICAgIC8vIHdlIGNhbiBzYXkgdGhhdCBpZiBjYW5NYWtlUGF5bWVudCBpcyB0cnVlIGZvciBuYXRpdmUgZm9yXG4gICAgICAgICAgICAgIC8vIHRva2VuaXplZENhcmRzIHRoZW4gdGhlIHVzZXIgaGFzIGEgcGF5bWVudCBtZXRob2Qgd2hpY2ggaXNcbiAgICAgICAgICAgICAgLy8gcHJlc2VudC5cbiAgICAgICAgICAgICAgcmVzcG9uc2VbJ3BheW1lbnRNZXRob2RQcmVzZW50J10gPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgQ29uc3RhbnRzLklTX1JFQURZX1RPX1BBWV9SRVNVTFRfS0VZKSkge1xuICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAncmVzdWx0Jzogd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zdGFudHMuSVNfUkVBRFlfVE9fUEFZX1JFU1VMVF9LRVkpID09ICd0cnVlJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoeydyZXN1bHQnOiBmYWxzZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBwcmVmZXRjaFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIC8vIENyZWF0aW5nIFBheW1lbnRSZXF1ZXN0IGluc3RhbmNlIHdpbGwgY2FsbFxuICAgIC8vIEdjb3JlIGlzUmVhZHlUb1BheSBpbnRlcm5hbGx5IHdoaWNoIHdpbGwgcHJlZmV0Y2ggdGVtcGFsdGVzLlxuICAgIHRoaXMuY3JlYXRlUGF5bWVudFJlcXVlc3RfKFxuICAgICAgICBwYXltZW50RGF0YVJlcXVlc3QsIHRoaXMuZW52aXJvbm1lbnRfLFxuICAgICAgICBwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvLmN1cnJlbmN5Q29kZSxcbiAgICAgICAgcGF5bWVudERhdGFSZXF1ZXN0LnRyYW5zYWN0aW9uSW5mby50b3RhbFByaWNlKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbG9hZFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIHRoaXMubG9hZFBheW1lbnREYXRhVGhyb3VnaFBheW1lbnRSZXF1ZXN0XyhwYXltZW50RGF0YVJlcXVlc3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBQYXltZW50UmVxdWVzdCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHshSXNSZWFkeVRvUGF5UmVxdWVzdHwhUGF5bWVudERhdGFSZXF1ZXN0fSByZXF1ZXN0IFRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gdG8gY2hlY2sgaWYgdXNlciBpc1xuICAgKiAgICAgcmVhZHkgdG8gcGF5IG9yIHRvIHN1cHBvcnQgYSBwYXltZW50IGZyb20gbWVyY2hhbnRzLlxuICAgKiBAcGFyYW0gez9zdHJpbmc9fSBlbnZpcm9ubWVudCAob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7P3N0cmluZz19IGN1cnJlbmN5Q29kZSAob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7P3N0cmluZz19IHRvdGFsUHJpY2UgKG9wdGlvbmFsKVxuICAgKiBAcmV0dXJuIHshUGF5bWVudFJlcXVlc3R9IFBheW1lbnRSZXF1ZXN0IGluc3RhbmNlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlUGF5bWVudFJlcXVlc3RfKHJlcXVlc3QsIGVudmlyb25tZW50LCBjdXJyZW5jeUNvZGUsIHRvdGFsUHJpY2UpIHtcbiAgICBsZXQgZGF0YSA9IHt9O1xuICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSk7XG4gICAgfVxuXG4gICAgLy8gT25seSBzZXQgdGhlIGFwaVZlcnNpb24gaWYgdGhlIG1lcmNoYW50IGRvZXNuJ3Qgc2V0IGl0LlxuICAgIGlmICghZGF0YVsnYXBpVmVyc2lvbiddKSB7XG4gICAgICBkYXRhWydhcGlWZXJzaW9uJ10gPSAxO1xuICAgIH1cblxuICAgIC8vIEFkZCBhbGxvd2VkUGF5bWVudE1ldGhvZHMgZm9yIHN3ZyB0byBnZXQgdGhyb3VnaCBnbXMgY29yZSB2YWxpZGF0aW9uLlxuICAgIGlmIChkYXRhWydzd2cnXSkge1xuICAgICAgZGF0YVsnYWxsb3dlZFBheW1lbnRNZXRob2RzJ10gPSBbQ29uc3RhbnRzLlBheW1lbnRNZXRob2QuQ0FSRF07XG4gICAgfVxuXG4gICAgaWYgKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5URVNUKSB7XG4gICAgICBkYXRhWydlbnZpcm9ubWVudCddID0gZW52aXJvbm1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc3VwcG9ydGVkSW5zdHJ1bWVudHMgPSBbe1xuICAgICAgJ3N1cHBvcnRlZE1ldGhvZHMnOiBbJ2h0dHBzOi8vZ29vZ2xlLmNvbS9wYXknXSxcbiAgICAgICdkYXRhJzogZGF0YSxcbiAgICB9XTtcblxuICAgIGNvbnN0IGRldGFpbHMgPSB7XG4gICAgICAndG90YWwnOiB7XG4gICAgICAgICdsYWJlbCc6ICdFc3RpbWF0ZWQgVG90YWwgUHJpY2UnLFxuICAgICAgICAnYW1vdW50Jzoge1xuICAgICAgICAgIC8vIGN1cnJlbmN5IGFuZCB2YWx1ZSBhcmUgcmVxdWlyZWQgZmllbGRzIGluIFBheW1lbnRSZXF1ZXN0LCBidXQgdGhlc2VcbiAgICAgICAgICAvLyBmaWVsZHMgd2lsbCBuZXZlciBiZSB1c2VkIHNpbmNlIFBheW1lbnRSZXF1ZXN0IFVJIGlzIHNraXBwZWQgd2hlblxuICAgICAgICAgIC8vIHdlJ3JlIHRoZSBvbmx5IHBheW1lbnQgbWV0aG9kLCBzbyBkZWZhdWx0IHRvIHNvbWUgdmFsdWUgdG8gYnkgcGFzc1xuICAgICAgICAgIC8vIHRoaXMgcmVxdWlyZW1lbnQuXG4gICAgICAgICAgJ2N1cnJlbmN5JzogY3VycmVuY3lDb2RlIHx8ICdVU0QnLFxuICAgICAgICAgICd2YWx1ZSc6IHRvdGFsUHJpY2UgfHwgJzAnLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUGF5bWVudFJlcXVlc3Qoc3VwcG9ydGVkSW5zdHJ1bWVudHMsIGRldGFpbHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBheW1lbnREYXRhUmVxdWVzdH0gcGF5bWVudERhdGFSZXF1ZXN0IFByb3ZpZGVzIG5lY2Vzc2FyeVxuICAgKiAgICAgaW5mb3JtYXRpb24gdG8gc3VwcG9ydCBhIHBheW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBsb2FkUGF5bWVudERhdGFUaHJvdWdoUGF5bWVudFJlcXVlc3RfKHBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IChwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnREYXRhUmVxdWVzdC50cmFuc2FjdGlvbkluZm8uY3VycmVuY3lDb2RlKSB8fFxuICAgICAgICB1bmRlZmluZWQ7XG4gICAgY29uc3QgdG90YWxQcmljZSA9IChwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvLnRvdGFsUHJpY2UpIHx8XG4gICAgICAgIHVuZGVmaW5lZDtcbiAgICBjb25zdCBwYXltZW50UmVxdWVzdCA9IHRoaXMuY3JlYXRlUGF5bWVudFJlcXVlc3RfKFxuICAgICAgICBwYXltZW50RGF0YVJlcXVlc3QsIHRoaXMuZW52aXJvbm1lbnRfLCBjdXJyZW5jeUNvZGUsIHRvdGFsUHJpY2UpO1xuICAgIHRoaXMuY2FsbGJhY2tfKFxuICAgICAgICAvKiogQHR5cGV7IVByb21pc2U8IVBheW1lbnREYXRhPn0gKi9cbiAgICAgICAgKHBheW1lbnRSZXF1ZXN0LnNob3coKVxuICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICogQHBhcmFtIHshUGF5bWVudFJlc3BvbnNlfSBwYXltZW50UmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICogQHJldHVybiB7IVBheW1lbnREYXRhfVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgKHBheW1lbnRSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSBjYWxsZWQgdG8gZGlzbWlzcyBhbnkgcmVtYWluaW5nIFVJXG4gICAgICAgICAgICAgICAgICAgcGF5bWVudFJlc3BvbnNlLmNvbXBsZXRlKCdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIHBheW1lbnRSZXNwb25zZS5kZXRhaWxzO1xuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgIGVyclsnc3RhdHVzQ29kZSddID0gQ29uc3RhbnRzLlJlc3BvbnNlU3RhdHVzLkNBTkNFTEVEO1xuICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgIH0pKSk7XG4gIH1cbn1cblxuZXhwb3J0IHtQYXltZW50c1JlcXVlc3REZWxlZ2F0ZX07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtDb25zdGFudHN9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7R3JheXBhbmV9IGZyb20gJy4vZ3JheXBhbmUuanMnO1xuaW1wb3J0IHtQYXltZW50c0NsaWVudERlbGVnYXRlSW50ZXJmYWNlfSBmcm9tICcuL3BheW1lbnRzX2NsaWVudF9kZWxlZ2F0ZV9pbnRlcmZhY2UuanMnO1xuaW1wb3J0IHtcbiAgQWN0aXZpdHlQb3J0LFxuICBBY3Rpdml0eVBvcnRzLFxuICBBY3Rpdml0eUlmcmFtZVBvcnQsXG59IGZyb20gJ3dlYi1hY3Rpdml0aWVzL2FjdGl2aXR5LXBvcnRzJztcbmltcG9ydCB7XG4gIEJ1eUZsb3dBY3Rpdml0eU1vZGUsXG4gIFBheUZyYW1lSGVscGVyLFxuICBQb3N0TWVzc2FnZUV2ZW50VHlwZSxcbn0gZnJvbSAnLi9wYXlfZnJhbWVfaGVscGVyLmpzJztcbmltcG9ydCB7ZG9lc01lcmNoYW50U3VwcG9ydE9ubHlUb2tlbml6ZWRDYXJkc30gZnJvbSAnLi92YWxpZGF0b3IuanMnO1xuaW1wb3J0IHtpbmplY3RTdHlsZVNoZWV0LCBpbmplY3RJZnJhbWV9IGZyb20gJy4vZWxlbWVudF9pbmplY3Rvci5qcyc7XG5cbmNvbnN0IEdQQVlfQUNUSVZJVFlfUkVRVUVTVCA9ICdHUEFZJztcbmNvbnN0IElGUkFNRV9DTE9TRV9EVVJBVElPTl9JTl9NUyA9IDI1MDtcbmNvbnN0IElGUkFNRV9TSE9XX1VQX0RVUkFUSU9OX0lOX01TID0gMjUwO1xuY29uc3QgSUZSQU1FX1NNT09USF9IRUlHSFRfVFJBTlNJVElPTiA9IGBoZWlnaHQgJHtJRlJBTUVfU0hPV19VUF9EVVJBVElPTl9JTl9NU31tc2A7XG5jb25zdCBFUlJPUl9QUkVGSVggPSAnRXJyb3I6ICc7XG5cbi8qKlxuICogU3VwcG9ydGVkIGJyb3dzZXIgdXNlciBhZ2VudCBrZXlzLlxuICpcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IEJyb3dzZXJVc2VyQWdlbnQgPSB7XG4gIENIUk9NRTogJ0Nocm9tZScsXG4gIEZJUkVGT1g6ICdGaXJlZm94JyxcbiAgU0FGQVJJOiAnU2FmYXJpJyxcbn07XG5cbi8qKlxuICogUmVzaXppbmcgcGF5bG9hZCBpbmNsdWRpbmcgcmVzaXplIGhlaWdodCBhbmQgdHJhbnNpdGlvbiBzdHlsZS5cbiAqXG4gKiBAdHlwZWRlZiB7e1xuICogICBoZWlnaHQ6IHN0cmluZyxcbiAqICAgdHJhbnNpdGlvbjogc3RyaW5nLFxuICogfX1cbiAqL1xubGV0IFJlc2l6ZVBheWxvYWQ7XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgUGF5bWVudHNDbGllbnREZWxlZ2F0ZUludGVyZmFjZSB0aGF0IHVzZXMgdGhlIGN1c3RvbVxuICogaG9zdGluZyBwYWdlIGFsb25nIHdpdGggd2ViIGFjdGl2aXRpZXMgdG8gYWN0dWFsbHkgZ2V0IHRvIHRoZSBob3N0aW5nIHBhZ2UuXG4gKiBAaW1wbGVtZW50cyB7UGF5bWVudHNDbGllbnREZWxlZ2F0ZUludGVyZmFjZX1cbiAqL1xuY2xhc3MgUGF5bWVudHNXZWJBY3Rpdml0eURlbGVnYXRlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnZpcm9ubWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ29vZ2xlVHJhbnNhY3Rpb25JZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1c2VJZnJhbWVcbiAgICogQHBhcmFtIHshQWN0aXZpdHlQb3J0cz19IGFjdGl2aXRpZXMgQ2FuIGJlIHVzZWQgdG8gcHJvdmlkZSBhIHNoYXJlZFxuICAgKiAgIGFjdGl2aXRpZXMgbWFuYWdlci4gQnkgZGVmYXVsdCwgdGhlIG5ldyBtYW5hZ2VyIGlzIGNyZWF0ZWQuXG4gICAqIEBwYXJhbSB7P3N0cmluZz19IHJlZGlyZWN0S2V5IFRoZSByZWRpcmVjdCBrZXkgdXNlZCBmb3IgcmVkaXJlY3QgbW9kZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVudmlyb25tZW50LFxuICAgIGdvb2dsZVRyYW5zYWN0aW9uSWQsXG4gICAgdXNlSWZyYW1lLFxuICAgIGFjdGl2aXRpZXMsXG4gICAgcmVkaXJlY3RLZXlcbiAgKSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudF8gPSBlbnZpcm9ubWVudDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtib29sZWFufSAqL1xuXG4gICAgLyoqIEBjb25zdCB7IUFjdGl2aXR5UG9ydHN9ICovXG4gICAgdGhpcy5hY3Rpdml0aWVzID0gYWN0aXZpdGllcyB8fCBuZXcgQWN0aXZpdHlQb3J0cyh3aW5kb3cpO1xuICAgIC8qKiBAY29uc3QgQHByaXZhdGUgeyFHcmF5cGFuZX0gKi9cbiAgICB0aGlzLmdyYXlwYW5lXyA9IG5ldyBHcmF5cGFuZSh3aW5kb3cuZG9jdW1lbnQpO1xuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKCFQcm9taXNlPCFQYXltZW50RGF0YT4pfSAqL1xuICAgIHRoaXMuY2FsbGJhY2tfID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSB7P3tcbiAgICAgKiAgICAgICAgICAgICBjb250YWluZXI6ICFFbGVtZW50LFxuICAgICAqICAgICAgICAgICAgIGlmcmFtZTohSFRNTElGcmFtZUVsZW1lbnQsXG4gICAgICogICAgICAgICAgICAgcmVxdWVzdDohUGF5bWVudERhdGFSZXF1ZXN0LFxuICAgICAqICAgICAgICAgICAgIGRhdGFQcm9taXNlOj9Qcm9taXNlPCFQYXltZW50RGF0YT59fVxuICAgICAqL1xuICAgIHRoaXMucHJlZmV0Y2hlZE9iamVjdHNfID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5zaG91bGRIYW5kbGVSZXNpemluZ18gPSBmYWxzZTtcbiAgICAvKiogQHByaXZhdGUgez9BY3Rpdml0eUlmcmFtZVBvcnR9ICovXG4gICAgdGhpcy5wb3J0XyA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlIHs/ZnVuY3Rpb24oIVByb21pc2U8dm9pZD4pfSAqL1xuICAgIHRoaXMuZGlzbWlzc1Byb21pc2VSZXNvbHZlcl8gPSBudWxsO1xuICAgIC8qKiBAY29uc3QgQHByaXZhdGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmdvb2dsZVRyYW5zYWN0aW9uSWRfID0gZ29vZ2xlVHJhbnNhY3Rpb25JZDtcbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMucmVkaXJlY3RLZXlfID0gcmVkaXJlY3RLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIHs/UmVzaXplUGF5bG9hZH1cbiAgICAgKi9cbiAgICB0aGlzLnNhdmVkUmVzaXplUGF5bG9hZF8gPSBudWxsO1xuXG4gICAgLy8gT25seSBpbnN0YWxsIGRpYWxvZyBzdHlsZXMgd2hlbiBpZnJhbWluZyBpcyBhbGxvd2VkLlxuICAgIGlmIChudWxsKSB7XG4gICAgICBpbmplY3RTdHlsZVNoZWV0KENvbnN0YW50cy5JRlJBTUVfU1RZTEUpO1xuICAgICAgaWYgKG51bGwpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVTaGVldChDb25zdGFudHMuSUZSQU1FX1NUWUxFX0NFTlRFUik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBvblJlc3VsdChjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLmNhbGxiYWNrXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xuICAgIHRoaXMuYWN0aXZpdGllcy5vblJlc3VsdChcbiAgICAgIEdQQVlfQUNUSVZJVFlfUkVRVUVTVCxcbiAgICAgIHRoaXMub25BY3Rpdml0eVJlc3VsdF8uYmluZCh0aGlzKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQWN0aXZpdHlQb3J0fSBwb3J0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkFjdGl2aXR5UmVzdWx0Xyhwb3J0KSB7XG4gICAgLy8gSGlkZSB0aGUgZ3JheXBhbmUuXG4gICAgdGhpcy5ncmF5cGFuZV8uaGlkZSgpO1xuICAgIC8vIE9ubHkgdmVyaWZpZWQgb3JpZ2lucyBhcmUgYWxsb3dlZC5cbiAgICB0aGlzLmNhbGxiYWNrXyhcbiAgICAgIHBvcnQuYWNjZXB0UmVzdWx0KCkudGhlbihcbiAgICAgICAgcmVzdWx0ID0+IHtcbiAgICAgICAgICAvLyBPcmlnaW4gbXVzdCBhbHdheXMgbWF0Y2g6IHBvcHVwLCBpZnJhbWUgb3IgcmVkaXJlY3QuXG4gICAgICAgICAgaWYgKHJlc3VsdC5vcmlnaW4gIT0gdGhpcy5nZXRPcmlnaW5fKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBtaXNtYXRjaCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkYXRhID0gLyoqIEB0eXBlIHshUGF5bWVudERhdGF9ICovIChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgaWYgKGRhdGFbJ3JlZGlyZWN0RW5jcnlwdGVkQ2FsbGJhY2tEYXRhJ10pIHtcbiAgICAgICAgICAgIFBheUZyYW1lSGVscGVyLnNldEJ1eUZsb3dBY3Rpdml0eU1vZGUoQnV5Rmxvd0FjdGl2aXR5TW9kZS5SRURJUkVDVCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaFJlZGlyZWN0UmVzcG9uc2VfKFxuICAgICAgICAgICAgICBkYXRhWydyZWRpcmVjdEVuY3J5cHRlZENhbGxiYWNrRGF0YSddXG4gICAgICAgICAgICApLnRoZW4oZGVjcnlwZWRKc29uID0+IHtcbiAgICAgICAgICAgICAgLy8gTWVyZ2Ugb3RoZXIgbm9uLWVuY3J5cHRlZCBmaWVsZHMgaW50byB0aGUgZmluYWwgcmVzcG9uc2UuXG4gICAgICAgICAgICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSk7XG4gICAgICAgICAgICAgIGRlbGV0ZSBjbG9uZVsncmVkaXJlY3RFbmNyeXB0ZWRDYWxsYmFja0RhdGEnXTtcbiAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY2xvbmUsIGRlY3J5cGVkSnNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVW5lbmNyeXB0ZWQgZGF0YSBzdXBwbGllZDogbXVzdCBiZSBhIHZlcmlmaWVkIGFuZCBzZWN1cmUgY2hhbm5lbC5cbiAgICAgICAgICBpZiAoIXJlc3VsdC5vcmlnaW5WZXJpZmllZCB8fCAhcmVzdWx0LnNlY3VyZUNoYW5uZWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBtaXNtYXRjaCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIC8vIFRPRE86IExvZyB0aGUgb3JpZ2luYWwgYW5kIHRoZSBpbmZlcnJlZCBlcnJvciB0byBleWUzLlxuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRXJyb3IgPSBlcnJvclsnbWVzc2FnZSddO1xuICAgICAgICAgIGxldCBpbmZlcnJlZEVycm9yID0gZXJyb3JbJ21lc3NhZ2UnXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHBhcnNlIHRoZSBlcnJvciBtZXNzYWdlIHRvIGEgc3RydWN0dXJlZCBlcnJvciwgaWYgaXQnc1xuICAgICAgICAgICAgLy8gbm90IHBvc3NpYmxlLCBmYWxsYmFjayB0byB1c2UgdGhlIGVycm9yIG1lc3NhZ2Ugc3RyaW5nLlxuICAgICAgICAgICAgaW5mZXJyZWRFcnJvciA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3Iuc3Vic3RyaW5nKEVSUk9SX1BSRUZJWC5sZW5ndGgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaW5mZXJyZWRFcnJvclsnc3RhdHVzQ29kZSddICYmXG4gICAgICAgICAgICBbJ0RFVkVMT1BFUl9FUlJPUicsICdNRVJDSEFOVF9BQ0NPVU5UX0VSUk9SJ10uaW5kZXhPZihcbiAgICAgICAgICAgICAgaW5mZXJyZWRFcnJvclsnc3RhdHVzQ29kZSddXG4gICAgICAgICAgICApID09IC0xXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpbmZlcnJlZEVycm9yID0ge1xuICAgICAgICAgICAgICAnc3RhdHVzQ29kZSc6ICdDQU5DRUxFRCcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5mZXJyZWRFcnJvciA9PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgICAgIGluZmVycmVkRXJyb3IgPSB7XG4gICAgICAgICAgICAgICdzdGF0dXNDb2RlJzogJ0NBTkNFTEVEJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChpbmZlcnJlZEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0RW5jcnlwdGVkQ2FsbGJhY2tEYXRhXG4gICAqIEByZXR1cm4geyFQYXltZW50RGF0YX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZldGNoUmVkaXJlY3RSZXNwb25zZV8ocmVkaXJlY3RFbmNyeXB0ZWRDYWxsYmFja0RhdGEpIHtcbiAgICAvLyBUaGlzIG1ldGhvZCBoYXMgdG8gcmVseSBvbiB0aGUgbGVnYWN5IFhIUiBBUEkgYmVjYXVzZSB0aGUgcmVkaXJlY3RcbiAgICAvLyBmdW5jdGlvbmFsaXR5IGlzLCBpbiBwYXJ0LCBhaW1lZCBhdCBvbGRlciBicm93c2Vycy5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdXJsID0gdGhpcy5nZXREZWNyeXB0aW9uVXJsXygpO1xuICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub3BlbignUE9TVCcsIHVybCwgdHJ1ZSk7XG4gICAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgICAgIC8vIEl0J3MgZmluZSB0byBwcm9jZWVkIGluIGEgbm9uLXJlZGlyZWN0IG1vZGUgYmVjYXVzZSByZWRpcmVjdFZlcmlmaWVyXG4gICAgICAgIC8vIHBsYXlzIHRoZSBwYXJ0IG9mIENPUlMgcHJvcGFnYXRpb24uXG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPCAvKiBTVEFUVVNfUkVDRUlWRUQgKi8gMikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA8IDEwMCB8fCB4aHIuc3RhdHVzID4gNTk5KSB7XG4gICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVW5rbm93biBIVFRQIHN0YXR1cyAke3hoci5zdGF0dXN9YCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gLyogQ09NUExFVEUgKi8gNCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEpTT04gcGFyc2luZyBlcnJvciBpcyBleHBlY3RlZCBoZXJlLlxuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKCdOZXR3b3JrIGZhaWx1cmUnKSk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFNlbmQgUE9TVC5cbiAgICAgIHhoci5zZW5kKHJlZGlyZWN0RW5jcnlwdGVkQ2FsbGJhY2tEYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgaXNSZWFkeVRvUGF5KGlzUmVhZHlUb1BheVJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKGRvZXNNZXJjaGFudFN1cHBvcnRPbmx5VG9rZW5pemVkQ2FyZHMoaXNSZWFkeVRvUGF5UmVxdWVzdCkpIHtcbiAgICAgICAgcmVzb2x2ZSh7J3Jlc3VsdCc6IGZhbHNlfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgY29uc3QgaXNJb3NHc2EgPVxuICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZignR1NBLycpID4gMCAmJlxuICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihCcm93c2VyVXNlckFnZW50LlNBRkFSSSkgPiAwO1xuICAgICAgLy8gcG9wIHVwIGluIElHU0EgZG9lc24ndCB3b3JrLlxuICAgICAgaWYgKGlzSW9zR3NhICYmICFudWxsKSB7XG4gICAgICAgIHJlc29sdmUoeydyZXN1bHQnOiBmYWxzZX0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpc0ZpcmVmb3hJb3MgPSB1c2VyQWdlbnQuaW5kZXhPZignRnhpT1MnKSA+IDA7XG4gICAgICBpZiAoaXNGaXJlZm94SW9zKSB7XG4gICAgICAgIHJlc29sdmUoeydyZXN1bHQnOiBmYWxzZX0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpc1N1cHBvcnRlZCA9XG4gICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKEJyb3dzZXJVc2VyQWdlbnQuQ0hST01FKSA+IDAgfHxcbiAgICAgICAgdXNlckFnZW50LmluZGV4T2YoQnJvd3NlclVzZXJBZ2VudC5GSVJFRk9YKSA+IDAgfHxcbiAgICAgICAgdXNlckFnZW50LmluZGV4T2YoQnJvd3NlclVzZXJBZ2VudC5TQUZBUkkpID4gMDtcbiAgICAgIGlmIChcbiAgICAgICAgaXNTdXBwb3J0ZWQgJiZcbiAgICAgICAgaXNSZWFkeVRvUGF5UmVxdWVzdC5hcGlWZXJzaW9uID49IDIgJiZcbiAgICAgICAgaXNSZWFkeVRvUGF5UmVxdWVzdC5leGlzdGluZ1BheW1lbnRNZXRob2RSZXF1aXJlZFxuICAgICAgKSB7XG4gICAgICAgIGlzUmVhZHlUb1BheVJlcXVlc3QuZW52aXJvbm1lbnQgPSB0aGlzLmVudmlyb25tZW50XztcbiAgICAgICAgUGF5RnJhbWVIZWxwZXIuc2VuZEFuZFdhaXRGb3JSZXNwb25zZShcbiAgICAgICAgICBpc1JlYWR5VG9QYXlSZXF1ZXN0LFxuICAgICAgICAgIFBvc3RNZXNzYWdlRXZlbnRUeXBlLklTX1JFQURZX1RPX1BBWSxcbiAgICAgICAgICAnaXNSZWFkeVRvUGF5UmVzcG9uc2UnLFxuICAgICAgICAgIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgJ3Jlc3VsdCc6IGlzU3VwcG9ydGVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc1JlYWR5VG9QYXlSZXF1ZXN0LmV4aXN0aW5nUGF5bWVudE1ldGhvZFJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlWydwYXltZW50TWV0aG9kUHJlc2VudCddID1cbiAgICAgICAgICAgICAgICBldmVudC5kYXRhWydpc1JlYWR5VG9QYXlSZXNwb25zZSddID09ICdSRUFEWV9UT19QQVknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSh7J3Jlc3VsdCc6IGlzU3VwcG9ydGVkfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHByZWZldGNoUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0KSB7XG4gICAgLy8gT25seSBoYW5kbGVzIHByZWZldGNoIGZvciBpZnJhbWUgZm9yIG5vdy5cbiAgICBpZiAoIW51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyQW5kRnJhbWUgPSB0aGlzLmluamVjdElmcmFtZV8ocGF5bWVudERhdGFSZXF1ZXN0KTtcbiAgICBjb25zdCBwYXltZW50RGF0YVByb21pc2UgPSB0aGlzLm9wZW5JZnJhbWVfKFxuICAgICAgY29udGFpbmVyQW5kRnJhbWVbJ2NvbnRhaW5lciddLFxuICAgICAgY29udGFpbmVyQW5kRnJhbWVbJ2lmcmFtZSddLFxuICAgICAgcGF5bWVudERhdGFSZXF1ZXN0XG4gICAgKTtcbiAgICB0aGlzLnByZWZldGNoZWRPYmplY3RzXyA9IHtcbiAgICAgICdjb250YWluZXInOiBjb250YWluZXJBbmRGcmFtZVsnY29udGFpbmVyJ10sXG4gICAgICAnaWZyYW1lJzogY29udGFpbmVyQW5kRnJhbWVbJ2lmcmFtZSddLFxuICAgICAgJ3JlcXVlc3QnOiBwYXltZW50RGF0YVJlcXVlc3QsXG4gICAgICAnZGF0YVByb21pc2UnOiBwYXltZW50RGF0YVByb21pc2UsXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbG9hZFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIGlmICghcGF5bWVudERhdGFSZXF1ZXN0LnN3Zykge1xuICAgICAgLy8gT25seSBzZXQgdGhlIGFwaVZlcnNpb24gaWYgdGhlIG1lcmNoYW50IGlzIG5vdCBzZXR0aW5nIGl0LlxuICAgICAgaWYgKCFwYXltZW50RGF0YVJlcXVlc3QuYXBpVmVyc2lvbikge1xuICAgICAgICBwYXltZW50RGF0YVJlcXVlc3QuYXBpVmVyc2lvbiA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHBheW1lbnREYXRhUmVxdWVzdC5lbnZpcm9ubWVudCA9IHRoaXMuZW52aXJvbm1lbnRfO1xuICAgIGlmIChudWxsKSB7XG4gICAgICBQYXlGcmFtZUhlbHBlci5zZXRCdXlGbG93QWN0aXZpdHlNb2RlKEJ1eUZsb3dBY3Rpdml0eU1vZGUuSUZSQU1FKTtcbiAgICAgIC8vIFRPRE86IENvbXBhcmUgdGhlIHJlcXVlc3Qgd2l0aCBwcmVmZXRjaGVkIHJlcXVlc3QuXG4gICAgICBsZXQgY29udGFpbmVyQW5kRnJhbWU7XG4gICAgICBsZXQgcGF5bWVudERhdGFQcm9taXNlO1xuICAgICAgaWYgKHRoaXMucHJlZmV0Y2hlZE9iamVjdHNfKSB7XG4gICAgICAgIC8vIFJlbmRlcmluZyBwcmVmZXRjaGVkIGZyYW1lIGFuZCBjb250YWluZXIuXG4gICAgICAgIGNvbnRhaW5lckFuZEZyYW1lID0gdGhpcy5wcmVmZXRjaGVkT2JqZWN0c187XG4gICAgICAgIHBheW1lbnREYXRhUHJvbWlzZSA9IHRoaXMucHJlZmV0Y2hlZE9iamVjdHNfWydkYXRhUHJvbWlzZSddO1xuICAgICAgICB0aGlzLnByZWZldGNoZWRPYmplY3RzXyA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXJBbmRGcmFtZSA9IHRoaXMuaW5qZWN0SWZyYW1lXyhwYXltZW50RGF0YVJlcXVlc3QpO1xuICAgICAgICBwYXltZW50RGF0YVByb21pc2UgPSB0aGlzLm9wZW5JZnJhbWVfKFxuICAgICAgICAgIGNvbnRhaW5lckFuZEZyYW1lWydjb250YWluZXInXSxcbiAgICAgICAgICBjb250YWluZXJBbmRGcmFtZVsnaWZyYW1lJ10sXG4gICAgICAgICAgcGF5bWVudERhdGFSZXF1ZXN0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnNob3dDb250YWluZXJBbmRJZnJhbWVXaXRoQW5pbWF0aW9uXyhcbiAgICAgICAgY29udGFpbmVyQW5kRnJhbWVbJ2NvbnRhaW5lciddLFxuICAgICAgICBjb250YWluZXJBbmRGcmFtZVsnaWZyYW1lJ10sXG4gICAgICAgIHBheW1lbnREYXRhUmVxdWVzdFxuICAgICAgKTtcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgJycpO1xuICAgICAgY29uc3Qgb25Qb3BTdGF0ZSA9IGUgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuYmFja0J1dHRvbkhhbmRsZXJfKGNvbnRhaW5lckFuZEZyYW1lKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BTdGF0ZSk7XG4gICAgICB9O1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BTdGF0ZSk7XG4gICAgICBjb25zdCBkaXNtaXNzUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLmRpc21pc3NQcm9taXNlUmVzb2x2ZXJfID0gcmVzb2x2ZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jYWxsYmFja18oUHJvbWlzZS5yYWNlKFtwYXltZW50RGF0YVByb21pc2UsIGRpc21pc3NQcm9taXNlXSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBQYXlGcmFtZUhlbHBlci5zZXRCdXlGbG93QWN0aXZpdHlNb2RlKFxuICAgICAgcGF5bWVudERhdGFSZXF1ZXN0Wydmb3JjZVJlZGlyZWN0J11cbiAgICAgICAgPyBCdXlGbG93QWN0aXZpdHlNb2RlLlJFRElSRUNUXG4gICAgICAgIDogQnV5Rmxvd0FjdGl2aXR5TW9kZS5QT1BVUFxuICAgICk7XG4gICAgY29uc3Qgb3BlbmVyID0gdGhpcy5hY3Rpdml0aWVzLm9wZW4oXG4gICAgICBHUEFZX0FDVElWSVRZX1JFUVVFU1QsXG4gICAgICB0aGlzLmdldEhvc3RpbmdQYWdlVXJsXygpLFxuICAgICAgdGhpcy5nZXRSZW5kZXJNb2RlXyhwYXltZW50RGF0YVJlcXVlc3QpLFxuICAgICAgcGF5bWVudERhdGFSZXF1ZXN0LFxuICAgICAgeyd3aWR0aCc6IDYwMCwgJ2hlaWdodCc6IDYwMH1cbiAgICApO1xuICAgIHRoaXMuZ3JheXBhbmVfLnNob3cob3BlbmVyICYmIG9wZW5lci50YXJnZXRXaW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJlbmRlciBtb2RlIHdoZXRoZXIgbmVlZCB0byBmb3JjZSByZWRpcmVjdC5cbiAgICpcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGFSZXF1ZXN0fSBwYXltZW50RGF0YVJlcXVlc3RcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0UmVuZGVyTW9kZV8ocGF5bWVudERhdGFSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHBheW1lbnREYXRhUmVxdWVzdFsnZm9yY2VSZWRpcmVjdCddID8gJ190b3AnIDogJ2dwLWpzLXBvcHVwJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzZXJ2ZXIgb3JpZ2luIGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0T3JpZ2luXygpIHtcbiAgICBpZiAodGhpcy5lbnZpcm9ubWVudF8gPT0gQ29uc3RhbnRzLkVudmlyb25tZW50LkxPQ0FMKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgbGV0IGJhc2VEb21haW47XG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnRfID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5QUkVQUk9EKSB7XG4gICAgICBiYXNlRG9tYWluID0gJ3BheS1wcmVwcm9kLnNhbmRib3gnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lbnZpcm9ubWVudF8gPT0gQ29uc3RhbnRzLkVudmlyb25tZW50LlNBTkRCT1gpIHtcbiAgICAgIGJhc2VEb21haW4gPSAncGF5LnNhbmRib3gnO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlRG9tYWluID0gJ3BheSc7XG4gICAgfVxuICAgIHJldHVybiAnaHR0cHM6Ly8nICsgYmFzZURvbWFpbiArICcuZ29vZ2xlLmNvbSc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYmFzZSBwYXRoIGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgYmFzZSBwYXRoXG4gICAqL1xuICBnZXRCYXNlUGF0aF8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3JpZ2luXygpICsgJy9ncC9wJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZWNyeXB0aW9uIHVybCB0byBiZSB1c2VkIHRvIGRlY3J5cHQgdGhlIGVuY3J5cHRlZCBwYXlsb2FkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkZWNyeXB0aW9uIHVybFxuICAgKi9cbiAgZ2V0RGVjcnlwdGlvblVybF8oKSB7XG4gICAgbGV0IHVybCA9IHRoaXMuZ2V0QmFzZVBhdGhfKCkgKyAnL2FwaXMvYnV5Zmxvdy9wcm9jZXNzJztcbiAgICBpZiAodGhpcy5yZWRpcmVjdEtleV8pIHtcbiAgICAgIHVybCArPSAnP3JrPScgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5yZWRpcmVjdEtleV8pO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGhvc3RpbmcgcGFnZSB1cmwuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhvc3RpbmcgcGFnZSB1cmxcbiAgICovXG4gIGdldEhvc3RpbmdQYWdlVXJsXygpIHtcbiAgICAvLyBJbiBUaW4gdGVzdHMsIHRoZSBob3N0aW5nIHBhZ2UgaXMgcmVxdWVzdGVkIGZyb21cbiAgICAvLyAvdGVzdGluZy9idXlmbG93L21lcmNoYW50ZGVtby5odG1sIGFuZCBpcyBhY2Nlc3NlZCByZWxhdGl2ZWx5IHNpbmNlIHRoZVxuICAgIC8vIGJhc2UgcGF0aCBpcyB1bmtub3duIGFoZWFkIG9mIHRpbWUuXG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnRfID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5USU4pIHtcbiAgICAgIC8vIFRoZXJlIGlzIG5vIC9ncC9wIHByZWZpeCBzaW5jZSBtdWx0aWxvZ2luIHByZWZpeGVzIGlzIGJyb2tlbiBpbiBUaW46XG4gICAgICAvLyBodHRwOi8veWFxcy80OTEyMzIyOTQxNTUwNTkyXG4gICAgICByZXR1cm4gJy91aS9wYXknO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRCYXNlUGF0aF8oKSArICcvdWkvcGF5JztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpZnJhbWUgcHdnIHVybCB0byBiZSB1c2VkIHRvIGJlIHVzZWQgZm9yIGFtcC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudmlyb25tZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaWZyYW1lIHVybFxuICAgKi9cbiAgZ2V0SWZyYW1lVXJsKGVudmlyb25tZW50LCBvcmlnaW4pIHtcbiAgICAvLyBUT0RPOiBUaGVzZSBzaG91bGQgYmUgY29tcGlsZSB0aW1lIGNvbnN0YW50cyBhbmQgbm90IGRlcGVuZGVudFxuICAgIC8vIG9uIHRoZSBlbnZpcm9ubWVudC5cbiAgICBsZXQgaWZyYW1lVXJsID0gYGh0dHBzOi8vcGF5Lmdvb2dsZS5jb20vZ3AvcC91aS9wYXk/b3JpZ2luPSR7b3JpZ2lufWA7XG4gICAgaWYgKFxuICAgICAgZW52aXJvbm1lbnQgPT0gQ29uc3RhbnRzLkVudmlyb25tZW50LlNBTkRCT1ggfHxcbiAgICAgIGVudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5QUkVQUk9EXG4gICAgKSB7XG4gICAgICBpZnJhbWVVcmwgPSBgaHR0cHM6Ly9wYXknKyAgKGVudmlyb25tZW50ID09IENvbnN0YW50cy5FbnZpcm9ubWVudC5QUkVQUk9EID8gJy1wcmVwcm9kJyA6ICcnKSsgICcuc2FuZGJveC5nb29nbGUuY29tL2dwL3AvdWkvcGF5P29yaWdpbj0ke29yaWdpbn1gO1xuICAgIH1cbiAgICByZXR1cm4gaWZyYW1lVXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlIGlmcmFtZSB3aXRoIGFuaW1hdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHshRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7IUhUTUxJRnJhbWVFbGVtZW50fSBpZnJhbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlbW92ZUlmcmFtZUFuZENvbnRhaW5lcl8oY29udGFpbmVyLCBpZnJhbWUpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uU3R5bGUgPSAnYWxsICcgKyBJRlJBTUVfQ0xPU0VfRFVSQVRJT05fSU5fTVMgKyAnbXMgZWFzZSAwcyc7XG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uXyhpZnJhbWUsIHRyYW5zaXRpb25TdHlsZSk7XG4gICAgaWZyYW1lLmhlaWdodCA9ICcwcHgnO1xuICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIHJlcGxhY2VkIGJ5IGxpc3RlbmluZyB0byBUcmFuc2l0aW9uRW5kIGV2ZW50XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGFpbmVyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9LCBJRlJBTUVfQ0xPU0VfRFVSQVRJT05fSU5fTVMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBheW1lbnREYXRhUmVxdWVzdH0gcGF5bWVudERhdGFSZXF1ZXN0XG4gICAqIEByZXR1cm4ge3tjb250YWluZXI6ICFFbGVtZW50LCBpZnJhbWU6IUhUTUxJRnJhbWVFbGVtZW50fX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGluamVjdElmcmFtZV8ocGF5bWVudERhdGFSZXF1ZXN0KSB7XG4gICAgY29uc3QgY29udGFpbmVyQW5kRnJhbWUgPSBpbmplY3RJZnJhbWUoXG4gICAgICB0aGlzLmlzVmVydGljYWxDZW50ZXJFeHBlcmltZW50RW5hYmxlZF8ocGF5bWVudERhdGFSZXF1ZXN0KVxuICAgICAgICA/IENvbnN0YW50cy5JRlJBTUVfU1RZTEVfQ0VOVEVSX0NMQVNTXG4gICAgICAgIDogQ29uc3RhbnRzLklGUkFNRV9TVFlMRV9DTEFTU1xuICAgICk7XG4gICAgY29uc3QgaWZyYW1lID0gY29udGFpbmVyQW5kRnJhbWVbJ2lmcmFtZSddO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGNvbnRhaW5lckFuZEZyYW1lWydjb250YWluZXInXTtcbiAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICB0aGlzLmNsb3NlQWN0aW9uSGFuZGxlcl8uYmluZCh0aGlzLCBjb250YWluZXJBbmRGcmFtZSlcbiAgICApO1xuICAgIC8vIEhpZGUgaWZyYW1lIGFuZCBkaXNhYmxlIHJlc2l6ZSBhdCBpbml0aWFsaXplLlxuICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmcmFtZS5oZWlnaHQgPSAnMHB4JztcbiAgICBjb25zdCB0cmFuc2l0aW9uU3R5bGUgPVxuICAgICAgJ2FsbCAnICsgSUZSQU1FX1NIT1dfVVBfRFVSQVRJT05fSU5fTVMgKyAnbXMgZWFzZSAwcyc7XG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uXyhpZnJhbWUsIHRyYW5zaXRpb25TdHlsZSk7XG4gICAgdGhpcy5zaG91bGRIYW5kbGVSZXNpemluZ18gPSBmYWxzZTtcbiAgICByZXR1cm4gY29udGFpbmVyQW5kRnJhbWU7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciB3aGVuIGJhY2sgYnV0dG9uIGlzIHRyaWdnZXJlZCwgc2hvdWxkIGRpc21pc3MgaWZyYW1lIGlmIHByZXNlbnQuXG4gICAqIEBwYXJhbSB7e2NvbnRhaW5lcjogIUVsZW1lbnQsIGlmcmFtZTohSFRNTElGcmFtZUVsZW1lbnR9fSBjb250YWluZXJBbmRGcmFtZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYmFja0J1dHRvbkhhbmRsZXJfKGNvbnRhaW5lckFuZEZyYW1lKSB7XG4gICAgdGhpcy5kaXNtaXNzSWZyYW1lXyhjb250YWluZXJBbmRGcmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciB3aGVuIGNsb3NlIGFjdGlvbiBpcyB0cmlnZ2VyZWQsIHdpbGwgcG9wIGhpc3Rvcnkgc3RhdGUgdG8gY2xvc2VcbiAgICogdGhlIGlmcmFtZS5cbiAgICogQHBhcmFtIHt7Y29udGFpbmVyOiAhRWxlbWVudCwgaWZyYW1lOiFIVE1MSUZyYW1lRWxlbWVudH19IGNvbnRhaW5lckFuZEZyYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbG9zZUFjdGlvbkhhbmRsZXJfKGNvbnRhaW5lckFuZEZyYW1lKSB7XG4gICAgaWYgKGNvbnRhaW5lckFuZEZyYW1lWydjb250YWluZXInXS5wYXJlbnROb2RlKSB7XG4gICAgICAvLyBDbG9zZSBhY3Rpb24gb25seSB3aGVuIGNvbnRhaW5lciBpcyBzdGlsbCBhdHRhY2hlZCB0byB0aGUgcGFnZS5cbiAgICAgIGhpc3RvcnkuYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3tjb250YWluZXI6ICFFbGVtZW50LCBpZnJhbWU6IUhUTUxJRnJhbWVFbGVtZW50fX0gY29udGFpbmVyQW5kRnJhbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRpc21pc3NJZnJhbWVfKGNvbnRhaW5lckFuZEZyYW1lKSB7XG4gICAgLy8gRGlzbWlzcyBpZnJhbWUgb25seSB3aGVuIGNvbnRhaW5lciBpcyBzdGlsbCBhdHRhY2hlZCBpbiB0aGUgcGFnZS5cbiAgICBpZiAoY29udGFpbmVyQW5kRnJhbWVbJ2NvbnRhaW5lciddLnBhcmVudE5vZGUpIHtcbiAgICAgIC8vIFRPRE86IFRoaW5rIGFib3V0IHdoZXRoZXIgdGhpcyBjb3VsZCBiZSBqdXN0IGhpZGUgaW5zdGVhZCBvZlxuICAgICAgLy8gZGlzY29ubmVjdCBhbmQgcmVtb3ZlLCB0aGUgdHJpY2t5IHBhcnQgaXMgaG93IHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZVxuICAgICAgLy8gcGF5bWVudCBkYXRhIHJlcXVlc3QgaXMgbm90IHRoZSBzYW1lLlxuICAgICAgdGhpcy5kaXNtaXNzUHJvbWlzZVJlc29sdmVyXyhQcm9taXNlLnJlamVjdCh7J2Vycm9yQ29kZSc6ICdDQU5DRUxFRCd9KSk7XG4gICAgICB0aGlzLnJlbW92ZUlmcmFtZUFuZENvbnRhaW5lcl8oXG4gICAgICAgIGNvbnRhaW5lckFuZEZyYW1lWydjb250YWluZXInXSxcbiAgICAgICAgY29udGFpbmVyQW5kRnJhbWVbJ2lmcmFtZSddXG4gICAgICApO1xuICAgICAgdGhpcy5wb3J0XyAmJiB0aGlzLnBvcnRfLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGFSZXF1ZXN0fSBwYXltZW50RGF0YVJlcXVlc3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzVmVydGljYWxDZW50ZXJFeHBlcmltZW50RW5hYmxlZF8ocGF5bWVudERhdGFSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG51bGwgJiZcbiAgICAgIHBheW1lbnREYXRhUmVxdWVzdFsnaSddICYmXG4gICAgICBwYXltZW50RGF0YVJlcXVlc3RbJ2knXS5yZW5kZXJDb250YWluZXJDZW50ZXJcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IGNvbnRhaW5lclxuICAgKiBAcGFyYW0geyFIVE1MSUZyYW1lRWxlbWVudH0gaWZyYW1lXG4gICAqIEBwYXJhbSB7IVBheW1lbnREYXRhUmVxdWVzdH0gcGF5bWVudERhdGFSZXF1ZXN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzaG93Q29udGFpbmVyQW5kSWZyYW1lV2l0aEFuaW1hdGlvbl8oY29udGFpbmVyLCBpZnJhbWUsIHBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBIYXJkIGNvZGUgdGhlIGFwcHJ4IGhlaWdodCBoZXJlLCBpdCB3aWxsIGJlIHJlc2l6ZSB0byBleHBlY3RlZCBoZWlnaHRcbiAgICAgIC8vIGxhdGVyLlxuICAgICAgaWZyYW1lLmhlaWdodCA9ICcyODBweCc7XG4gICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsQ2VudGVyRXhwZXJpbWVudEVuYWJsZWRfKHBheW1lbnREYXRhUmVxdWVzdCkpIHtcbiAgICAgICAgaWZyYW1lLmNsYXNzTGlzdC5hZGQoQ29uc3RhbnRzLklGUkFNRV9BQ1RJVkVfQ09OVEFJTkVSX0NMQVNTKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIGhhbmRsZXMgcHJvcGVybHkgYnkgbGlzdGVuaW5nIHRvXG4gICAgICAvLyBUcmFuc2l0aW9uRW5kIGV2ZW50LlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvdWxkSGFuZGxlUmVzaXppbmdfID0gdHJ1ZTtcbiAgICAgICAgLy8gVE9ETzogQWRkIGJyb3dzZXIgdGVzdCB0aGF0IGNhdGNoZXMgdGhpcy5cbiAgICAgICAgaWYgKHRoaXMuc2F2ZWRSZXNpemVQYXlsb2FkXykge1xuICAgICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbl8oaWZyYW1lLCB0aGlzLnNhdmVkUmVzaXplUGF5bG9hZF9bJ3RyYW5zaXRpb24nXSk7XG4gICAgICAgICAgaWZyYW1lLmhlaWdodCA9IHRoaXMuc2F2ZWRSZXNpemVQYXlsb2FkX1snaGVpZ2h0J107XG4gICAgICAgICAgdGhpcy5zYXZlZFJlc2l6ZVBheWxvYWRfID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSwgSUZSQU1FX1NIT1dfVVBfRFVSQVRJT05fSU5fTVMpO1xuICAgIH0sIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxJRnJhbWVFbGVtZW50fSBpZnJhbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zaXRpb25TdHlsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0VHJhbnNpdGlvbl8oaWZyYW1lLCB0cmFuc2l0aW9uU3R5bGUpIHtcbiAgICBpZnJhbWUuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24nLCB0cmFuc2l0aW9uU3R5bGUpO1xuICAgIC8vIEZvciBzYWZhcmkuXG4gICAgaWZyYW1lLnN0eWxlLnNldFByb3BlcnR5KCctd2Via2l0LXRyYW5zaXRpb24nLCB0cmFuc2l0aW9uU3R5bGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZSBXZWJBY3Rpdml0aXkgdG8gb3BlbiBpZnJhbWUgdGhhdCdzIGluIGdpdmVuIGNvbnRhaW5lci5cbiAgICpcbiAgICogQHBhcmFtIHshRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7IUhUTUxJRnJhbWVFbGVtZW50fSBpZnJhbWVcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGFSZXF1ZXN0fSBwYXltZW50RGF0YVJlcXVlc3RcbiAgICogQHJldHVybiB7IVByb21pc2U8IVBheW1lbnREYXRhPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9wZW5JZnJhbWVfKGNvbnRhaW5lciwgaWZyYW1lLCBwYXltZW50RGF0YVJlcXVlc3QpIHtcbiAgICBpZiAoIXBheW1lbnREYXRhUmVxdWVzdC5zd2cpIHtcbiAgICAgIGlmICghcGF5bWVudERhdGFSZXF1ZXN0LmFwaVZlcnNpb24pIHtcbiAgICAgICAgcGF5bWVudERhdGFSZXF1ZXN0LmFwaVZlcnNpb24gPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXltZW50RGF0YVJlcXVlc3QuZW52aXJvbm1lbnQgPSB0aGlzLmVudmlyb25tZW50XztcbiAgICBsZXQgaWZyYW1lTG9hZFN0YXJ0VGltZTtcbiAgICBjb25zdCB0cnVzdGVkVXJsID0gdGhpcy5nZXRJZnJhbWVVcmwoXG4gICAgICB0aGlzLmVudmlyb25tZW50XyxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cbiAgICApO1xuICAgIHJldHVybiB0aGlzLmFjdGl2aXRpZXNcbiAgICAgIC5vcGVuSWZyYW1lKGlmcmFtZSwgdHJ1c3RlZFVybCwgcGF5bWVudERhdGFSZXF1ZXN0KVxuICAgICAgLnRoZW4ocG9ydCA9PiB7XG4gICAgICAgIC8vIEhhbmRsZSBjdXN0b20gcmVzaXplIG1lc3NhZ2UuXG4gICAgICAgIHRoaXMucG9ydF8gPSBwb3J0O1xuICAgICAgICBwb3J0Lm9uTWVzc2FnZShwYXlsb2FkID0+IHtcbiAgICAgICAgICBpZiAocGF5bG9hZFsndHlwZSddICE9PSAncmVzaXplJyB8fCAhdGhpcy5zaG91bGRIYW5kbGVSZXNpemluZ18pIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIHJlc2l6ZSBldmVudCBsYXRlciBhZnRlciBpbml0aWFsIGFuaW1hdGlvbiBpcyBmaW5pc2hlZFxuICAgICAgICAgICAgdGhpcy5zYXZlZFJlc2l6ZVBheWxvYWRfID0ge1xuICAgICAgICAgICAgICAnaGVpZ2h0JzogcGF5bG9hZFsnaGVpZ2h0J10sXG4gICAgICAgICAgICAgICd0cmFuc2l0aW9uJzogcGF5bG9hZFsndHJhbnNpdGlvbiddLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gYi8xMTEzMTA4OTk6IFNtb290aCBvdXQgaW5pdGlhbCBpRnJhbWUgbG9hZGluZ1xuICAgICAgICAgIGlmICghaWZyYW1lTG9hZFN0YXJ0VGltZSkge1xuICAgICAgICAgICAgaWZyYW1lTG9hZFN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIERhdGUubm93KCkgPFxuICAgICAgICAgICAgaWZyYW1lTG9hZFN0YXJ0VGltZSArIElGUkFNRV9TSE9XX1VQX0RVUkFUSU9OX0lOX01TXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25fKFxuICAgICAgICAgICAgICBpZnJhbWUsXG4gICAgICAgICAgICAgIHBheWxvYWRbJ3RyYW5zaXRpb24nXSArICcsICcgKyBJRlJBTUVfU01PT1RIX0hFSUdIVF9UUkFOU0lUSU9OXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25fKGlmcmFtZSwgcGF5bG9hZFsndHJhbnNpdGlvbiddKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWZyYW1lLmhlaWdodCA9IHBheWxvYWRbJ2hlaWdodCddO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb21pc2U8IU9iamVjdD59ICovIChwb3J0LmFjY2VwdFJlc3VsdCgpKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7IU9iamVjdH0gcmVzdWx0XG4gICAgICAgICAqIEByZXR1cm4geyFQYXltZW50RGF0YX1cbiAgICAgICAgICovXG4gICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVJZnJhbWVBbmRDb250YWluZXJfKGNvbnRhaW5lciwgaWZyYW1lKTtcbiAgICAgICAgICAvLyBUaGlzIGlzIG9ubHkgZm9yIHBvcHBpbmcgdGhlIHN0YXRlIHdlIHB1c2hlZCBlYXJsaWVyLlxuICAgICAgICAgIGhpc3RvcnkuYmFjaygpO1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSAvKiogQHR5cGUgeyFQYXltZW50RGF0YX0gKi8gKHJlc3VsdFsnZGF0YSddKTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMucmVtb3ZlSWZyYW1lQW5kQ29udGFpbmVyXyhjb250YWluZXIsIGlmcmFtZSk7XG4gICAgICAgICAgLy8gVGhpcyBpcyBvbmx5IGZvciBwb3BwaW5nIHRoZSBzdGF0ZSB3ZSBwdXNoZWQgZWFybGllci5cbiAgICAgICAgICBoaXN0b3J5LmJhY2soKTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7UGF5bWVudHNXZWJBY3Rpdml0eURlbGVnYXRlfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFNlcnZpY2Ugd3JhcHBpbmcgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZS4gVGhpcyBlbmFibGVzXG4gKiB3aW5kb3cucG9zdE1lc3NhZ2UgdG8gYmUgc3dhcHBlZCBvdXQgaW4gdW5pdCB0ZXN0cy5cbiAqL1xuY2xhc3MgUG9zdE1lc3NhZ2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3Iod2luZG93KSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbmRvd18gPSB3aW5kb3c7XG4gIH1cblxuICAvKipcbiAgICogUGFzc3Rocm91Z2ggdG8gV2luZG93I3Bvc3RNZXNzYWdlLiBTZWUgV2luZG93I3Bvc3RNZXNzYWdlIERPTSBBUElcbiAgICogZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBhcmd1bWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gbWVzc2FnZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0T3JpZ2luXG4gICAqL1xuICBwb3N0TWVzc2FnZShtZXNzYWdlLCB0YXJnZXRPcmlnaW4pIHtcbiAgICB0aGlzLndpbmRvd18ucG9zdE1lc3NhZ2UobWVzc2FnZSwgdGFyZ2V0T3JpZ2luKTtcbiAgfVxufVxuXG5leHBvcnQge1Bvc3RNZXNzYWdlU2VydmljZX07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtDb25zdGFudHN9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7UHVibGljRXJyb3JDb2RlfSBmcm9tICcuL3BheV9mcmFtZV9oZWxwZXIuanMnO1xuaW1wb3J0IHtnZXRVcGlQYXltZW50TWV0aG9kfSBmcm9tICcuL3ZhbGlkYXRvci5qcyc7XG5cbmNsYXNzIFVwaUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdXBpIHBheW1lbnQgbWV0aG9kIG9iamVjdCBpZiBpdCBleGlzdHMgaW4gYWxsb3dlZCBwYXltZW50IG1ldGhvZHNcbiAgICogb3IgbnVsbCBpZiBpdCBkb2Vzbid0XG4gICAqXG4gICAqIEBwYXJhbSB7IUlzUmVhZHlUb1BheVJlcXVlc3R8IVBheW1lbnREYXRhUmVxdWVzdH0gcmVxdWVzdFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNVcGlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gISFnZXRVcGlQYXltZW50TWV0aG9kKHJlcXVlc3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdXBpIHBheW1lbnQgbWV0aG9kIG9iamVjdCBpZiBpdCBleGlzdHMgaW4gYWxsb3dlZCBwYXltZW50IG1ldGhvZHNcbiAgICogb3IgbnVsbCBpZiBpdCBkb2Vzbid0XG4gICAqXG4gICAqIEBwYXJhbSB7IUlzUmVhZHlUb1BheVJlcXVlc3R8IVBheW1lbnREYXRhUmVxdWVzdH0gcmVxdWVzdFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX0gVGhlIHByb21pc2Ugd2lsbCBjb250YWluIHRoZSBib29sZWFuIHJlc3VsdCBhbmQgZXJyb3JcbiAgICogICAgIG1lc3NhZ2Ugd2hlbiBwb3NzaWJsZS5cbiAgICovXG4gIGlzUmVhZHlUb1BheShyZXF1ZXN0KSB7XG4gICAgLy8gQWx3YXlzIHJldHVybiB0cnVlIGZvciBVUEkgaWYgYXBpIHZlcnNpb24gaXMgMiBhbmQgY2hyb21lIHN1cHBvcnRzXG4gICAgLy8gcGF5bWVudCByZXF1ZXN0XG4gICAgaWYgKGdldFVwaVBheW1lbnRNZXRob2QocmVxdWVzdCkpIHtcbiAgICAgIGlmIChyZXF1ZXN0LmV4aXN0aW5nUGF5bWVudE1ldGhvZFJlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeydyZXN1bHQnOiB0cnVlLCAncGF5bWVudE1ldGhvZFByZXNlbnQnOiB0cnVlfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsncmVzdWx0JzogdHJ1ZX0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFVwaSBwYXltZW50IG1ldGhvZCBmb3VuZCBpbiBoYW5kbGVyJyk7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBwYXltZW50IGRhdGEgd2hlbiBwYXltZW50IG1ldGhvZCBpcyBVUElcbiAgICpcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGFSZXF1ZXN0fSBwYXltZW50RGF0YVJlcXVlc3QgUHJvdmlkZXMgbmVjZXNzYXJ5XG4gICAqICAgICBpbmZvcm1hdGlvbiB0byBzdXBwb3J0IGEgcGF5bWVudC5cbiAgICogQHBhcmFtIHshT2JqZWN0fSB1cGlQYXltZW50TWV0aG9kIFVQSSBwYXltZW50bWV0aG9kIGluXG4gICAqICAgICBhbGxvd2VkUGF5bWVudE1ldGhvZHMgYXJyYXkuXG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBvblJlc3VsdENhbGxiYWNrIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBldmVyeXRoaW5nIGlzXG4gICAqICAgICBkb25lLlxuICAgKi9cbiAgbG9hZFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCwgdXBpUGF5bWVudE1ldGhvZCwgb25SZXN1bHRDYWxsYmFjaykge1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB1cGlQYXltZW50TWV0aG9kWydwYXJhbWV0ZXJzJ107XG4gICAgY29uc3QgdHJhbnNhY3Rpb25JbmZvID0gcGF5bWVudERhdGFSZXF1ZXN0Wyd0cmFuc2FjdGlvbkluZm8nXTtcbiAgICBjb25zdCBzdXBwb3J0ZWRJbnN0cnVtZW50cyA9IG51bGwgP1xuICAgICAgICBbe1xuICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHVybCBmb3IgVGV6IHRlYW1mb29kIHJlbGVhc2UuXG4gICAgICAgICAgJ3N1cHBvcnRlZE1ldGhvZHMnOiBbJ2h0dHBzOi8vcHdwLXNlcnZlci5hcHBzcG90LmNvbS9wYXktdGVhbWZvb2QnXSxcbiAgICAgICAgICAnZGF0YSc6IHtcbiAgICAgICAgICAgICdwYSc6ICdyZWRidXNAYXhpc2JhbmsnLFxuICAgICAgICAgICAgJ3BuJzogcGFyYW1ldGVyc1sncGF5ZWVOYW1lJ10sXG4gICAgICAgICAgICAndHInOiBwYXJhbWV0ZXJzWyd0cmFuc2FjdGlvblJlZmVyZW5jZUlkJ10sXG4gICAgICAgICAgICAndXJsJzogcGFyYW1ldGVyc1sncmVmZXJlbmNlVXJsJ10sXG4gICAgICAgICAgICAnbWMnOiAnNDEzMScsXG4gICAgICAgICAgICAndG4nOiAnUHVyY2hhc2UgaW4gTWVyY2hhbnQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH1dIDpcbiAgICAgICAgW3tcbiAgICAgICAgICAnc3VwcG9ydGVkTWV0aG9kcyc6IFsnaHR0cHM6Ly90ZXouZ29vZ2xlLmNvbS9wYXknXSxcbiAgICAgICAgICAnZGF0YSc6IHtcbiAgICAgICAgICAgICdwYSc6IHBhcmFtZXRlcnNbJ3BheWVlVnBhJ10sXG4gICAgICAgICAgICAncG4nOiBwYXJhbWV0ZXJzWydwYXllZU5hbWUnXSxcbiAgICAgICAgICAgICd0cic6IHBhcmFtZXRlcnNbJ3RyYW5zYWN0aW9uUmVmZXJlbmNlSWQnXSxcbiAgICAgICAgICAgICd1cmwnOiBwYXJhbWV0ZXJzWydyZWZlcmVuY2VVcmwnXSxcbiAgICAgICAgICAgICdtYyc6IHBhcmFtZXRlcnNbJ21jYyddLFxuICAgICAgICAgICAgJ3RuJzogdHJhbnNhY3Rpb25JbmZvWyd0cmFuc2FjdGlvbk5vdGUnXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XTtcblxuICAgIGlmIChwYXJhbWV0ZXJzWyd0cmFuc2FjdGlvbklkJ10pIHtcbiAgICAgIHN1cHBvcnRlZEluc3RydW1lbnRzWzBdWydkYXRhJ11bJ3RpZCddID0gcGFyYW1ldGVyc1sndHJhbnNhY3Rpb25JZCddO1xuICAgIH1cblxuICAgIGNvbnN0IGRldGFpbHMgPSB7XG4gICAgICAndG90YWwnOiB7XG4gICAgICAgICdsYWJlbCc6ICdUb3RhbCcsXG4gICAgICAgICdhbW91bnQnOiB7XG4gICAgICAgICAgJ2N1cnJlbmN5JzogdHJhbnNhY3Rpb25JbmZvWydjdXJyZW5jeUNvZGUnXSxcbiAgICAgICAgICAndmFsdWUnOiB0cmFuc2FjdGlvbkluZm9bJ3RvdGFsUHJpY2UnXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICAnZGlzcGxheUl0ZW1zJzogW3tcbiAgICAgICAgJ2xhYmVsJzogJ09yaWdpbmFsIEFtb3VudCcsXG4gICAgICAgICdhbW91bnQnOiB7XG4gICAgICAgICAgJ2N1cnJlbmN5JzogdHJhbnNhY3Rpb25JbmZvWydjdXJyZW5jeUNvZGUnXSxcbiAgICAgICAgICAndmFsdWUnOiB0cmFuc2FjdGlvbkluZm9bJ3RvdGFsUHJpY2UnXSxcbiAgICAgICAgfSxcbiAgICAgIH1dLFxuICAgIH07XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBQYXltZW50UmVxdWVzdChzdXBwb3J0ZWRJbnN0cnVtZW50cywgZGV0YWlscyk7XG5cbiAgICBvblJlc3VsdENhbGxiYWNrKFxuICAgICAgICB0aGlzLmNoZWNrQ2FuTWFrZVBheW1lbnRfKHJlcXVlc3QpXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd1VpXyhyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWRpcmVjdFRvR29vZ2xlUGxheV8oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHBheW1lbnREYXRhID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0RhdGFfKFxuICAgICAgICAgICAgICAgICAgcGF5bWVudERhdGEsIHBheW1lbnREYXRhUmVxdWVzdCwgdXBpUGF5bWVudE1ldGhvZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgZXJyb3JbJ3N0YXR1c0NvZGUnXSA9IENvbnN0YW50cy5SZXNwb25zZVN0YXR1cy5DQU5DRUxFRDtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBUZXogcGF5bWVudCByZXF1ZXN0IFVJLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyFQYXltZW50UmVxdWVzdH0gcmVxdWVzdCBUaGUgcGF5bWVudCByZXF1ZXN0IG9iamVjdC5cbiAgICogQHJldHVybiB7IVByb21pc2U8IVBheW1lbnREYXRhPn0gQSBwcm9taXNlIGNvbnRhaW5pbmcgcGF5bWVudCByZXNwb25zZS5cbiAgICovXG4gIHNob3dVaV8ocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LnNob3coKS50aGVuKHBheW1lbnRSZXNwb25zZSA9PiB7XG4gICAgICBwYXltZW50UmVzcG9uc2UuY29tcGxldGUoJ3N1Y2Nlc3MnKTtcbiAgICAgIHJldHVybiBwYXltZW50UmVzcG9uc2UuZGV0YWlscztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBjYW4gbWFrZSBhIHBheW1lbnQgd2l0aCBUZXogb24gdGhpcyBkZXZpY2UuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7IVBheW1lbnRSZXF1ZXN0fSByZXF1ZXN0IFRoZSBwYXltZW50IHJlcXVlc3Qgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTxib29sZWFuPn0gYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiB3aGV0aGVyIGNhblxuICAgKiAgICAgbWFrZSBwYXltZW50LlxuICAgKi9cbiAgY2hlY2tDYW5NYWtlUGF5bWVudF8ocmVxdWVzdCkge1xuICAgIC8vIENoZWNrcyBjYW5NYWtlUGF5bWVudCBjYWNoZSwgYW5kIHVzZSB0aGUgY2FjaGUgcmVzdWx0IGlmIGl0IGV4aXN0cy5cbiAgICBjb25zdCBjYWNoZVJlc3VsdCA9XG4gICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy5VUElfQ0FOX01BS0VfUEFZTUVOVF9DQUNIRV9LRVkpO1xuICAgIGlmIChjYWNoZVJlc3VsdCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZVJlc3VsdCA9PT0gJ3RydWUnKTtcbiAgICB9XG5cbiAgICAvLyBGZWF0dXJlIGRldGVjdCBjYW5NYWtlUGF5bWVudCgpLlxuICAgIGlmICghcmVxdWVzdC5jYW5NYWtlUGF5bWVudCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9XG5cbiAgICBsZXQgY2FuTWFrZVBheW1lbnRQcm9taXNlID0gcmVxdWVzdC5jYW5NYWtlUGF5bWVudCgpO1xuXG4gICAgcmV0dXJuIGNhbk1ha2VQYXltZW50UHJvbWlzZS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAvLyBTdG9yZSB0aGUgcmVzdWx0IGluIGNhY2hlIGlmIHRoZSByZXN1bHQgaXMgdHJ1ZSB0byBhdm9pZCBxdW90YSBlcnJvclxuICAgICAgLy8gY2F1c2VkIGJ5IHF1ZXJ5aW5nIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IGRhdGEuXG4gICAgICAvLyBEb2Vzbid0IHN0b3JlIGZhbHNlIGJlY2F1c2UgaWYgd2UgZG8gc28sIHVzZXIgd2lsbCBiZSByZWRpcmVjdGVkIHRvXG4gICAgICAvLyBHb29nbGUgUGxheSBhZ2FpbiBhZnRlciBpbnN0YWxsaW5nIEdvb2dsZSBQYXkgaWYgQ2hyb21lIGlzIG5vdCBjbG9zZWQuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgQ29uc3RhbnRzLlVQSV9DQU5fTUFLRV9QQVlNRU5UX0NBQ0hFX0tFWSwgcmVzdWx0LnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRpcmVjdCB1c2VyIHRvIEdvb2dsZSBQYXkgYXBwIGluIEdvb2dsZSBQbGF5IHN0b3JlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHshUHJvbWlzZTwhT2JqZWN0Pn0gUmVqZWN0ZWQgcHJvbWlzZSB3aXRoIGVycm9yIG1lc3NhZ2VcbiAgICovXG4gIHJlZGlyZWN0VG9Hb29nbGVQbGF5XygpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShcbiAgICAgICAgbnVsbCA/XG4gICAgICAgICAgICAnaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5nb29nbGUuYW5kcm9pZC5hcHBzLm5idS5wYWlzYS51c2VyLnRlYW1mb29kICcgOiAgLy8gTk9MSU5UXG4gICAgICAgICAgICAnaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5nb29nbGUuYW5kcm9pZC5hcHBzLm5idS5wYWlzYS51c2VyJyk7ICAvLyBOT0xJTlRcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIHsnZXJyb3JNZXNzYWdlJzogJ0Nhbm5vdCByZWRpcmVjdCB0byBUZXogcGFnZSBpbiBHb29nbGUgUGxheS4nfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBUZXogcGF5bWVudCBkYXRhIHRvIEdQYXkgcGF5bWVudCBkYXRhIGlmIHBheW1lbnQgc3VjY2VlZGVkLCBvclxuICAgKiByZWplY3QgaWYgcGF5bWVudCBmYWlsZWRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHshUGF5bWVudERhdGF9IHRlelBheW1lbnREYXRhIFRoZSBwYXltZW50IGRhdGEgb2JqZWN0IGZyb20gVGV6LlxuICAgKiBAcGFyYW0geyFQYXltZW50RGF0YVJlcXVlc3R9IHBheW1lbnREYXRhUmVxdWVzdCBUaGUgcGF5bWVudCBkYXRhIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gdXBpUGF5bWVudE1ldGhvZCBVUEkgcGF5bWVudG1ldGhvZCBpblxuICAgKiBhbGxvd2VkUGF5bWVudE1ldGhvZHMgYXJyYXlcbiAgICogQHJldHVybnMgeyFQcm9taXNlPFBheW1lbnREYXRhPn0gQSBwcm9taXNlIGNvbnRhaW5pbmcgcGF5bWVudCBkYXRhIG9yXG4gICAqICAgICBlcnJvciBtZXNzYWdlLlxuICAgKi9cbiAgcHJvY2Vzc0RhdGFfKHRlelBheW1lbnREYXRhLCBwYXltZW50RGF0YVJlcXVlc3QsIHVwaVBheW1lbnRNZXRob2QpIHtcbiAgICBjb25zdCB0ZXpSZXNwb25zZSA9IEpTT04ucGFyc2UodGV6UGF5bWVudERhdGFbJ3RlelJlc3BvbnNlJ10pO1xuICAgIGlmICh0ZXpSZXNwb25zZVsnU3RhdHVzJ10gPT09ICdGQUlMVVJFJykge1xuICAgICAgbGV0IGVycm9yO1xuICAgICAgc3dpdGNoICh0ZXpSZXNwb25zZVsncmVzcG9uc2VDb2RlJ10pIHtcbiAgICAgICAgY2FzZSAnWk0nOlxuICAgICAgICAgIC8vIHBheW1lbnQgZmFpbHVyZSBkdWUgdG8gaW52YWxpZCBNUElOXG4gICAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgICAnZXJyb3JDb2RlJzogUHVibGljRXJyb3JDb2RlLkJVWUVSX0FDQ09VTlRfRVJST1IsXG4gICAgICAgICAgICAnZXJyb3JNZXNzYWdlJzogJ1BheW1lbnQgZmFpbHVyZSBkdWUgdG8gaW52YWxpZCBNUElOLidcbiAgICAgICAgICB9O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdaOSc6XG4gICAgICAgICAgLy8gcGF5bWVudCBmYWlsdXJlIGR1ZSB0byBpbnN1ZmZpY2llbnQgZnVuZHNcbiAgICAgICAgICBlcnJvciA9IHtcbiAgICAgICAgICAgICdlcnJvckNvZGUnOiBQdWJsaWNFcnJvckNvZGUuQlVZRVJfQUNDT1VOVF9FUlJPUixcbiAgICAgICAgICAgICdlcnJvck1lc3NhZ2UnOiAnUGF5bWVudCBmYWlsdXJlIGR1ZSB0byBpbnN1ZmZpY2llbnQgZnVuZHMuJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzkxJzpcbiAgICAgICAgICAvLyBwYXltZW50IGZhaWx1cmUgZHVlIHRvIHRyYW5zYWN0aW9uIHRpbWVvdXQgb3IgY29ubmVjdGlvbiBpc3N1ZVxuICAgICAgICAgIGVycm9yID0ge1xuICAgICAgICAgICAgJ2Vycm9yQ29kZSc6IFB1YmxpY0Vycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcbiAgICAgICAgICAgICdlcnJvck1lc3NhZ2UnOlxuICAgICAgICAgICAgICAgICdQYXltZW50IGZhaWx1cmUgZHVlIHRvIHRyYW5zYWN0aW9uIHRpbWVvdXQgb3IgY29ubmVjdGlvbicgK1xuICAgICAgICAgICAgICAgICcgaXNzdWUuJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gcGF5bWVudCBmYWlsdXJlIGR1ZSB0byB1c2VyIGNhbmNlbCBvciBvdGhlciBpc3N1ZXNcbiAgICAgICAgICBlcnJvciA9IHsnZXJyb3JNZXNzYWdlJzogJ1BheW1lbnQgY2FuY2VsbGVkLid9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaWduZWRNZXNzYWdlID0ge1xuICAgICAgJ3BheW1lbnRNZXRob2RUeXBlJzogJ1VQSScsXG4gICAgICAncGF5ZWVWcGEnOiB1cGlQYXltZW50TWV0aG9kWydwYXJhbWV0ZXJzJ11bJ3BheWVlVnBhJ10sXG4gICAgICAnc3RhdHVzJzogdGV6UmVzcG9uc2VbJ1N0YXR1cyddLFxuICAgICAgJ3RyYW5zYWN0aW9uUmVmZXJlbmNlSWQnOlxuICAgICAgICAgIHVwaVBheW1lbnRNZXRob2RbJ3BhcmFtZXRlcnMnXVsndHJhbnNhY3Rpb25SZWZlcmVuY2VJZCddLFxuICAgICAgJ3RyYW5zYWN0aW9uSWQnOiB1cGlQYXltZW50TWV0aG9kWydwYXJhbWV0ZXJzJ11bJ3RyYW5zYWN0aW9uSWQnXSA/XG4gICAgICAgICAgdXBpUGF5bWVudE1ldGhvZFsncGFyYW1ldGVycyddWyd0cmFuc2FjdGlvbklkJ10gOlxuICAgICAgICAgIHRlelJlc3BvbnNlWyd0eG5JZCddLFxuICAgICAgJ3RyYW5zYWN0aW9uSW5mbyc6IHBheW1lbnREYXRhUmVxdWVzdFsndHJhbnNhY3Rpb25JbmZvJ10sXG4gICAgfTtcblxuICAgIGxldCBwYXltZW50RGF0YSA9IHtcbiAgICAgICdhcGlWZXJzaW9uJzogcGF5bWVudERhdGFSZXF1ZXN0WydhcGlWZXJzaW9uJ10sXG4gICAgICAnYXBpVmVyc2lvbk1pbm9yJzogcGF5bWVudERhdGFSZXF1ZXN0WydhcGlWZXJzaW9uTWlub3InXSxcbiAgICAgICdwYXltZW50TWV0aG9kRGF0YSc6IHtcbiAgICAgICAgJ3R5cGUnOiB1cGlQYXltZW50TWV0aG9kWyd0eXBlJ10sXG4gICAgICAgICd0b2tlbml6YXRpb25EYXRhJzoge1xuICAgICAgICAgICd0eXBlJzogJ0RJUkVDVCcsXG4gICAgICAgICAgJ3Rva2VuJzoge1xuICAgICAgICAgICAgJ3Byb3RvY29sVmVyc2lvbic6ICdFQ3YxJyxcbiAgICAgICAgICAgIC8vIFRPRE86IFZlcmlmeSB0aGF0IHJlc3BvbnNlIGNvbWVzIGZyb20gdGV6IGFuZFxuICAgICAgICAgICAgLy8gYWRkIHNpZ25hdHVyZSBhbmQgZW5jcnlwdCBzaWduZWQgbWVzc2FnZSBoZXJlXG4gICAgICAgICAgICAnc2lnbmF0dXJlJzogJycsXG4gICAgICAgICAgICAnc2lnbmVkTWVzc2FnZSc6IHNpZ25lZE1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGF5bWVudERhdGEpO1xuICB9XG59XG5cbmV4cG9ydCB7VXBpSGFuZGxlcn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHV1aWQgZnJvbSAnLi4vdGhpcmRfcGFydHkvcmFuZG9tX3V1aWQvUmFuZG9tLnV1aWQuanMnO1xuXG4vKipcbiAqIFJldHVybnMgYSBnb29nbGUgdHJhbnNhY3Rpb24gaWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVudmlyb25tZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUdvb2dsZVRyYW5zYWN0aW9uSWQoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIHV1aWQudXVpZEZhc3QoKSArICcuJyArIGVudmlyb25tZW50O1xufVxuXG5leHBvcnQge2NyZWF0ZUdvb2dsZVRyYW5zYWN0aW9uSWR9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Q29uc3RhbnRzfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIHZlcnNpb24gb2YgQ2hyb21lIHN1cHBvcnRzIFBheW1lbnRIYW5kbGVyLlxuICovXG5mdW5jdGlvbiBjaHJvbWVTdXBwb3J0c1BheW1lbnRIYW5kbGVyKCkge1xuICAvLyBDaGVjayBpZiBmZWF0dXJlIGlzIGVuYWJsZWQgZm9yIHVzZXJcbiAgaWYgKHR5cGVvZiBnb29nbGUgPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICFudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gUGF5bWVudCBoYW5kbGVyIGlzbid0IHN1cHBvcnRlZCBvbiBtb2JpbGVcbiAgY29uc3QgbW9iaWxlUGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChcbiAgICAgIC9BbmRyb2lkfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZS9pKTtcbiAgaWYgKG1vYmlsZVBsYXRmb3JtICE9IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjaHJvbWVWZXJzaW9uID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhbMC05XSspXFwuL2kpO1xuICByZXR1cm4gJ1BheW1lbnRSZXF1ZXN0JyBpbiB3aW5kb3cgJiYgY2hyb21lVmVyc2lvbiAhPSBudWxsICYmXG4gICAgICBOdW1iZXIoY2hyb21lVmVyc2lvblsxXSkgPj0gNjggJiZcbiAgICAgIHdpbmRvdy5uYXZpZ2F0b3IudmVuZG9yID09ICdHb29nbGUgSW5jLic7XG59XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIHZlcnNpb24gb2YgQ2hyb21lIHN1cHBvcnRzIFBheW1lbnRSZXF1ZXN0LlxuICovXG5mdW5jdGlvbiBjaHJvbWVTdXBwb3J0c1BheW1lbnRSZXF1ZXN0KCkge1xuICAvLyBPcGVyYSB1c2VzIGNocm9tZSBhcyByZW5kZXJpbmcgZW5naW5lIGFuZCBzZW5kcyBhbG1vc3QgdGhlIGV4YWN0IHNhbWVcbiAgLy8gdXNlciBhZ2VudCBhcyBjaHJvbWUgdGhlcmVieSBmb29saW5nIHVzIG9uIGFuZHJvaWQuXG4gIGNvbnN0IGlzT3BlcmEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdPUFIvJykgIT0gLTE7XG4gIGlmIChpc09wZXJhKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjaHJvbWVTdXBwb3J0c1BheW1lbnRIYW5kbGVyKCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGFuZHJvaWRQbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkL2kpO1xuICBjb25zdCBjaHJvbWVWZXJzaW9uID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhbMC05XSspXFwuL2kpO1xuICByZXR1cm4gYW5kcm9pZFBsYXRmb3JtICE9IG51bGwgJiYgJ1BheW1lbnRSZXF1ZXN0JyBpbiB3aW5kb3cgJiZcbiAgICAgIC8vIE1ha2Ugc3VyZSBza2lwcGluZyBQYXltZW50UmVxdWVzdCBVSSB3aGVuIG9ubHkgb25lIFBheW1lbnRNZXRob2QgaXNcbiAgICAgIC8vIHN1cHBvcnRlZCAoc3RhcnRzIG9uIEdvb2dsZSBDaHJvbWUgNTkpLlxuICAgICAgd2luZG93Lm5hdmlnYXRvci52ZW5kb3IgPT0gJ0dvb2dsZSBJbmMuJyAmJiBjaHJvbWVWZXJzaW9uICE9IG51bGwgJiZcbiAgICAgIE51bWJlcihjaHJvbWVWZXJzaW9uWzFdKSA+PSA1OTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFJc1JlYWR5VG9QYXlSZXF1ZXN0fSBpc1JlYWR5VG9QYXlSZXF1ZXN0XG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgbWVyY2hhbnQgb25seSBzdXBwb3J0cyB0b2tlbml6ZWQgY2FyZHMuXG4gKi9cbmZ1bmN0aW9uIGRvZXNNZXJjaGFudFN1cHBvcnRPbmx5VG9rZW5pemVkQ2FyZHMoaXNSZWFkeVRvUGF5UmVxdWVzdCkge1xuICBpZiAoaXNSZWFkeVRvUGF5UmVxdWVzdC5hcGlWZXJzaW9uID49IDIpIHtcbiAgICBjb25zdCBhbGxvd2VkQXV0aE1ldGhvZHMgPVxuICAgICAgICBleHRyYWN0QWxsb3dlZEF1dGhNZXRob2RzRm9yQ2FyZHNfKGlzUmVhZHlUb1BheVJlcXVlc3QpO1xuICAgIGlmIChhbGxvd2VkQXV0aE1ldGhvZHMgJiYgYWxsb3dlZEF1dGhNZXRob2RzLmxlbmd0aCA9PSAxICYmXG4gICAgICAgIGFsbG93ZWRBdXRoTWV0aG9kc1swXSA9PSBDb25zdGFudHMuQXV0aE1ldGhvZC5DUllQVE9HUkFNXzNEUykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc1JlYWR5VG9QYXlSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kcy5sZW5ndGggPT0gMSAmJlxuICAgICAgaXNSZWFkeVRvUGF5UmVxdWVzdC5hbGxvd2VkUGF5bWVudE1ldGhvZHNbMF0gPT1cbiAgICAgIENvbnN0YW50cy5QYXltZW50TWV0aG9kLlRPS0VOSVpFRF9DQVJEO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUlzUmVhZHlUb1BheVJlcXVlc3R9IGlzUmVhZHlUb1BheVJlcXVlc3RcbiAqIEBwYXJhbSB7Q29uc3RhbnRzLkF1dGhNZXRob2R9IGFwaVYyQXV0aE1ldGhvZFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIG1lcmNoYW50IHN1cHBvcnRzIHBhbiBjYXJkcy5cbiAqL1xuZnVuY3Rpb24gYXBpVjJEb2VzTWVyY2hhbnRTdXBwb3J0U3BlY2lmaWVkQ2FyZFR5cGUoXG4gICAgaXNSZWFkeVRvUGF5UmVxdWVzdCwgYXBpVjJBdXRoTWV0aG9kKSB7XG4gIGlmIChpc1JlYWR5VG9QYXlSZXF1ZXN0LmFwaVZlcnNpb24gPj0gMikge1xuICAgIGNvbnN0IGFsbG93ZWRBdXRoTWV0aG9kcyA9XG4gICAgICAgIGV4dHJhY3RBbGxvd2VkQXV0aE1ldGhvZHNGb3JDYXJkc18oaXNSZWFkeVRvUGF5UmVxdWVzdCk7XG4gICAgaWYgKGFsbG93ZWRBdXRoTWV0aG9kcyAmJiBhbGxvd2VkQXV0aE1ldGhvZHMuaW5jbHVkZXMoYXBpVjJBdXRoTWV0aG9kKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgaWYgaXMgc2VjdXJlIGNvbnRleHQuIFJldHVybnMgbnVsbCBpZiBjb250ZXh0IGlzIHNlY3VyZSwgb3RoZXJ3aXNlXG4gKiByZXR1cm4gZXJyb3IgbWVzc2FnZS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2VjdXJlX0NvbnRleHRzXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gbnVsbCBpZiBjdXJyZW50IGNvbnRleHQgaXMgc2VjdXJlLCBvdGhlcndpc2UgcmV0dXJuIGVycm9yXG4gKiBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVNlY3VyZUNvbnRleHQoKSB7XG4gIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuZW5kc1dpdGgoQ29uc3RhbnRzLlRSVVNURURfRE9NQUlOKSkge1xuICAgIC8vIFRoaXMgaXMgZm9yIGxvY2FsIGRldmVsb3BtZW50LlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh3aW5kb3cuaXNTZWN1cmVDb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBCcm93c2VyIG5vdCBzdXBwb3J0IGlzU2VjdXJlQ29udGV4dCwgZmlndXJlIG91dCBhIHdheSB0byB2YWxpZGF0ZSB0aGlzXG4gICAgLy8gZm9yIHRoZSB1bnN1cHBvcnRlZCBicm93c2VyLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB3aW5kb3cuaXNTZWN1cmVDb250ZXh0ID9cbiAgICAgIG51bGwgOlxuICAgICAgJ0dvb2dsZSBQYXkgQVBJcyBzaG91bGQgYmUgY2FsbGVkIGluIHNlY3VyZSBjb250ZXh0ISc7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgUGF5bWVudE9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHshUGF5bWVudE9wdGlvbnN9IHBheW1lbnRPcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUGF5bWVudE9wdGlvbnMocGF5bWVudE9wdGlvbnMpIHtcbiAgaWYgKHBheW1lbnRPcHRpb25zLmVudmlyb25tZW50ICYmXG4gICAgICAhT2JqZWN0LnZhbHVlcyhDb25zdGFudHMuRW52aXJvbm1lbnQpXG4gICAgICAgICAgIC5pbmNsdWRlcyhwYXltZW50T3B0aW9ucy5lbnZpcm9ubWVudCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdQYXJhbWV0ZXIgZW52aXJvbm1lbnQgaW4gUGF5bWVudE9wdGlvbnMgY2FuIG9wdGlvbmFsbHkgYmUgc2V0IHRvICcgK1xuICAgICAgICAnUFJPRFVDVElPTiwgb3RoZXJ3aXNlIGl0IGRlZmF1bHRzIHRvIFRFU1QuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBJc1JlYWR5VG9QYXlSZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7IUlzUmVhZHlUb1BheVJlcXVlc3R9IGlzUmVhZHlUb1BheVJlcXVlc3RcbiAqIEByZXR1cm4gez9zdHJpbmd9IGVycm9yTWVzc2FnZSBpZiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUlzUmVhZHlUb1BheVJlcXVlc3QoaXNSZWFkeVRvUGF5UmVxdWVzdCkge1xuICBpZiAoIWlzUmVhZHlUb1BheVJlcXVlc3QpIHtcbiAgICByZXR1cm4gJ2lzUmVhZHlUb1BheVJlcXVlc3QgbXVzdCBiZSBzZXQhJztcbiAgfSBlbHNlIGlmIChpc1JlYWR5VG9QYXlSZXF1ZXN0LmFwaVZlcnNpb24gPj0gMikge1xuICAgIGlmICghKCdhcGlWZXJzaW9uTWlub3InIGluIGlzUmVhZHlUb1BheVJlcXVlc3QpKSB7XG4gICAgICByZXR1cm4gJ2FwaVZlcnNpb25NaW5vciBtdXN0IGJlIHNldCEnO1xuICAgIH1cbiAgICBpZiAoIWlzUmVhZHlUb1BheVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzIHx8XG4gICAgICAgICFBcnJheS5pc0FycmF5KGlzUmVhZHlUb1BheVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzKSB8fFxuICAgICAgICBpc1JlYWR5VG9QYXlSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuICdmb3IgdjIgYWxsb3dlZFBheW1lbnRNZXRob2RzIG11c3QgYmUgc2V0IHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBsaXN0IG9mIGFjY2VwdGVkIHBheW1lbnQgbWV0aG9kcyc7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXNSZWFkeVRvUGF5UmVxdWVzdC5hbGxvd2VkUGF5bWVudE1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBhbGxvd2VkUGF5bWVudE1ldGhvZCA9IGlzUmVhZHlUb1BheVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzW2ldO1xuICAgICAgaWYgKGFsbG93ZWRQYXltZW50TWV0aG9kWyd0eXBlJ10gPT0gQ29uc3RhbnRzLlBheW1lbnRNZXRob2QuQ0FSRCkge1xuICAgICAgICBpZiAoIWFsbG93ZWRQYXltZW50TWV0aG9kWydwYXJhbWV0ZXJzJ10pIHtcbiAgICAgICAgICByZXR1cm4gJ0ZpZWxkIHBhcmFtZXRlcnMgbXVzdCBiZSBzZXR1cCBpbiBlYWNoIGFsbG93ZWRQYXltZW50TWV0aG9kJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWxsb3dlZENhcmROZXR3b3JrcyA9XG4gICAgICAgICAgICBhbGxvd2VkUGF5bWVudE1ldGhvZFsncGFyYW1ldGVycyddWydhbGxvd2VkQ2FyZE5ldHdvcmtzJ107XG4gICAgICAgIGlmICghYWxsb3dlZENhcmROZXR3b3JrcyB8fCAhQXJyYXkuaXNBcnJheShhbGxvd2VkQ2FyZE5ldHdvcmtzKSB8fFxuICAgICAgICAgICAgYWxsb3dlZENhcmROZXR3b3Jrcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIHJldHVybiAnYWxsb3dlZENhcmROZXR3b3JrcyBtdXN0IGJlIHNldHVwIGluIHBhcmFtZXRlcnMgZm9yIHR5cGUgQ0FSRCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFsbG93ZWRBdXRoTWV0aG9kcyA9XG4gICAgICAgICAgICBhbGxvd2VkUGF5bWVudE1ldGhvZFsncGFyYW1ldGVycyddWydhbGxvd2VkQXV0aE1ldGhvZHMnXTtcbiAgICAgICAgaWYgKCFhbGxvd2VkQXV0aE1ldGhvZHMgfHwgIUFycmF5LmlzQXJyYXkoYWxsb3dlZEF1dGhNZXRob2RzKSB8fFxuICAgICAgICAgICAgYWxsb3dlZEF1dGhNZXRob2RzLmxlbmd0aCA9PSAwIHx8XG4gICAgICAgICAgICAhYWxsb3dlZEF1dGhNZXRob2RzLmV2ZXJ5KGlzQXV0aE1ldGhvZFZhbGlkKSkge1xuICAgICAgICAgIHJldHVybiAnYWxsb3dlZEF1dGhNZXRob2RzIG11c3QgYmUgc2V0dXAgaW4gcGFyYW1ldGVycyBmb3IgdHlwZSBcXCdDQVJEXFwnICcgK1xuICAgICAgICAgICAgICAnIGFuZCBtdXN0IGNvbnRhaW4gXFwnQ1JZUFRPR1JBTV8zRFNcXCcgYW5kL29yIFxcJ1BBTl9PTkxZXFwnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChcbiAgICAgICFpc1JlYWR5VG9QYXlSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kcyB8fFxuICAgICAgIUFycmF5LmlzQXJyYXkoaXNSZWFkeVRvUGF5UmVxdWVzdC5hbGxvd2VkUGF5bWVudE1ldGhvZHMpIHx8XG4gICAgICBpc1JlYWR5VG9QYXlSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kcy5sZW5ndGggPT0gMCB8fFxuICAgICAgIWlzUmVhZHlUb1BheVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzLmV2ZXJ5KGlzUGF5bWVudE1ldGhvZFZhbGlkKSkge1xuICAgIHJldHVybiAnYWxsb3dlZFBheW1lbnRNZXRob2RzIG11c3QgYmUgc2V0IHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgXFwnQ0FSRFxcJyAnICtcbiAgICAgICAgJ2FuZC9vciBcXCdUT0tFTklaRURfQ0FSRFxcJyEnO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIHRoZSBwYXltZW50IG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF5bWVudE1ldGhvZFxuICogQHJldHVybiB7Ym9vbGVhbn0gaWYgdGhlIGN1cnJlbnQgcGF5bWVudCBtZXRob2QgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGlzUGF5bWVudE1ldGhvZFZhbGlkKHBheW1lbnRNZXRob2QpIHtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoQ29uc3RhbnRzLlBheW1lbnRNZXRob2QpLmluY2x1ZGVzKHBheW1lbnRNZXRob2QpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIHRoZSBhdXRoIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXV0aE1ldGhvZFxuICogQHJldHVybiB7Ym9vbGVhbn0gaWYgdGhlIGN1cnJlbnQgYXV0aCBtZXRob2QgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGlzQXV0aE1ldGhvZFZhbGlkKGF1dGhNZXRob2QpIHtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoQ29uc3RhbnRzLkF1dGhNZXRob2QpLmluY2x1ZGVzKGF1dGhNZXRob2QpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIFBheW1lbnREYXRhUmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0geyFQYXltZW50RGF0YVJlcXVlc3R9IHBheW1lbnREYXRhUmVxdWVzdFxuICogQHJldHVybiB7P3N0cmluZ30gZXJyb3JNZXNzYWdlIGlmIHRoZSByZXF1ZXN0IGlzIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUGF5bWVudERhdGFSZXF1ZXN0KHBheW1lbnREYXRhUmVxdWVzdCkge1xuICBpZiAoIXBheW1lbnREYXRhUmVxdWVzdCkge1xuICAgIHJldHVybiAncGF5bWVudERhdGFSZXF1ZXN0IG11c3QgYmUgc2V0ISc7XG4gIH1cbiAgaWYgKHBheW1lbnREYXRhUmVxdWVzdC5zd2cpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVQYXltZW50RGF0YVJlcXVlc3RGb3JTd2cocGF5bWVudERhdGFSZXF1ZXN0LnN3Zyk7XG4gIH0gZWxzZSBpZiAoIXBheW1lbnREYXRhUmVxdWVzdC50cmFuc2FjdGlvbkluZm8pIHtcbiAgICByZXR1cm4gJ3RyYW5zYWN0aW9uSW5mbyBtdXN0IGJlIHNldCEnO1xuICB9IGVsc2UgaWYgKCFwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvLmN1cnJlbmN5Q29kZSkge1xuICAgIHJldHVybiAnY3VycmVuY3lDb2RlIGluIHRyYW5zYWN0aW9uSW5mbyBtdXN0IGJlIHNldCEnO1xuICB9IGVsc2UgaWYgKFxuICAgICAgIXBheW1lbnREYXRhUmVxdWVzdC50cmFuc2FjdGlvbkluZm8udG90YWxQcmljZVN0YXR1cyB8fFxuICAgICAgIU9iamVjdC52YWx1ZXMoQ29uc3RhbnRzLlRvdGFsUHJpY2VTdGF0dXMpXG4gICAgICAgICAgIC5pbmNsdWRlcyhwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvLnRvdGFsUHJpY2VTdGF0dXMpKSB7XG4gICAgcmV0dXJuICd0b3RhbFByaWNlU3RhdHVzIGluIHRyYW5zYWN0aW9uSW5mbyBtdXN0IGJlIHNldCB0byBvbmUgb2YnICtcbiAgICAgICAgJyBOT1RfQ1VSUkVOVExZX0tOT1dOLCBFU1RJTUFURUQgb3IgRklOQUwhJztcbiAgfSBlbHNlIGlmIChcbiAgICAgIHBheW1lbnREYXRhUmVxdWVzdC50cmFuc2FjdGlvbkluZm8udG90YWxQcmljZVN0YXR1cyAhPT1cbiAgICAgICAgICAnTk9UX0NVUlJFTlRMWV9LTk9XTicgJiZcbiAgICAgICFwYXltZW50RGF0YVJlcXVlc3QudHJhbnNhY3Rpb25JbmZvLnRvdGFsUHJpY2UpIHtcbiAgICByZXR1cm4gJ3RvdGFsUHJpY2UgaW4gdHJhbnNhY3Rpb25JbmZvIG11c3QgYmUgc2V0IHdoZW4nICtcbiAgICAgICAgJyB0b3RhbFByaWNlU3RhdHVzIGlzIEVTVElNQVRFRCBvciBGSU5BTCEnO1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgcGF5bWVudCBkYXRhIHJlcXVlc3QgZm9yIFVQSSBwYXltZW50IG1ldGhvZFxuICBjb25zdCBhbGxvd2VkUGF5bWVudE1ldGhvZCA9IGdldFVwaVBheW1lbnRNZXRob2QocGF5bWVudERhdGFSZXF1ZXN0KTtcbiAgaWYgKGFsbG93ZWRQYXltZW50TWV0aG9kKSB7XG4gICAgaWYgKCFhbGxvd2VkUGF5bWVudE1ldGhvZFsncGFyYW1ldGVycyddKSB7XG4gICAgICByZXR1cm4gJ3BhcmFtZXRlcnMgbXVzdCBiZSBzZXQgaW4gYWxsb3dlZFBheW1lbnRNZXRob2QhJztcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1ldGVycyA9IGFsbG93ZWRQYXltZW50TWV0aG9kWydwYXJhbWV0ZXJzJ107XG4gICAgaWYgKCFwYXJhbWV0ZXJzWydwYXllZVZwYSddKSB7XG4gICAgICByZXR1cm4gJ3BheWVlVnBhIGluIGFsbG93ZWRQYXltZW50TWV0aG9kIHBhcmFtZXRlcnMgbXVzdCBiZSBzZXQhJztcbiAgICB9IGVsc2UgaWYgKCFwYXJhbWV0ZXJzWydwYXllZU5hbWUnXSkge1xuICAgICAgcmV0dXJuICdwYXllZU5hbWUgaW4gYWxsb3dlZFBheW1lbnRNZXRob2QgcGFyYW1ldGVycyBtdXN0IGJlIHNldCEnO1xuICAgIH0gZWxzZSBpZiAoIXBhcmFtZXRlcnNbJ3JlZmVyZW5jZVVybCddKSB7XG4gICAgICByZXR1cm4gJ3JlZmVyZW5jZVVybCBpbiBhbGxvd2VkUGF5bWVudE1ldGhvZCBwYXJhbWV0ZXJzIG11c3QgYmUgc2V0ISc7XG4gICAgfSBlbHNlIGlmICghcGFyYW1ldGVyc1snbWNjJ10pIHtcbiAgICAgIHJldHVybiAnbWNjIGluIGFsbG93ZWRQYXltZW50TWV0aG9kIHBhcmFtZXRlcnMgbXVzdCBiZSBzZXQhJztcbiAgICB9IGVsc2UgaWYgKCFwYXJhbWV0ZXJzWyd0cmFuc2FjdGlvblJlZmVyZW5jZUlkJ10pIHtcbiAgICAgIHJldHVybiAndHJhbnNhY3Rpb25SZWZlcmVuY2VJZCBpbiBhbGxvd2VkUGF5bWVudE1ldGhvZCBwYXJhbWV0ZXJzJyArXG4gICAgICAgICAgJyBtdXN0IGJlIHNldCEnO1xuICAgIH1cblxuICAgIGlmIChwYXltZW50RGF0YVJlcXVlc3RbJ3RyYW5zYWN0aW9uSW5mbyddWydjdXJyZW5jeUNvZGUnXSAhPT0gJ0lOUicpIHtcbiAgICAgIHJldHVybiAnY3VycmVuY3lDb2RlIGluIHRyYW5zYWN0aW9uSW5mbyBtdXN0IGJlIHNldCB0byBJTlIhJztcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwYXltZW50RGF0YVJlcXVlc3RbJ3RyYW5zYWN0aW9uSW5mbyddWyd0b3RhbFByaWNlU3RhdHVzJ10gIT09ICdGSU5BTCcpIHtcbiAgICAgIHJldHVybiAndG90YWxQcmljZVN0YXR1cyBpbiB0cmFuc2FjdGlvbkluZm8gbXVzdCBiZSBzZXQgdG8gRklOQUwhJztcbiAgICB9IGVsc2UgaWYgKCFwYXltZW50RGF0YVJlcXVlc3RbJ3RyYW5zYWN0aW9uSW5mbyddWyd0cmFuc2FjdGlvbk5vdGUnXSkge1xuICAgICAgcmV0dXJuICd0cmFuc2FjdGlvbk5vdGUgaW4gdHJhbnNhY3Rpb25JbmZvIG11c3QgYmUgc2V0ISc7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdXBpIHBheW1lbnQgbWV0aG9kIG9iamVjdCBpZiBpdCBleGlzdHMgaW4gYWxsb3dlZCBwYXltZW50IG1ldGhvZHNcbiAqIG9yIG51bGwgaWYgaXQgZG9lc24ndFxuICpcbiAqIEBwYXJhbSB7IUlzUmVhZHlUb1BheVJlcXVlc3R8IVBheW1lbnREYXRhUmVxdWVzdH0gcmVxdWVzdFxuICogQHJldHVybiB7P09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0VXBpUGF5bWVudE1ldGhvZChyZXF1ZXN0KSB7XG4gIGlmICghY2hyb21lU3VwcG9ydHNQYXltZW50UmVxdWVzdCgpIHx8IHJlcXVlc3QuYXBpVmVyc2lvbiA8IDIgfHxcbiAgICAgICFyZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBnZXRBbGxvd2VkUGF5bWVudE1ldGhvZEZvclR5cGVfKHJlcXVlc3QsIENvbnN0YW50cy5QYXltZW50TWV0aG9kLlVQSSk7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgcGFyYW1ldGVycyBmb3Igc3dnLlxuICpcbiAqIEBwYXJhbSB7P1N3Z1BhcmFtZXRlcnN9IHN3Z1BhcmFtZXRlcnNcbiAqIEByZXR1cm4gez9zdHJpbmd9IGVycm9yTWVzc2FnZSBpZiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVBheW1lbnREYXRhUmVxdWVzdEZvclN3Zyhzd2dQYXJhbWV0ZXJzKSB7XG4gIGlmICghc3dnUGFyYW1ldGVycykge1xuICAgIHJldHVybiAnU3dnIHBhcmFtZXRlcnMgbXVzdCBiZSBwcm92aWRlZCc7XG4gIH1cbiAgaWYgKCFzd2dQYXJhbWV0ZXJzLnNrdUlkIHx8ICFzd2dQYXJhbWV0ZXJzLnB1YmxpY2F0aW9uSWQpIHtcbiAgICByZXR1cm4gJ0JvdGggc2t1SWQgYW5kIHB1YmxpY2F0aW9uSWQgbXVzdCBiZSBwcm92aWRlZCc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWxsb3dlZEF1dGhNZXRob2RzIGZvciBhIGNhcmQgZnJvbSB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0geyFJc1JlYWR5VG9QYXlSZXF1ZXN0fSBpc1JlYWR5VG9QYXlSZXF1ZXN0XG4gKiBAcmV0dXJuIHs/QXJyYXk8c3RyaW5nPn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RBbGxvd2VkQXV0aE1ldGhvZHNGb3JDYXJkc18oaXNSZWFkeVRvUGF5UmVxdWVzdCkge1xuICBpZiAoaXNSZWFkeVRvUGF5UmVxdWVzdC5hbGxvd2VkUGF5bWVudE1ldGhvZHMpIHtcbiAgICBjb25zdCBhbGxvd2VkUGF5bWVudE1ldGhvZCA9IGdldEFsbG93ZWRQYXltZW50TWV0aG9kRm9yVHlwZV8oXG4gICAgICAgIGlzUmVhZHlUb1BheVJlcXVlc3QsIENvbnN0YW50cy5QYXltZW50TWV0aG9kLkNBUkQpO1xuICAgIGlmIChhbGxvd2VkUGF5bWVudE1ldGhvZCAmJiBhbGxvd2VkUGF5bWVudE1ldGhvZC5wYXJhbWV0ZXJzKSB7XG4gICAgICByZXR1cm4gYWxsb3dlZFBheW1lbnRNZXRob2QucGFyYW1ldGVyc1snYWxsb3dlZEF1dGhNZXRob2RzJ107XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUlzUmVhZHlUb1BheVJlcXVlc3R9IGlzUmVhZHlUb1BheVJlcXVlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXltZW50TWV0aG9kVHlwZVxuICogQHJldHVybiB7P1BheW1lbnRNZXRob2R9IFJldHVybiBmaXJzdCBwYXltZW50IG1ldGhvZCBmb3IgdGhlIGdpdmVuIHR5cGUsXG4gKiAgICAgcmV0dXJuIG51bGwgaWYgbm90IGZvdW5kLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0QWxsb3dlZFBheW1lbnRNZXRob2RGb3JUeXBlXyhcbiAgICBpc1JlYWR5VG9QYXlSZXF1ZXN0LCBwYXltZW50TWV0aG9kVHlwZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGlzUmVhZHlUb1BheVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYWxsb3dlZFBheW1lbnRNZXRob2QgPSBpc1JlYWR5VG9QYXlSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kc1tpXTtcbiAgICBpZiAoYWxsb3dlZFBheW1lbnRNZXRob2QudHlwZSA9PSBwYXltZW50TWV0aG9kVHlwZSkge1xuICAgICAgcmV0dXJuIGFsbG93ZWRQYXltZW50TWV0aG9kO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHtcbiAgYXBpVjJEb2VzTWVyY2hhbnRTdXBwb3J0U3BlY2lmaWVkQ2FyZFR5cGUsXG4gIGNocm9tZVN1cHBvcnRzUGF5bWVudEhhbmRsZXIsXG4gIGNocm9tZVN1cHBvcnRzUGF5bWVudFJlcXVlc3QsXG4gIGRvZXNNZXJjaGFudFN1cHBvcnRPbmx5VG9rZW5pemVkQ2FyZHMsXG4gIGdldFVwaVBheW1lbnRNZXRob2QsXG4gIGlzUGF5bWVudE1ldGhvZFZhbGlkLFxuICB2YWxpZGF0ZUlzUmVhZHlUb1BheVJlcXVlc3QsXG4gIHZhbGlkYXRlUGF5bWVudE9wdGlvbnMsXG4gIHZhbGlkYXRlUGF5bWVudERhdGFSZXF1ZXN0LFxuICB2YWxpZGF0ZVNlY3VyZUNvbnRleHRcbn07XG4iLCIvKiogQGxpY2Vuc2Vcbk1hdGgudXVpZC5qcyAodjEuNClcbmh0dHA6Ly93d3cuYnJvb2ZhLmNvbVxubWFpbHRvOnJvYmVydEBicm9vZmEuY29tXG5Db3B5cmlnaHQgKGMpIDIwMTAgUm9iZXJ0IEtpZWZmZXJcbkR1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzLlxuKi9cblxuLypcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIHV1aWQuXG4gKlxuICogVVNBR0U6IE1hdGgudXVpZChsZW5ndGgsIHJhZGl4KVxuICogICBsZW5ndGggLSB0aGUgZGVzaXJlZCBudW1iZXIgb2YgY2hhcmFjdGVyc1xuICogICByYWRpeCAgLSB0aGUgbnVtYmVyIG9mIGFsbG93YWJsZSB2YWx1ZXMgZm9yIGVhY2ggY2hhcmFjdGVyLlxuICpcbiAqIEVYQU1QTEVTOlxuICogICAvLyBObyBhcmd1bWVudHMgIC0gcmV0dXJucyBSRkM0MTIyLCB2ZXJzaW9uIDQgSURcbiAqICAgPj4+IE1hdGgudXVpZCgpXG4gKiAgIFwiOTIzMjlEMzktNkY1Qy00NTIwLUFCRkMtQUFCNjQ1NDRFMTcyXCJcbiAqXG4gKiAgIC8vIE9uZSBhcmd1bWVudCAtIHJldHVybnMgSUQgb2YgdGhlIHNwZWNpZmllZCBsZW5ndGhcbiAqICAgPj4+IE1hdGgudXVpZCgxNSkgICAgIC8vIDE1IGNoYXJhY3RlciBJRCAoZGVmYXVsdCBiYXNlPTYyKVxuICogICBcIlZjeWR4Z2x0eHJWWlNUVlwiXG4gKlxuICogICAvLyBUd28gYXJndW1lbnRzIC0gcmV0dXJucyBJRCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aCwgYW5kIHJhZGl4LiAoUmFkaXggbXVzdCBiZSA8PSA2MilcbiAqICAgPj4+IE1hdGgudXVpZCg4LCAyKSAgLy8gOCBjaGFyYWN0ZXIgSUQgKGJhc2U9MilcbiAqICAgXCIwMTAwMTAxMFwiXG4gKiAgID4+PiBNYXRoLnV1aWQoOCwgMTApIC8vIDggY2hhcmFjdGVyIElEIChiYXNlPTEwKVxuICogICBcIjQ3NDczMDQ2XCJcbiAqICAgPj4+IE1hdGgudXVpZCg4LCAxNikgLy8gOCBjaGFyYWN0ZXIgSUQgKGJhc2U9MTYpXG4gKiAgIFwiMDk4RjREMzVcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmRvbV91dWlkIHt9O1xuICAvLyBQcml2YXRlIGFycmF5IG9mIGNoYXJzIHRvIHVzZVxuICB2YXIgQ0hBUlMgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLnNwbGl0KCcnKTtcblxuICBSYW5kb21fdXVpZC51dWlkID0gZnVuY3Rpb24gKGxlbiwgcmFkaXgpIHtcbiAgICB2YXIgY2hhcnMgPSBDSEFSUywgdXVpZCA9IFtdLCBpO1xuICAgIHJhZGl4ID0gcmFkaXggfHwgY2hhcnMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbikge1xuICAgICAgLy8gQ29tcGFjdCBmb3JtXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHV1aWRbaV0gPSBjaGFyc1swIHwgTWF0aC5yYW5kb20oKSpyYWRpeF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJmYzQxMjIsIHZlcnNpb24gNCBmb3JtXG4gICAgICB2YXIgcjtcblxuICAgICAgLy8gcmZjNDEyMiByZXF1aXJlcyB0aGVzZSBjaGFyYWN0ZXJzXG4gICAgICB1dWlkWzhdID0gdXVpZFsxM10gPSB1dWlkWzE4XSA9IHV1aWRbMjNdID0gJy0nO1xuICAgICAgdXVpZFsxNF0gPSAnNCc7XG5cbiAgICAgIC8vIEZpbGwgaW4gcmFuZG9tIGRhdGEuICBBdCBpPT0xOSBzZXQgdGhlIGhpZ2ggYml0cyBvZiBjbG9jayBzZXF1ZW5jZSBhc1xuICAgICAgLy8gcGVyIHJmYzQxMjIsIHNlYy4gNC4xLjVcbiAgICAgIGZvciAoaSA9IDA7IGkgPCAzNjsgaSsrKSB7XG4gICAgICAgIGlmICghdXVpZFtpXSkge1xuICAgICAgICAgIHIgPSAwIHwgTWF0aC5yYW5kb20oKSoxNjtcbiAgICAgICAgICB1dWlkW2ldID0gY2hhcnNbKGkgPT0gMTkpID8gKHIgJiAweDMpIHwgMHg4IDogcl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXVpZC5qb2luKCcnKTtcbiAgfTtcblxuICAvLyBBIG1vcmUgcGVyZm9ybWFudCwgYnV0IHNsaWdodGx5IGJ1bGtpZXIsIFJGQzQxMjJ2NCBzb2x1dGlvbi4gIFdlIGJvb3N0IHBlcmZvcm1hbmNlXG4gIC8vIGJ5IG1pbmltaXppbmcgY2FsbHMgdG8gcmFuZG9tKClcbiAgUmFuZG9tX3V1aWQudXVpZEZhc3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hhcnMgPSBDSEFSUywgdXVpZCA9IG5ldyBBcnJheSgzNiksIHJuZD0wLCByO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzY7IGkrKykge1xuICAgICAgaWYgKGk9PTggfHwgaT09MTMgfHwgIGk9PTE4IHx8IGk9PTIzKSB7XG4gICAgICAgIHV1aWRbaV0gPSAnLSc7XG4gICAgICB9IGVsc2UgaWYgKGk9PTE0KSB7XG4gICAgICAgIHV1aWRbaV0gPSAnNCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocm5kIDw9IDB4MDIpIHJuZCA9IDB4MjAwMDAwMCArIChNYXRoLnJhbmRvbSgpKjB4MTAwMDAwMCl8MDtcbiAgICAgICAgciA9IHJuZCAmIDB4ZjtcbiAgICAgICAgcm5kID0gcm5kID4+IDQ7XG4gICAgICAgIHV1aWRbaV0gPSBjaGFyc1soaSA9PSAxOSkgPyAociAmIDB4MykgfCAweDggOiByXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHV1aWQuam9pbignJyk7XG4gIH07XG5cbiAgLy8gQSBtb3JlIGNvbXBhY3QsIGJ1dCBsZXNzIHBlcmZvcm1hbnQsIFJGQzQxMjJ2NCBzb2x1dGlvbjpcbiAgUmFuZG9tX3V1aWQudXVpZENvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTZ8MCwgdiA9IGMgPT0gJ3gnID8gciA6IChyJjB4M3wweDgpO1xuICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICB9O1xuIl19"}